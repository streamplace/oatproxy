"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name2 in all)
      __defProp(target, name2, { get: all[name2], enumerable: true });
  };
  var __copyProps = (to, from3, except, desc) => {
    if (from3 && typeof from3 === "object" || typeof from3 === "function") {
      for (let key of __getOwnPropNames(from3))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from3[key], enumerable: !(desc = __getOwnPropDesc(from3, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // node_modules/.pnpm/react@19.1.0/node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/.pnpm/react@19.1.0/node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      (function() {
        function defineDeprecationWarning(methodName, info) {
          Object.defineProperty(Component.prototype, methodName, {
            get: function() {
              console.warn(
                "%s(...) is deprecated in plain JavaScript React classes. %s",
                info[0],
                info[1]
              );
            }
          });
        }
        function getIteratorFn(maybeIterable) {
          if (null === maybeIterable || "object" !== typeof maybeIterable)
            return null;
          maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
          return "function" === typeof maybeIterable ? maybeIterable : null;
        }
        function warnNoop(publicInstance, callerName) {
          publicInstance = (publicInstance = publicInstance.constructor) && (publicInstance.displayName || publicInstance.name) || "ReactClass";
          var warningKey = publicInstance + "." + callerName;
          didWarnStateUpdateForUnmountedComponent[warningKey] || (console.error(
            "Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",
            callerName,
            publicInstance
          ), didWarnStateUpdateForUnmountedComponent[warningKey] = true);
        }
        function Component(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        function ComponentDummy() {
        }
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          try {
            testStringCoercion(value);
            var JSCompiler_inline_result = false;
          } catch (e) {
            JSCompiler_inline_result = true;
          }
          if (JSCompiler_inline_result) {
            JSCompiler_inline_result = console;
            var JSCompiler_temp_const = JSCompiler_inline_result.error;
            var JSCompiler_inline_result$jscomp$0 = "function" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            JSCompiler_temp_const.call(
              JSCompiler_inline_result,
              "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
              JSCompiler_inline_result$jscomp$0
            );
            return testStringCoercion(value);
          }
        }
        function getComponentNameFromType(type) {
          if (null == type) return null;
          if ("function" === typeof type)
            return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
          if ("string" === typeof type) return type;
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
            case REACT_ACTIVITY_TYPE:
              return "Activity";
          }
          if ("object" === typeof type)
            switch ("number" === typeof type.tag && console.error(
              "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
            ), type.$$typeof) {
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_CONTEXT_TYPE:
                return (type.displayName || "Context") + ".Provider";
              case REACT_CONSUMER_TYPE:
                return (type._context.displayName || "Context") + ".Consumer";
              case REACT_FORWARD_REF_TYPE:
                var innerType = type.render;
                type = type.displayName;
                type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
                return type;
              case REACT_MEMO_TYPE:
                return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE:
                innerType = type._payload;
                type = type._init;
                try {
                  return getComponentNameFromType(type(innerType));
                } catch (x) {
                }
            }
          return null;
        }
        function getTaskName(type) {
          if (type === REACT_FRAGMENT_TYPE) return "<>";
          if ("object" === typeof type && null !== type && type.$$typeof === REACT_LAZY_TYPE)
            return "<...>";
          try {
            var name2 = getComponentNameFromType(type);
            return name2 ? "<" + name2 + ">" : "<...>";
          } catch (x) {
            return "<...>";
          }
        }
        function getOwner() {
          var dispatcher = ReactSharedInternals.A;
          return null === dispatcher ? null : dispatcher.getOwner();
        }
        function UnknownOwner() {
          return Error("react-stack-top-frame");
        }
        function hasValidKey(config) {
          if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) return false;
          }
          return void 0 !== config.key;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          function warnAboutAccessingKey() {
            specialPropKeyWarningShown || (specialPropKeyWarningShown = true, console.error(
              "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",
              displayName
            ));
          }
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function elementRefGetterWithDeprecationWarning() {
          var componentName = getComponentNameFromType(this.type);
          didWarnAboutElementRef[componentName] || (didWarnAboutElementRef[componentName] = true, console.error(
            "Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."
          ));
          componentName = this.props.ref;
          return void 0 !== componentName ? componentName : null;
        }
        function ReactElement(type, key, self, source, owner, props, debugStack, debugTask) {
          self = props.ref;
          type = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            props,
            _owner: owner
          };
          null !== (void 0 !== self ? self : null) ? Object.defineProperty(type, "ref", {
            enumerable: false,
            get: elementRefGetterWithDeprecationWarning
          }) : Object.defineProperty(type, "ref", { enumerable: false, value: null });
          type._store = {};
          Object.defineProperty(type._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: 0
          });
          Object.defineProperty(type, "_debugInfo", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: null
          });
          Object.defineProperty(type, "_debugStack", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: debugStack
          });
          Object.defineProperty(type, "_debugTask", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: debugTask
          });
          Object.freeze && (Object.freeze(type.props), Object.freeze(type));
          return type;
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          newKey = ReactElement(
            oldElement.type,
            newKey,
            void 0,
            void 0,
            oldElement._owner,
            oldElement.props,
            oldElement._debugStack,
            oldElement._debugTask
          );
          oldElement._store && (newKey._store.validated = oldElement._store.validated);
          return newKey;
        }
        function isValidElement(object) {
          return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function escape(key) {
          var escaperLookup = { "=": "=0", ":": "=2" };
          return "$" + key.replace(/[=:]/g, function(match) {
            return escaperLookup[match];
          });
        }
        function getElementKey(element, index) {
          return "object" === typeof element && null !== element && null != element.key ? (checkKeyStringCoercion(element.key), escape("" + element.key)) : index.toString(36);
        }
        function noop$1() {
        }
        function resolveThenable(thenable) {
          switch (thenable.status) {
            case "fulfilled":
              return thenable.value;
            case "rejected":
              throw thenable.reason;
            default:
              switch ("string" === typeof thenable.status ? thenable.then(noop$1, noop$1) : (thenable.status = "pending", thenable.then(
                function(fulfilledValue) {
                  "pending" === thenable.status && (thenable.status = "fulfilled", thenable.value = fulfilledValue);
                },
                function(error) {
                  "pending" === thenable.status && (thenable.status = "rejected", thenable.reason = error);
                }
              )), thenable.status) {
                case "fulfilled":
                  return thenable.value;
                case "rejected":
                  throw thenable.reason;
              }
          }
          throw thenable;
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          var type = typeof children;
          if ("undefined" === type || "boolean" === type) children = null;
          var invokeCallback = false;
          if (null === children) invokeCallback = true;
          else
            switch (type) {
              case "bigint":
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                    break;
                  case REACT_LAZY_TYPE:
                    return invokeCallback = children._init, mapIntoArray(
                      invokeCallback(children._payload),
                      array,
                      escapedPrefix,
                      nameSoFar,
                      callback
                    );
                }
            }
          if (invokeCallback) {
            invokeCallback = children;
            callback = callback(invokeCallback);
            var childKey = "" === nameSoFar ? "." + getElementKey(invokeCallback, 0) : nameSoFar;
            isArrayImpl(callback) ? (escapedPrefix = "", null != childKey && (escapedPrefix = childKey.replace(userProvidedKeyEscapeRegex, "$&/") + "/"), mapIntoArray(callback, array, escapedPrefix, "", function(c) {
              return c;
            })) : null != callback && (isValidElement(callback) && (null != callback.key && (invokeCallback && invokeCallback.key === callback.key || checkKeyStringCoercion(callback.key)), escapedPrefix = cloneAndReplaceKey(
              callback,
              escapedPrefix + (null == callback.key || invokeCallback && invokeCallback.key === callback.key ? "" : ("" + callback.key).replace(
                userProvidedKeyEscapeRegex,
                "$&/"
              ) + "/") + childKey
            ), "" !== nameSoFar && null != invokeCallback && isValidElement(invokeCallback) && null == invokeCallback.key && invokeCallback._store && !invokeCallback._store.validated && (escapedPrefix._store.validated = 2), callback = escapedPrefix), array.push(callback));
            return 1;
          }
          invokeCallback = 0;
          childKey = "" === nameSoFar ? "." : nameSoFar + ":";
          if (isArrayImpl(children))
            for (var i = 0; i < children.length; i++)
              nameSoFar = children[i], type = childKey + getElementKey(nameSoFar, i), invokeCallback += mapIntoArray(
                nameSoFar,
                array,
                escapedPrefix,
                type,
                callback
              );
          else if (i = getIteratorFn(children), "function" === typeof i)
            for (i === children.entries && (didWarnAboutMaps || console.warn(
              "Using Maps as children is not supported. Use an array of keyed ReactElements instead."
            ), didWarnAboutMaps = true), children = i.call(children), i = 0; !(nameSoFar = children.next()).done; )
              nameSoFar = nameSoFar.value, type = childKey + getElementKey(nameSoFar, i++), invokeCallback += mapIntoArray(
                nameSoFar,
                array,
                escapedPrefix,
                type,
                callback
              );
          else if ("object" === type) {
            if ("function" === typeof children.then)
              return mapIntoArray(
                resolveThenable(children),
                array,
                escapedPrefix,
                nameSoFar,
                callback
              );
            array = String(children);
            throw Error(
              "Objects are not valid as a React child (found: " + ("[object Object]" === array ? "object with keys {" + Object.keys(children).join(", ") + "}" : array) + "). If you meant to render a collection of children, use an array instead."
            );
          }
          return invokeCallback;
        }
        function mapChildren(children, func, context) {
          if (null == children) return children;
          var result = [], count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function lazyInitializer(payload) {
          if (-1 === payload._status) {
            var ctor = payload._result;
            ctor = ctor();
            ctor.then(
              function(moduleObject) {
                if (0 === payload._status || -1 === payload._status)
                  payload._status = 1, payload._result = moduleObject;
              },
              function(error) {
                if (0 === payload._status || -1 === payload._status)
                  payload._status = 2, payload._result = error;
              }
            );
            -1 === payload._status && (payload._status = 0, payload._result = ctor);
          }
          if (1 === payload._status)
            return ctor = payload._result, void 0 === ctor && console.error(
              "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?",
              ctor
            ), "default" in ctor || console.error(
              "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))",
              ctor
            ), ctor.default;
          throw payload._result;
        }
        function resolveDispatcher() {
          var dispatcher = ReactSharedInternals.H;
          null === dispatcher && console.error(
            "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."
          );
          return dispatcher;
        }
        function noop() {
        }
        function enqueueTask(task) {
          if (null === enqueueTaskImpl)
            try {
              var requireString = ("require" + Math.random()).slice(0, 7);
              enqueueTaskImpl = (module && module[requireString]).call(
                module,
                "timers"
              ).setImmediate;
            } catch (_err) {
              enqueueTaskImpl = function(callback) {
                false === didWarnAboutMessageChannel && (didWarnAboutMessageChannel = true, "undefined" === typeof MessageChannel && console.error(
                  "This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."
                ));
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(void 0);
              };
            }
          return enqueueTaskImpl(task);
        }
        function aggregateErrors(errors) {
          return 1 < errors.length && "function" === typeof AggregateError ? new AggregateError(errors) : errors[0];
        }
        function popActScope(prevActQueue, prevActScopeDepth) {
          prevActScopeDepth !== actScopeDepth - 1 && console.error(
            "You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. "
          );
          actScopeDepth = prevActScopeDepth;
        }
        function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
          var queue = ReactSharedInternals.actQueue;
          if (null !== queue)
            if (0 !== queue.length)
              try {
                flushActQueue(queue);
                enqueueTask(function() {
                  return recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                });
                return;
              } catch (error) {
                ReactSharedInternals.thrownErrors.push(error);
              }
            else ReactSharedInternals.actQueue = null;
          0 < ReactSharedInternals.thrownErrors.length ? (queue = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, reject(queue)) : resolve(returnValue);
        }
        function flushActQueue(queue) {
          if (!isFlushing) {
            isFlushing = true;
            var i = 0;
            try {
              for (; i < queue.length; i++) {
                var callback = queue[i];
                do {
                  ReactSharedInternals.didUsePromise = false;
                  var continuation = callback(false);
                  if (null !== continuation) {
                    if (ReactSharedInternals.didUsePromise) {
                      queue[i] = callback;
                      queue.splice(0, i);
                      return;
                    }
                    callback = continuation;
                  } else break;
                } while (1);
              }
              queue.length = 0;
            } catch (error) {
              queue.splice(0, i + 1), ReactSharedInternals.thrownErrors.push(error);
            } finally {
              isFlushing = false;
            }
          }
        }
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
        var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        Symbol.for("react.provider");
        var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_ACTIVITY_TYPE = Symbol.for("react.activity"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, didWarnStateUpdateForUnmountedComponent = {}, ReactNoopUpdateQueue = {
          isMounted: function() {
            return false;
          },
          enqueueForceUpdate: function(publicInstance) {
            warnNoop(publicInstance, "forceUpdate");
          },
          enqueueReplaceState: function(publicInstance) {
            warnNoop(publicInstance, "replaceState");
          },
          enqueueSetState: function(publicInstance) {
            warnNoop(publicInstance, "setState");
          }
        }, assign = Object.assign, emptyObject = {};
        Object.freeze(emptyObject);
        Component.prototype.isReactComponent = {};
        Component.prototype.setState = function(partialState, callback) {
          if ("object" !== typeof partialState && "function" !== typeof partialState && null != partialState)
            throw Error(
              "takes an object of state variables to update or a function which returns an object of state variables."
            );
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        var deprecatedAPIs = {
          isMounted: [
            "isMounted",
            "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
          ],
          replaceState: [
            "replaceState",
            "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
          ]
        }, fnName;
        for (fnName in deprecatedAPIs)
          deprecatedAPIs.hasOwnProperty(fnName) && defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
        ComponentDummy.prototype = Component.prototype;
        deprecatedAPIs = PureComponent.prototype = new ComponentDummy();
        deprecatedAPIs.constructor = PureComponent;
        assign(deprecatedAPIs, Component.prototype);
        deprecatedAPIs.isPureReactComponent = true;
        var isArrayImpl = Array.isArray, REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), ReactSharedInternals = {
          H: null,
          A: null,
          T: null,
          S: null,
          V: null,
          actQueue: null,
          isBatchingLegacy: false,
          didScheduleLegacyUpdate: false,
          didUsePromise: false,
          thrownErrors: [],
          getCurrentStack: null,
          recentlyCreatedOwnerStacks: 0
        }, hasOwnProperty = Object.prototype.hasOwnProperty, createTask = console.createTask ? console.createTask : function() {
          return null;
        };
        deprecatedAPIs = {
          "react-stack-bottom-frame": function(callStackForError) {
            return callStackForError();
          }
        };
        var specialPropKeyWarningShown, didWarnAboutOldJSXRuntime;
        var didWarnAboutElementRef = {};
        var unknownOwnerDebugStack = deprecatedAPIs["react-stack-bottom-frame"].bind(deprecatedAPIs, UnknownOwner)();
        var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));
        var didWarnAboutMaps = false, userProvidedKeyEscapeRegex = /\/+/g, reportGlobalError = "function" === typeof reportError ? reportError : function(error) {
          if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
            var event = new window.ErrorEvent("error", {
              bubbles: true,
              cancelable: true,
              message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
              error
            });
            if (!window.dispatchEvent(event)) return;
          } else if ("object" === typeof process && "function" === typeof process.emit) {
            process.emit("uncaughtException", error);
            return;
          }
          console.error(error);
        }, didWarnAboutMessageChannel = false, enqueueTaskImpl = null, actScopeDepth = 0, didWarnNoAwaitAct = false, isFlushing = false, queueSeveralMicrotasks = "function" === typeof queueMicrotask ? function(callback) {
          queueMicrotask(function() {
            return queueMicrotask(callback);
          });
        } : enqueueTask;
        deprecatedAPIs = Object.freeze({
          __proto__: null,
          c: function(size) {
            return resolveDispatcher().useMemoCache(size);
          }
        });
        exports.Children = {
          map: mapChildren,
          forEach: function(children, forEachFunc, forEachContext) {
            mapChildren(
              children,
              function() {
                forEachFunc.apply(this, arguments);
              },
              forEachContext
            );
          },
          count: function(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          },
          toArray: function(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          },
          only: function(children) {
            if (!isValidElement(children))
              throw Error(
                "React.Children.only expected to receive a single React element child."
              );
            return children;
          }
        };
        exports.Component = Component;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.Profiler = REACT_PROFILER_TYPE;
        exports.PureComponent = PureComponent;
        exports.StrictMode = REACT_STRICT_MODE_TYPE;
        exports.Suspense = REACT_SUSPENSE_TYPE;
        exports.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = ReactSharedInternals;
        exports.__COMPILER_RUNTIME = deprecatedAPIs;
        exports.act = function(callback) {
          var prevActQueue = ReactSharedInternals.actQueue, prevActScopeDepth = actScopeDepth;
          actScopeDepth++;
          var queue = ReactSharedInternals.actQueue = null !== prevActQueue ? prevActQueue : [], didAwaitActCall = false;
          try {
            var result = callback();
          } catch (error) {
            ReactSharedInternals.thrownErrors.push(error);
          }
          if (0 < ReactSharedInternals.thrownErrors.length)
            throw popActScope(prevActQueue, prevActScopeDepth), callback = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, callback;
          if (null !== result && "object" === typeof result && "function" === typeof result.then) {
            var thenable = result;
            queueSeveralMicrotasks(function() {
              didAwaitActCall || didWarnNoAwaitAct || (didWarnNoAwaitAct = true, console.error(
                "You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"
              ));
            });
            return {
              then: function(resolve, reject) {
                didAwaitActCall = true;
                thenable.then(
                  function(returnValue) {
                    popActScope(prevActQueue, prevActScopeDepth);
                    if (0 === prevActScopeDepth) {
                      try {
                        flushActQueue(queue), enqueueTask(function() {
                          return recursivelyFlushAsyncActWork(
                            returnValue,
                            resolve,
                            reject
                          );
                        });
                      } catch (error$0) {
                        ReactSharedInternals.thrownErrors.push(error$0);
                      }
                      if (0 < ReactSharedInternals.thrownErrors.length) {
                        var _thrownError = aggregateErrors(
                          ReactSharedInternals.thrownErrors
                        );
                        ReactSharedInternals.thrownErrors.length = 0;
                        reject(_thrownError);
                      }
                    } else resolve(returnValue);
                  },
                  function(error) {
                    popActScope(prevActQueue, prevActScopeDepth);
                    0 < ReactSharedInternals.thrownErrors.length ? (error = aggregateErrors(
                      ReactSharedInternals.thrownErrors
                    ), ReactSharedInternals.thrownErrors.length = 0, reject(error)) : reject(error);
                  }
                );
              }
            };
          }
          var returnValue$jscomp$0 = result;
          popActScope(prevActQueue, prevActScopeDepth);
          0 === prevActScopeDepth && (flushActQueue(queue), 0 !== queue.length && queueSeveralMicrotasks(function() {
            didAwaitActCall || didWarnNoAwaitAct || (didWarnNoAwaitAct = true, console.error(
              "A component suspended inside an `act` scope, but the `act` call was not awaited. When testing React components that depend on asynchronous data, you must await the result:\n\nawait act(() => ...)"
            ));
          }), ReactSharedInternals.actQueue = null);
          if (0 < ReactSharedInternals.thrownErrors.length)
            throw callback = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, callback;
          return {
            then: function(resolve, reject) {
              didAwaitActCall = true;
              0 === prevActScopeDepth ? (ReactSharedInternals.actQueue = queue, enqueueTask(function() {
                return recursivelyFlushAsyncActWork(
                  returnValue$jscomp$0,
                  resolve,
                  reject
                );
              })) : resolve(returnValue$jscomp$0);
            }
          };
        };
        exports.cache = function(fn) {
          return function() {
            return fn.apply(null, arguments);
          };
        };
        exports.captureOwnerStack = function() {
          var getCurrentStack = ReactSharedInternals.getCurrentStack;
          return null === getCurrentStack ? null : getCurrentStack();
        };
        exports.cloneElement = function(element, config, children) {
          if (null === element || void 0 === element)
            throw Error(
              "The argument must be a React element, but you passed " + element + "."
            );
          var props = assign({}, element.props), key = element.key, owner = element._owner;
          if (null != config) {
            var JSCompiler_inline_result;
            a: {
              if (hasOwnProperty.call(config, "ref") && (JSCompiler_inline_result = Object.getOwnPropertyDescriptor(
                config,
                "ref"
              ).get) && JSCompiler_inline_result.isReactWarning) {
                JSCompiler_inline_result = false;
                break a;
              }
              JSCompiler_inline_result = void 0 !== config.ref;
            }
            JSCompiler_inline_result && (owner = getOwner());
            hasValidKey(config) && (checkKeyStringCoercion(config.key), key = "" + config.key);
            for (propName in config)
              !hasOwnProperty.call(config, propName) || "key" === propName || "__self" === propName || "__source" === propName || "ref" === propName && void 0 === config.ref || (props[propName] = config[propName]);
          }
          var propName = arguments.length - 2;
          if (1 === propName) props.children = children;
          else if (1 < propName) {
            JSCompiler_inline_result = Array(propName);
            for (var i = 0; i < propName; i++)
              JSCompiler_inline_result[i] = arguments[i + 2];
            props.children = JSCompiler_inline_result;
          }
          props = ReactElement(
            element.type,
            key,
            void 0,
            void 0,
            owner,
            props,
            element._debugStack,
            element._debugTask
          );
          for (key = 2; key < arguments.length; key++)
            owner = arguments[key], isValidElement(owner) && owner._store && (owner._store.validated = 1);
          return props;
        };
        exports.createContext = function(defaultValue) {
          defaultValue = {
            $$typeof: REACT_CONTEXT_TYPE,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null
          };
          defaultValue.Provider = defaultValue;
          defaultValue.Consumer = {
            $$typeof: REACT_CONSUMER_TYPE,
            _context: defaultValue
          };
          defaultValue._currentRenderer = null;
          defaultValue._currentRenderer2 = null;
          return defaultValue;
        };
        exports.createElement = function(type, config, children) {
          for (var i = 2; i < arguments.length; i++) {
            var node = arguments[i];
            isValidElement(node) && node._store && (node._store.validated = 1);
          }
          i = {};
          node = null;
          if (null != config)
            for (propName in didWarnAboutOldJSXRuntime || !("__self" in config) || "key" in config || (didWarnAboutOldJSXRuntime = true, console.warn(
              "Your app (or one of its dependencies) is using an outdated JSX transform. Update to the modern JSX transform for faster performance: https://react.dev/link/new-jsx-transform"
            )), hasValidKey(config) && (checkKeyStringCoercion(config.key), node = "" + config.key), config)
              hasOwnProperty.call(config, propName) && "key" !== propName && "__self" !== propName && "__source" !== propName && (i[propName] = config[propName]);
          var childrenLength = arguments.length - 2;
          if (1 === childrenLength) i.children = children;
          else if (1 < childrenLength) {
            for (var childArray = Array(childrenLength), _i = 0; _i < childrenLength; _i++)
              childArray[_i] = arguments[_i + 2];
            Object.freeze && Object.freeze(childArray);
            i.children = childArray;
          }
          if (type && type.defaultProps)
            for (propName in childrenLength = type.defaultProps, childrenLength)
              void 0 === i[propName] && (i[propName] = childrenLength[propName]);
          node && defineKeyPropWarningGetter(
            i,
            "function" === typeof type ? type.displayName || type.name || "Unknown" : type
          );
          var propName = 1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
          return ReactElement(
            type,
            node,
            void 0,
            void 0,
            getOwner(),
            i,
            propName ? Error("react-stack-top-frame") : unknownOwnerDebugStack,
            propName ? createTask(getTaskName(type)) : unknownOwnerDebugTask
          );
        };
        exports.createRef = function() {
          var refObject = { current: null };
          Object.seal(refObject);
          return refObject;
        };
        exports.forwardRef = function(render) {
          null != render && render.$$typeof === REACT_MEMO_TYPE ? console.error(
            "forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))."
          ) : "function" !== typeof render ? console.error(
            "forwardRef requires a render function but was given %s.",
            null === render ? "null" : typeof render
          ) : 0 !== render.length && 2 !== render.length && console.error(
            "forwardRef render functions accept exactly two parameters: props and ref. %s",
            1 === render.length ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined."
          );
          null != render && null != render.defaultProps && console.error(
            "forwardRef render functions do not support defaultProps. Did you accidentally pass a React component?"
          );
          var elementType = { $$typeof: REACT_FORWARD_REF_TYPE, render }, ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name2) {
              ownName = name2;
              render.name || render.displayName || (Object.defineProperty(render, "name", { value: name2 }), render.displayName = name2);
            }
          });
          return elementType;
        };
        exports.isValidElement = isValidElement;
        exports.lazy = function(ctor) {
          return {
            $$typeof: REACT_LAZY_TYPE,
            _payload: { _status: -1, _result: ctor },
            _init: lazyInitializer
          };
        };
        exports.memo = function(type, compare2) {
          null == type && console.error(
            "memo: The first argument must be a component. Instead received: %s",
            null === type ? "null" : typeof type
          );
          compare2 = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: void 0 === compare2 ? null : compare2
          };
          var ownName;
          Object.defineProperty(compare2, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name2) {
              ownName = name2;
              type.name || type.displayName || (Object.defineProperty(type, "name", { value: name2 }), type.displayName = name2);
            }
          });
          return compare2;
        };
        exports.startTransition = function(scope) {
          var prevTransition = ReactSharedInternals.T, currentTransition = {};
          ReactSharedInternals.T = currentTransition;
          currentTransition._updatedFibers = /* @__PURE__ */ new Set();
          try {
            var returnValue = scope(), onStartTransitionFinish = ReactSharedInternals.S;
            null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
            "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && returnValue.then(noop, reportGlobalError);
          } catch (error) {
            reportGlobalError(error);
          } finally {
            null === prevTransition && currentTransition._updatedFibers && (scope = currentTransition._updatedFibers.size, currentTransition._updatedFibers.clear(), 10 < scope && console.warn(
              "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
            )), ReactSharedInternals.T = prevTransition;
          }
        };
        exports.unstable_useCacheRefresh = function() {
          return resolveDispatcher().useCacheRefresh();
        };
        exports.use = function(usable) {
          return resolveDispatcher().use(usable);
        };
        exports.useActionState = function(action, initialState, permalink) {
          return resolveDispatcher().useActionState(
            action,
            initialState,
            permalink
          );
        };
        exports.useCallback = function(callback, deps) {
          return resolveDispatcher().useCallback(callback, deps);
        };
        exports.useContext = function(Context) {
          var dispatcher = resolveDispatcher();
          Context.$$typeof === REACT_CONSUMER_TYPE && console.error(
            "Calling useContext(Context.Consumer) is not supported and will cause bugs. Did you mean to call useContext(Context) instead?"
          );
          return dispatcher.useContext(Context);
        };
        exports.useDebugValue = function(value, formatterFn) {
          return resolveDispatcher().useDebugValue(value, formatterFn);
        };
        exports.useDeferredValue = function(value, initialValue) {
          return resolveDispatcher().useDeferredValue(value, initialValue);
        };
        exports.useEffect = function(create2, createDeps, update) {
          null == create2 && console.warn(
            "React Hook useEffect requires an effect callback. Did you forget to pass a callback to the hook?"
          );
          var dispatcher = resolveDispatcher();
          if ("function" === typeof update)
            throw Error(
              "useEffect CRUD overload is not enabled in this build of React."
            );
          return dispatcher.useEffect(create2, createDeps);
        };
        exports.useId = function() {
          return resolveDispatcher().useId();
        };
        exports.useImperativeHandle = function(ref, create2, deps) {
          return resolveDispatcher().useImperativeHandle(ref, create2, deps);
        };
        exports.useInsertionEffect = function(create2, deps) {
          null == create2 && console.warn(
            "React Hook useInsertionEffect requires an effect callback. Did you forget to pass a callback to the hook?"
          );
          return resolveDispatcher().useInsertionEffect(create2, deps);
        };
        exports.useLayoutEffect = function(create2, deps) {
          null == create2 && console.warn(
            "React Hook useLayoutEffect requires an effect callback. Did you forget to pass a callback to the hook?"
          );
          return resolveDispatcher().useLayoutEffect(create2, deps);
        };
        exports.useMemo = function(create2, deps) {
          return resolveDispatcher().useMemo(create2, deps);
        };
        exports.useOptimistic = function(passthrough, reducer) {
          return resolveDispatcher().useOptimistic(passthrough, reducer);
        };
        exports.useReducer = function(reducer, initialArg, init) {
          return resolveDispatcher().useReducer(reducer, initialArg, init);
        };
        exports.useRef = function(initialValue) {
          return resolveDispatcher().useRef(initialValue);
        };
        exports.useState = function(initialState) {
          return resolveDispatcher().useState(initialState);
        };
        exports.useSyncExternalStore = function(subscribe, getSnapshot, getServerSnapshot) {
          return resolveDispatcher().useSyncExternalStore(
            subscribe,
            getSnapshot,
            getServerSnapshot
          );
        };
        exports.useTransition = function() {
          return resolveDispatcher().useTransition();
        };
        exports.version = "19.1.0";
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
      })();
    }
  });

  // node_modules/.pnpm/react@19.1.0/node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/.pnpm/react@19.1.0/node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/.pnpm/scheduler@0.26.0/node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/.pnpm/scheduler@0.26.0/node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      (function() {
        function performWorkUntilDeadline() {
          needsPaint = false;
          if (isMessageLoopRunning) {
            var currentTime = exports.unstable_now();
            startTime = currentTime;
            var hasMoreWork = true;
            try {
              a: {
                isHostCallbackScheduled = false;
                isHostTimeoutScheduled && (isHostTimeoutScheduled = false, localClearTimeout(taskTimeoutID), taskTimeoutID = -1);
                isPerformingWork = true;
                var previousPriorityLevel = currentPriorityLevel;
                try {
                  b: {
                    advanceTimers(currentTime);
                    for (currentTask = peek(taskQueue); null !== currentTask && !(currentTask.expirationTime > currentTime && shouldYieldToHost()); ) {
                      var callback = currentTask.callback;
                      if ("function" === typeof callback) {
                        currentTask.callback = null;
                        currentPriorityLevel = currentTask.priorityLevel;
                        var continuationCallback = callback(
                          currentTask.expirationTime <= currentTime
                        );
                        currentTime = exports.unstable_now();
                        if ("function" === typeof continuationCallback) {
                          currentTask.callback = continuationCallback;
                          advanceTimers(currentTime);
                          hasMoreWork = true;
                          break b;
                        }
                        currentTask === peek(taskQueue) && pop(taskQueue);
                        advanceTimers(currentTime);
                      } else pop(taskQueue);
                      currentTask = peek(taskQueue);
                    }
                    if (null !== currentTask) hasMoreWork = true;
                    else {
                      var firstTimer = peek(timerQueue);
                      null !== firstTimer && requestHostTimeout(
                        handleTimeout,
                        firstTimer.startTime - currentTime
                      );
                      hasMoreWork = false;
                    }
                  }
                  break a;
                } finally {
                  currentTask = null, currentPriorityLevel = previousPriorityLevel, isPerformingWork = false;
                }
                hasMoreWork = void 0;
              }
            } finally {
              hasMoreWork ? schedulePerformWorkUntilDeadline() : isMessageLoopRunning = false;
            }
          }
        }
        function push(heap, node) {
          var index = heap.length;
          heap.push(node);
          a: for (; 0 < index; ) {
            var parentIndex = index - 1 >>> 1, parent = heap[parentIndex];
            if (0 < compare2(parent, node))
              heap[parentIndex] = node, heap[index] = parent, index = parentIndex;
            else break a;
          }
        }
        function peek(heap) {
          return 0 === heap.length ? null : heap[0];
        }
        function pop(heap) {
          if (0 === heap.length) return null;
          var first = heap[0], last = heap.pop();
          if (last !== first) {
            heap[0] = last;
            a: for (var index = 0, length2 = heap.length, halfLength = length2 >>> 1; index < halfLength; ) {
              var leftIndex = 2 * (index + 1) - 1, left = heap[leftIndex], rightIndex = leftIndex + 1, right = heap[rightIndex];
              if (0 > compare2(left, last))
                rightIndex < length2 && 0 > compare2(right, left) ? (heap[index] = right, heap[rightIndex] = last, index = rightIndex) : (heap[index] = left, heap[leftIndex] = last, index = leftIndex);
              else if (rightIndex < length2 && 0 > compare2(right, last))
                heap[index] = right, heap[rightIndex] = last, index = rightIndex;
              else break a;
            }
          }
          return first;
        }
        function compare2(a, b) {
          var diff = a.sortIndex - b.sortIndex;
          return 0 !== diff ? diff : a.id - b.id;
        }
        function advanceTimers(currentTime) {
          for (var timer = peek(timerQueue); null !== timer; ) {
            if (null === timer.callback) pop(timerQueue);
            else if (timer.startTime <= currentTime)
              pop(timerQueue), timer.sortIndex = timer.expirationTime, push(taskQueue, timer);
            else break;
            timer = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled)
            if (null !== peek(taskQueue))
              isHostCallbackScheduled = true, isMessageLoopRunning || (isMessageLoopRunning = true, schedulePerformWorkUntilDeadline());
            else {
              var firstTimer = peek(timerQueue);
              null !== firstTimer && requestHostTimeout(
                handleTimeout,
                firstTimer.startTime - currentTime
              );
            }
        }
        function shouldYieldToHost() {
          return needsPaint ? true : exports.unstable_now() - startTime < frameInterval ? false : true;
        }
        function requestHostTimeout(callback, ms) {
          taskTimeoutID = localSetTimeout(function() {
            callback(exports.unstable_now());
          }, ms);
        }
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
        exports.unstable_now = void 0;
        if ("object" === typeof performance && "function" === typeof performance.now) {
          var localPerformance = performance;
          exports.unstable_now = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date, initialTime = localDate.now();
          exports.unstable_now = function() {
            return localDate.now() - initialTime;
          };
        }
        var taskQueue = [], timerQueue = [], taskIdCounter = 1, currentTask = null, currentPriorityLevel = 3, isPerformingWork = false, isHostCallbackScheduled = false, isHostTimeoutScheduled = false, needsPaint = false, localSetTimeout = "function" === typeof setTimeout ? setTimeout : null, localClearTimeout = "function" === typeof clearTimeout ? clearTimeout : null, localSetImmediate = "undefined" !== typeof setImmediate ? setImmediate : null, isMessageLoopRunning = false, taskTimeoutID = -1, frameInterval = 5, startTime = -1;
        if ("function" === typeof localSetImmediate)
          var schedulePerformWorkUntilDeadline = function() {
            localSetImmediate(performWorkUntilDeadline);
          };
        else if ("undefined" !== typeof MessageChannel) {
          var channel = new MessageChannel(), port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
          };
        } else
          schedulePerformWorkUntilDeadline = function() {
            localSetTimeout(performWorkUntilDeadline, 0);
          };
        exports.unstable_IdlePriority = 5;
        exports.unstable_ImmediatePriority = 1;
        exports.unstable_LowPriority = 4;
        exports.unstable_NormalPriority = 3;
        exports.unstable_Profiling = null;
        exports.unstable_UserBlockingPriority = 2;
        exports.unstable_cancelCallback = function(task) {
          task.callback = null;
        };
        exports.unstable_forceFrameRate = function(fps) {
          0 > fps || 125 < fps ? console.error(
            "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
          ) : frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5;
        };
        exports.unstable_getCurrentPriorityLevel = function() {
          return currentPriorityLevel;
        };
        exports.unstable_next = function(eventHandler) {
          switch (currentPriorityLevel) {
            case 1:
            case 2:
            case 3:
              var priorityLevel = 3;
              break;
            default:
              priorityLevel = currentPriorityLevel;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
        exports.unstable_requestPaint = function() {
          needsPaint = true;
        };
        exports.unstable_runWithPriority = function(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
              break;
            default:
              priorityLevel = 3;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
        exports.unstable_scheduleCallback = function(priorityLevel, callback, options) {
          var currentTime = exports.unstable_now();
          "object" === typeof options && null !== options ? (options = options.delay, options = "number" === typeof options && 0 < options ? currentTime + options : currentTime) : options = currentTime;
          switch (priorityLevel) {
            case 1:
              var timeout = -1;
              break;
            case 2:
              timeout = 250;
              break;
            case 5:
              timeout = 1073741823;
              break;
            case 4:
              timeout = 1e4;
              break;
            default:
              timeout = 5e3;
          }
          timeout = options + timeout;
          priorityLevel = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime: options,
            expirationTime: timeout,
            sortIndex: -1
          };
          options > currentTime ? (priorityLevel.sortIndex = options, push(timerQueue, priorityLevel), null === peek(taskQueue) && priorityLevel === peek(timerQueue) && (isHostTimeoutScheduled ? (localClearTimeout(taskTimeoutID), taskTimeoutID = -1) : isHostTimeoutScheduled = true, requestHostTimeout(handleTimeout, options - currentTime))) : (priorityLevel.sortIndex = timeout, push(taskQueue, priorityLevel), isHostCallbackScheduled || isPerformingWork || (isHostCallbackScheduled = true, isMessageLoopRunning || (isMessageLoopRunning = true, schedulePerformWorkUntilDeadline())));
          return priorityLevel;
        };
        exports.unstable_shouldYield = shouldYieldToHost;
        exports.unstable_wrapCallback = function(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        };
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
      })();
    }
  });

  // node_modules/.pnpm/scheduler@0.26.0/node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/.pnpm/scheduler@0.26.0/node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/.pnpm/react-dom@19.1.0_react@19.1.0/node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/.pnpm/react-dom@19.1.0_react@19.1.0/node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      (function() {
        function noop() {
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function createPortal$1(children, containerInfo, implementation) {
          var key = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
          try {
            testStringCoercion(key);
            var JSCompiler_inline_result = false;
          } catch (e) {
            JSCompiler_inline_result = true;
          }
          JSCompiler_inline_result && (console.error(
            "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
            "function" === typeof Symbol && Symbol.toStringTag && key[Symbol.toStringTag] || key.constructor.name || "Object"
          ), testStringCoercion(key));
          return {
            $$typeof: REACT_PORTAL_TYPE,
            key: null == key ? null : "" + key,
            children,
            containerInfo,
            implementation
          };
        }
        function getCrossOriginStringAs(as, input) {
          if ("font" === as) return "";
          if ("string" === typeof input)
            return "use-credentials" === input ? input : "";
        }
        function getValueDescriptorExpectingObjectForWarning(thing) {
          return null === thing ? "`null`" : void 0 === thing ? "`undefined`" : "" === thing ? "an empty string" : 'something with type "' + typeof thing + '"';
        }
        function getValueDescriptorExpectingEnumForWarning(thing) {
          return null === thing ? "`null`" : void 0 === thing ? "`undefined`" : "" === thing ? "an empty string" : "string" === typeof thing ? JSON.stringify(thing) : "number" === typeof thing ? "`" + thing + "`" : 'something with type "' + typeof thing + '"';
        }
        function resolveDispatcher() {
          var dispatcher = ReactSharedInternals.H;
          null === dispatcher && console.error(
            "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."
          );
          return dispatcher;
        }
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
        var React2 = require_react(), Internals = {
          d: {
            f: noop,
            r: function() {
              throw Error(
                "Invalid form element. requestFormReset must be passed a form that was rendered by React."
              );
            },
            D: noop,
            C: noop,
            L: noop,
            m: noop,
            X: noop,
            S: noop,
            M: noop
          },
          p: 0,
          findDOMNode: null
        }, REACT_PORTAL_TYPE = Symbol.for("react.portal"), ReactSharedInternals = React2.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
        "function" === typeof Map && null != Map.prototype && "function" === typeof Map.prototype.forEach && "function" === typeof Set && null != Set.prototype && "function" === typeof Set.prototype.clear && "function" === typeof Set.prototype.forEach || console.error(
          "React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"
        );
        exports.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = Internals;
        exports.createPortal = function(children, container) {
          var key = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
          if (!container || 1 !== container.nodeType && 9 !== container.nodeType && 11 !== container.nodeType)
            throw Error("Target container is not a DOM element.");
          return createPortal$1(children, container, null, key);
        };
        exports.flushSync = function(fn) {
          var previousTransition = ReactSharedInternals.T, previousUpdatePriority = Internals.p;
          try {
            if (ReactSharedInternals.T = null, Internals.p = 2, fn)
              return fn();
          } finally {
            ReactSharedInternals.T = previousTransition, Internals.p = previousUpdatePriority, Internals.d.f() && console.error(
              "flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task."
            );
          }
        };
        exports.preconnect = function(href, options) {
          "string" === typeof href && href ? null != options && "object" !== typeof options ? console.error(
            "ReactDOM.preconnect(): Expected the `options` argument (second) to be an object but encountered %s instead. The only supported option at this time is `crossOrigin` which accepts a string.",
            getValueDescriptorExpectingEnumForWarning(options)
          ) : null != options && "string" !== typeof options.crossOrigin && console.error(
            "ReactDOM.preconnect(): Expected the `crossOrigin` option (second argument) to be a string but encountered %s instead. Try removing this option or passing a string value instead.",
            getValueDescriptorExpectingObjectForWarning(options.crossOrigin)
          ) : console.error(
            "ReactDOM.preconnect(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",
            getValueDescriptorExpectingObjectForWarning(href)
          );
          "string" === typeof href && (options ? (options = options.crossOrigin, options = "string" === typeof options ? "use-credentials" === options ? options : "" : void 0) : options = null, Internals.d.C(href, options));
        };
        exports.prefetchDNS = function(href) {
          if ("string" !== typeof href || !href)
            console.error(
              "ReactDOM.prefetchDNS(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",
              getValueDescriptorExpectingObjectForWarning(href)
            );
          else if (1 < arguments.length) {
            var options = arguments[1];
            "object" === typeof options && options.hasOwnProperty("crossOrigin") ? console.error(
              "ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. It looks like the you are attempting to set a crossOrigin property for this DNS lookup hint. Browsers do not perform DNS queries using CORS and setting this attribute on the resource hint has no effect. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.",
              getValueDescriptorExpectingEnumForWarning(options)
            ) : console.error(
              "ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.",
              getValueDescriptorExpectingEnumForWarning(options)
            );
          }
          "string" === typeof href && Internals.d.D(href);
        };
        exports.preinit = function(href, options) {
          "string" === typeof href && href ? null == options || "object" !== typeof options ? console.error(
            "ReactDOM.preinit(): Expected the `options` argument (second) to be an object with an `as` property describing the type of resource to be preinitialized but encountered %s instead.",
            getValueDescriptorExpectingEnumForWarning(options)
          ) : "style" !== options.as && "script" !== options.as && console.error(
            'ReactDOM.preinit(): Expected the `as` property in the `options` argument (second) to contain a valid value describing the type of resource to be preinitialized but encountered %s instead. Valid values for `as` are "style" and "script".',
            getValueDescriptorExpectingEnumForWarning(options.as)
          ) : console.error(
            "ReactDOM.preinit(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",
            getValueDescriptorExpectingObjectForWarning(href)
          );
          if ("string" === typeof href && options && "string" === typeof options.as) {
            var as = options.as, crossOrigin = getCrossOriginStringAs(as, options.crossOrigin), integrity = "string" === typeof options.integrity ? options.integrity : void 0, fetchPriority = "string" === typeof options.fetchPriority ? options.fetchPriority : void 0;
            "style" === as ? Internals.d.S(
              href,
              "string" === typeof options.precedence ? options.precedence : void 0,
              {
                crossOrigin,
                integrity,
                fetchPriority
              }
            ) : "script" === as && Internals.d.X(href, {
              crossOrigin,
              integrity,
              fetchPriority,
              nonce: "string" === typeof options.nonce ? options.nonce : void 0
            });
          }
        };
        exports.preinitModule = function(href, options) {
          var encountered = "";
          "string" === typeof href && href || (encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".");
          void 0 !== options && "object" !== typeof options ? encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + "." : options && "as" in options && "script" !== options.as && (encountered += " The `as` option encountered was " + getValueDescriptorExpectingEnumForWarning(options.as) + ".");
          if (encountered)
            console.error(
              "ReactDOM.preinitModule(): Expected up to two arguments, a non-empty `href` string and, optionally, an `options` object with a valid `as` property.%s",
              encountered
            );
          else
            switch (encountered = options && "string" === typeof options.as ? options.as : "script", encountered) {
              case "script":
                break;
              default:
                encountered = getValueDescriptorExpectingEnumForWarning(encountered), console.error(
                  'ReactDOM.preinitModule(): Currently the only supported "as" type for this function is "script" but received "%s" instead. This warning was generated for `href` "%s". In the future other module types will be supported, aligning with the import-attributes proposal. Learn more here: (https://github.com/tc39/proposal-import-attributes)',
                  encountered,
                  href
                );
            }
          if ("string" === typeof href)
            if ("object" === typeof options && null !== options) {
              if (null == options.as || "script" === options.as)
                encountered = getCrossOriginStringAs(
                  options.as,
                  options.crossOrigin
                ), Internals.d.M(href, {
                  crossOrigin: encountered,
                  integrity: "string" === typeof options.integrity ? options.integrity : void 0,
                  nonce: "string" === typeof options.nonce ? options.nonce : void 0
                });
            } else null == options && Internals.d.M(href);
        };
        exports.preload = function(href, options) {
          var encountered = "";
          "string" === typeof href && href || (encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".");
          null == options || "object" !== typeof options ? encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + "." : "string" === typeof options.as && options.as || (encountered += " The `as` option encountered was " + getValueDescriptorExpectingObjectForWarning(options.as) + ".");
          encountered && console.error(
            'ReactDOM.preload(): Expected two arguments, a non-empty `href` string and an `options` object with an `as` property valid for a `<link rel="preload" as="..." />` tag.%s',
            encountered
          );
          if ("string" === typeof href && "object" === typeof options && null !== options && "string" === typeof options.as) {
            encountered = options.as;
            var crossOrigin = getCrossOriginStringAs(
              encountered,
              options.crossOrigin
            );
            Internals.d.L(href, encountered, {
              crossOrigin,
              integrity: "string" === typeof options.integrity ? options.integrity : void 0,
              nonce: "string" === typeof options.nonce ? options.nonce : void 0,
              type: "string" === typeof options.type ? options.type : void 0,
              fetchPriority: "string" === typeof options.fetchPriority ? options.fetchPriority : void 0,
              referrerPolicy: "string" === typeof options.referrerPolicy ? options.referrerPolicy : void 0,
              imageSrcSet: "string" === typeof options.imageSrcSet ? options.imageSrcSet : void 0,
              imageSizes: "string" === typeof options.imageSizes ? options.imageSizes : void 0,
              media: "string" === typeof options.media ? options.media : void 0
            });
          }
        };
        exports.preloadModule = function(href, options) {
          var encountered = "";
          "string" === typeof href && href || (encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".");
          void 0 !== options && "object" !== typeof options ? encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + "." : options && "as" in options && "string" !== typeof options.as && (encountered += " The `as` option encountered was " + getValueDescriptorExpectingObjectForWarning(options.as) + ".");
          encountered && console.error(
            'ReactDOM.preloadModule(): Expected two arguments, a non-empty `href` string and, optionally, an `options` object with an `as` property valid for a `<link rel="modulepreload" as="..." />` tag.%s',
            encountered
          );
          "string" === typeof href && (options ? (encountered = getCrossOriginStringAs(
            options.as,
            options.crossOrigin
          ), Internals.d.m(href, {
            as: "string" === typeof options.as && "script" !== options.as ? options.as : void 0,
            crossOrigin: encountered,
            integrity: "string" === typeof options.integrity ? options.integrity : void 0
          })) : Internals.d.m(href));
        };
        exports.requestFormReset = function(form) {
          Internals.d.r(form);
        };
        exports.unstable_batchedUpdates = function(fn, a) {
          return fn(a);
        };
        exports.useFormState = function(action, initialState, permalink) {
          return resolveDispatcher().useFormState(action, initialState, permalink);
        };
        exports.useFormStatus = function() {
          return resolveDispatcher().useHostTransitionStatus();
        };
        exports.version = "19.1.0";
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
      })();
    }
  });

  // node_modules/.pnpm/react-dom@19.1.0_react@19.1.0/node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/.pnpm/react-dom@19.1.0_react@19.1.0/node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/.pnpm/react-dom@19.1.0_react@19.1.0/node_modules/react-dom/cjs/react-dom-client.development.js
  var require_react_dom_client_development = __commonJS({
    "node_modules/.pnpm/react-dom@19.1.0_react@19.1.0/node_modules/react-dom/cjs/react-dom-client.development.js"(exports) {
      "use strict";
      (function() {
        function findHook(fiber, id) {
          for (fiber = fiber.memoizedState; null !== fiber && 0 < id; )
            fiber = fiber.next, id--;
          return fiber;
        }
        function copyWithSetImpl(obj, path, index, value) {
          if (index >= path.length) return value;
          var key = path[index], updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
          updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
          return updated;
        }
        function copyWithRename(obj, oldPath, newPath) {
          if (oldPath.length !== newPath.length)
            console.warn("copyWithRename() expects paths of the same length");
          else {
            for (var i = 0; i < newPath.length - 1; i++)
              if (oldPath[i] !== newPath[i]) {
                console.warn(
                  "copyWithRename() expects paths to be the same except for the deepest key"
                );
                return;
              }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          }
        }
        function copyWithRenameImpl(obj, oldPath, newPath, index) {
          var oldKey = oldPath[index], updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
          index + 1 === oldPath.length ? (updated[newPath[index]] = updated[oldKey], isArrayImpl(updated) ? updated.splice(oldKey, 1) : delete updated[oldKey]) : updated[oldKey] = copyWithRenameImpl(
            obj[oldKey],
            oldPath,
            newPath,
            index + 1
          );
          return updated;
        }
        function copyWithDeleteImpl(obj, path, index) {
          var key = path[index], updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
          if (index + 1 === path.length)
            return isArrayImpl(updated) ? updated.splice(key, 1) : delete updated[key], updated;
          updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
          return updated;
        }
        function shouldSuspendImpl() {
          return false;
        }
        function shouldErrorImpl() {
          return null;
        }
        function warnForMissingKey() {
        }
        function warnInvalidHookAccess() {
          console.error(
            "Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://react.dev/link/rules-of-hooks"
          );
        }
        function warnInvalidContextAccess() {
          console.error(
            "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
          );
        }
        function noop$2() {
        }
        function setToSortedString(set) {
          var array = [];
          set.forEach(function(value) {
            array.push(value);
          });
          return array.sort().join(", ");
        }
        function createFiber(tag2, pendingProps, key, mode) {
          return new FiberNode(tag2, pendingProps, key, mode);
        }
        function scheduleRoot(root3, element) {
          root3.context === emptyContextObject && (updateContainerImpl(root3.current, 2, element, root3, null, null), flushSyncWork$1());
        }
        function scheduleRefresh(root3, update) {
          if (null !== resolveFamily) {
            var staleFamilies = update.staleFamilies;
            update = update.updatedFamilies;
            flushPendingEffects();
            scheduleFibersWithFamiliesRecursively(
              root3.current,
              update,
              staleFamilies
            );
            flushSyncWork$1();
          }
        }
        function setRefreshHandler(handler) {
          resolveFamily = handler;
        }
        function isValidContainer(node) {
          return !(!node || 1 !== node.nodeType && 9 !== node.nodeType && 11 !== node.nodeType);
        }
        function getNearestMountedFiber(fiber) {
          var node = fiber, nearestMounted = fiber;
          if (fiber.alternate) for (; node.return; ) node = node.return;
          else {
            fiber = node;
            do
              node = fiber, 0 !== (node.flags & 4098) && (nearestMounted = node.return), fiber = node.return;
            while (fiber);
          }
          return 3 === node.tag ? nearestMounted : null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (13 === fiber.tag) {
            var suspenseState = fiber.memoizedState;
            null === suspenseState && (fiber = fiber.alternate, null !== fiber && (suspenseState = fiber.memoizedState));
            if (null !== suspenseState) return suspenseState.dehydrated;
          }
          return null;
        }
        function assertIsMounted(fiber) {
          if (getNearestMountedFiber(fiber) !== fiber)
            throw Error("Unable to find node on an unmounted component.");
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            alternate = getNearestMountedFiber(fiber);
            if (null === alternate)
              throw Error("Unable to find node on an unmounted component.");
            return alternate !== fiber ? null : fiber;
          }
          for (var a = fiber, b = alternate; ; ) {
            var parentA = a.return;
            if (null === parentA) break;
            var parentB = parentA.alternate;
            if (null === parentB) {
              b = parentA.return;
              if (null !== b) {
                a = b;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              for (parentB = parentA.child; parentB; ) {
                if (parentB === a) return assertIsMounted(parentA), fiber;
                if (parentB === b) return assertIsMounted(parentA), alternate;
                parentB = parentB.sibling;
              }
              throw Error("Unable to find node on an unmounted component.");
            }
            if (a.return !== b.return) a = parentA, b = parentB;
            else {
              for (var didFindChild = false, _child = parentA.child; _child; ) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentA;
                  b = parentB;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                for (_child = parentB.child; _child; ) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentB;
                    b = parentA;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild)
                  throw Error(
                    "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue."
                  );
              }
            }
            if (a.alternate !== b)
              throw Error(
                "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue."
              );
          }
          if (3 !== a.tag)
            throw Error("Unable to find node on an unmounted component.");
          return a.stateNode.current === a ? fiber : alternate;
        }
        function findCurrentHostFiberImpl(node) {
          var tag2 = node.tag;
          if (5 === tag2 || 26 === tag2 || 27 === tag2 || 6 === tag2) return node;
          for (node = node.child; null !== node; ) {
            tag2 = findCurrentHostFiberImpl(node);
            if (null !== tag2) return tag2;
            node = node.sibling;
          }
          return null;
        }
        function getIteratorFn(maybeIterable) {
          if (null === maybeIterable || "object" !== typeof maybeIterable)
            return null;
          maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
          return "function" === typeof maybeIterable ? maybeIterable : null;
        }
        function getComponentNameFromType(type) {
          if (null == type) return null;
          if ("function" === typeof type)
            return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
          if ("string" === typeof type) return type;
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
            case REACT_ACTIVITY_TYPE:
              return "Activity";
          }
          if ("object" === typeof type)
            switch ("number" === typeof type.tag && console.error(
              "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
            ), type.$$typeof) {
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_CONTEXT_TYPE:
                return (type.displayName || "Context") + ".Provider";
              case REACT_CONSUMER_TYPE:
                return (type._context.displayName || "Context") + ".Consumer";
              case REACT_FORWARD_REF_TYPE:
                var innerType = type.render;
                type = type.displayName;
                type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
                return type;
              case REACT_MEMO_TYPE:
                return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE:
                innerType = type._payload;
                type = type._init;
                try {
                  return getComponentNameFromType(type(innerType));
                } catch (x) {
                }
            }
          return null;
        }
        function getComponentNameFromOwner(owner) {
          return "number" === typeof owner.tag ? getComponentNameFromFiber(owner) : "string" === typeof owner.name ? owner.name : null;
        }
        function getComponentNameFromFiber(fiber) {
          var type = fiber.type;
          switch (fiber.tag) {
            case 31:
              return "Activity";
            case 24:
              return "Cache";
            case 9:
              return (type._context.displayName || "Context") + ".Consumer";
            case 10:
              return (type.displayName || "Context") + ".Provider";
            case 18:
              return "DehydratedFragment";
            case 11:
              return fiber = type.render, fiber = fiber.displayName || fiber.name || "", type.displayName || ("" !== fiber ? "ForwardRef(" + fiber + ")" : "ForwardRef");
            case 7:
              return "Fragment";
            case 26:
            case 27:
            case 5:
              return type;
            case 4:
              return "Portal";
            case 3:
              return "Root";
            case 6:
              return "Text";
            case 16:
              return getComponentNameFromType(type);
            case 8:
              return type === REACT_STRICT_MODE_TYPE ? "StrictMode" : "Mode";
            case 22:
              return "Offscreen";
            case 12:
              return "Profiler";
            case 21:
              return "Scope";
            case 13:
              return "Suspense";
            case 19:
              return "SuspenseList";
            case 25:
              return "TracingMarker";
            case 1:
            case 0:
            case 14:
            case 15:
              if ("function" === typeof type)
                return type.displayName || type.name || null;
              if ("string" === typeof type) return type;
              break;
            case 29:
              type = fiber._debugInfo;
              if (null != type) {
                for (var i = type.length - 1; 0 <= i; i--)
                  if ("string" === typeof type[i].name) return type[i].name;
              }
              if (null !== fiber.return)
                return getComponentNameFromFiber(fiber.return);
          }
          return null;
        }
        function createCursor(defaultValue) {
          return { current: defaultValue };
        }
        function pop(cursor, fiber) {
          0 > index$jscomp$0 ? console.error("Unexpected pop.") : (fiber !== fiberStack[index$jscomp$0] && console.error("Unexpected Fiber popped."), cursor.current = valueStack[index$jscomp$0], valueStack[index$jscomp$0] = null, fiberStack[index$jscomp$0] = null, index$jscomp$0--);
        }
        function push(cursor, value, fiber) {
          index$jscomp$0++;
          valueStack[index$jscomp$0] = cursor.current;
          fiberStack[index$jscomp$0] = fiber;
          cursor.current = value;
        }
        function requiredContext(c) {
          null === c && console.error(
            "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue."
          );
          return c;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor, null, fiber);
          var nextRootContext = nextRootInstance.nodeType;
          switch (nextRootContext) {
            case 9:
            case 11:
              nextRootContext = 9 === nextRootContext ? "#document" : "#fragment";
              nextRootInstance = (nextRootInstance = nextRootInstance.documentElement) ? (nextRootInstance = nextRootInstance.namespaceURI) ? getOwnHostContext(nextRootInstance) : HostContextNamespaceNone : HostContextNamespaceNone;
              break;
            default:
              if (nextRootContext = nextRootInstance.tagName, nextRootInstance = nextRootInstance.namespaceURI)
                nextRootInstance = getOwnHostContext(nextRootInstance), nextRootInstance = getChildHostContextProd(
                  nextRootInstance,
                  nextRootContext
                );
              else
                switch (nextRootContext) {
                  case "svg":
                    nextRootInstance = HostContextNamespaceSvg;
                    break;
                  case "math":
                    nextRootInstance = HostContextNamespaceMath;
                    break;
                  default:
                    nextRootInstance = HostContextNamespaceNone;
                }
          }
          nextRootContext = nextRootContext.toLowerCase();
          nextRootContext = updatedAncestorInfoDev(null, nextRootContext);
          nextRootContext = {
            context: nextRootInstance,
            ancestorInfo: nextRootContext
          };
          pop(contextStackCursor, fiber);
          push(contextStackCursor, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          return requiredContext(contextStackCursor.current);
        }
        function pushHostContext(fiber) {
          null !== fiber.memoizedState && push(hostTransitionProviderCursor, fiber, fiber);
          var context = requiredContext(contextStackCursor.current);
          var type = fiber.type;
          var nextContext = getChildHostContextProd(context.context, type);
          type = updatedAncestorInfoDev(context.ancestorInfo, type);
          nextContext = { context: nextContext, ancestorInfo: type };
          context !== nextContext && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor, nextContext, fiber));
        }
        function popHostContext(fiber) {
          contextFiberStackCursor.current === fiber && (pop(contextStackCursor, fiber), pop(contextFiberStackCursor, fiber));
          hostTransitionProviderCursor.current === fiber && (pop(hostTransitionProviderCursor, fiber), HostTransitionContext._currentValue = NotPendingTransition);
        }
        function typeName(value) {
          return "function" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
        }
        function willCoercionThrow(value) {
          try {
            return testStringCoercion(value), false;
          } catch (e) {
            return true;
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          if (willCoercionThrow(value))
            return console.error(
              "The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before using it here.",
              attributeName,
              typeName(value)
            ), testStringCoercion(value);
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          if (willCoercionThrow(value))
            return console.error(
              "The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before using it here.",
              propName,
              typeName(value)
            ), testStringCoercion(value);
        }
        function checkFormFieldValueStringCoercion(value) {
          if (willCoercionThrow(value))
            return console.error(
              "Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before using it here.",
              typeName(value)
            ), testStringCoercion(value);
        }
        function injectInternals(internals) {
          if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return false;
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) return true;
          if (!hook.supportsFiber)
            return console.error(
              "The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://react.dev/link/react-devtools"
            ), true;
          try {
            rendererID = hook.inject(internals), injectedHook = hook;
          } catch (err) {
            console.error("React instrumentation encountered an error: %s.", err);
          }
          return hook.checkDCE ? true : false;
        }
        function setIsStrictModeForDevtools(newIsStrictMode) {
          "function" === typeof log$1 && unstable_setDisableYieldValue(newIsStrictMode);
          if (injectedHook && "function" === typeof injectedHook.setStrictMode)
            try {
              injectedHook.setStrictMode(rendererID, newIsStrictMode);
            } catch (err) {
              hasLoggedError || (hasLoggedError = true, console.error(
                "React instrumentation encountered an error: %s",
                err
              ));
            }
        }
        function injectProfilingHooks(profilingHooks) {
          injectedProfilingHooks = profilingHooks;
        }
        function markCommitStopped() {
          null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markCommitStopped && injectedProfilingHooks.markCommitStopped();
        }
        function markComponentRenderStarted(fiber) {
          null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentRenderStarted && injectedProfilingHooks.markComponentRenderStarted(fiber);
        }
        function markComponentRenderStopped() {
          null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentRenderStopped && injectedProfilingHooks.markComponentRenderStopped();
        }
        function markRenderStarted(lanes) {
          null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markRenderStarted && injectedProfilingHooks.markRenderStarted(lanes);
        }
        function markRenderStopped() {
          null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markRenderStopped && injectedProfilingHooks.markRenderStopped();
        }
        function markStateUpdateScheduled(fiber, lane) {
          null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markStateUpdateScheduled && injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
        }
        function clz32Fallback(x) {
          x >>>= 0;
          return 0 === x ? 32 : 31 - (log(x) / LN2 | 0) | 0;
        }
        function getLabelForLane(lane) {
          if (lane & 1) return "SyncHydrationLane";
          if (lane & 2) return "Sync";
          if (lane & 4) return "InputContinuousHydration";
          if (lane & 8) return "InputContinuous";
          if (lane & 16) return "DefaultHydration";
          if (lane & 32) return "Default";
          if (lane & 128) return "TransitionHydration";
          if (lane & 4194048) return "Transition";
          if (lane & 62914560) return "Retry";
          if (lane & 67108864) return "SelectiveHydration";
          if (lane & 134217728) return "IdleHydration";
          if (lane & 268435456) return "Idle";
          if (lane & 536870912) return "Offscreen";
          if (lane & 1073741824) return "Deferred";
        }
        function getHighestPriorityLanes(lanes) {
          var pendingSyncLanes = lanes & 42;
          if (0 !== pendingSyncLanes) return pendingSyncLanes;
          switch (lanes & -lanes) {
            case 1:
              return 1;
            case 2:
              return 2;
            case 4:
              return 4;
            case 8:
              return 8;
            case 16:
              return 16;
            case 32:
              return 32;
            case 64:
              return 64;
            case 128:
              return 128;
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
              return lanes & 4194048;
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
              return lanes & 62914560;
            case 67108864:
              return 67108864;
            case 134217728:
              return 134217728;
            case 268435456:
              return 268435456;
            case 536870912:
              return 536870912;
            case 1073741824:
              return 0;
            default:
              return console.error(
                "Should have found matching lanes. This is a bug in React."
              ), lanes;
          }
        }
        function getNextLanes(root3, wipLanes, rootHasPendingCommit) {
          var pendingLanes = root3.pendingLanes;
          if (0 === pendingLanes) return 0;
          var nextLanes = 0, suspendedLanes = root3.suspendedLanes, pingedLanes = root3.pingedLanes;
          root3 = root3.warmLanes;
          var nonIdlePendingLanes = pendingLanes & 134217727;
          0 !== nonIdlePendingLanes ? (pendingLanes = nonIdlePendingLanes & ~suspendedLanes, 0 !== pendingLanes ? nextLanes = getHighestPriorityLanes(pendingLanes) : (pingedLanes &= nonIdlePendingLanes, 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : rootHasPendingCommit || (rootHasPendingCommit = nonIdlePendingLanes & ~root3, 0 !== rootHasPendingCommit && (nextLanes = getHighestPriorityLanes(rootHasPendingCommit))))) : (nonIdlePendingLanes = pendingLanes & ~suspendedLanes, 0 !== nonIdlePendingLanes ? nextLanes = getHighestPriorityLanes(nonIdlePendingLanes) : 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : rootHasPendingCommit || (rootHasPendingCommit = pendingLanes & ~root3, 0 !== rootHasPendingCommit && (nextLanes = getHighestPriorityLanes(rootHasPendingCommit))));
          return 0 === nextLanes ? 0 : 0 !== wipLanes && wipLanes !== nextLanes && 0 === (wipLanes & suspendedLanes) && (suspendedLanes = nextLanes & -nextLanes, rootHasPendingCommit = wipLanes & -wipLanes, suspendedLanes >= rootHasPendingCommit || 32 === suspendedLanes && 0 !== (rootHasPendingCommit & 4194048)) ? wipLanes : nextLanes;
        }
        function checkIfRootIsPrerendering(root3, renderLanes2) {
          return 0 === (root3.pendingLanes & ~(root3.suspendedLanes & ~root3.pingedLanes) & renderLanes2);
        }
        function computeExpirationTime(lane, currentTime) {
          switch (lane) {
            case 1:
            case 2:
            case 4:
            case 8:
            case 64:
              return currentTime + 250;
            case 16:
            case 32:
            case 128:
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
              return currentTime + 5e3;
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
              return -1;
            case 67108864:
            case 134217728:
            case 268435456:
            case 536870912:
            case 1073741824:
              return -1;
            default:
              return console.error(
                "Should have found matching lanes. This is a bug in React."
              ), -1;
          }
        }
        function claimNextTransitionLane() {
          var lane = nextTransitionLane;
          nextTransitionLane <<= 1;
          0 === (nextTransitionLane & 4194048) && (nextTransitionLane = 256);
          return lane;
        }
        function claimNextRetryLane() {
          var lane = nextRetryLane;
          nextRetryLane <<= 1;
          0 === (nextRetryLane & 62914560) && (nextRetryLane = 4194304);
          return lane;
        }
        function createLaneMap(initial) {
          for (var laneMap = [], i = 0; 31 > i; i++) laneMap.push(initial);
          return laneMap;
        }
        function markRootUpdated$1(root3, updateLane) {
          root3.pendingLanes |= updateLane;
          268435456 !== updateLane && (root3.suspendedLanes = 0, root3.pingedLanes = 0, root3.warmLanes = 0);
        }
        function markRootFinished(root3, finishedLanes, remainingLanes, spawnedLane, updatedLanes, suspendedRetryLanes) {
          var previouslyPendingLanes = root3.pendingLanes;
          root3.pendingLanes = remainingLanes;
          root3.suspendedLanes = 0;
          root3.pingedLanes = 0;
          root3.warmLanes = 0;
          root3.expiredLanes &= remainingLanes;
          root3.entangledLanes &= remainingLanes;
          root3.errorRecoveryDisabledLanes &= remainingLanes;
          root3.shellSuspendCounter = 0;
          var entanglements = root3.entanglements, expirationTimes = root3.expirationTimes, hiddenUpdates = root3.hiddenUpdates;
          for (remainingLanes = previouslyPendingLanes & ~remainingLanes; 0 < remainingLanes; ) {
            var index = 31 - clz32(remainingLanes), lane = 1 << index;
            entanglements[index] = 0;
            expirationTimes[index] = -1;
            var hiddenUpdatesForLane = hiddenUpdates[index];
            if (null !== hiddenUpdatesForLane)
              for (hiddenUpdates[index] = null, index = 0; index < hiddenUpdatesForLane.length; index++) {
                var update = hiddenUpdatesForLane[index];
                null !== update && (update.lane &= -536870913);
              }
            remainingLanes &= ~lane;
          }
          0 !== spawnedLane && markSpawnedDeferredLane(root3, spawnedLane, 0);
          0 !== suspendedRetryLanes && 0 === updatedLanes && 0 !== root3.tag && (root3.suspendedLanes |= suspendedRetryLanes & ~(previouslyPendingLanes & ~finishedLanes));
        }
        function markSpawnedDeferredLane(root3, spawnedLane, entangledLanes) {
          root3.pendingLanes |= spawnedLane;
          root3.suspendedLanes &= ~spawnedLane;
          var spawnedLaneIndex = 31 - clz32(spawnedLane);
          root3.entangledLanes |= spawnedLane;
          root3.entanglements[spawnedLaneIndex] = root3.entanglements[spawnedLaneIndex] | 1073741824 | entangledLanes & 4194090;
        }
        function markRootEntangled(root3, entangledLanes) {
          var rootEntangledLanes = root3.entangledLanes |= entangledLanes;
          for (root3 = root3.entanglements; rootEntangledLanes; ) {
            var index = 31 - clz32(rootEntangledLanes), lane = 1 << index;
            lane & entangledLanes | root3[index] & entangledLanes && (root3[index] |= entangledLanes);
            rootEntangledLanes &= ~lane;
          }
        }
        function getBumpedLaneForHydrationByLane(lane) {
          switch (lane) {
            case 2:
              lane = 1;
              break;
            case 8:
              lane = 4;
              break;
            case 32:
              lane = 16;
              break;
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
              lane = 128;
              break;
            case 268435456:
              lane = 134217728;
              break;
            default:
              lane = 0;
          }
          return lane;
        }
        function addFiberToLanesMap(root3, fiber, lanes) {
          if (isDevToolsPresent)
            for (root3 = root3.pendingUpdatersLaneMap; 0 < lanes; ) {
              var index = 31 - clz32(lanes), lane = 1 << index;
              root3[index].add(fiber);
              lanes &= ~lane;
            }
        }
        function movePendingFibersToMemoized(root3, lanes) {
          if (isDevToolsPresent)
            for (var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap, memoizedUpdaters = root3.memoizedUpdaters; 0 < lanes; ) {
              var index = 31 - clz32(lanes);
              root3 = 1 << index;
              index = pendingUpdatersLaneMap[index];
              0 < index.size && (index.forEach(function(fiber) {
                var alternate = fiber.alternate;
                null !== alternate && memoizedUpdaters.has(alternate) || memoizedUpdaters.add(fiber);
              }), index.clear());
              lanes &= ~root3;
            }
        }
        function lanesToEventPriority(lanes) {
          lanes &= -lanes;
          return 0 !== DiscreteEventPriority && DiscreteEventPriority < lanes ? 0 !== ContinuousEventPriority && ContinuousEventPriority < lanes ? 0 !== (lanes & 134217727) ? DefaultEventPriority : IdleEventPriority : ContinuousEventPriority : DiscreteEventPriority;
        }
        function resolveUpdatePriority() {
          var updatePriority = ReactDOMSharedInternals.p;
          if (0 !== updatePriority) return updatePriority;
          updatePriority = window.event;
          return void 0 === updatePriority ? DefaultEventPriority : getEventPriority(updatePriority.type);
        }
        function runWithPriority(priority, fn) {
          var previousPriority = ReactDOMSharedInternals.p;
          try {
            return ReactDOMSharedInternals.p = priority, fn();
          } finally {
            ReactDOMSharedInternals.p = previousPriority;
          }
        }
        function detachDeletedInstance(node) {
          delete node[internalInstanceKey];
          delete node[internalPropsKey];
          delete node[internalEventHandlersKey];
          delete node[internalEventHandlerListenersKey];
          delete node[internalEventHandlesSetKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) return targetInst;
          for (var parentNode = targetNode.parentNode; parentNode; ) {
            if (targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey]) {
              parentNode = targetInst.alternate;
              if (null !== targetInst.child || null !== parentNode && null !== parentNode.child)
                for (targetNode = getParentSuspenseInstance(targetNode); null !== targetNode; ) {
                  if (parentNode = targetNode[internalInstanceKey])
                    return parentNode;
                  targetNode = getParentSuspenseInstance(targetNode);
                }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode(node) {
          if (node = node[internalInstanceKey] || node[internalContainerInstanceKey]) {
            var tag2 = node.tag;
            if (5 === tag2 || 6 === tag2 || 13 === tag2 || 26 === tag2 || 27 === tag2 || 3 === tag2)
              return node;
          }
          return null;
        }
        function getNodeFromInstance(inst) {
          var tag2 = inst.tag;
          if (5 === tag2 || 26 === tag2 || 27 === tag2 || 6 === tag2)
            return inst.stateNode;
          throw Error("getNodeFromInstance: Invalid argument.");
        }
        function getResourcesFromRoot(root3) {
          var resources = root3[internalRootNodeResourcesKey];
          resources || (resources = root3[internalRootNodeResourcesKey] = { hoistableStyles: /* @__PURE__ */ new Map(), hoistableScripts: /* @__PURE__ */ new Map() });
          return resources;
        }
        function markNodeAsHoistable(node) {
          node[internalHoistableMarker] = true;
        }
        function registerTwoPhaseEvent(registrationName, dependencies) {
          registerDirectEvent(registrationName, dependencies);
          registerDirectEvent(registrationName + "Capture", dependencies);
        }
        function registerDirectEvent(registrationName, dependencies) {
          registrationNameDependencies[registrationName] && console.error(
            "EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.",
            registrationName
          );
          registrationNameDependencies[registrationName] = dependencies;
          var lowerCasedName = registrationName.toLowerCase();
          possibleRegistrationNames[lowerCasedName] = registrationName;
          "onDoubleClick" === registrationName && (possibleRegistrationNames.ondblclick = registrationName);
          for (registrationName = 0; registrationName < dependencies.length; registrationName++)
            allNativeEvents.add(dependencies[registrationName]);
        }
        function checkControlledValueProps(tagName, props) {
          hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || null == props.value || ("select" === tagName ? console.error(
            "You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set `onChange`."
          ) : console.error(
            "You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."
          ));
          props.onChange || props.readOnly || props.disabled || null == props.checked || console.error(
            "You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`."
          );
        }
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName))
            return true;
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName))
            return false;
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName))
            return validatedAttributeNameCache[attributeName] = true;
          illegalAttributeNameCache[attributeName] = true;
          console.error("Invalid attribute name: `%s`", attributeName);
          return false;
        }
        function getValueForAttributeOnCustomComponent(node, name2, expected) {
          if (isAttributeNameSafe(name2)) {
            if (!node.hasAttribute(name2)) {
              switch (typeof expected) {
                case "symbol":
                case "object":
                  return expected;
                case "function":
                  return expected;
                case "boolean":
                  if (false === expected) return expected;
              }
              return void 0 === expected ? void 0 : null;
            }
            node = node.getAttribute(name2);
            if ("" === node && true === expected) return true;
            checkAttributeStringCoercion(expected, name2);
            return node === "" + expected ? expected : node;
          }
        }
        function setValueForAttribute(node, name2, value) {
          if (isAttributeNameSafe(name2))
            if (null === value) node.removeAttribute(name2);
            else {
              switch (typeof value) {
                case "undefined":
                case "function":
                case "symbol":
                  node.removeAttribute(name2);
                  return;
                case "boolean":
                  var prefix2 = name2.toLowerCase().slice(0, 5);
                  if ("data-" !== prefix2 && "aria-" !== prefix2) {
                    node.removeAttribute(name2);
                    return;
                  }
              }
              checkAttributeStringCoercion(value, name2);
              node.setAttribute(name2, "" + value);
            }
        }
        function setValueForKnownAttribute(node, name2, value) {
          if (null === value) node.removeAttribute(name2);
          else {
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
              case "boolean":
                node.removeAttribute(name2);
                return;
            }
            checkAttributeStringCoercion(value, name2);
            node.setAttribute(name2, "" + value);
          }
        }
        function setValueForNamespacedAttribute(node, namespace, name2, value) {
          if (null === value) node.removeAttribute(name2);
          else {
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
              case "boolean":
                node.removeAttribute(name2);
                return;
            }
            checkAttributeStringCoercion(value, name2);
            node.setAttributeNS(namespace, name2, "" + value);
          }
        }
        function disabledLog() {
        }
        function disableLogs() {
          if (0 === disabledDepth) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
        function reenableLogs() {
          disabledDepth--;
          if (0 === disabledDepth) {
            var props = { configurable: true, enumerable: true, writable: true };
            Object.defineProperties(console, {
              log: assign({}, props, { value: prevLog }),
              info: assign({}, props, { value: prevInfo }),
              warn: assign({}, props, { value: prevWarn }),
              error: assign({}, props, { value: prevError }),
              group: assign({}, props, { value: prevGroup }),
              groupCollapsed: assign({}, props, { value: prevGroupCollapsed }),
              groupEnd: assign({}, props, { value: prevGroupEnd })
            });
          }
          0 > disabledDepth && console.error(
            "disabledDepth fell below zero. This is a bug in React. Please file an issue."
          );
        }
        function describeBuiltInComponentFrame(name2) {
          if (void 0 === prefix)
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix = match && match[1] || "";
              suffix = -1 < x.stack.indexOf("\n    at") ? " (<anonymous>)" : -1 < x.stack.indexOf("@") ? "@unknown:0:0" : "";
            }
          return "\n" + prefix + name2 + suffix;
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) return "";
          var frame = componentFrameCache.get(fn);
          if (void 0 !== frame) return frame;
          reentry = true;
          frame = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher2 = null;
          previousDispatcher2 = ReactSharedInternals.H;
          ReactSharedInternals.H = null;
          disableLogs();
          try {
            var RunInRootFrame = {
              DetermineComponentFrameRoot: function() {
                try {
                  if (construct) {
                    var Fake = function() {
                      throw Error();
                    };
                    Object.defineProperty(Fake.prototype, "props", {
                      set: function() {
                        throw Error();
                      }
                    });
                    if ("object" === typeof Reflect && Reflect.construct) {
                      try {
                        Reflect.construct(Fake, []);
                      } catch (x) {
                        var control = x;
                      }
                      Reflect.construct(fn, [], Fake);
                    } else {
                      try {
                        Fake.call();
                      } catch (x$0) {
                        control = x$0;
                      }
                      fn.call(Fake.prototype);
                    }
                  } else {
                    try {
                      throw Error();
                    } catch (x$1) {
                      control = x$1;
                    }
                    (Fake = fn()) && "function" === typeof Fake.catch && Fake.catch(function() {
                    });
                  }
                } catch (sample) {
                  if (sample && control && "string" === typeof sample.stack)
                    return [sample.stack, control.stack];
                }
                return [null, null];
              }
            };
            RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
            var namePropDescriptor = Object.getOwnPropertyDescriptor(
              RunInRootFrame.DetermineComponentFrameRoot,
              "name"
            );
            namePropDescriptor && namePropDescriptor.configurable && Object.defineProperty(
              RunInRootFrame.DetermineComponentFrameRoot,
              "name",
              { value: "DetermineComponentFrameRoot" }
            );
            var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
            if (sampleStack && controlStack) {
              var sampleLines = sampleStack.split("\n"), controlLines = controlStack.split("\n");
              for (_RunInRootFrame$Deter = namePropDescriptor = 0; namePropDescriptor < sampleLines.length && !sampleLines[namePropDescriptor].includes(
                "DetermineComponentFrameRoot"
              ); )
                namePropDescriptor++;
              for (; _RunInRootFrame$Deter < controlLines.length && !controlLines[_RunInRootFrame$Deter].includes(
                "DetermineComponentFrameRoot"
              ); )
                _RunInRootFrame$Deter++;
              if (namePropDescriptor === sampleLines.length || _RunInRootFrame$Deter === controlLines.length)
                for (namePropDescriptor = sampleLines.length - 1, _RunInRootFrame$Deter = controlLines.length - 1; 1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter && sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]; )
                  _RunInRootFrame$Deter--;
              for (; 1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter; namePropDescriptor--, _RunInRootFrame$Deter--)
                if (sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]) {
                  if (1 !== namePropDescriptor || 1 !== _RunInRootFrame$Deter) {
                    do
                      if (namePropDescriptor--, _RunInRootFrame$Deter--, 0 > _RunInRootFrame$Deter || sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]) {
                        var _frame = "\n" + sampleLines[namePropDescriptor].replace(
                          " at new ",
                          " at "
                        );
                        fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName));
                        "function" === typeof fn && componentFrameCache.set(fn, _frame);
                        return _frame;
                      }
                    while (1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter);
                  }
                  break;
                }
            }
          } finally {
            reentry = false, ReactSharedInternals.H = previousDispatcher2, reenableLogs(), Error.prepareStackTrace = frame;
          }
          sampleLines = (sampleLines = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(sampleLines) : "";
          "function" === typeof fn && componentFrameCache.set(fn, sampleLines);
          return sampleLines;
        }
        function formatOwnerStack(error) {
          var prevPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          error = error.stack;
          Error.prepareStackTrace = prevPrepareStackTrace;
          error.startsWith("Error: react-stack-top-frame\n") && (error = error.slice(29));
          prevPrepareStackTrace = error.indexOf("\n");
          -1 !== prevPrepareStackTrace && (error = error.slice(prevPrepareStackTrace + 1));
          prevPrepareStackTrace = error.indexOf("react-stack-bottom-frame");
          -1 !== prevPrepareStackTrace && (prevPrepareStackTrace = error.lastIndexOf(
            "\n",
            prevPrepareStackTrace
          ));
          if (-1 !== prevPrepareStackTrace)
            error = error.slice(0, prevPrepareStackTrace);
          else return "";
          return error;
        }
        function describeFiber(fiber) {
          switch (fiber.tag) {
            case 26:
            case 27:
            case 5:
              return describeBuiltInComponentFrame(fiber.type);
            case 16:
              return describeBuiltInComponentFrame("Lazy");
            case 13:
              return describeBuiltInComponentFrame("Suspense");
            case 19:
              return describeBuiltInComponentFrame("SuspenseList");
            case 0:
            case 15:
              return describeNativeComponentFrame(fiber.type, false);
            case 11:
              return describeNativeComponentFrame(fiber.type.render, false);
            case 1:
              return describeNativeComponentFrame(fiber.type, true);
            case 31:
              return describeBuiltInComponentFrame("Activity");
            default:
              return "";
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          try {
            var info = "";
            do {
              info += describeFiber(workInProgress2);
              var debugInfo = workInProgress2._debugInfo;
              if (debugInfo)
                for (var i = debugInfo.length - 1; 0 <= i; i--) {
                  var entry = debugInfo[i];
                  if ("string" === typeof entry.name) {
                    var JSCompiler_temp_const = info, env = entry.env;
                    var JSCompiler_inline_result = describeBuiltInComponentFrame(
                      entry.name + (env ? " [" + env + "]" : "")
                    );
                    info = JSCompiler_temp_const + JSCompiler_inline_result;
                  }
                }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2);
            return info;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        function describeFunctionComponentFrameWithoutLineNumber(fn) {
          return (fn = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(fn) : "";
        }
        function getCurrentFiberOwnerNameInDevOrNull() {
          if (null === current) return null;
          var owner = current._debugOwner;
          return null != owner ? getComponentNameFromOwner(owner) : null;
        }
        function getCurrentFiberStackInDev() {
          if (null === current) return "";
          var workInProgress2 = current;
          try {
            var info = "";
            6 === workInProgress2.tag && (workInProgress2 = workInProgress2.return);
            switch (workInProgress2.tag) {
              case 26:
              case 27:
              case 5:
                info += describeBuiltInComponentFrame(workInProgress2.type);
                break;
              case 13:
                info += describeBuiltInComponentFrame("Suspense");
                break;
              case 19:
                info += describeBuiltInComponentFrame("SuspenseList");
                break;
              case 31:
                info += describeBuiltInComponentFrame("Activity");
                break;
              case 30:
              case 0:
              case 15:
              case 1:
                workInProgress2._debugOwner || "" !== info || (info += describeFunctionComponentFrameWithoutLineNumber(
                  workInProgress2.type
                ));
                break;
              case 11:
                workInProgress2._debugOwner || "" !== info || (info += describeFunctionComponentFrameWithoutLineNumber(
                  workInProgress2.type.render
                ));
            }
            for (; workInProgress2; )
              if ("number" === typeof workInProgress2.tag) {
                var fiber = workInProgress2;
                workInProgress2 = fiber._debugOwner;
                var debugStack = fiber._debugStack;
                workInProgress2 && debugStack && ("string" !== typeof debugStack && (fiber._debugStack = debugStack = formatOwnerStack(debugStack)), "" !== debugStack && (info += "\n" + debugStack));
              } else if (null != workInProgress2.debugStack) {
                var ownerStack = workInProgress2.debugStack;
                (workInProgress2 = workInProgress2.owner) && ownerStack && (info += "\n" + formatOwnerStack(ownerStack));
              } else break;
            var JSCompiler_inline_result = info;
          } catch (x) {
            JSCompiler_inline_result = "\nError generating stack: " + x.message + "\n" + x.stack;
          }
          return JSCompiler_inline_result;
        }
        function runWithFiberInDEV(fiber, callback, arg0, arg1, arg2, arg3, arg4) {
          var previousFiber = current;
          setCurrentFiber(fiber);
          try {
            return null !== fiber && fiber._debugTask ? fiber._debugTask.run(
              callback.bind(null, arg0, arg1, arg2, arg3, arg4)
            ) : callback(arg0, arg1, arg2, arg3, arg4);
          } finally {
            setCurrentFiber(previousFiber);
          }
          throw Error(
            "runWithFiberInDEV should never be called in production. This is a bug in React."
          );
        }
        function setCurrentFiber(fiber) {
          ReactSharedInternals.getCurrentStack = null === fiber ? null : getCurrentFiberStackInDev;
          isRendering = false;
          current = fiber;
        }
        function getToStringValue(value) {
          switch (typeof value) {
            case "bigint":
            case "boolean":
            case "number":
            case "string":
            case "undefined":
              return value;
            case "object":
              return checkFormFieldValueStringCoercion(value), value;
            default:
              return "";
          }
        }
        function isCheckable(elem) {
          var type = elem.type;
          return (elem = elem.nodeName) && "input" === elem.toLowerCase() && ("checkbox" === type || "radio" === type);
        }
        function trackValueOnNode(node) {
          var valueField = isCheckable(node) ? "checked" : "value", descriptor = Object.getOwnPropertyDescriptor(
            node.constructor.prototype,
            valueField
          );
          checkFormFieldValueStringCoercion(node[valueField]);
          var currentValue = "" + node[valueField];
          if (!node.hasOwnProperty(valueField) && "undefined" !== typeof descriptor && "function" === typeof descriptor.get && "function" === typeof descriptor.set) {
            var get = descriptor.get, set = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get.call(this);
              },
              set: function(value) {
                checkFormFieldValueStringCoercion(value);
                currentValue = "" + value;
                set.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            return {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                checkFormFieldValueStringCoercion(value);
                currentValue = "" + value;
              },
              stopTracking: function() {
                node._valueTracker = null;
                delete node[valueField];
              }
            };
          }
        }
        function track(node) {
          node._valueTracker || (node._valueTracker = trackValueOnNode(node));
        }
        function updateValueIfChanged(node) {
          if (!node) return false;
          var tracker = node._valueTracker;
          if (!tracker) return true;
          var lastValue = tracker.getValue();
          var value = "";
          node && (value = isCheckable(node) ? node.checked ? "true" : "false" : node.value);
          node = value;
          return node !== lastValue ? (tracker.setValue(node), true) : false;
        }
        function getActiveElement(doc) {
          doc = doc || ("undefined" !== typeof document ? document : void 0);
          if ("undefined" === typeof doc) return null;
          try {
            return doc.activeElement || doc.body;
          } catch (e) {
            return doc.body;
          }
        }
        function escapeSelectorAttributeValueInsideDoubleQuotes(value) {
          return value.replace(
            escapeSelectorAttributeValueInsideDoubleQuotesRegex,
            function(ch) {
              return "\\" + ch.charCodeAt(0).toString(16) + " ";
            }
          );
        }
        function validateInputProps(element, props) {
          void 0 === props.checked || void 0 === props.defaultChecked || didWarnCheckedDefaultChecked || (console.error(
            "%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components",
            getCurrentFiberOwnerNameInDevOrNull() || "A component",
            props.type
          ), didWarnCheckedDefaultChecked = true);
          void 0 === props.value || void 0 === props.defaultValue || didWarnValueDefaultValue$1 || (console.error(
            "%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components",
            getCurrentFiberOwnerNameInDevOrNull() || "A component",
            props.type
          ), didWarnValueDefaultValue$1 = true);
        }
        function updateInput(element, value, defaultValue, lastDefaultValue, checked, defaultChecked, type, name2) {
          element.name = "";
          null != type && "function" !== typeof type && "symbol" !== typeof type && "boolean" !== typeof type ? (checkAttributeStringCoercion(type, "type"), element.type = type) : element.removeAttribute("type");
          if (null != value)
            if ("number" === type) {
              if (0 === value && "" === element.value || element.value != value)
                element.value = "" + getToStringValue(value);
            } else
              element.value !== "" + getToStringValue(value) && (element.value = "" + getToStringValue(value));
          else
            "submit" !== type && "reset" !== type || element.removeAttribute("value");
          null != value ? setDefaultValue(element, type, getToStringValue(value)) : null != defaultValue ? setDefaultValue(element, type, getToStringValue(defaultValue)) : null != lastDefaultValue && element.removeAttribute("value");
          null == checked && null != defaultChecked && (element.defaultChecked = !!defaultChecked);
          null != checked && (element.checked = checked && "function" !== typeof checked && "symbol" !== typeof checked);
          null != name2 && "function" !== typeof name2 && "symbol" !== typeof name2 && "boolean" !== typeof name2 ? (checkAttributeStringCoercion(name2, "name"), element.name = "" + getToStringValue(name2)) : element.removeAttribute("name");
        }
        function initInput(element, value, defaultValue, checked, defaultChecked, type, name2, isHydrating2) {
          null != type && "function" !== typeof type && "symbol" !== typeof type && "boolean" !== typeof type && (checkAttributeStringCoercion(type, "type"), element.type = type);
          if (null != value || null != defaultValue) {
            if (!("submit" !== type && "reset" !== type || void 0 !== value && null !== value))
              return;
            defaultValue = null != defaultValue ? "" + getToStringValue(defaultValue) : "";
            value = null != value ? "" + getToStringValue(value) : defaultValue;
            isHydrating2 || value === element.value || (element.value = value);
            element.defaultValue = value;
          }
          checked = null != checked ? checked : defaultChecked;
          checked = "function" !== typeof checked && "symbol" !== typeof checked && !!checked;
          element.checked = isHydrating2 ? element.checked : !!checked;
          element.defaultChecked = !!checked;
          null != name2 && "function" !== typeof name2 && "symbol" !== typeof name2 && "boolean" !== typeof name2 && (checkAttributeStringCoercion(name2, "name"), element.name = name2);
        }
        function setDefaultValue(node, type, value) {
          "number" === type && getActiveElement(node.ownerDocument) === node || node.defaultValue === "" + value || (node.defaultValue = "" + value);
        }
        function validateOptionProps(element, props) {
          null == props.value && ("object" === typeof props.children && null !== props.children ? React2.Children.forEach(props.children, function(child) {
            null == child || "string" === typeof child || "number" === typeof child || "bigint" === typeof child || didWarnInvalidChild || (didWarnInvalidChild = true, console.error(
              "Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>."
            ));
          }) : null == props.dangerouslySetInnerHTML || didWarnInvalidInnerHTML || (didWarnInvalidInnerHTML = true, console.error(
            "Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected."
          )));
          null == props.selected || didWarnSelectedSetOnOption || (console.error(
            "Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."
          ), didWarnSelectedSetOnOption = true);
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          return ownerName ? "\n\nCheck the render method of `" + ownerName + "`." : "";
        }
        function updateOptions(node, multiple, propValue, setDefaultSelected) {
          node = node.options;
          if (multiple) {
            multiple = {};
            for (var i = 0; i < propValue.length; i++)
              multiple["$" + propValue[i]] = true;
            for (propValue = 0; propValue < node.length; propValue++)
              i = multiple.hasOwnProperty("$" + node[propValue].value), node[propValue].selected !== i && (node[propValue].selected = i), i && setDefaultSelected && (node[propValue].defaultSelected = true);
          } else {
            propValue = "" + getToStringValue(propValue);
            multiple = null;
            for (i = 0; i < node.length; i++) {
              if (node[i].value === propValue) {
                node[i].selected = true;
                setDefaultSelected && (node[i].defaultSelected = true);
                return;
              }
              null !== multiple || node[i].disabled || (multiple = node[i]);
            }
            null !== multiple && (multiple.selected = true);
          }
        }
        function validateSelectProps(element, props) {
          for (element = 0; element < valuePropNames.length; element++) {
            var propName = valuePropNames[element];
            if (null != props[propName]) {
              var propNameIsArray = isArrayImpl(props[propName]);
              props.multiple && !propNameIsArray ? console.error(
                "The `%s` prop supplied to <select> must be an array if `multiple` is true.%s",
                propName,
                getDeclarationErrorAddendum()
              ) : !props.multiple && propNameIsArray && console.error(
                "The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s",
                propName,
                getDeclarationErrorAddendum()
              );
            }
          }
          void 0 === props.value || void 0 === props.defaultValue || didWarnValueDefaultValue || (console.error(
            "Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://react.dev/link/controlled-components"
          ), didWarnValueDefaultValue = true);
        }
        function validateTextareaProps(element, props) {
          void 0 === props.value || void 0 === props.defaultValue || didWarnValDefaultVal || (console.error(
            "%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://react.dev/link/controlled-components",
            getCurrentFiberOwnerNameInDevOrNull() || "A component"
          ), didWarnValDefaultVal = true);
          null != props.children && null == props.value && console.error(
            "Use the `defaultValue` or `value` props instead of setting children on <textarea>."
          );
        }
        function updateTextarea(element, value, defaultValue) {
          if (null != value && (value = "" + getToStringValue(value), value !== element.value && (element.value = value), null == defaultValue)) {
            element.defaultValue !== value && (element.defaultValue = value);
            return;
          }
          element.defaultValue = null != defaultValue ? "" + getToStringValue(defaultValue) : "";
        }
        function initTextarea(element, value, defaultValue, children) {
          if (null == value) {
            if (null != children) {
              if (null != defaultValue)
                throw Error(
                  "If you supply `defaultValue` on a <textarea>, do not pass children."
                );
              if (isArrayImpl(children)) {
                if (1 < children.length)
                  throw Error("<textarea> can only have at most one child.");
                children = children[0];
              }
              defaultValue = children;
            }
            null == defaultValue && (defaultValue = "");
            value = defaultValue;
          }
          defaultValue = getToStringValue(value);
          element.defaultValue = defaultValue;
          children = element.textContent;
          children === defaultValue && "" !== children && null !== children && (element.value = children);
        }
        function findNotableNode(node, indent) {
          return void 0 === node.serverProps && 0 === node.serverTail.length && 1 === node.children.length && 3 < node.distanceFromLeaf && node.distanceFromLeaf > 15 - indent ? findNotableNode(node.children[0], indent) : node;
        }
        function indentation(indent) {
          return "  " + "  ".repeat(indent);
        }
        function added(indent) {
          return "+ " + "  ".repeat(indent);
        }
        function removed(indent) {
          return "- " + "  ".repeat(indent);
        }
        function describeFiberType(fiber) {
          switch (fiber.tag) {
            case 26:
            case 27:
            case 5:
              return fiber.type;
            case 16:
              return "Lazy";
            case 13:
              return "Suspense";
            case 19:
              return "SuspenseList";
            case 0:
            case 15:
              return fiber = fiber.type, fiber.displayName || fiber.name || null;
            case 11:
              return fiber = fiber.type.render, fiber.displayName || fiber.name || null;
            case 1:
              return fiber = fiber.type, fiber.displayName || fiber.name || null;
            default:
              return null;
          }
        }
        function describeTextNode(content, maxLength) {
          return needsEscaping.test(content) ? (content = JSON.stringify(content), content.length > maxLength - 2 ? 8 > maxLength ? '{"..."}' : "{" + content.slice(0, maxLength - 7) + '..."}' : "{" + content + "}") : content.length > maxLength ? 5 > maxLength ? '{"..."}' : content.slice(0, maxLength - 3) + "..." : content;
        }
        function describeTextDiff(clientText, serverProps, indent) {
          var maxLength = 120 - 2 * indent;
          if (null === serverProps)
            return added(indent) + describeTextNode(clientText, maxLength) + "\n";
          if ("string" === typeof serverProps) {
            for (var firstDiff = 0; firstDiff < serverProps.length && firstDiff < clientText.length && serverProps.charCodeAt(firstDiff) === clientText.charCodeAt(firstDiff); firstDiff++) ;
            firstDiff > maxLength - 8 && 10 < firstDiff && (clientText = "..." + clientText.slice(firstDiff - 8), serverProps = "..." + serverProps.slice(firstDiff - 8));
            return added(indent) + describeTextNode(clientText, maxLength) + "\n" + removed(indent) + describeTextNode(serverProps, maxLength) + "\n";
          }
          return indentation(indent) + describeTextNode(clientText, maxLength) + "\n";
        }
        function objectName(object) {
          return Object.prototype.toString.call(object).replace(/^\[object (.*)\]$/, function(m, p0) {
            return p0;
          });
        }
        function describeValue(value, maxLength) {
          switch (typeof value) {
            case "string":
              return value = JSON.stringify(value), value.length > maxLength ? 5 > maxLength ? '"..."' : value.slice(0, maxLength - 4) + '..."' : value;
            case "object":
              if (null === value) return "null";
              if (isArrayImpl(value)) return "[...]";
              if (value.$$typeof === REACT_ELEMENT_TYPE)
                return (maxLength = getComponentNameFromType(value.type)) ? "<" + maxLength + ">" : "<...>";
              var name2 = objectName(value);
              if ("Object" === name2) {
                name2 = "";
                maxLength -= 2;
                for (var propName in value)
                  if (value.hasOwnProperty(propName)) {
                    var jsonPropName = JSON.stringify(propName);
                    jsonPropName !== '"' + propName + '"' && (propName = jsonPropName);
                    maxLength -= propName.length - 2;
                    jsonPropName = describeValue(
                      value[propName],
                      15 > maxLength ? maxLength : 15
                    );
                    maxLength -= jsonPropName.length;
                    if (0 > maxLength) {
                      name2 += "" === name2 ? "..." : ", ...";
                      break;
                    }
                    name2 += ("" === name2 ? "" : ",") + propName + ":" + jsonPropName;
                  }
                return "{" + name2 + "}";
              }
              return name2;
            case "function":
              return (maxLength = value.displayName || value.name) ? "function " + maxLength : "function";
            default:
              return String(value);
          }
        }
        function describePropValue(value, maxLength) {
          return "string" !== typeof value || needsEscaping.test(value) ? "{" + describeValue(value, maxLength - 2) + "}" : value.length > maxLength - 2 ? 5 > maxLength ? '"..."' : '"' + value.slice(0, maxLength - 5) + '..."' : '"' + value + '"';
        }
        function describeExpandedElement(type, props, rowPrefix) {
          var remainingRowLength = 120 - rowPrefix.length - type.length, properties = [], propName;
          for (propName in props)
            if (props.hasOwnProperty(propName) && "children" !== propName) {
              var propValue = describePropValue(
                props[propName],
                120 - rowPrefix.length - propName.length - 1
              );
              remainingRowLength -= propName.length + propValue.length + 2;
              properties.push(propName + "=" + propValue);
            }
          return 0 === properties.length ? rowPrefix + "<" + type + ">\n" : 0 < remainingRowLength ? rowPrefix + "<" + type + " " + properties.join(" ") + ">\n" : rowPrefix + "<" + type + "\n" + rowPrefix + "  " + properties.join("\n" + rowPrefix + "  ") + "\n" + rowPrefix + ">\n";
        }
        function describePropertiesDiff(clientObject, serverObject, indent) {
          var properties = "", remainingServerProperties = assign({}, serverObject), propName;
          for (propName in clientObject)
            if (clientObject.hasOwnProperty(propName)) {
              delete remainingServerProperties[propName];
              var maxLength = 120 - 2 * indent - propName.length - 2, clientPropValue = describeValue(clientObject[propName], maxLength);
              serverObject.hasOwnProperty(propName) ? (maxLength = describeValue(serverObject[propName], maxLength), properties += added(indent) + propName + ": " + clientPropValue + "\n", properties += removed(indent) + propName + ": " + maxLength + "\n") : properties += added(indent) + propName + ": " + clientPropValue + "\n";
            }
          for (var _propName in remainingServerProperties)
            remainingServerProperties.hasOwnProperty(_propName) && (clientObject = describeValue(
              remainingServerProperties[_propName],
              120 - 2 * indent - _propName.length - 2
            ), properties += removed(indent) + _propName + ": " + clientObject + "\n");
          return properties;
        }
        function describeElementDiff(type, clientProps, serverProps, indent) {
          var content = "", serverPropNames = /* @__PURE__ */ new Map();
          for (propName$jscomp$0 in serverProps)
            serverProps.hasOwnProperty(propName$jscomp$0) && serverPropNames.set(
              propName$jscomp$0.toLowerCase(),
              propName$jscomp$0
            );
          if (1 === serverPropNames.size && serverPropNames.has("children"))
            content += describeExpandedElement(
              type,
              clientProps,
              indentation(indent)
            );
          else {
            for (var _propName2 in clientProps)
              if (clientProps.hasOwnProperty(_propName2) && "children" !== _propName2) {
                var maxLength$jscomp$0 = 120 - 2 * (indent + 1) - _propName2.length - 1, serverPropName = serverPropNames.get(_propName2.toLowerCase());
                if (void 0 !== serverPropName) {
                  serverPropNames.delete(_propName2.toLowerCase());
                  var propName$jscomp$0 = clientProps[_propName2];
                  serverPropName = serverProps[serverPropName];
                  var clientPropValue = describePropValue(
                    propName$jscomp$0,
                    maxLength$jscomp$0
                  );
                  maxLength$jscomp$0 = describePropValue(
                    serverPropName,
                    maxLength$jscomp$0
                  );
                  "object" === typeof propName$jscomp$0 && null !== propName$jscomp$0 && "object" === typeof serverPropName && null !== serverPropName && "Object" === objectName(propName$jscomp$0) && "Object" === objectName(serverPropName) && (2 < Object.keys(propName$jscomp$0).length || 2 < Object.keys(serverPropName).length || -1 < clientPropValue.indexOf("...") || -1 < maxLength$jscomp$0.indexOf("...")) ? content += indentation(indent + 1) + _propName2 + "={{\n" + describePropertiesDiff(
                    propName$jscomp$0,
                    serverPropName,
                    indent + 2
                  ) + indentation(indent + 1) + "}}\n" : (content += added(indent + 1) + _propName2 + "=" + clientPropValue + "\n", content += removed(indent + 1) + _propName2 + "=" + maxLength$jscomp$0 + "\n");
                } else
                  content += indentation(indent + 1) + _propName2 + "=" + describePropValue(clientProps[_propName2], maxLength$jscomp$0) + "\n";
              }
            serverPropNames.forEach(function(propName) {
              if ("children" !== propName) {
                var maxLength = 120 - 2 * (indent + 1) - propName.length - 1;
                content += removed(indent + 1) + propName + "=" + describePropValue(serverProps[propName], maxLength) + "\n";
              }
            });
            content = "" === content ? indentation(indent) + "<" + type + ">\n" : indentation(indent) + "<" + type + "\n" + content + indentation(indent) + ">\n";
          }
          type = serverProps.children;
          clientProps = clientProps.children;
          if ("string" === typeof type || "number" === typeof type || "bigint" === typeof type) {
            serverPropNames = "";
            if ("string" === typeof clientProps || "number" === typeof clientProps || "bigint" === typeof clientProps)
              serverPropNames = "" + clientProps;
            content += describeTextDiff(serverPropNames, "" + type, indent + 1);
          } else if ("string" === typeof clientProps || "number" === typeof clientProps || "bigint" === typeof clientProps)
            content = null == type ? content + describeTextDiff("" + clientProps, null, indent + 1) : content + describeTextDiff("" + clientProps, void 0, indent + 1);
          return content;
        }
        function describeSiblingFiber(fiber, indent) {
          var type = describeFiberType(fiber);
          if (null === type) {
            type = "";
            for (fiber = fiber.child; fiber; )
              type += describeSiblingFiber(fiber, indent), fiber = fiber.sibling;
            return type;
          }
          return indentation(indent) + "<" + type + ">\n";
        }
        function describeNode(node, indent) {
          var skipToNode = findNotableNode(node, indent);
          if (skipToNode !== node && (1 !== node.children.length || node.children[0] !== skipToNode))
            return indentation(indent) + "...\n" + describeNode(skipToNode, indent + 1);
          skipToNode = "";
          var debugInfo = node.fiber._debugInfo;
          if (debugInfo)
            for (var i = 0; i < debugInfo.length; i++) {
              var serverComponentName = debugInfo[i].name;
              "string" === typeof serverComponentName && (skipToNode += indentation(indent) + "<" + serverComponentName + ">\n", indent++);
            }
          debugInfo = "";
          i = node.fiber.pendingProps;
          if (6 === node.fiber.tag)
            debugInfo = describeTextDiff(i, node.serverProps, indent), indent++;
          else if (serverComponentName = describeFiberType(node.fiber), null !== serverComponentName)
            if (void 0 === node.serverProps) {
              debugInfo = indent;
              var maxLength = 120 - 2 * debugInfo - serverComponentName.length - 2, content = "";
              for (propName in i)
                if (i.hasOwnProperty(propName) && "children" !== propName) {
                  var propValue = describePropValue(i[propName], 15);
                  maxLength -= propName.length + propValue.length + 2;
                  if (0 > maxLength) {
                    content += " ...";
                    break;
                  }
                  content += " " + propName + "=" + propValue;
                }
              debugInfo = indentation(debugInfo) + "<" + serverComponentName + content + ">\n";
              indent++;
            } else
              null === node.serverProps ? (debugInfo = describeExpandedElement(
                serverComponentName,
                i,
                added(indent)
              ), indent++) : "string" === typeof node.serverProps ? console.error(
                "Should not have matched a non HostText fiber to a Text node. This is a bug in React."
              ) : (debugInfo = describeElementDiff(
                serverComponentName,
                i,
                node.serverProps,
                indent
              ), indent++);
          var propName = "";
          i = node.fiber.child;
          for (serverComponentName = 0; i && serverComponentName < node.children.length; )
            maxLength = node.children[serverComponentName], maxLength.fiber === i ? (propName += describeNode(maxLength, indent), serverComponentName++) : propName += describeSiblingFiber(i, indent), i = i.sibling;
          i && 0 < node.children.length && (propName += indentation(indent) + "...\n");
          i = node.serverTail;
          null === node.serverProps && indent--;
          for (node = 0; node < i.length; node++)
            serverComponentName = i[node], propName = "string" === typeof serverComponentName ? propName + (removed(indent) + describeTextNode(serverComponentName, 120 - 2 * indent) + "\n") : propName + describeExpandedElement(
              serverComponentName.type,
              serverComponentName.props,
              removed(indent)
            );
          return skipToNode + debugInfo + propName;
        }
        function describeDiff(rootNode) {
          try {
            return "\n\n" + describeNode(rootNode, 0);
          } catch (x) {
            return "";
          }
        }
        function describeAncestors(ancestor, child, props) {
          for (var fiber = child, node = null, distanceFromLeaf = 0; fiber; )
            fiber === ancestor && (distanceFromLeaf = 0), node = {
              fiber,
              children: null !== node ? [node] : [],
              serverProps: fiber === child ? props : fiber === ancestor ? null : void 0,
              serverTail: [],
              distanceFromLeaf
            }, distanceFromLeaf++, fiber = fiber.return;
          return null !== node ? describeDiff(node).replaceAll(/^[+-]/gm, ">") : "";
        }
        function updatedAncestorInfoDev(oldInfo, tag2) {
          var ancestorInfo = assign({}, oldInfo || emptyAncestorInfoDev), info = { tag: tag2 };
          -1 !== inScopeTags.indexOf(tag2) && (ancestorInfo.aTagInScope = null, ancestorInfo.buttonTagInScope = null, ancestorInfo.nobrTagInScope = null);
          -1 !== buttonScopeTags.indexOf(tag2) && (ancestorInfo.pTagInButtonScope = null);
          -1 !== specialTags.indexOf(tag2) && "address" !== tag2 && "div" !== tag2 && "p" !== tag2 && (ancestorInfo.listItemTagAutoclosing = null, ancestorInfo.dlItemTagAutoclosing = null);
          ancestorInfo.current = info;
          "form" === tag2 && (ancestorInfo.formTag = info);
          "a" === tag2 && (ancestorInfo.aTagInScope = info);
          "button" === tag2 && (ancestorInfo.buttonTagInScope = info);
          "nobr" === tag2 && (ancestorInfo.nobrTagInScope = info);
          "p" === tag2 && (ancestorInfo.pTagInButtonScope = info);
          "li" === tag2 && (ancestorInfo.listItemTagAutoclosing = info);
          if ("dd" === tag2 || "dt" === tag2)
            ancestorInfo.dlItemTagAutoclosing = info;
          "#document" === tag2 || "html" === tag2 ? ancestorInfo.containerTagInScope = null : ancestorInfo.containerTagInScope || (ancestorInfo.containerTagInScope = info);
          null !== oldInfo || "#document" !== tag2 && "html" !== tag2 && "body" !== tag2 ? true === ancestorInfo.implicitRootScope && (ancestorInfo.implicitRootScope = false) : ancestorInfo.implicitRootScope = true;
          return ancestorInfo;
        }
        function isTagValidWithParent(tag2, parentTag, implicitRootScope) {
          switch (parentTag) {
            case "select":
              return "hr" === tag2 || "option" === tag2 || "optgroup" === tag2 || "script" === tag2 || "template" === tag2 || "#text" === tag2;
            case "optgroup":
              return "option" === tag2 || "#text" === tag2;
            case "option":
              return "#text" === tag2;
            case "tr":
              return "th" === tag2 || "td" === tag2 || "style" === tag2 || "script" === tag2 || "template" === tag2;
            case "tbody":
            case "thead":
            case "tfoot":
              return "tr" === tag2 || "style" === tag2 || "script" === tag2 || "template" === tag2;
            case "colgroup":
              return "col" === tag2 || "template" === tag2;
            case "table":
              return "caption" === tag2 || "colgroup" === tag2 || "tbody" === tag2 || "tfoot" === tag2 || "thead" === tag2 || "style" === tag2 || "script" === tag2 || "template" === tag2;
            case "head":
              return "base" === tag2 || "basefont" === tag2 || "bgsound" === tag2 || "link" === tag2 || "meta" === tag2 || "title" === tag2 || "noscript" === tag2 || "noframes" === tag2 || "style" === tag2 || "script" === tag2 || "template" === tag2;
            case "html":
              if (implicitRootScope) break;
              return "head" === tag2 || "body" === tag2 || "frameset" === tag2;
            case "frameset":
              return "frame" === tag2;
            case "#document":
              if (!implicitRootScope) return "html" === tag2;
          }
          switch (tag2) {
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return "h1" !== parentTag && "h2" !== parentTag && "h3" !== parentTag && "h4" !== parentTag && "h5" !== parentTag && "h6" !== parentTag;
            case "rp":
            case "rt":
              return -1 === impliedEndTags.indexOf(parentTag);
            case "caption":
            case "col":
            case "colgroup":
            case "frameset":
            case "frame":
            case "tbody":
            case "td":
            case "tfoot":
            case "th":
            case "thead":
            case "tr":
              return null == parentTag;
            case "head":
              return implicitRootScope || null === parentTag;
            case "html":
              return implicitRootScope && "#document" === parentTag || null === parentTag;
            case "body":
              return implicitRootScope && ("#document" === parentTag || "html" === parentTag) || null === parentTag;
          }
          return true;
        }
        function findInvalidAncestorForTag(tag2, ancestorInfo) {
          switch (tag2) {
            case "address":
            case "article":
            case "aside":
            case "blockquote":
            case "center":
            case "details":
            case "dialog":
            case "dir":
            case "div":
            case "dl":
            case "fieldset":
            case "figcaption":
            case "figure":
            case "footer":
            case "header":
            case "hgroup":
            case "main":
            case "menu":
            case "nav":
            case "ol":
            case "p":
            case "section":
            case "summary":
            case "ul":
            case "pre":
            case "listing":
            case "table":
            case "hr":
            case "xmp":
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return ancestorInfo.pTagInButtonScope;
            case "form":
              return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case "li":
              return ancestorInfo.listItemTagAutoclosing;
            case "dd":
            case "dt":
              return ancestorInfo.dlItemTagAutoclosing;
            case "button":
              return ancestorInfo.buttonTagInScope;
            case "a":
              return ancestorInfo.aTagInScope;
            case "nobr":
              return ancestorInfo.nobrTagInScope;
          }
          return null;
        }
        function findAncestor(parent, tagName) {
          for (; parent; ) {
            switch (parent.tag) {
              case 5:
              case 26:
              case 27:
                if (parent.type === tagName) return parent;
            }
            parent = parent.return;
          }
          return null;
        }
        function validateDOMNesting(childTag, ancestorInfo) {
          ancestorInfo = ancestorInfo || emptyAncestorInfoDev;
          var parentInfo = ancestorInfo.current;
          ancestorInfo = (parentInfo = isTagValidWithParent(
            childTag,
            parentInfo && parentInfo.tag,
            ancestorInfo.implicitRootScope
          ) ? null : parentInfo) ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
          ancestorInfo = parentInfo || ancestorInfo;
          if (!ancestorInfo) return true;
          var ancestorTag = ancestorInfo.tag;
          ancestorInfo = String(!!parentInfo) + "|" + childTag + "|" + ancestorTag;
          if (didWarn[ancestorInfo]) return false;
          didWarn[ancestorInfo] = true;
          var ancestor = (ancestorInfo = current) ? findAncestor(ancestorInfo.return, ancestorTag) : null, ancestorDescription = null !== ancestorInfo && null !== ancestor ? describeAncestors(ancestor, ancestorInfo, null) : "", tagDisplayName = "<" + childTag + ">";
          parentInfo ? (parentInfo = "", "table" === ancestorTag && "tr" === childTag && (parentInfo += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser."), console.error(
            "In HTML, %s cannot be a child of <%s>.%s\nThis will cause a hydration error.%s",
            tagDisplayName,
            ancestorTag,
            parentInfo,
            ancestorDescription
          )) : console.error(
            "In HTML, %s cannot be a descendant of <%s>.\nThis will cause a hydration error.%s",
            tagDisplayName,
            ancestorTag,
            ancestorDescription
          );
          ancestorInfo && (childTag = ancestorInfo.return, null === ancestor || null === childTag || ancestor === childTag && childTag._debugOwner === ancestorInfo._debugOwner || runWithFiberInDEV(ancestor, function() {
            console.error(
              "<%s> cannot contain a nested %s.\nSee this log for the ancestor stack trace.",
              ancestorTag,
              tagDisplayName
            );
          }));
          return false;
        }
        function validateTextNesting(childText, parentTag, implicitRootScope) {
          if (implicitRootScope || isTagValidWithParent("#text", parentTag, false))
            return true;
          implicitRootScope = "#text|" + parentTag;
          if (didWarn[implicitRootScope]) return false;
          didWarn[implicitRootScope] = true;
          var ancestor = (implicitRootScope = current) ? findAncestor(implicitRootScope, parentTag) : null;
          implicitRootScope = null !== implicitRootScope && null !== ancestor ? describeAncestors(
            ancestor,
            implicitRootScope,
            6 !== implicitRootScope.tag ? { children: null } : null
          ) : "";
          /\S/.test(childText) ? console.error(
            "In HTML, text nodes cannot be a child of <%s>.\nThis will cause a hydration error.%s",
            parentTag,
            implicitRootScope
          ) : console.error(
            "In HTML, whitespace text nodes cannot be a child of <%s>. Make sure you don't have any extra whitespace between tags on each line of your source code.\nThis will cause a hydration error.%s",
            parentTag,
            implicitRootScope
          );
          return false;
        }
        function setTextContent(node, text) {
          if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && 3 === firstChild.nodeType) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node.textContent = text;
        }
        function camelize(string2) {
          return string2.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
          });
        }
        function setValueForStyle(style2, styleName, value) {
          var isCustomProperty = 0 === styleName.indexOf("--");
          isCustomProperty || (-1 < styleName.indexOf("-") ? warnedStyleNames.hasOwnProperty(styleName) && warnedStyleNames[styleName] || (warnedStyleNames[styleName] = true, console.error(
            "Unsupported style property %s. Did you mean %s?",
            styleName,
            camelize(styleName.replace(msPattern, "ms-"))
          )) : badVendoredStyleNamePattern.test(styleName) ? warnedStyleNames.hasOwnProperty(styleName) && warnedStyleNames[styleName] || (warnedStyleNames[styleName] = true, console.error(
            "Unsupported vendor-prefixed style property %s. Did you mean %s?",
            styleName,
            styleName.charAt(0).toUpperCase() + styleName.slice(1)
          )) : !badStyleValueWithSemicolonPattern.test(value) || warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value] || (warnedStyleValues[value] = true, console.error(
            `Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`,
            styleName,
            value.replace(badStyleValueWithSemicolonPattern, "")
          )), "number" === typeof value && (isNaN(value) ? warnedForNaNValue || (warnedForNaNValue = true, console.error(
            "`NaN` is an invalid value for the `%s` css style property.",
            styleName
          )) : isFinite(value) || warnedForInfinityValue || (warnedForInfinityValue = true, console.error(
            "`Infinity` is an invalid value for the `%s` css style property.",
            styleName
          ))));
          null == value || "boolean" === typeof value || "" === value ? isCustomProperty ? style2.setProperty(styleName, "") : "float" === styleName ? style2.cssFloat = "" : style2[styleName] = "" : isCustomProperty ? style2.setProperty(styleName, value) : "number" !== typeof value || 0 === value || unitlessNumbers.has(styleName) ? "float" === styleName ? style2.cssFloat = value : (checkCSSPropertyStringCoercion(value, styleName), style2[styleName] = ("" + value).trim()) : style2[styleName] = value + "px";
        }
        function setValueForStyles(node, styles, prevStyles) {
          if (null != styles && "object" !== typeof styles)
            throw Error(
              "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."
            );
          styles && Object.freeze(styles);
          node = node.style;
          if (null != prevStyles) {
            if (styles) {
              var expandedUpdates = {};
              if (prevStyles) {
                for (var key in prevStyles)
                  if (prevStyles.hasOwnProperty(key) && !styles.hasOwnProperty(key))
                    for (var longhands = shorthandToLonghand[key] || [key], i = 0; i < longhands.length; i++)
                      expandedUpdates[longhands[i]] = key;
              }
              for (var _key in styles)
                if (styles.hasOwnProperty(_key) && (!prevStyles || prevStyles[_key] !== styles[_key]))
                  for (key = shorthandToLonghand[_key] || [_key], longhands = 0; longhands < key.length; longhands++)
                    expandedUpdates[key[longhands]] = _key;
              _key = {};
              for (var key$jscomp$0 in styles)
                for (key = shorthandToLonghand[key$jscomp$0] || [key$jscomp$0], longhands = 0; longhands < key.length; longhands++)
                  _key[key[longhands]] = key$jscomp$0;
              key$jscomp$0 = {};
              for (var _key2 in expandedUpdates)
                if (key = expandedUpdates[_key2], (longhands = _key[_key2]) && key !== longhands && (i = key + "," + longhands, !key$jscomp$0[i])) {
                  key$jscomp$0[i] = true;
                  i = console;
                  var value = styles[key];
                  i.error.call(
                    i,
                    "%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.",
                    null == value || "boolean" === typeof value || "" === value ? "Removing" : "Updating",
                    key,
                    longhands
                  );
                }
            }
            for (var styleName in prevStyles)
              !prevStyles.hasOwnProperty(styleName) || null != styles && styles.hasOwnProperty(styleName) || (0 === styleName.indexOf("--") ? node.setProperty(styleName, "") : "float" === styleName ? node.cssFloat = "" : node[styleName] = "");
            for (var _styleName in styles)
              _key2 = styles[_styleName], styles.hasOwnProperty(_styleName) && prevStyles[_styleName] !== _key2 && setValueForStyle(node, _styleName, _key2);
          } else
            for (expandedUpdates in styles)
              styles.hasOwnProperty(expandedUpdates) && setValueForStyle(node, expandedUpdates, styles[expandedUpdates]);
        }
        function isCustomElement(tagName) {
          if (-1 === tagName.indexOf("-")) return false;
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        function getAttributeAlias(name2) {
          return aliases.get(name2) || name2;
        }
        function validateProperty$1(tagName, name2) {
          if (hasOwnProperty.call(warnedProperties$1, name2) && warnedProperties$1[name2])
            return true;
          if (rARIACamel$1.test(name2)) {
            tagName = "aria-" + name2.slice(4).toLowerCase();
            tagName = ariaProperties.hasOwnProperty(tagName) ? tagName : null;
            if (null == tagName)
              return console.error(
                "Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.",
                name2
              ), warnedProperties$1[name2] = true;
            if (name2 !== tagName)
              return console.error(
                "Invalid ARIA attribute `%s`. Did you mean `%s`?",
                name2,
                tagName
              ), warnedProperties$1[name2] = true;
          }
          if (rARIA$1.test(name2)) {
            tagName = name2.toLowerCase();
            tagName = ariaProperties.hasOwnProperty(tagName) ? tagName : null;
            if (null == tagName) return warnedProperties$1[name2] = true, false;
            name2 !== tagName && (console.error(
              "Unknown ARIA attribute `%s`. Did you mean `%s`?",
              name2,
              tagName
            ), warnedProperties$1[name2] = true);
          }
          return true;
        }
        function validateProperties$2(type, props) {
          var invalidProps = [], key;
          for (key in props)
            validateProperty$1(type, key) || invalidProps.push(key);
          props = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          1 === invalidProps.length ? console.error(
            "Invalid aria prop %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props",
            props,
            type
          ) : 1 < invalidProps.length && console.error(
            "Invalid aria props %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props",
            props,
            type
          );
        }
        function validateProperty(tagName, name2, value, eventRegistry) {
          if (hasOwnProperty.call(warnedProperties, name2) && warnedProperties[name2])
            return true;
          var lowerCasedName = name2.toLowerCase();
          if ("onfocusin" === lowerCasedName || "onfocusout" === lowerCasedName)
            return console.error(
              "React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."
            ), warnedProperties[name2] = true;
          if ("function" === typeof value && ("form" === tagName && "action" === name2 || "input" === tagName && "formAction" === name2 || "button" === tagName && "formAction" === name2))
            return true;
          if (null != eventRegistry) {
            tagName = eventRegistry.possibleRegistrationNames;
            if (eventRegistry.registrationNameDependencies.hasOwnProperty(name2))
              return true;
            eventRegistry = tagName.hasOwnProperty(lowerCasedName) ? tagName[lowerCasedName] : null;
            if (null != eventRegistry)
              return console.error(
                "Invalid event handler property `%s`. Did you mean `%s`?",
                name2,
                eventRegistry
              ), warnedProperties[name2] = true;
            if (EVENT_NAME_REGEX.test(name2))
              return console.error(
                "Unknown event handler property `%s`. It will be ignored.",
                name2
              ), warnedProperties[name2] = true;
          } else if (EVENT_NAME_REGEX.test(name2))
            return INVALID_EVENT_NAME_REGEX.test(name2) && console.error(
              "Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.",
              name2
            ), warnedProperties[name2] = true;
          if (rARIA.test(name2) || rARIACamel.test(name2)) return true;
          if ("innerhtml" === lowerCasedName)
            return console.error(
              "Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."
            ), warnedProperties[name2] = true;
          if ("aria" === lowerCasedName)
            return console.error(
              "The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."
            ), warnedProperties[name2] = true;
          if ("is" === lowerCasedName && null !== value && void 0 !== value && "string" !== typeof value)
            return console.error(
              "Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.",
              typeof value
            ), warnedProperties[name2] = true;
          if ("number" === typeof value && isNaN(value))
            return console.error(
              "Received NaN for the `%s` attribute. If this is expected, cast the value to a string.",
              name2
            ), warnedProperties[name2] = true;
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            if (lowerCasedName = possibleStandardNames[lowerCasedName], lowerCasedName !== name2)
              return console.error(
                "Invalid DOM property `%s`. Did you mean `%s`?",
                name2,
                lowerCasedName
              ), warnedProperties[name2] = true;
          } else if (name2 !== lowerCasedName)
            return console.error(
              "React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.",
              name2,
              lowerCasedName
            ), warnedProperties[name2] = true;
          switch (name2) {
            case "dangerouslySetInnerHTML":
            case "children":
            case "style":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "defaultValue":
            case "defaultChecked":
            case "innerHTML":
            case "ref":
              return true;
            case "innerText":
            case "textContent":
              return true;
          }
          switch (typeof value) {
            case "boolean":
              switch (name2) {
                case "autoFocus":
                case "checked":
                case "multiple":
                case "muted":
                case "selected":
                case "contentEditable":
                case "spellCheck":
                case "draggable":
                case "value":
                case "autoReverse":
                case "externalResourcesRequired":
                case "focusable":
                case "preserveAlpha":
                case "allowFullScreen":
                case "async":
                case "autoPlay":
                case "controls":
                case "default":
                case "defer":
                case "disabled":
                case "disablePictureInPicture":
                case "disableRemotePlayback":
                case "formNoValidate":
                case "hidden":
                case "loop":
                case "noModule":
                case "noValidate":
                case "open":
                case "playsInline":
                case "readOnly":
                case "required":
                case "reversed":
                case "scoped":
                case "seamless":
                case "itemScope":
                case "capture":
                case "download":
                case "inert":
                  return true;
                default:
                  lowerCasedName = name2.toLowerCase().slice(0, 5);
                  if ("data-" === lowerCasedName || "aria-" === lowerCasedName)
                    return true;
                  value ? console.error(
                    'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.',
                    value,
                    name2,
                    name2,
                    value,
                    name2
                  ) : console.error(
                    'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.',
                    value,
                    name2,
                    name2,
                    value,
                    name2,
                    name2,
                    name2
                  );
                  return warnedProperties[name2] = true;
              }
            case "function":
            case "symbol":
              return warnedProperties[name2] = true, false;
            case "string":
              if ("false" === value || "true" === value) {
                switch (name2) {
                  case "checked":
                  case "selected":
                  case "multiple":
                  case "muted":
                  case "allowFullScreen":
                  case "async":
                  case "autoPlay":
                  case "controls":
                  case "default":
                  case "defer":
                  case "disabled":
                  case "disablePictureInPicture":
                  case "disableRemotePlayback":
                  case "formNoValidate":
                  case "hidden":
                  case "loop":
                  case "noModule":
                  case "noValidate":
                  case "open":
                  case "playsInline":
                  case "readOnly":
                  case "required":
                  case "reversed":
                  case "scoped":
                  case "seamless":
                  case "itemScope":
                  case "inert":
                    break;
                  default:
                    return true;
                }
                console.error(
                  "Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?",
                  value,
                  name2,
                  "false" === value ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".',
                  name2,
                  value
                );
                warnedProperties[name2] = true;
              }
          }
          return true;
        }
        function warnUnknownProperties(type, props, eventRegistry) {
          var unknownProps = [], key;
          for (key in props)
            validateProperty(type, key, props[key], eventRegistry) || unknownProps.push(key);
          props = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          1 === unknownProps.length ? console.error(
            "Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://react.dev/link/attribute-behavior ",
            props,
            type
          ) : 1 < unknownProps.length && console.error(
            "Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://react.dev/link/attribute-behavior ",
            props,
            type
          );
        }
        function sanitizeURL(url) {
          return isJavaScriptProtocol.test("" + url) ? "javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')" : url;
        }
        function getEventTarget(nativeEvent) {
          nativeEvent = nativeEvent.target || nativeEvent.srcElement || window;
          nativeEvent.correspondingUseElement && (nativeEvent = nativeEvent.correspondingUseElement);
          return 3 === nativeEvent.nodeType ? nativeEvent.parentNode : nativeEvent;
        }
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (internalInstance && (target = internalInstance.stateNode)) {
            var props = target[internalPropsKey] || null;
            a: switch (target = internalInstance.stateNode, internalInstance.type) {
              case "input":
                updateInput(
                  target,
                  props.value,
                  props.defaultValue,
                  props.defaultValue,
                  props.checked,
                  props.defaultChecked,
                  props.type,
                  props.name
                );
                internalInstance = props.name;
                if ("radio" === props.type && null != internalInstance) {
                  for (props = target; props.parentNode; ) props = props.parentNode;
                  checkAttributeStringCoercion(internalInstance, "name");
                  props = props.querySelectorAll(
                    'input[name="' + escapeSelectorAttributeValueInsideDoubleQuotes(
                      "" + internalInstance
                    ) + '"][type="radio"]'
                  );
                  for (internalInstance = 0; internalInstance < props.length; internalInstance++) {
                    var otherNode = props[internalInstance];
                    if (otherNode !== target && otherNode.form === target.form) {
                      var otherProps = otherNode[internalPropsKey] || null;
                      if (!otherProps)
                        throw Error(
                          "ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported."
                        );
                      updateInput(
                        otherNode,
                        otherProps.value,
                        otherProps.defaultValue,
                        otherProps.defaultValue,
                        otherProps.checked,
                        otherProps.defaultChecked,
                        otherProps.type,
                        otherProps.name
                      );
                    }
                  }
                  for (internalInstance = 0; internalInstance < props.length; internalInstance++)
                    otherNode = props[internalInstance], otherNode.form === target.form && updateValueIfChanged(otherNode);
                }
                break a;
              case "textarea":
                updateTextarea(target, props.value, props.defaultValue);
                break a;
              case "select":
                internalInstance = props.value, null != internalInstance && updateOptions(target, !!props.multiple, internalInstance, false);
            }
          }
        }
        function batchedUpdates$1(fn, a, b) {
          if (isInsideEventHandler) return fn(a, b);
          isInsideEventHandler = true;
          try {
            var JSCompiler_inline_result = fn(a);
            return JSCompiler_inline_result;
          } finally {
            if (isInsideEventHandler = false, null !== restoreTarget || null !== restoreQueue) {
              if (flushSyncWork$1(), restoreTarget && (a = restoreTarget, fn = restoreQueue, restoreQueue = restoreTarget = null, restoreStateOfTarget(a), fn))
                for (a = 0; a < fn.length; a++) restoreStateOfTarget(fn[a]);
            }
          }
        }
        function getListener(inst, registrationName) {
          var stateNode = inst.stateNode;
          if (null === stateNode) return null;
          var props = stateNode[internalPropsKey] || null;
          if (null === props) return null;
          stateNode = props[registrationName];
          a: switch (registrationName) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              (props = !props.disabled) || (inst = inst.type, props = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
              inst = !props;
              break a;
            default:
              inst = false;
          }
          if (inst) return null;
          if (stateNode && "function" !== typeof stateNode)
            throw Error(
              "Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof stateNode + "` type."
            );
          return stateNode;
        }
        function getData() {
          if (fallbackText) return fallbackText;
          var start, startValue = startText, startLength = startValue.length, end, endValue = "value" in root2 ? root2.value : root2.textContent, endLength = endValue.length;
          for (start = 0; start < startLength && startValue[start] === endValue[start]; start++) ;
          var minEnd = startLength - start;
          for (end = 1; end <= minEnd && startValue[startLength - end] === endValue[endLength - end]; end++) ;
          return fallbackText = endValue.slice(start, 1 < end ? 1 - end : void 0);
        }
        function getEventCharCode(nativeEvent) {
          var keyCode = nativeEvent.keyCode;
          "charCode" in nativeEvent ? (nativeEvent = nativeEvent.charCode, 0 === nativeEvent && 13 === keyCode && (nativeEvent = 13)) : nativeEvent = keyCode;
          10 === nativeEvent && (nativeEvent = 13);
          return 32 <= nativeEvent || 13 === nativeEvent ? nativeEvent : 0;
        }
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function createSyntheticEvent(Interface) {
          function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for (var propName in Interface)
              Interface.hasOwnProperty(propName) && (reactName = Interface[propName], this[propName] = reactName ? reactName(nativeEvent) : nativeEvent[propName]);
            this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : false === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }
          assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
              this.defaultPrevented = true;
              var event = this.nativeEvent;
              event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = false), this.isDefaultPrevented = functionThatReturnsTrue);
            },
            stopPropagation: function() {
              var event = this.nativeEvent;
              event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = true), this.isPropagationStopped = functionThatReturnsTrue);
            },
            persist: function() {
            },
            isPersistent: functionThatReturnsTrue
          });
          return SyntheticBaseEvent;
        }
        function modifierStateGetter(keyArg) {
          var nativeEvent = this.nativeEvent;
          return nativeEvent.getModifierState ? nativeEvent.getModifierState(keyArg) : (keyArg = modifierKeyToProp[keyArg]) ? !!nativeEvent[keyArg] : false;
        }
        function getEventModifierState() {
          return modifierStateGetter;
        }
        function isFallbackCompositionEnd(domEventName, nativeEvent) {
          switch (domEventName) {
            case "keyup":
              return -1 !== END_KEYCODES.indexOf(nativeEvent.keyCode);
            case "keydown":
              return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          nativeEvent = nativeEvent.detail;
          return "object" === typeof nativeEvent && "data" in nativeEvent ? nativeEvent.data : null;
        }
        function getNativeBeforeInputChars(domEventName, nativeEvent) {
          switch (domEventName) {
            case "compositionend":
              return getDataFromCustomEvent(nativeEvent);
            case "keypress":
              if (nativeEvent.which !== SPACEBAR_CODE) return null;
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case "textInput":
              return domEventName = nativeEvent.data, domEventName === SPACEBAR_CHAR && hasSpaceKeypress ? null : domEventName;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(domEventName, nativeEvent) {
          if (isComposing)
            return "compositionend" === domEventName || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent) ? (domEventName = getData(), fallbackText = startText = root2 = null, isComposing = false, domEventName) : null;
          switch (domEventName) {
            case "paste":
              return null;
            case "keypress":
              if (!(nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) || nativeEvent.ctrlKey && nativeEvent.altKey) {
                if (nativeEvent.char && 1 < nativeEvent.char.length)
                  return nativeEvent.char;
                if (nativeEvent.which)
                  return String.fromCharCode(nativeEvent.which);
              }
              return null;
            case "compositionend":
              return useFallbackCompositionData && "ko" !== nativeEvent.locale ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return "input" === nodeName ? !!supportedInputTypes[elem.type] : "textarea" === nodeName ? true : false;
        }
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM) return false;
          eventNameSuffix = "on" + eventNameSuffix;
          var isSupported = eventNameSuffix in document;
          isSupported || (isSupported = document.createElement("div"), isSupported.setAttribute(eventNameSuffix, "return;"), isSupported = "function" === typeof isSupported[eventNameSuffix]);
          return isSupported;
        }
        function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
          restoreTarget ? restoreQueue ? restoreQueue.push(target) : restoreQueue = [target] : restoreTarget = target;
          inst = accumulateTwoPhaseListeners(inst, "onChange");
          0 < inst.length && (nativeEvent = new SyntheticEvent(
            "onChange",
            "change",
            null,
            nativeEvent,
            target
          ), dispatchQueue.push({ event: nativeEvent, listeners: inst }));
        }
        function runEventInBatch(dispatchQueue) {
          processDispatchQueue(dispatchQueue, 0);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance(targetInst);
          if (updateValueIfChanged(targetNode)) return targetInst;
        }
        function getTargetInstForChangeEvent(domEventName, targetInst) {
          if ("change" === domEventName) return targetInst;
        }
        function stopWatchingForValueChange() {
          activeElement$1 && (activeElement$1.detachEvent("onpropertychange", handlePropertyChange), activeElementInst$1 = activeElement$1 = null);
        }
        function handlePropertyChange(nativeEvent) {
          if ("value" === nativeEvent.propertyName && getInstIfValueChanged(activeElementInst$1)) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(
              dispatchQueue,
              activeElementInst$1,
              nativeEvent,
              getEventTarget(nativeEvent)
            );
            batchedUpdates$1(runEventInBatch, dispatchQueue);
          }
        }
        function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
          "focusin" === domEventName ? (stopWatchingForValueChange(), activeElement$1 = target, activeElementInst$1 = targetInst, activeElement$1.attachEvent("onpropertychange", handlePropertyChange)) : "focusout" === domEventName && stopWatchingForValueChange();
        }
        function getTargetInstForInputEventPolyfill(domEventName) {
          if ("selectionchange" === domEventName || "keyup" === domEventName || "keydown" === domEventName)
            return getInstIfValueChanged(activeElementInst$1);
        }
        function getTargetInstForClickEvent(domEventName, targetInst) {
          if ("click" === domEventName) return getInstIfValueChanged(targetInst);
        }
        function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
          if ("input" === domEventName || "change" === domEventName)
            return getInstIfValueChanged(targetInst);
        }
        function is(x, y) {
          return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
        }
        function shallowEqual(objA, objB) {
          if (objectIs(objA, objB)) return true;
          if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB)
            return false;
          var keysA = Object.keys(objA), keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) return false;
          for (keysB = 0; keysB < keysA.length; keysB++) {
            var currentKey = keysA[keysB];
            if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey]))
              return false;
          }
          return true;
        }
        function getLeafNode(node) {
          for (; node && node.firstChild; ) node = node.firstChild;
          return node;
        }
        function getNodeForCharacterOffset(root3, offset) {
          var node = getLeafNode(root3);
          root3 = 0;
          for (var nodeEnd; node; ) {
            if (3 === node.nodeType) {
              nodeEnd = root3 + node.textContent.length;
              if (root3 <= offset && nodeEnd >= offset)
                return { node, offset: offset - root3 };
              root3 = nodeEnd;
            }
            a: {
              for (; node; ) {
                if (node.nextSibling) {
                  node = node.nextSibling;
                  break a;
                }
                node = node.parentNode;
              }
              node = void 0;
            }
            node = getLeafNode(node);
          }
        }
        function containsNode(outerNode, innerNode) {
          return outerNode && innerNode ? outerNode === innerNode ? true : outerNode && 3 === outerNode.nodeType ? false : innerNode && 3 === innerNode.nodeType ? containsNode(outerNode, innerNode.parentNode) : "contains" in outerNode ? outerNode.contains(innerNode) : outerNode.compareDocumentPosition ? !!(outerNode.compareDocumentPosition(innerNode) & 16) : false : false;
        }
        function getActiveElementDeep(containerInfo) {
          containerInfo = null != containerInfo && null != containerInfo.ownerDocument && null != containerInfo.ownerDocument.defaultView ? containerInfo.ownerDocument.defaultView : window;
          for (var element = getActiveElement(containerInfo.document); element instanceof containerInfo.HTMLIFrameElement; ) {
            try {
              var JSCompiler_inline_result = "string" === typeof element.contentWindow.location.href;
            } catch (err) {
              JSCompiler_inline_result = false;
            }
            if (JSCompiler_inline_result) containerInfo = element.contentWindow;
            else break;
            element = getActiveElement(containerInfo.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && ("input" === nodeName && ("text" === elem.type || "search" === elem.type || "tel" === elem.type || "url" === elem.type || "password" === elem.type) || "textarea" === nodeName || "true" === elem.contentEditable);
        }
        function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
          var doc = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget.document : 9 === nativeEventTarget.nodeType ? nativeEventTarget : nativeEventTarget.ownerDocument;
          mouseDown || null == activeElement || activeElement !== getActiveElement(doc) || (doc = activeElement, "selectionStart" in doc && hasSelectionCapabilities(doc) ? doc = { start: doc.selectionStart, end: doc.selectionEnd } : (doc = (doc.ownerDocument && doc.ownerDocument.defaultView || window).getSelection(), doc = {
            anchorNode: doc.anchorNode,
            anchorOffset: doc.anchorOffset,
            focusNode: doc.focusNode,
            focusOffset: doc.focusOffset
          }), lastSelection && shallowEqual(lastSelection, doc) || (lastSelection = doc, doc = accumulateTwoPhaseListeners(activeElementInst, "onSelect"), 0 < doc.length && (nativeEvent = new SyntheticEvent(
            "onSelect",
            "select",
            null,
            nativeEvent,
            nativeEventTarget
          ), dispatchQueue.push({ event: nativeEvent, listeners: doc }), nativeEvent.target = activeElement)));
        }
        function makePrefixMap(styleProp, eventName) {
          var prefixes = {};
          prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes["Webkit" + styleProp] = "webkit" + eventName;
          prefixes["Moz" + styleProp] = "moz" + eventName;
          return prefixes;
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
          if (!vendorPrefixes[eventName]) return eventName;
          var prefixMap = vendorPrefixes[eventName], styleProp;
          for (styleProp in prefixMap)
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style)
              return prefixedEventNames[eventName] = prefixMap[styleProp];
          return eventName;
        }
        function registerSimpleEvent(domEventName, reactName) {
          topLevelEventsToReactNames.set(domEventName, reactName);
          registerTwoPhaseEvent(reactName, [domEventName]);
        }
        function createCapturedValueAtFiber(value, source) {
          if ("object" === typeof value && null !== value) {
            var existing = CapturedStacks.get(value);
            if (void 0 !== existing) return existing;
            source = {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source)
            };
            CapturedStacks.set(value, source);
            return source;
          }
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source)
          };
        }
        function finishQueueingConcurrentUpdates() {
          for (var endIndex = concurrentQueuesIndex, i = concurrentlyUpdatedLanes = concurrentQueuesIndex = 0; i < endIndex; ) {
            var fiber = concurrentQueues[i];
            concurrentQueues[i++] = null;
            var queue = concurrentQueues[i];
            concurrentQueues[i++] = null;
            var update = concurrentQueues[i];
            concurrentQueues[i++] = null;
            var lane = concurrentQueues[i];
            concurrentQueues[i++] = null;
            if (null !== queue && null !== update) {
              var pending = queue.pending;
              null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
              queue.pending = update;
            }
            0 !== lane && markUpdateLaneFromFiberToRoot(fiber, update, lane);
          }
        }
        function enqueueUpdate$1(fiber, queue, update, lane) {
          concurrentQueues[concurrentQueuesIndex++] = fiber;
          concurrentQueues[concurrentQueuesIndex++] = queue;
          concurrentQueues[concurrentQueuesIndex++] = update;
          concurrentQueues[concurrentQueuesIndex++] = lane;
          concurrentlyUpdatedLanes |= lane;
          fiber.lanes |= lane;
          fiber = fiber.alternate;
          null !== fiber && (fiber.lanes |= lane);
        }
        function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
          enqueueUpdate$1(fiber, queue, update, lane);
          return getRootForUpdatedFiber(fiber);
        }
        function enqueueConcurrentRenderForLane(fiber, lane) {
          enqueueUpdate$1(fiber, null, null, lane);
          return getRootForUpdatedFiber(fiber);
        }
        function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
          sourceFiber.lanes |= lane;
          var alternate = sourceFiber.alternate;
          null !== alternate && (alternate.lanes |= lane);
          for (var isHidden = false, parent = sourceFiber.return; null !== parent; )
            parent.childLanes |= lane, alternate = parent.alternate, null !== alternate && (alternate.childLanes |= lane), 22 === parent.tag && (sourceFiber = parent.stateNode, null === sourceFiber || sourceFiber._visibility & OffscreenVisible || (isHidden = true)), sourceFiber = parent, parent = parent.return;
          return 3 === sourceFiber.tag ? (parent = sourceFiber.stateNode, isHidden && null !== update && (isHidden = 31 - clz32(lane), sourceFiber = parent.hiddenUpdates, alternate = sourceFiber[isHidden], null === alternate ? sourceFiber[isHidden] = [update] : alternate.push(update), update.lane = lane | 536870912), parent) : null;
        }
        function getRootForUpdatedFiber(sourceFiber) {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT)
            throw nestedPassiveUpdateCount = nestedUpdateCount = 0, rootWithPassiveNestedUpdates = rootWithNestedUpdates = null, Error(
              "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops."
            );
          nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT && (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null, console.error(
            "Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."
          ));
          null === sourceFiber.alternate && 0 !== (sourceFiber.flags & 4098) && warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
          for (var node = sourceFiber, parent = node.return; null !== parent; )
            null === node.alternate && 0 !== (node.flags & 4098) && warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber), node = parent, parent = node.return;
          return 3 === node.tag ? node.stateNode : null;
        }
        function resolveFunctionForHotReloading(type) {
          if (null === resolveFamily) return type;
          var family = resolveFamily(type);
          return void 0 === family ? type : family.current;
        }
        function resolveForwardRefForHotReloading(type) {
          if (null === resolveFamily) return type;
          var family = resolveFamily(type);
          return void 0 === family ? null !== type && void 0 !== type && "function" === typeof type.render && (family = resolveFunctionForHotReloading(type.render), type.render !== family) ? (family = { $$typeof: REACT_FORWARD_REF_TYPE, render: family }, void 0 !== type.displayName && (family.displayName = type.displayName), family) : type : family.current;
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          if (null === resolveFamily) return false;
          var prevType = fiber.elementType;
          element = element.type;
          var needsCompareFamilies = false, $$typeofNextType = "object" === typeof element && null !== element ? element.$$typeof : null;
          switch (fiber.tag) {
            case 1:
              "function" === typeof element && (needsCompareFamilies = true);
              break;
            case 0:
              "function" === typeof element ? needsCompareFamilies = true : $$typeofNextType === REACT_LAZY_TYPE && (needsCompareFamilies = true);
              break;
            case 11:
              $$typeofNextType === REACT_FORWARD_REF_TYPE ? needsCompareFamilies = true : $$typeofNextType === REACT_LAZY_TYPE && (needsCompareFamilies = true);
              break;
            case 14:
            case 15:
              $$typeofNextType === REACT_MEMO_TYPE ? needsCompareFamilies = true : $$typeofNextType === REACT_LAZY_TYPE && (needsCompareFamilies = true);
              break;
            default:
              return false;
          }
          return needsCompareFamilies && (fiber = resolveFamily(prevType), void 0 !== fiber && fiber === resolveFamily(element)) ? true : false;
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          null !== resolveFamily && "function" === typeof WeakSet && (null === failedBoundaries && (failedBoundaries = /* @__PURE__ */ new WeakSet()), failedBoundaries.add(fiber));
        }
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag2 = fiber.tag, type = fiber.type, candidateType = null;
          switch (tag2) {
            case 0:
            case 15:
            case 1:
              candidateType = type;
              break;
            case 11:
              candidateType = type.render;
          }
          if (null === resolveFamily)
            throw Error("Expected resolveFamily to be set during hot reload.");
          var needsRender = false;
          type = false;
          null !== candidateType && (candidateType = resolveFamily(candidateType), void 0 !== candidateType && (staleFamilies.has(candidateType) ? type = true : updatedFamilies.has(candidateType) && (1 === tag2 ? type = true : needsRender = true)));
          null !== failedBoundaries && (failedBoundaries.has(fiber) || null !== alternate && failedBoundaries.has(alternate)) && (type = true);
          type && (fiber._debugNeedsRemount = true);
          if (type || needsRender)
            alternate = enqueueConcurrentRenderForLane(fiber, 2), null !== alternate && scheduleUpdateOnFiber(alternate, fiber, 2);
          null === child || type || scheduleFibersWithFamiliesRecursively(
            child,
            updatedFamilies,
            staleFamilies
          );
          null !== sibling && scheduleFibersWithFamiliesRecursively(
            sibling,
            updatedFamilies,
            staleFamilies
          );
        }
        function FiberNode(tag2, pendingProps, key, mode) {
          this.tag = tag2;
          this.key = key;
          this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
          this.index = 0;
          this.refCleanup = this.ref = null;
          this.pendingProps = pendingProps;
          this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
          this.mode = mode;
          this.subtreeFlags = this.flags = 0;
          this.deletions = null;
          this.childLanes = this.lanes = 0;
          this.alternate = null;
          this.actualDuration = -0;
          this.actualStartTime = -1.1;
          this.treeBaseDuration = this.selfBaseDuration = -0;
          this._debugTask = this._debugStack = this._debugOwner = this._debugInfo = null;
          this._debugNeedsRemount = false;
          this._debugHookTypes = null;
          hasBadMapPolyfill || "function" !== typeof Object.preventExtensions || Object.preventExtensions(this);
        }
        function shouldConstruct(Component) {
          Component = Component.prototype;
          return !(!Component || !Component.isReactComponent);
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          null === workInProgress2 ? (workInProgress2 = createFiber(
            current2.tag,
            pendingProps,
            current2.key,
            current2.mode
          ), workInProgress2.elementType = current2.elementType, workInProgress2.type = current2.type, workInProgress2.stateNode = current2.stateNode, workInProgress2._debugOwner = current2._debugOwner, workInProgress2._debugStack = current2._debugStack, workInProgress2._debugTask = current2._debugTask, workInProgress2._debugHookTypes = current2._debugHookTypes, workInProgress2.alternate = current2, current2.alternate = workInProgress2) : (workInProgress2.pendingProps = pendingProps, workInProgress2.type = current2.type, workInProgress2.flags = 0, workInProgress2.subtreeFlags = 0, workInProgress2.deletions = null, workInProgress2.actualDuration = -0, workInProgress2.actualStartTime = -1.1);
          workInProgress2.flags = current2.flags & 65011712;
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          pendingProps = current2.dependencies;
          workInProgress2.dependencies = null === pendingProps ? null : {
            lanes: pendingProps.lanes,
            firstContext: pendingProps.firstContext,
            _debugThenableState: pendingProps._debugThenableState
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          workInProgress2.refCleanup = current2.refCleanup;
          workInProgress2.selfBaseDuration = current2.selfBaseDuration;
          workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          workInProgress2._debugInfo = current2._debugInfo;
          workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
          switch (workInProgress2.tag) {
            case 0:
            case 15:
              workInProgress2.type = resolveFunctionForHotReloading(current2.type);
              break;
            case 1:
              workInProgress2.type = resolveFunctionForHotReloading(current2.type);
              break;
            case 11:
              workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderLanes2) {
          workInProgress2.flags &= 65011714;
          var current2 = workInProgress2.alternate;
          null === current2 ? (workInProgress2.childLanes = 0, workInProgress2.lanes = renderLanes2, workInProgress2.child = null, workInProgress2.subtreeFlags = 0, workInProgress2.memoizedProps = null, workInProgress2.memoizedState = null, workInProgress2.updateQueue = null, workInProgress2.dependencies = null, workInProgress2.stateNode = null, workInProgress2.selfBaseDuration = 0, workInProgress2.treeBaseDuration = 0) : (workInProgress2.childLanes = current2.childLanes, workInProgress2.lanes = current2.lanes, workInProgress2.child = current2.child, workInProgress2.subtreeFlags = 0, workInProgress2.deletions = null, workInProgress2.memoizedProps = current2.memoizedProps, workInProgress2.memoizedState = current2.memoizedState, workInProgress2.updateQueue = current2.updateQueue, workInProgress2.type = current2.type, renderLanes2 = current2.dependencies, workInProgress2.dependencies = null === renderLanes2 ? null : {
            lanes: renderLanes2.lanes,
            firstContext: renderLanes2.firstContext,
            _debugThenableState: renderLanes2._debugThenableState
          }, workInProgress2.selfBaseDuration = current2.selfBaseDuration, workInProgress2.treeBaseDuration = current2.treeBaseDuration);
          return workInProgress2;
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
          var fiberTag = 0, resolvedType = type;
          if ("function" === typeof type)
            shouldConstruct(type) && (fiberTag = 1), resolvedType = resolveFunctionForHotReloading(resolvedType);
          else if ("string" === typeof type)
            fiberTag = getHostContext(), fiberTag = isHostHoistableType(type, pendingProps, fiberTag) ? 26 : "html" === type || "head" === type || "body" === type ? 27 : 5;
          else
            a: switch (type) {
              case REACT_ACTIVITY_TYPE:
                return key = createFiber(31, pendingProps, key, mode), key.elementType = REACT_ACTIVITY_TYPE, key.lanes = lanes, key;
              case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(
                  pendingProps.children,
                  mode,
                  lanes,
                  key
                );
              case REACT_STRICT_MODE_TYPE:
                fiberTag = 8;
                mode |= StrictLegacyMode;
                mode |= StrictEffectsMode;
                break;
              case REACT_PROFILER_TYPE:
                return type = pendingProps, owner = mode, "string" !== typeof type.id && console.error(
                  'Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.',
                  typeof type.id
                ), key = createFiber(12, type, key, owner | ProfileMode), key.elementType = REACT_PROFILER_TYPE, key.lanes = lanes, key.stateNode = { effectDuration: 0, passiveEffectDuration: 0 }, key;
              case REACT_SUSPENSE_TYPE:
                return key = createFiber(13, pendingProps, key, mode), key.elementType = REACT_SUSPENSE_TYPE, key.lanes = lanes, key;
              case REACT_SUSPENSE_LIST_TYPE:
                return key = createFiber(19, pendingProps, key, mode), key.elementType = REACT_SUSPENSE_LIST_TYPE, key.lanes = lanes, key;
              default:
                if ("object" === typeof type && null !== type)
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                    case REACT_CONTEXT_TYPE:
                      fiberTag = 10;
                      break a;
                    case REACT_CONSUMER_TYPE:
                      fiberTag = 9;
                      break a;
                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = 11;
                      resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      break a;
                    case REACT_MEMO_TYPE:
                      fiberTag = 14;
                      break a;
                    case REACT_LAZY_TYPE:
                      fiberTag = 16;
                      resolvedType = null;
                      break a;
                  }
                resolvedType = "";
                if (void 0 === type || "object" === typeof type && null !== type && 0 === Object.keys(type).length)
                  resolvedType += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                null === type ? pendingProps = "null" : isArrayImpl(type) ? pendingProps = "array" : void 0 !== type && type.$$typeof === REACT_ELEMENT_TYPE ? (pendingProps = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />", resolvedType = " Did you accidentally export a JSX literal instead of a component?") : pendingProps = typeof type;
                (fiberTag = owner ? getComponentNameFromOwner(owner) : null) && (resolvedType += "\n\nCheck the render method of `" + fiberTag + "`.");
                fiberTag = 29;
                pendingProps = Error(
                  "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (pendingProps + "." + resolvedType)
                );
                resolvedType = null;
            }
          key = createFiber(fiberTag, pendingProps, key, mode);
          key.elementType = type;
          key.type = resolvedType;
          key.lanes = lanes;
          key._debugOwner = owner;
          return key;
        }
        function createFiberFromElement(element, mode, lanes) {
          mode = createFiberFromTypeAndProps(
            element.type,
            element.key,
            element.props,
            element._owner,
            mode,
            lanes
          );
          mode._debugOwner = element._owner;
          mode._debugStack = element._debugStack;
          mode._debugTask = element._debugTask;
          return mode;
        }
        function createFiberFromFragment(elements, mode, lanes, key) {
          elements = createFiber(7, elements, key, mode);
          elements.lanes = lanes;
          return elements;
        }
        function createFiberFromText(content, mode, lanes) {
          content = createFiber(6, content, null, mode);
          content.lanes = lanes;
          return content;
        }
        function createFiberFromPortal(portal, mode, lanes) {
          mode = createFiber(
            4,
            null !== portal.children ? portal.children : [],
            portal.key,
            mode
          );
          mode.lanes = lanes;
          mode.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            implementation: portal.implementation
          };
          return mode;
        }
        function pushTreeFork(workInProgress2, totalChildren) {
          warnIfNotHydrating();
          forkStack[forkStackIndex++] = treeForkCount;
          forkStack[forkStackIndex++] = treeForkProvider;
          treeForkProvider = workInProgress2;
          treeForkCount = totalChildren;
        }
        function pushTreeId(workInProgress2, totalChildren, index) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextProvider = workInProgress2;
          var baseIdWithLeadingBit = treeContextId;
          workInProgress2 = treeContextOverflow;
          var baseLength = 32 - clz32(baseIdWithLeadingBit) - 1;
          baseIdWithLeadingBit &= ~(1 << baseLength);
          index += 1;
          var length2 = 32 - clz32(totalChildren) + baseLength;
          if (30 < length2) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            length2 = (baseIdWithLeadingBit & (1 << numberOfOverflowBits) - 1).toString(32);
            baseIdWithLeadingBit >>= numberOfOverflowBits;
            baseLength -= numberOfOverflowBits;
            treeContextId = 1 << 32 - clz32(totalChildren) + baseLength | index << baseLength | baseIdWithLeadingBit;
            treeContextOverflow = length2 + workInProgress2;
          } else
            treeContextId = 1 << length2 | index << baseLength | baseIdWithLeadingBit, treeContextOverflow = workInProgress2;
        }
        function pushMaterializedTreeId(workInProgress2) {
          warnIfNotHydrating();
          null !== workInProgress2.return && (pushTreeFork(workInProgress2, 1), pushTreeId(workInProgress2, 1, 0));
        }
        function popTreeContext(workInProgress2) {
          for (; workInProgress2 === treeForkProvider; )
            treeForkProvider = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null, treeForkCount = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null;
          for (; workInProgress2 === treeContextProvider; )
            treeContextProvider = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextOverflow = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextId = idStack[--idStackIndex], idStack[idStackIndex] = null;
        }
        function warnIfNotHydrating() {
          isHydrating || console.error(
            "Expected to be hydrating. This is a bug in React. Please file an issue."
          );
        }
        function buildHydrationDiffNode(fiber, distanceFromLeaf) {
          if (null === fiber.return) {
            if (null === hydrationDiffRootDEV)
              hydrationDiffRootDEV = {
                fiber,
                children: [],
                serverProps: void 0,
                serverTail: [],
                distanceFromLeaf
              };
            else {
              if (hydrationDiffRootDEV.fiber !== fiber)
                throw Error(
                  "Saw multiple hydration diff roots in a pass. This is a bug in React."
                );
              hydrationDiffRootDEV.distanceFromLeaf > distanceFromLeaf && (hydrationDiffRootDEV.distanceFromLeaf = distanceFromLeaf);
            }
            return hydrationDiffRootDEV;
          }
          var siblings = buildHydrationDiffNode(
            fiber.return,
            distanceFromLeaf + 1
          ).children;
          if (0 < siblings.length && siblings[siblings.length - 1].fiber === fiber)
            return siblings = siblings[siblings.length - 1], siblings.distanceFromLeaf > distanceFromLeaf && (siblings.distanceFromLeaf = distanceFromLeaf), siblings;
          distanceFromLeaf = {
            fiber,
            children: [],
            serverProps: void 0,
            serverTail: [],
            distanceFromLeaf
          };
          siblings.push(distanceFromLeaf);
          return distanceFromLeaf;
        }
        function warnNonHydratedInstance(fiber, rejectedCandidate) {
          didSuspendOrErrorDEV || (fiber = buildHydrationDiffNode(fiber, 0), fiber.serverProps = null, null !== rejectedCandidate && (rejectedCandidate = describeHydratableInstanceForDevWarnings(rejectedCandidate), fiber.serverTail.push(rejectedCandidate)));
        }
        function throwOnHydrationMismatch(fiber) {
          var diff = "", diffRoot = hydrationDiffRootDEV;
          null !== diffRoot && (hydrationDiffRootDEV = null, diff = describeDiff(diffRoot));
          queueHydrationError(
            createCapturedValueAtFiber(
              Error(
                "Hydration failed because the server rendered HTML didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:\n\n- A server/client branch `if (typeof window !== 'undefined')`.\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n- Date formatting in a user's locale which doesn't match the server.\n- External changing data without sending a snapshot of it along with the HTML.\n- Invalid HTML tag nesting.\n\nIt can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n\nhttps://react.dev/link/hydration-mismatch" + diff
              ),
              fiber
            )
          );
          throw HydrationMismatchException;
        }
        function prepareToHydrateHostInstance(fiber) {
          var didHydrate = fiber.stateNode;
          var type = fiber.type, props = fiber.memoizedProps;
          didHydrate[internalInstanceKey] = fiber;
          didHydrate[internalPropsKey] = props;
          validatePropertiesInDevelopment(type, props);
          switch (type) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", didHydrate);
              listenToNonDelegatedEvent("close", didHydrate);
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", didHydrate);
              break;
            case "video":
            case "audio":
              for (type = 0; type < mediaEventTypes.length; type++)
                listenToNonDelegatedEvent(mediaEventTypes[type], didHydrate);
              break;
            case "source":
              listenToNonDelegatedEvent("error", didHydrate);
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", didHydrate);
              listenToNonDelegatedEvent("load", didHydrate);
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", didHydrate);
              break;
            case "input":
              checkControlledValueProps("input", props);
              listenToNonDelegatedEvent("invalid", didHydrate);
              validateInputProps(didHydrate, props);
              initInput(
                didHydrate,
                props.value,
                props.defaultValue,
                props.checked,
                props.defaultChecked,
                props.type,
                props.name,
                true
              );
              track(didHydrate);
              break;
            case "option":
              validateOptionProps(didHydrate, props);
              break;
            case "select":
              checkControlledValueProps("select", props);
              listenToNonDelegatedEvent("invalid", didHydrate);
              validateSelectProps(didHydrate, props);
              break;
            case "textarea":
              checkControlledValueProps("textarea", props), listenToNonDelegatedEvent("invalid", didHydrate), validateTextareaProps(didHydrate, props), initTextarea(
                didHydrate,
                props.value,
                props.defaultValue,
                props.children
              ), track(didHydrate);
          }
          type = props.children;
          "string" !== typeof type && "number" !== typeof type && "bigint" !== typeof type || didHydrate.textContent === "" + type || true === props.suppressHydrationWarning || checkForUnmatchedText(didHydrate.textContent, type) ? (null != props.popover && (listenToNonDelegatedEvent("beforetoggle", didHydrate), listenToNonDelegatedEvent("toggle", didHydrate)), null != props.onScroll && listenToNonDelegatedEvent("scroll", didHydrate), null != props.onScrollEnd && listenToNonDelegatedEvent("scrollend", didHydrate), null != props.onClick && (didHydrate.onclick = noop$1), didHydrate = true) : didHydrate = false;
          didHydrate || throwOnHydrationMismatch(fiber);
        }
        function popToNextHostParent(fiber) {
          for (hydrationParentFiber = fiber.return; hydrationParentFiber; )
            switch (hydrationParentFiber.tag) {
              case 5:
              case 13:
                rootOrSingletonContext = false;
                return;
              case 27:
              case 3:
                rootOrSingletonContext = true;
                return;
              default:
                hydrationParentFiber = hydrationParentFiber.return;
            }
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) return false;
          if (!isHydrating)
            return popToNextHostParent(fiber), isHydrating = true, false;
          var tag2 = fiber.tag, JSCompiler_temp;
          if (JSCompiler_temp = 3 !== tag2 && 27 !== tag2) {
            if (JSCompiler_temp = 5 === tag2)
              JSCompiler_temp = fiber.type, JSCompiler_temp = !("form" !== JSCompiler_temp && "button" !== JSCompiler_temp) || shouldSetTextContent(fiber.type, fiber.memoizedProps);
            JSCompiler_temp = !JSCompiler_temp;
          }
          if (JSCompiler_temp && nextHydratableInstance) {
            for (JSCompiler_temp = nextHydratableInstance; JSCompiler_temp; ) {
              var diffNode = buildHydrationDiffNode(fiber, 0), description = describeHydratableInstanceForDevWarnings(JSCompiler_temp);
              diffNode.serverTail.push(description);
              JSCompiler_temp = "Suspense" === description.type ? getNextHydratableInstanceAfterSuspenseInstance(JSCompiler_temp) : getNextHydratable(JSCompiler_temp.nextSibling);
            }
            throwOnHydrationMismatch(fiber);
          }
          popToNextHostParent(fiber);
          if (13 === tag2) {
            fiber = fiber.memoizedState;
            fiber = null !== fiber ? fiber.dehydrated : null;
            if (!fiber)
              throw Error(
                "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue."
              );
            nextHydratableInstance = getNextHydratableInstanceAfterSuspenseInstance(fiber);
          } else
            27 === tag2 ? (tag2 = nextHydratableInstance, isSingletonScope(fiber.type) ? (fiber = previousHydratableOnEnteringScopedSingleton, previousHydratableOnEnteringScopedSingleton = null, nextHydratableInstance = fiber) : nextHydratableInstance = tag2) : nextHydratableInstance = hydrationParentFiber ? getNextHydratable(fiber.stateNode.nextSibling) : null;
          return true;
        }
        function resetHydrationState() {
          nextHydratableInstance = hydrationParentFiber = null;
          didSuspendOrErrorDEV = isHydrating = false;
        }
        function upgradeHydrationErrorsToRecoverable() {
          var queuedErrors = hydrationErrors;
          null !== queuedErrors && (null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = queuedErrors : workInProgressRootRecoverableErrors.push.apply(
            workInProgressRootRecoverableErrors,
            queuedErrors
          ), hydrationErrors = null);
          return queuedErrors;
        }
        function queueHydrationError(error) {
          null === hydrationErrors ? hydrationErrors = [error] : hydrationErrors.push(error);
        }
        function emitPendingHydrationWarnings() {
          var diffRoot = hydrationDiffRootDEV;
          if (null !== diffRoot) {
            hydrationDiffRootDEV = null;
            for (var diff = describeDiff(diffRoot); 0 < diffRoot.children.length; )
              diffRoot = diffRoot.children[0];
            runWithFiberInDEV(diffRoot.fiber, function() {
              console.error(
                "A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. This can happen if a SSR-ed Client Component used:\n\n- A server/client branch `if (typeof window !== 'undefined')`.\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n- Date formatting in a user's locale which doesn't match the server.\n- External changing data without sending a snapshot of it along with the HTML.\n- Invalid HTML tag nesting.\n\nIt can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n\n%s%s",
                "https://react.dev/link/hydration-mismatch",
                diff
              );
            });
          }
        }
        function resetContextDependencies() {
          lastContextDependency = currentlyRenderingFiber$1 = null;
          isDisallowedContextReadInDEV = false;
        }
        function pushProvider(providerFiber, context, nextValue) {
          push(valueCursor, context._currentValue, providerFiber);
          context._currentValue = nextValue;
          push(rendererCursorDEV, context._currentRenderer, providerFiber);
          void 0 !== context._currentRenderer && null !== context._currentRenderer && context._currentRenderer !== rendererSigil && console.error(
            "Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."
          );
          context._currentRenderer = rendererSigil;
        }
        function popProvider(context, providerFiber) {
          context._currentValue = valueCursor.current;
          var currentRenderer = rendererCursorDEV.current;
          pop(rendererCursorDEV, providerFiber);
          context._currentRenderer = currentRenderer;
          pop(valueCursor, providerFiber);
        }
        function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
          for (; null !== parent; ) {
            var alternate = parent.alternate;
            (parent.childLanes & renderLanes2) !== renderLanes2 ? (parent.childLanes |= renderLanes2, null !== alternate && (alternate.childLanes |= renderLanes2)) : null !== alternate && (alternate.childLanes & renderLanes2) !== renderLanes2 && (alternate.childLanes |= renderLanes2);
            if (parent === propagationRoot) break;
            parent = parent.return;
          }
          parent !== propagationRoot && console.error(
            "Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue."
          );
        }
        function propagateContextChanges(workInProgress2, contexts, renderLanes2, forcePropagateEntireTree) {
          var fiber = workInProgress2.child;
          null !== fiber && (fiber.return = workInProgress2);
          for (; null !== fiber; ) {
            var list = fiber.dependencies;
            if (null !== list) {
              var nextFiber = fiber.child;
              list = list.firstContext;
              a: for (; null !== list; ) {
                var dependency = list;
                list = fiber;
                for (var i = 0; i < contexts.length; i++)
                  if (dependency.context === contexts[i]) {
                    list.lanes |= renderLanes2;
                    dependency = list.alternate;
                    null !== dependency && (dependency.lanes |= renderLanes2);
                    scheduleContextWorkOnParentPath(
                      list.return,
                      renderLanes2,
                      workInProgress2
                    );
                    forcePropagateEntireTree || (nextFiber = null);
                    break a;
                  }
                list = dependency.next;
              }
            } else if (18 === fiber.tag) {
              nextFiber = fiber.return;
              if (null === nextFiber)
                throw Error(
                  "We just came from a parent so we must have had a parent. This is a bug in React."
                );
              nextFiber.lanes |= renderLanes2;
              list = nextFiber.alternate;
              null !== list && (list.lanes |= renderLanes2);
              scheduleContextWorkOnParentPath(
                nextFiber,
                renderLanes2,
                workInProgress2
              );
              nextFiber = null;
            } else nextFiber = fiber.child;
            if (null !== nextFiber) nextFiber.return = fiber;
            else
              for (nextFiber = fiber; null !== nextFiber; ) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                fiber = nextFiber.sibling;
                if (null !== fiber) {
                  fiber.return = nextFiber.return;
                  nextFiber = fiber;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            fiber = nextFiber;
          }
        }
        function propagateParentContextChanges(current2, workInProgress2, renderLanes2, forcePropagateEntireTree) {
          current2 = null;
          for (var parent = workInProgress2, isInsidePropagationBailout = false; null !== parent; ) {
            if (!isInsidePropagationBailout) {
              if (0 !== (parent.flags & 524288)) isInsidePropagationBailout = true;
              else if (0 !== (parent.flags & 262144)) break;
            }
            if (10 === parent.tag) {
              var currentParent = parent.alternate;
              if (null === currentParent)
                throw Error("Should have a current fiber. This is a bug in React.");
              currentParent = currentParent.memoizedProps;
              if (null !== currentParent) {
                var context = parent.type;
                objectIs(parent.pendingProps.value, currentParent.value) || (null !== current2 ? current2.push(context) : current2 = [context]);
              }
            } else if (parent === hostTransitionProviderCursor.current) {
              currentParent = parent.alternate;
              if (null === currentParent)
                throw Error("Should have a current fiber. This is a bug in React.");
              currentParent.memoizedState.memoizedState !== parent.memoizedState.memoizedState && (null !== current2 ? current2.push(HostTransitionContext) : current2 = [HostTransitionContext]);
            }
            parent = parent.return;
          }
          null !== current2 && propagateContextChanges(
            workInProgress2,
            current2,
            renderLanes2,
            forcePropagateEntireTree
          );
          workInProgress2.flags |= 262144;
        }
        function checkIfContextChanged(currentDependencies) {
          for (currentDependencies = currentDependencies.firstContext; null !== currentDependencies; ) {
            if (!objectIs(
              currentDependencies.context._currentValue,
              currentDependencies.memoizedValue
            ))
              return true;
            currentDependencies = currentDependencies.next;
          }
          return false;
        }
        function prepareToReadContext(workInProgress2) {
          currentlyRenderingFiber$1 = workInProgress2;
          lastContextDependency = null;
          workInProgress2 = workInProgress2.dependencies;
          null !== workInProgress2 && (workInProgress2.firstContext = null);
        }
        function readContext(context) {
          isDisallowedContextReadInDEV && console.error(
            "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
          );
          return readContextForConsumer(currentlyRenderingFiber$1, context);
        }
        function readContextDuringReconciliation(consumer, context) {
          null === currentlyRenderingFiber$1 && prepareToReadContext(consumer);
          return readContextForConsumer(consumer, context);
        }
        function readContextForConsumer(consumer, context) {
          var value = context._currentValue;
          context = { context, memoizedValue: value, next: null };
          if (null === lastContextDependency) {
            if (null === consumer)
              throw Error(
                "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
              );
            lastContextDependency = context;
            consumer.dependencies = {
              lanes: 0,
              firstContext: context,
              _debugThenableState: null
            };
            consumer.flags |= 524288;
          } else lastContextDependency = lastContextDependency.next = context;
          return value;
        }
        function createCache() {
          return {
            controller: new AbortControllerLocal(),
            data: /* @__PURE__ */ new Map(),
            refCount: 0
          };
        }
        function retainCache(cache) {
          cache.controller.signal.aborted && console.warn(
            "A cache instance was retained after it was already freed. This likely indicates a bug in React."
          );
          cache.refCount++;
        }
        function releaseCache(cache) {
          cache.refCount--;
          0 > cache.refCount && console.warn(
            "A cache instance was released after it was already freed. This likely indicates a bug in React."
          );
          0 === cache.refCount && scheduleCallback$2(NormalPriority, function() {
            cache.controller.abort();
          });
        }
        function pushNestedEffectDurations() {
          var prevEffectDuration = profilerEffectDuration;
          profilerEffectDuration = 0;
          return prevEffectDuration;
        }
        function popNestedEffectDurations(prevEffectDuration) {
          var elapsedTime = profilerEffectDuration;
          profilerEffectDuration = prevEffectDuration;
          return elapsedTime;
        }
        function bubbleNestedEffectDurations(prevEffectDuration) {
          var elapsedTime = profilerEffectDuration;
          profilerEffectDuration += prevEffectDuration;
          return elapsedTime;
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now();
          0 > fiber.actualStartTime && (fiber.actualStartTime = profilerStartTime);
        }
        function stopProfilerTimerIfRunningAndRecordDuration(fiber) {
          if (0 <= profilerStartTime) {
            var elapsedTime = now() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            fiber.selfBaseDuration = elapsedTime;
            profilerStartTime = -1;
          }
        }
        function stopProfilerTimerIfRunningAndRecordIncompleteDuration(fiber) {
          if (0 <= profilerStartTime) {
            var elapsedTime = now() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            profilerStartTime = -1;
          }
        }
        function recordEffectDuration() {
          if (0 <= profilerStartTime) {
            var elapsedTime = now() - profilerStartTime;
            profilerStartTime = -1;
            profilerEffectDuration += elapsedTime;
          }
        }
        function startEffectTimer() {
          profilerStartTime = now();
        }
        function transferActualDuration(fiber) {
          for (var child = fiber.child; child; )
            fiber.actualDuration += child.actualDuration, child = child.sibling;
        }
        function entangleAsyncAction(transition, thenable) {
          if (null === currentEntangledListeners) {
            var entangledListeners = currentEntangledListeners = [];
            currentEntangledPendingCount = 0;
            currentEntangledLane = requestTransitionLane();
            currentEntangledActionThenable = {
              status: "pending",
              value: void 0,
              then: function(resolve) {
                entangledListeners.push(resolve);
              }
            };
          }
          currentEntangledPendingCount++;
          thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);
          return thenable;
        }
        function pingEngtangledActionScope() {
          if (0 === --currentEntangledPendingCount && null !== currentEntangledListeners) {
            null !== currentEntangledActionThenable && (currentEntangledActionThenable.status = "fulfilled");
            var listeners = currentEntangledListeners;
            currentEntangledListeners = null;
            currentEntangledLane = 0;
            currentEntangledActionThenable = null;
            for (var i = 0; i < listeners.length; i++) (0, listeners[i])();
          }
        }
        function chainThenableValue(thenable, result) {
          var listeners = [], thenableWithOverride = {
            status: "pending",
            value: null,
            reason: null,
            then: function(resolve) {
              listeners.push(resolve);
            }
          };
          thenable.then(
            function() {
              thenableWithOverride.status = "fulfilled";
              thenableWithOverride.value = result;
              for (var i = 0; i < listeners.length; i++) (0, listeners[i])(result);
            },
            function(error) {
              thenableWithOverride.status = "rejected";
              thenableWithOverride.reason = error;
              for (error = 0; error < listeners.length; error++)
                (0, listeners[error])(void 0);
            }
          );
          return thenableWithOverride;
        }
        function peekCacheFromPool() {
          var cacheResumedFromPreviousRender = resumedCache.current;
          return null !== cacheResumedFromPreviousRender ? cacheResumedFromPreviousRender : workInProgressRoot.pooledCache;
        }
        function pushTransition(offscreenWorkInProgress, prevCachePool) {
          null === prevCachePool ? push(resumedCache, resumedCache.current, offscreenWorkInProgress) : push(resumedCache, prevCachePool.pool, offscreenWorkInProgress);
        }
        function getSuspendedCache() {
          var cacheFromPool = peekCacheFromPool();
          return null === cacheFromPool ? null : { parent: CacheContext._currentValue, pool: cacheFromPool };
        }
        function createThenableState() {
          return { didWarnAboutUncachedPromise: false, thenables: [] };
        }
        function isThenableResolved(thenable) {
          thenable = thenable.status;
          return "fulfilled" === thenable || "rejected" === thenable;
        }
        function noop$3() {
        }
        function trackUsedThenable(thenableState2, thenable, index) {
          null !== ReactSharedInternals.actQueue && (ReactSharedInternals.didUsePromise = true);
          var trackedThenables = thenableState2.thenables;
          index = trackedThenables[index];
          void 0 === index ? trackedThenables.push(thenable) : index !== thenable && (thenableState2.didWarnAboutUncachedPromise || (thenableState2.didWarnAboutUncachedPromise = true, console.error(
            "A component was suspended by an uncached promise. Creating promises inside a Client Component or hook is not yet supported, except via a Suspense-compatible library or framework."
          )), thenable.then(noop$3, noop$3), thenable = index);
          switch (thenable.status) {
            case "fulfilled":
              return thenable.value;
            case "rejected":
              throw thenableState2 = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState2), thenableState2;
            default:
              if ("string" === typeof thenable.status)
                thenable.then(noop$3, noop$3);
              else {
                thenableState2 = workInProgressRoot;
                if (null !== thenableState2 && 100 < thenableState2.shellSuspendCounter)
                  throw Error(
                    "An unknown Component is an async Client Component. Only Server Components can be async at the moment. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server."
                  );
                thenableState2 = thenable;
                thenableState2.status = "pending";
                thenableState2.then(
                  function(fulfilledValue) {
                    if ("pending" === thenable.status) {
                      var fulfilledThenable = thenable;
                      fulfilledThenable.status = "fulfilled";
                      fulfilledThenable.value = fulfilledValue;
                    }
                  },
                  function(error) {
                    if ("pending" === thenable.status) {
                      var rejectedThenable = thenable;
                      rejectedThenable.status = "rejected";
                      rejectedThenable.reason = error;
                    }
                  }
                );
              }
              switch (thenable.status) {
                case "fulfilled":
                  return thenable.value;
                case "rejected":
                  throw thenableState2 = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState2), thenableState2;
              }
              suspendedThenable = thenable;
              needsToResetSuspendedThenableDEV = true;
              throw SuspenseException;
          }
        }
        function getSuspendedThenable() {
          if (null === suspendedThenable)
            throw Error(
              "Expected a suspended thenable. This is a bug in React. Please file an issue."
            );
          var thenable = suspendedThenable;
          suspendedThenable = null;
          needsToResetSuspendedThenableDEV = false;
          return thenable;
        }
        function checkIfUseWrappedInAsyncCatch(rejectedReason) {
          if (rejectedReason === SuspenseException || rejectedReason === SuspenseActionException)
            throw Error(
              "Hooks are not supported inside an async component. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server."
            );
        }
        function initializeUpdateQueue(fiber) {
          fiber.updateQueue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: { pending: null, lanes: 0, hiddenCallbacks: null },
            callbacks: null
          };
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          current2 = current2.updateQueue;
          workInProgress2.updateQueue === current2 && (workInProgress2.updateQueue = {
            baseState: current2.baseState,
            firstBaseUpdate: current2.firstBaseUpdate,
            lastBaseUpdate: current2.lastBaseUpdate,
            shared: current2.shared,
            callbacks: null
          });
        }
        function createUpdate(lane) {
          return {
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
        }
        function enqueueUpdate(fiber, update, lane) {
          var updateQueue = fiber.updateQueue;
          if (null === updateQueue) return null;
          updateQueue = updateQueue.shared;
          if (currentlyProcessingQueue === updateQueue && !didWarnUpdateInsideUpdate) {
            var componentName2 = getComponentNameFromFiber(fiber);
            console.error(
              "An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.\n\nPlease update the following component: %s",
              componentName2
            );
            didWarnUpdateInsideUpdate = true;
          }
          if ((executionContext & RenderContext) !== NoContext)
            return componentName2 = updateQueue.pending, null === componentName2 ? update.next = update : (update.next = componentName2.next, componentName2.next = update), updateQueue.pending = update, update = getRootForUpdatedFiber(fiber), markUpdateLaneFromFiberToRoot(fiber, null, lane), update;
          enqueueUpdate$1(fiber, updateQueue, update, lane);
          return getRootForUpdatedFiber(fiber);
        }
        function entangleTransitions(root3, fiber, lane) {
          fiber = fiber.updateQueue;
          if (null !== fiber && (fiber = fiber.shared, 0 !== (lane & 4194048))) {
            var queueLanes = fiber.lanes;
            queueLanes &= root3.pendingLanes;
            lane |= queueLanes;
            fiber.lanes = lane;
            markRootEntangled(root3, lane);
          }
        }
        function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
          var queue = workInProgress2.updateQueue, current2 = workInProgress2.alternate;
          if (null !== current2 && (current2 = current2.updateQueue, queue === current2)) {
            var newFirst = null, newLast = null;
            queue = queue.firstBaseUpdate;
            if (null !== queue) {
              do {
                var clone2 = {
                  lane: queue.lane,
                  tag: queue.tag,
                  payload: queue.payload,
                  callback: null,
                  next: null
                };
                null === newLast ? newFirst = newLast = clone2 : newLast = newLast.next = clone2;
                queue = queue.next;
              } while (null !== queue);
              null === newLast ? newFirst = newLast = capturedUpdate : newLast = newLast.next = capturedUpdate;
            } else newFirst = newLast = capturedUpdate;
            queue = {
              baseState: current2.baseState,
              firstBaseUpdate: newFirst,
              lastBaseUpdate: newLast,
              shared: current2.shared,
              callbacks: current2.callbacks
            };
            workInProgress2.updateQueue = queue;
            return;
          }
          workInProgress2 = queue.lastBaseUpdate;
          null === workInProgress2 ? queue.firstBaseUpdate = capturedUpdate : workInProgress2.next = capturedUpdate;
          queue.lastBaseUpdate = capturedUpdate;
        }
        function suspendIfUpdateReadFromEntangledAsyncAction() {
          if (didReadFromEntangledAsyncAction) {
            var entangledActionThenable = currentEntangledActionThenable;
            if (null !== entangledActionThenable) throw entangledActionThenable;
          }
        }
        function processUpdateQueue(workInProgress2, props, instance$jscomp$0, renderLanes2) {
          didReadFromEntangledAsyncAction = false;
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          currentlyProcessingQueue = queue.shared;
          var firstBaseUpdate = queue.firstBaseUpdate, lastBaseUpdate = queue.lastBaseUpdate, pendingQueue = queue.shared.pending;
          if (null !== pendingQueue) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue, firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            null === lastBaseUpdate ? firstBaseUpdate = firstPendingUpdate : lastBaseUpdate.next = firstPendingUpdate;
            lastBaseUpdate = lastPendingUpdate;
            var current2 = workInProgress2.alternate;
            null !== current2 && (current2 = current2.updateQueue, pendingQueue = current2.lastBaseUpdate, pendingQueue !== lastBaseUpdate && (null === pendingQueue ? current2.firstBaseUpdate = firstPendingUpdate : pendingQueue.next = firstPendingUpdate, current2.lastBaseUpdate = lastPendingUpdate));
          }
          if (null !== firstBaseUpdate) {
            var newState = queue.baseState;
            lastBaseUpdate = 0;
            current2 = firstPendingUpdate = lastPendingUpdate = null;
            pendingQueue = firstBaseUpdate;
            do {
              var updateLane = pendingQueue.lane & -536870913, isHiddenUpdate = updateLane !== pendingQueue.lane;
              if (isHiddenUpdate ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes2 & updateLane) === updateLane) {
                0 !== updateLane && updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction = true);
                null !== current2 && (current2 = current2.next = {
                  lane: 0,
                  tag: pendingQueue.tag,
                  payload: pendingQueue.payload,
                  callback: null,
                  next: null
                });
                a: {
                  updateLane = workInProgress2;
                  var partialState = pendingQueue;
                  var nextProps = props, instance = instance$jscomp$0;
                  switch (partialState.tag) {
                    case ReplaceState:
                      partialState = partialState.payload;
                      if ("function" === typeof partialState) {
                        isDisallowedContextReadInDEV = true;
                        var nextState = partialState.call(
                          instance,
                          newState,
                          nextProps
                        );
                        if (updateLane.mode & StrictLegacyMode) {
                          setIsStrictModeForDevtools(true);
                          try {
                            partialState.call(instance, newState, nextProps);
                          } finally {
                            setIsStrictModeForDevtools(false);
                          }
                        }
                        isDisallowedContextReadInDEV = false;
                        newState = nextState;
                        break a;
                      }
                      newState = partialState;
                      break a;
                    case CaptureUpdate:
                      updateLane.flags = updateLane.flags & -65537 | 128;
                    case UpdateState:
                      nextState = partialState.payload;
                      if ("function" === typeof nextState) {
                        isDisallowedContextReadInDEV = true;
                        partialState = nextState.call(
                          instance,
                          newState,
                          nextProps
                        );
                        if (updateLane.mode & StrictLegacyMode) {
                          setIsStrictModeForDevtools(true);
                          try {
                            nextState.call(instance, newState, nextProps);
                          } finally {
                            setIsStrictModeForDevtools(false);
                          }
                        }
                        isDisallowedContextReadInDEV = false;
                      } else partialState = nextState;
                      if (null === partialState || void 0 === partialState) break a;
                      newState = assign({}, newState, partialState);
                      break a;
                    case ForceUpdate:
                      hasForceUpdate = true;
                  }
                }
                updateLane = pendingQueue.callback;
                null !== updateLane && (workInProgress2.flags |= 64, isHiddenUpdate && (workInProgress2.flags |= 8192), isHiddenUpdate = queue.callbacks, null === isHiddenUpdate ? queue.callbacks = [updateLane] : isHiddenUpdate.push(updateLane));
              } else
                isHiddenUpdate = {
                  lane: updateLane,
                  tag: pendingQueue.tag,
                  payload: pendingQueue.payload,
                  callback: pendingQueue.callback,
                  next: null
                }, null === current2 ? (firstPendingUpdate = current2 = isHiddenUpdate, lastPendingUpdate = newState) : current2 = current2.next = isHiddenUpdate, lastBaseUpdate |= updateLane;
              pendingQueue = pendingQueue.next;
              if (null === pendingQueue)
                if (pendingQueue = queue.shared.pending, null === pendingQueue)
                  break;
                else
                  isHiddenUpdate = pendingQueue, pendingQueue = isHiddenUpdate.next, isHiddenUpdate.next = null, queue.lastBaseUpdate = isHiddenUpdate, queue.shared.pending = null;
            } while (1);
            null === current2 && (lastPendingUpdate = newState);
            queue.baseState = lastPendingUpdate;
            queue.firstBaseUpdate = firstPendingUpdate;
            queue.lastBaseUpdate = current2;
            null === firstBaseUpdate && (queue.shared.lanes = 0);
            workInProgressRootSkippedLanes |= lastBaseUpdate;
            workInProgress2.lanes = lastBaseUpdate;
            workInProgress2.memoizedState = newState;
          }
          currentlyProcessingQueue = null;
        }
        function callCallback(callback, context) {
          if ("function" !== typeof callback)
            throw Error(
              "Invalid argument passed as callback. Expected a function. Instead received: " + callback
            );
          callback.call(context);
        }
        function commitHiddenCallbacks(updateQueue, context) {
          var hiddenCallbacks = updateQueue.shared.hiddenCallbacks;
          if (null !== hiddenCallbacks)
            for (updateQueue.shared.hiddenCallbacks = null, updateQueue = 0; updateQueue < hiddenCallbacks.length; updateQueue++)
              callCallback(hiddenCallbacks[updateQueue], context);
        }
        function commitCallbacks(updateQueue, context) {
          var callbacks = updateQueue.callbacks;
          if (null !== callbacks)
            for (updateQueue.callbacks = null, updateQueue = 0; updateQueue < callbacks.length; updateQueue++)
              callCallback(callbacks[updateQueue], context);
        }
        function pushHiddenContext(fiber, context) {
          var prevEntangledRenderLanes = entangledRenderLanes;
          push(prevEntangledRenderLanesCursor, prevEntangledRenderLanes, fiber);
          push(currentTreeHiddenStackCursor, context, fiber);
          entangledRenderLanes = prevEntangledRenderLanes | context.baseLanes;
        }
        function reuseHiddenContextOnStack(fiber) {
          push(prevEntangledRenderLanesCursor, entangledRenderLanes, fiber);
          push(
            currentTreeHiddenStackCursor,
            currentTreeHiddenStackCursor.current,
            fiber
          );
        }
        function popHiddenContext(fiber) {
          entangledRenderLanes = prevEntangledRenderLanesCursor.current;
          pop(currentTreeHiddenStackCursor, fiber);
          pop(prevEntangledRenderLanesCursor, fiber);
        }
        function mountHookTypesDev() {
          var hookName = currentHookNameInDev;
          null === hookTypesDev ? hookTypesDev = [hookName] : hookTypesDev.push(hookName);
        }
        function updateHookTypesDev() {
          var hookName = currentHookNameInDev;
          if (null !== hookTypesDev && (hookTypesUpdateIndexDev++, hookTypesDev[hookTypesUpdateIndexDev] !== hookName)) {
            var componentName2 = getComponentNameFromFiber(currentlyRenderingFiber);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName2) && (didWarnAboutMismatchedHooksForComponent.add(componentName2), null !== hookTypesDev)) {
              for (var table = "", i = 0; i <= hookTypesUpdateIndexDev; i++) {
                var oldHookName = hookTypesDev[i], newHookName = i === hookTypesUpdateIndexDev ? hookName : oldHookName;
                for (oldHookName = i + 1 + ". " + oldHookName; 30 > oldHookName.length; )
                  oldHookName += " ";
                oldHookName += newHookName + "\n";
                table += oldHookName;
              }
              console.error(
                "React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://react.dev/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                componentName2,
                table
              );
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          void 0 === deps || null === deps || isArrayImpl(deps) || console.error(
            "%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.",
            currentHookNameInDev,
            typeof deps
          );
        }
        function warnOnUseFormStateInDev() {
          var componentName2 = getComponentNameFromFiber(currentlyRenderingFiber);
          didWarnAboutUseFormState.has(componentName2) || (didWarnAboutUseFormState.add(componentName2), console.error(
            "ReactDOM.useFormState has been renamed to React.useActionState. Please update %s to use React.useActionState.",
            componentName2
          ));
        }
        function throwInvalidHookError() {
          throw Error(
            "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."
          );
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          if (ignorePreviousDependencies) return false;
          if (null === prevDeps)
            return console.error(
              "%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.",
              currentHookNameInDev
            ), false;
          nextDeps.length !== prevDeps.length && console.error(
            "The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s",
            currentHookNameInDev,
            "[" + prevDeps.join(", ") + "]",
            "[" + nextDeps.join(", ") + "]"
          );
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++)
            if (!objectIs(nextDeps[i], prevDeps[i])) return false;
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
          renderLanes = nextRenderLanes;
          currentlyRenderingFiber = workInProgress2;
          hookTypesDev = null !== current2 ? current2._debugHookTypes : null;
          hookTypesUpdateIndexDev = -1;
          ignorePreviousDependencies = null !== current2 && current2.type !== workInProgress2.type;
          if ("[object AsyncFunction]" === Object.prototype.toString.call(Component) || "[object AsyncGeneratorFunction]" === Object.prototype.toString.call(Component))
            nextRenderLanes = getComponentNameFromFiber(currentlyRenderingFiber), didWarnAboutAsyncClientComponent.has(nextRenderLanes) || (didWarnAboutAsyncClientComponent.add(nextRenderLanes), console.error(
              "%s is an async Client Component. Only Server Components can be async at the moment. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.",
              null === nextRenderLanes ? "An unknown Component" : "<" + nextRenderLanes + ">"
            ));
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.lanes = 0;
          ReactSharedInternals.H = null !== current2 && null !== current2.memoizedState ? HooksDispatcherOnUpdateInDEV : null !== hookTypesDev ? HooksDispatcherOnMountWithHookTypesInDEV : HooksDispatcherOnMountInDEV;
          shouldDoubleInvokeUserFnsInHooksDEV = nextRenderLanes = (workInProgress2.mode & StrictLegacyMode) !== NoMode;
          var children = callComponentInDEV(Component, props, secondArg);
          shouldDoubleInvokeUserFnsInHooksDEV = false;
          didScheduleRenderPhaseUpdateDuringThisPass && (children = renderWithHooksAgain(
            workInProgress2,
            Component,
            props,
            secondArg
          ));
          if (nextRenderLanes) {
            setIsStrictModeForDevtools(true);
            try {
              children = renderWithHooksAgain(
                workInProgress2,
                Component,
                props,
                secondArg
              );
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          finishRenderingHooks(current2, workInProgress2);
          return children;
        }
        function finishRenderingHooks(current2, workInProgress2) {
          workInProgress2._debugHookTypes = hookTypesDev;
          null === workInProgress2.dependencies ? null !== thenableState$1 && (workInProgress2.dependencies = {
            lanes: 0,
            firstContext: null,
            _debugThenableState: thenableState$1
          }) : workInProgress2.dependencies._debugThenableState = thenableState$1;
          ReactSharedInternals.H = ContextOnlyDispatcher;
          var didRenderTooFewHooks = null !== currentHook && null !== currentHook.next;
          renderLanes = 0;
          hookTypesDev = currentHookNameInDev = workInProgressHook = currentHook = currentlyRenderingFiber = null;
          hookTypesUpdateIndexDev = -1;
          null !== current2 && (current2.flags & 65011712) !== (workInProgress2.flags & 65011712) && console.error(
            "Internal React error: Expected static flag was missing. Please notify the React team."
          );
          didScheduleRenderPhaseUpdate = false;
          thenableIndexCounter$1 = 0;
          thenableState$1 = null;
          if (didRenderTooFewHooks)
            throw Error(
              "Rendered fewer hooks than expected. This may be caused by an accidental early return statement."
            );
          null === current2 || didReceiveUpdate || (current2 = current2.dependencies, null !== current2 && checkIfContextChanged(current2) && (didReceiveUpdate = true));
          needsToResetSuspendedThenableDEV ? (needsToResetSuspendedThenableDEV = false, current2 = true) : current2 = false;
          current2 && (workInProgress2 = getComponentNameFromFiber(workInProgress2) || "Unknown", didWarnAboutUseWrappedInTryCatch.has(workInProgress2) || didWarnAboutAsyncClientComponent.has(workInProgress2) || (didWarnAboutUseWrappedInTryCatch.add(workInProgress2), console.error(
            "`use` was called from inside a try/catch block. This is not allowed and can lead to unexpected behavior. To handle errors triggered by `use`, wrap your component in a error boundary."
          )));
        }
        function renderWithHooksAgain(workInProgress2, Component, props, secondArg) {
          currentlyRenderingFiber = workInProgress2;
          var numberOfReRenders = 0;
          do {
            didScheduleRenderPhaseUpdateDuringThisPass && (thenableState$1 = null);
            thenableIndexCounter$1 = 0;
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            if (numberOfReRenders >= RE_RENDER_LIMIT)
              throw Error(
                "Too many re-renders. React limits the number of renders to prevent an infinite loop."
              );
            numberOfReRenders += 1;
            ignorePreviousDependencies = false;
            workInProgressHook = currentHook = null;
            if (null != workInProgress2.updateQueue) {
              var children = workInProgress2.updateQueue;
              children.lastEffect = null;
              children.events = null;
              children.stores = null;
              null != children.memoCache && (children.memoCache.index = 0);
            }
            hookTypesUpdateIndexDev = -1;
            ReactSharedInternals.H = HooksDispatcherOnRerenderInDEV;
            children = callComponentInDEV(Component, props, secondArg);
          } while (didScheduleRenderPhaseUpdateDuringThisPass);
          return children;
        }
        function TransitionAwareHostComponent() {
          var dispatcher = ReactSharedInternals.H, maybeThenable = dispatcher.useState()[0];
          maybeThenable = "function" === typeof maybeThenable.then ? useThenable(maybeThenable) : maybeThenable;
          dispatcher = dispatcher.useState()[0];
          (null !== currentHook ? currentHook.memoizedState : null) !== dispatcher && (currentlyRenderingFiber.flags |= 1024);
          return maybeThenable;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = 0 !== localIdCounter;
          localIdCounter = 0;
          return didRenderIdHook;
        }
        function bailoutHooks(current2, workInProgress2, lanes) {
          workInProgress2.updateQueue = current2.updateQueue;
          workInProgress2.flags = (workInProgress2.mode & StrictEffectsMode) !== NoMode ? workInProgress2.flags & -402655237 : workInProgress2.flags & -2053;
          current2.lanes &= ~lanes;
        }
        function resetHooksOnUnwind(workInProgress2) {
          if (didScheduleRenderPhaseUpdate) {
            for (workInProgress2 = workInProgress2.memoizedState; null !== workInProgress2; ) {
              var queue = workInProgress2.queue;
              null !== queue && (queue.pending = null);
              workInProgress2 = workInProgress2.next;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          renderLanes = 0;
          hookTypesDev = workInProgressHook = currentHook = currentlyRenderingFiber = null;
          hookTypesUpdateIndexDev = -1;
          currentHookNameInDev = null;
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          thenableIndexCounter$1 = localIdCounter = 0;
          thenableState$1 = null;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          null === workInProgressHook ? currentlyRenderingFiber.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          if (null === currentHook) {
            var nextCurrentHook = currentlyRenderingFiber.alternate;
            nextCurrentHook = null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
          } else nextCurrentHook = currentHook.next;
          var nextWorkInProgressHook = null === workInProgressHook ? currentlyRenderingFiber.memoizedState : workInProgressHook.next;
          if (null !== nextWorkInProgressHook)
            workInProgressHook = nextWorkInProgressHook, currentHook = nextCurrentHook;
          else {
            if (null === nextCurrentHook) {
              if (null === currentlyRenderingFiber.alternate)
                throw Error(
                  "Update hook called on initial render. This is likely a bug in React. Please file an issue."
                );
              throw Error("Rendered more hooks than during the previous render.");
            }
            currentHook = nextCurrentHook;
            nextCurrentHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            null === workInProgressHook ? currentlyRenderingFiber.memoizedState = workInProgressHook = nextCurrentHook : workInProgressHook = workInProgressHook.next = nextCurrentHook;
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return { lastEffect: null, events: null, stores: null, memoCache: null };
        }
        function useThenable(thenable) {
          var index = thenableIndexCounter$1;
          thenableIndexCounter$1 += 1;
          null === thenableState$1 && (thenableState$1 = createThenableState());
          thenable = trackUsedThenable(thenableState$1, thenable, index);
          index = currentlyRenderingFiber;
          null === (null === workInProgressHook ? index.memoizedState : workInProgressHook.next) && (index = index.alternate, ReactSharedInternals.H = null !== index && null !== index.memoizedState ? HooksDispatcherOnUpdateInDEV : HooksDispatcherOnMountInDEV);
          return thenable;
        }
        function use(usable) {
          if (null !== usable && "object" === typeof usable) {
            if ("function" === typeof usable.then) return useThenable(usable);
            if (usable.$$typeof === REACT_CONTEXT_TYPE) return readContext(usable);
          }
          throw Error("An unsupported type was passed to use(): " + String(usable));
        }
        function useMemoCache(size) {
          var memoCache = null, updateQueue = currentlyRenderingFiber.updateQueue;
          null !== updateQueue && (memoCache = updateQueue.memoCache);
          if (null == memoCache) {
            var current2 = currentlyRenderingFiber.alternate;
            null !== current2 && (current2 = current2.updateQueue, null !== current2 && (current2 = current2.memoCache, null != current2 && (memoCache = {
              data: current2.data.map(function(array) {
                return array.slice();
              }),
              index: 0
            })));
          }
          null == memoCache && (memoCache = { data: [], index: 0 });
          null === updateQueue && (updateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = updateQueue);
          updateQueue.memoCache = memoCache;
          updateQueue = memoCache.data[memoCache.index];
          if (void 0 === updateQueue || ignorePreviousDependencies)
            for (updateQueue = memoCache.data[memoCache.index] = Array(size), current2 = 0; current2 < size; current2++)
              updateQueue[current2] = REACT_MEMO_CACHE_SENTINEL;
          else
            updateQueue.length !== size && console.error(
              "Expected a constant size argument for each invocation of useMemoCache. The previous cache was allocated with size %s but size %s was requested.",
              updateQueue.length,
              size
            );
          memoCache.index++;
          return updateQueue;
        }
        function basicStateReducer(state, action) {
          return "function" === typeof action ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          if (void 0 !== init) {
            var initialState = init(initialArg);
            if (shouldDoubleInvokeUserFnsInHooksDEV) {
              setIsStrictModeForDevtools(true);
              try {
                init(initialArg);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          } else initialState = initialArg;
          hook.memoizedState = hook.baseState = initialState;
          reducer = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          hook.queue = reducer;
          reducer = reducer.dispatch = dispatchReducerAction.bind(
            null,
            currentlyRenderingFiber,
            reducer
          );
          return [hook.memoizedState, reducer];
        }
        function updateReducer(reducer) {
          var hook = updateWorkInProgressHook();
          return updateReducerImpl(hook, currentHook, reducer);
        }
        function updateReducerImpl(hook, current2, reducer) {
          var queue = hook.queue;
          if (null === queue)
            throw Error(
              "Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)"
            );
          queue.lastRenderedReducer = reducer;
          var baseQueue = hook.baseQueue, pendingQueue = queue.pending;
          if (null !== pendingQueue) {
            if (null !== baseQueue) {
              var baseFirst = baseQueue.next;
              baseQueue.next = pendingQueue.next;
              pendingQueue.next = baseFirst;
            }
            current2.baseQueue !== baseQueue && console.error(
              "Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."
            );
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          pendingQueue = hook.baseState;
          if (null === baseQueue) hook.memoizedState = pendingQueue;
          else {
            current2 = baseQueue.next;
            var newBaseQueueFirst = baseFirst = null, newBaseQueueLast = null, update = current2, didReadFromEntangledAsyncAction2 = false;
            do {
              var updateLane = update.lane & -536870913;
              if (updateLane !== update.lane ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes & updateLane) === updateLane) {
                var revertLane = update.revertLane;
                if (0 === revertLane)
                  null !== newBaseQueueLast && (newBaseQueueLast = newBaseQueueLast.next = {
                    lane: 0,
                    revertLane: 0,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  }), updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction2 = true);
                else if ((renderLanes & revertLane) === revertLane) {
                  update = update.next;
                  revertLane === currentEntangledLane && (didReadFromEntangledAsyncAction2 = true);
                  continue;
                } else
                  updateLane = {
                    lane: 0,
                    revertLane: update.revertLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = updateLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = updateLane, currentlyRenderingFiber.lanes |= revertLane, workInProgressRootSkippedLanes |= revertLane;
                updateLane = update.action;
                shouldDoubleInvokeUserFnsInHooksDEV && reducer(pendingQueue, updateLane);
                pendingQueue = update.hasEagerState ? update.eagerState : reducer(pendingQueue, updateLane);
              } else
                revertLane = {
                  lane: updateLane,
                  revertLane: update.revertLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = revertLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = revertLane, currentlyRenderingFiber.lanes |= updateLane, workInProgressRootSkippedLanes |= updateLane;
              update = update.next;
            } while (null !== update && update !== current2);
            null === newBaseQueueLast ? baseFirst = pendingQueue : newBaseQueueLast.next = newBaseQueueFirst;
            if (!objectIs(pendingQueue, hook.memoizedState) && (didReceiveUpdate = true, didReadFromEntangledAsyncAction2 && (reducer = currentEntangledActionThenable, null !== reducer)))
              throw reducer;
            hook.memoizedState = pendingQueue;
            hook.baseState = baseFirst;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = pendingQueue;
          }
          null === baseQueue && (queue.lanes = 0);
          return [hook.memoizedState, queue.dispatch];
        }
        function rerenderReducer(reducer) {
          var hook = updateWorkInProgressHook(), queue = hook.queue;
          if (null === queue)
            throw Error(
              "Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)"
            );
          queue.lastRenderedReducer = reducer;
          var dispatch = queue.dispatch, lastRenderPhaseUpdate = queue.pending, newState = hook.memoizedState;
          if (null !== lastRenderPhaseUpdate) {
            queue.pending = null;
            var update = lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            do
              newState = reducer(newState, update.action), update = update.next;
            while (update !== lastRenderPhaseUpdate);
            objectIs(newState, hook.memoizedState) || (didReceiveUpdate = true);
            hook.memoizedState = newState;
            null === hook.baseQueue && (hook.baseState = newState);
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber, hook = mountWorkInProgressHook();
          if (isHydrating) {
            if (void 0 === getServerSnapshot)
              throw Error(
                "Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering."
              );
            var nextSnapshot = getServerSnapshot();
            didWarnUncachedGetSnapshot || nextSnapshot === getServerSnapshot() || (console.error(
              "The result of getServerSnapshot should be cached to avoid an infinite loop"
            ), didWarnUncachedGetSnapshot = true);
          } else {
            nextSnapshot = getSnapshot();
            didWarnUncachedGetSnapshot || (getServerSnapshot = getSnapshot(), objectIs(nextSnapshot, getServerSnapshot) || (console.error(
              "The result of getSnapshot should be cached to avoid an infinite loop"
            ), didWarnUncachedGetSnapshot = true));
            if (null === workInProgressRoot)
              throw Error(
                "Expected a work-in-progress root. This is a bug in React. Please file an issue."
              );
            0 !== (workInProgressRootRenderLanes & 124) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
          }
          hook.memoizedState = nextSnapshot;
          getServerSnapshot = { value: nextSnapshot, getSnapshot };
          hook.queue = getServerSnapshot;
          mountEffect(
            subscribeToStore.bind(null, fiber, getServerSnapshot, subscribe),
            [subscribe]
          );
          fiber.flags |= 2048;
          pushSimpleEffect(
            HasEffect | Passive,
            createEffectInstance(),
            updateStoreInstance.bind(
              null,
              fiber,
              getServerSnapshot,
              nextSnapshot,
              getSnapshot
            ),
            null
          );
          return nextSnapshot;
        }
        function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber, hook = updateWorkInProgressHook(), isHydrating$jscomp$0 = isHydrating;
          if (isHydrating$jscomp$0) {
            if (void 0 === getServerSnapshot)
              throw Error(
                "Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering."
              );
            getServerSnapshot = getServerSnapshot();
          } else if (getServerSnapshot = getSnapshot(), !didWarnUncachedGetSnapshot) {
            var cachedSnapshot = getSnapshot();
            objectIs(getServerSnapshot, cachedSnapshot) || (console.error(
              "The result of getSnapshot should be cached to avoid an infinite loop"
            ), didWarnUncachedGetSnapshot = true);
          }
          if (cachedSnapshot = !objectIs(
            (currentHook || hook).memoizedState,
            getServerSnapshot
          ))
            hook.memoizedState = getServerSnapshot, didReceiveUpdate = true;
          hook = hook.queue;
          var create2 = subscribeToStore.bind(null, fiber, hook, subscribe);
          updateEffectImpl(2048, Passive, create2, [subscribe]);
          if (hook.getSnapshot !== getSnapshot || cachedSnapshot || null !== workInProgressHook && workInProgressHook.memoizedState.tag & HasEffect) {
            fiber.flags |= 2048;
            pushSimpleEffect(
              HasEffect | Passive,
              createEffectInstance(),
              updateStoreInstance.bind(
                null,
                fiber,
                hook,
                getServerSnapshot,
                getSnapshot
              ),
              null
            );
            if (null === workInProgressRoot)
              throw Error(
                "Expected a work-in-progress root. This is a bug in React. Please file an issue."
              );
            isHydrating$jscomp$0 || 0 !== (renderLanes & 124) || pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
          }
          return getServerSnapshot;
        }
        function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
          fiber.flags |= 16384;
          fiber = { getSnapshot, value: renderedSnapshot };
          getSnapshot = currentlyRenderingFiber.updateQueue;
          null === getSnapshot ? (getSnapshot = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = getSnapshot, getSnapshot.stores = [fiber]) : (renderedSnapshot = getSnapshot.stores, null === renderedSnapshot ? getSnapshot.stores = [fiber] : renderedSnapshot.push(fiber));
        }
        function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
          inst.value = nextSnapshot;
          inst.getSnapshot = getSnapshot;
          checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
        }
        function subscribeToStore(fiber, inst, subscribe) {
          return subscribe(function() {
            checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
          });
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          inst = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(inst, nextValue);
          } catch (error) {
            return true;
          }
        }
        function forceStoreRerender(fiber) {
          var root3 = enqueueConcurrentRenderForLane(fiber, 2);
          null !== root3 && scheduleUpdateOnFiber(root3, fiber, 2);
        }
        function mountStateImpl(initialState) {
          var hook = mountWorkInProgressHook();
          if ("function" === typeof initialState) {
            var initialStateInitializer = initialState;
            initialState = initialStateInitializer();
            if (shouldDoubleInvokeUserFnsInHooksDEV) {
              setIsStrictModeForDevtools(true);
              try {
                initialStateInitializer();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          }
          hook.memoizedState = hook.baseState = initialState;
          hook.queue = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          return hook;
        }
        function mountState(initialState) {
          initialState = mountStateImpl(initialState);
          var queue = initialState.queue, dispatch = dispatchSetState.bind(null, currentlyRenderingFiber, queue);
          queue.dispatch = dispatch;
          return [initialState.memoizedState, dispatch];
        }
        function mountOptimistic(passthrough) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = hook.baseState = passthrough;
          var queue = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: null,
            lastRenderedState: null
          };
          hook.queue = queue;
          hook = dispatchOptimisticSetState.bind(
            null,
            currentlyRenderingFiber,
            true,
            queue
          );
          queue.dispatch = hook;
          return [passthrough, hook];
        }
        function updateOptimistic(passthrough, reducer) {
          var hook = updateWorkInProgressHook();
          return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
        }
        function updateOptimisticImpl(hook, current2, passthrough, reducer) {
          hook.baseState = passthrough;
          return updateReducerImpl(
            hook,
            currentHook,
            "function" === typeof reducer ? reducer : basicStateReducer
          );
        }
        function rerenderOptimistic(passthrough, reducer) {
          var hook = updateWorkInProgressHook();
          if (null !== currentHook)
            return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
          hook.baseState = passthrough;
          return [passthrough, hook.queue.dispatch];
        }
        function dispatchActionState(fiber, actionQueue, setPendingState, setState, payload) {
          if (isRenderPhaseUpdate(fiber))
            throw Error("Cannot update form state while rendering.");
          fiber = actionQueue.action;
          if (null !== fiber) {
            var actionNode = {
              payload,
              action: fiber,
              next: null,
              isTransition: true,
              status: "pending",
              value: null,
              reason: null,
              listeners: [],
              then: function(listener) {
                actionNode.listeners.push(listener);
              }
            };
            null !== ReactSharedInternals.T ? setPendingState(true) : actionNode.isTransition = false;
            setState(actionNode);
            setPendingState = actionQueue.pending;
            null === setPendingState ? (actionNode.next = actionQueue.pending = actionNode, runActionStateAction(actionQueue, actionNode)) : (actionNode.next = setPendingState.next, actionQueue.pending = setPendingState.next = actionNode);
          }
        }
        function runActionStateAction(actionQueue, node) {
          var action = node.action, payload = node.payload, prevState = actionQueue.state;
          if (node.isTransition) {
            var prevTransition = ReactSharedInternals.T, currentTransition = {};
            ReactSharedInternals.T = currentTransition;
            ReactSharedInternals.T._updatedFibers = /* @__PURE__ */ new Set();
            try {
              var returnValue = action(prevState, payload), onStartTransitionFinish = ReactSharedInternals.S;
              null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
              handleActionReturnValue(actionQueue, node, returnValue);
            } catch (error) {
              onActionError(actionQueue, node, error);
            } finally {
              ReactSharedInternals.T = prevTransition, null === prevTransition && currentTransition._updatedFibers && (actionQueue = currentTransition._updatedFibers.size, currentTransition._updatedFibers.clear(), 10 < actionQueue && console.warn(
                "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
              ));
            }
          } else
            try {
              currentTransition = action(prevState, payload), handleActionReturnValue(actionQueue, node, currentTransition);
            } catch (error$4) {
              onActionError(actionQueue, node, error$4);
            }
        }
        function handleActionReturnValue(actionQueue, node, returnValue) {
          null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then ? (returnValue.then(
            function(nextState) {
              onActionSuccess(actionQueue, node, nextState);
            },
            function(error) {
              return onActionError(actionQueue, node, error);
            }
          ), node.isTransition || console.error(
            "An async function with useActionState was called outside of a transition. This is likely not what you intended (for example, isPending will not update correctly). Either call the returned function inside startTransition, or pass it to an `action` or `formAction` prop."
          )) : onActionSuccess(actionQueue, node, returnValue);
        }
        function onActionSuccess(actionQueue, actionNode, nextState) {
          actionNode.status = "fulfilled";
          actionNode.value = nextState;
          notifyActionListeners(actionNode);
          actionQueue.state = nextState;
          actionNode = actionQueue.pending;
          null !== actionNode && (nextState = actionNode.next, nextState === actionNode ? actionQueue.pending = null : (nextState = nextState.next, actionNode.next = nextState, runActionStateAction(actionQueue, nextState)));
        }
        function onActionError(actionQueue, actionNode, error) {
          var last = actionQueue.pending;
          actionQueue.pending = null;
          if (null !== last) {
            last = last.next;
            do
              actionNode.status = "rejected", actionNode.reason = error, notifyActionListeners(actionNode), actionNode = actionNode.next;
            while (actionNode !== last);
          }
          actionQueue.action = null;
        }
        function notifyActionListeners(actionNode) {
          actionNode = actionNode.listeners;
          for (var i = 0; i < actionNode.length; i++) (0, actionNode[i])();
        }
        function actionStateReducer(oldState, newState) {
          return newState;
        }
        function mountActionState(action, initialStateProp) {
          if (isHydrating) {
            var ssrFormState = workInProgressRoot.formState;
            if (null !== ssrFormState) {
              a: {
                var isMatching = currentlyRenderingFiber;
                if (isHydrating) {
                  if (nextHydratableInstance) {
                    b: {
                      var markerInstance = nextHydratableInstance;
                      for (var inRootOrSingleton = rootOrSingletonContext; 8 !== markerInstance.nodeType; ) {
                        if (!inRootOrSingleton) {
                          markerInstance = null;
                          break b;
                        }
                        markerInstance = getNextHydratable(
                          markerInstance.nextSibling
                        );
                        if (null === markerInstance) {
                          markerInstance = null;
                          break b;
                        }
                      }
                      inRootOrSingleton = markerInstance.data;
                      markerInstance = inRootOrSingleton === FORM_STATE_IS_MATCHING || inRootOrSingleton === FORM_STATE_IS_NOT_MATCHING ? markerInstance : null;
                    }
                    if (markerInstance) {
                      nextHydratableInstance = getNextHydratable(
                        markerInstance.nextSibling
                      );
                      isMatching = markerInstance.data === FORM_STATE_IS_MATCHING;
                      break a;
                    }
                  }
                  throwOnHydrationMismatch(isMatching);
                }
                isMatching = false;
              }
              isMatching && (initialStateProp = ssrFormState[0]);
            }
          }
          ssrFormState = mountWorkInProgressHook();
          ssrFormState.memoizedState = ssrFormState.baseState = initialStateProp;
          isMatching = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: actionStateReducer,
            lastRenderedState: initialStateProp
          };
          ssrFormState.queue = isMatching;
          ssrFormState = dispatchSetState.bind(
            null,
            currentlyRenderingFiber,
            isMatching
          );
          isMatching.dispatch = ssrFormState;
          isMatching = mountStateImpl(false);
          inRootOrSingleton = dispatchOptimisticSetState.bind(
            null,
            currentlyRenderingFiber,
            false,
            isMatching.queue
          );
          isMatching = mountWorkInProgressHook();
          markerInstance = {
            state: initialStateProp,
            dispatch: null,
            action,
            pending: null
          };
          isMatching.queue = markerInstance;
          ssrFormState = dispatchActionState.bind(
            null,
            currentlyRenderingFiber,
            markerInstance,
            inRootOrSingleton,
            ssrFormState
          );
          markerInstance.dispatch = ssrFormState;
          isMatching.memoizedState = action;
          return [initialStateProp, ssrFormState, false];
        }
        function updateActionState(action) {
          var stateHook = updateWorkInProgressHook();
          return updateActionStateImpl(stateHook, currentHook, action);
        }
        function updateActionStateImpl(stateHook, currentStateHook, action) {
          currentStateHook = updateReducerImpl(
            stateHook,
            currentStateHook,
            actionStateReducer
          )[0];
          stateHook = updateReducer(basicStateReducer)[0];
          if ("object" === typeof currentStateHook && null !== currentStateHook && "function" === typeof currentStateHook.then)
            try {
              var state = useThenable(currentStateHook);
            } catch (x) {
              if (x === SuspenseException) throw SuspenseActionException;
              throw x;
            }
          else state = currentStateHook;
          currentStateHook = updateWorkInProgressHook();
          var actionQueue = currentStateHook.queue, dispatch = actionQueue.dispatch;
          action !== currentStateHook.memoizedState && (currentlyRenderingFiber.flags |= 2048, pushSimpleEffect(
            HasEffect | Passive,
            createEffectInstance(),
            actionStateActionEffect.bind(null, actionQueue, action),
            null
          ));
          return [state, dispatch, stateHook];
        }
        function actionStateActionEffect(actionQueue, action) {
          actionQueue.action = action;
        }
        function rerenderActionState(action) {
          var stateHook = updateWorkInProgressHook(), currentStateHook = currentHook;
          if (null !== currentStateHook)
            return updateActionStateImpl(stateHook, currentStateHook, action);
          updateWorkInProgressHook();
          stateHook = stateHook.memoizedState;
          currentStateHook = updateWorkInProgressHook();
          var dispatch = currentStateHook.queue.dispatch;
          currentStateHook.memoizedState = action;
          return [stateHook, dispatch, false];
        }
        function pushSimpleEffect(tag2, inst, create2, createDeps) {
          tag2 = {
            tag: tag2,
            create: create2,
            deps: createDeps,
            inst,
            next: null
          };
          inst = currentlyRenderingFiber.updateQueue;
          null === inst && (inst = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = inst);
          create2 = inst.lastEffect;
          null === create2 ? inst.lastEffect = tag2.next = tag2 : (createDeps = create2.next, create2.next = tag2, tag2.next = createDeps, inst.lastEffect = tag2);
          return tag2;
        }
        function createEffectInstance() {
          return { destroy: void 0, resource: void 0 };
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          initialValue = { current: initialValue };
          return hook.memoizedState = initialValue;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create2, createDeps) {
          var hook = mountWorkInProgressHook();
          createDeps = void 0 === createDeps ? null : createDeps;
          currentlyRenderingFiber.flags |= fiberFlags;
          hook.memoizedState = pushSimpleEffect(
            HasEffect | hookFlags,
            createEffectInstance(),
            create2,
            createDeps
          );
        }
        function updateEffectImpl(fiberFlags, hookFlags, create2, deps) {
          var hook = updateWorkInProgressHook();
          deps = void 0 === deps ? null : deps;
          var inst = hook.memoizedState.inst;
          null !== currentHook && null !== deps && areHookInputsEqual(deps, currentHook.memoizedState.deps) ? hook.memoizedState = pushSimpleEffect(hookFlags, inst, create2, deps) : (currentlyRenderingFiber.flags |= fiberFlags, hook.memoizedState = pushSimpleEffect(
            HasEffect | hookFlags,
            inst,
            create2,
            deps
          ));
        }
        function mountEffect(create2, createDeps) {
          (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode && (currentlyRenderingFiber.mode & NoStrictPassiveEffectsMode) === NoMode ? mountEffectImpl(276826112, Passive, create2, createDeps) : mountEffectImpl(8390656, Passive, create2, createDeps);
        }
        function mountLayoutEffect(create2, deps) {
          var fiberFlags = 4194308;
          (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode && (fiberFlags |= 134217728);
          return mountEffectImpl(fiberFlags, Layout, create2, deps);
        }
        function imperativeHandleEffect(create2, ref) {
          if ("function" === typeof ref) {
            create2 = create2();
            var refCleanup = ref(create2);
            return function() {
              "function" === typeof refCleanup ? refCleanup() : ref(null);
            };
          }
          if (null !== ref && void 0 !== ref)
            return ref.hasOwnProperty("current") || console.error(
              "Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.",
              "an object with keys {" + Object.keys(ref).join(", ") + "}"
            ), create2 = create2(), ref.current = create2, function() {
              ref.current = null;
            };
        }
        function mountImperativeHandle(ref, create2, deps) {
          "function" !== typeof create2 && console.error(
            "Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",
            null !== create2 ? typeof create2 : "null"
          );
          deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
          var fiberFlags = 4194308;
          (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode && (fiberFlags |= 134217728);
          mountEffectImpl(
            fiberFlags,
            Layout,
            imperativeHandleEffect.bind(null, create2, ref),
            deps
          );
        }
        function updateImperativeHandle(ref, create2, deps) {
          "function" !== typeof create2 && console.error(
            "Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",
            null !== create2 ? typeof create2 : "null"
          );
          deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
          updateEffectImpl(
            4,
            Layout,
            imperativeHandleEffect.bind(null, create2, ref),
            deps
          );
        }
        function mountCallback(callback, deps) {
          mountWorkInProgressHook().memoizedState = [
            callback,
            void 0 === deps ? null : deps
          ];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          deps = void 0 === deps ? null : deps;
          var prevState = hook.memoizedState;
          if (null !== deps && areHookInputsEqual(deps, prevState[1]))
            return prevState[0];
          hook.memoizedState = [callback, deps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          deps = void 0 === deps ? null : deps;
          var nextValue = nextCreate();
          if (shouldDoubleInvokeUserFnsInHooksDEV) {
            setIsStrictModeForDevtools(true);
            try {
              nextCreate();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          hook.memoizedState = [nextValue, deps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          deps = void 0 === deps ? null : deps;
          var prevState = hook.memoizedState;
          if (null !== deps && areHookInputsEqual(deps, prevState[1]))
            return prevState[0];
          prevState = nextCreate();
          if (shouldDoubleInvokeUserFnsInHooksDEV) {
            setIsStrictModeForDevtools(true);
            try {
              nextCreate();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          hook.memoizedState = [prevState, deps];
          return prevState;
        }
        function mountDeferredValue(value, initialValue) {
          var hook = mountWorkInProgressHook();
          return mountDeferredValueImpl(hook, value, initialValue);
        }
        function updateDeferredValue(value, initialValue) {
          var hook = updateWorkInProgressHook();
          return updateDeferredValueImpl(
            hook,
            currentHook.memoizedState,
            value,
            initialValue
          );
        }
        function rerenderDeferredValue(value, initialValue) {
          var hook = updateWorkInProgressHook();
          return null === currentHook ? mountDeferredValueImpl(hook, value, initialValue) : updateDeferredValueImpl(
            hook,
            currentHook.memoizedState,
            value,
            initialValue
          );
        }
        function mountDeferredValueImpl(hook, value, initialValue) {
          if (void 0 === initialValue || 0 !== (renderLanes & 1073741824))
            return hook.memoizedState = value;
          hook.memoizedState = initialValue;
          hook = requestDeferredLane();
          currentlyRenderingFiber.lanes |= hook;
          workInProgressRootSkippedLanes |= hook;
          return initialValue;
        }
        function updateDeferredValueImpl(hook, prevValue, value, initialValue) {
          if (objectIs(value, prevValue)) return value;
          if (null !== currentTreeHiddenStackCursor.current)
            return hook = mountDeferredValueImpl(hook, value, initialValue), objectIs(hook, prevValue) || (didReceiveUpdate = true), hook;
          if (0 === (renderLanes & 42))
            return didReceiveUpdate = true, hook.memoizedState = value;
          hook = requestDeferredLane();
          currentlyRenderingFiber.lanes |= hook;
          workInProgressRootSkippedLanes |= hook;
          return prevValue;
        }
        function startTransition(fiber, queue, pendingState, finishedState, callback) {
          var previousPriority = ReactDOMSharedInternals.p;
          ReactDOMSharedInternals.p = 0 !== previousPriority && previousPriority < ContinuousEventPriority ? previousPriority : ContinuousEventPriority;
          var prevTransition = ReactSharedInternals.T, currentTransition = {};
          ReactSharedInternals.T = currentTransition;
          dispatchOptimisticSetState(fiber, false, queue, pendingState);
          currentTransition._updatedFibers = /* @__PURE__ */ new Set();
          try {
            var returnValue = callback(), onStartTransitionFinish = ReactSharedInternals.S;
            null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
            if (null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then) {
              var thenableForFinishedState = chainThenableValue(
                returnValue,
                finishedState
              );
              dispatchSetStateInternal(
                fiber,
                queue,
                thenableForFinishedState,
                requestUpdateLane(fiber)
              );
            } else
              dispatchSetStateInternal(
                fiber,
                queue,
                finishedState,
                requestUpdateLane(fiber)
              );
          } catch (error) {
            dispatchSetStateInternal(
              fiber,
              queue,
              { then: function() {
              }, status: "rejected", reason: error },
              requestUpdateLane(fiber)
            );
          } finally {
            ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition, null === prevTransition && currentTransition._updatedFibers && (fiber = currentTransition._updatedFibers.size, currentTransition._updatedFibers.clear(), 10 < fiber && console.warn(
              "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
            ));
          }
        }
        function startHostTransition(formFiber, pendingState, action, formData) {
          if (5 !== formFiber.tag)
            throw Error(
              "Expected the form instance to be a HostComponent. This is a bug in React."
            );
          var queue = ensureFormComponentIsStateful(formFiber).queue;
          startTransition(
            formFiber,
            queue,
            pendingState,
            NotPendingTransition,
            null === action ? noop$2 : function() {
              requestFormReset$1(formFiber);
              return action(formData);
            }
          );
        }
        function ensureFormComponentIsStateful(formFiber) {
          var existingStateHook = formFiber.memoizedState;
          if (null !== existingStateHook) return existingStateHook;
          existingStateHook = {
            memoizedState: NotPendingTransition,
            baseState: NotPendingTransition,
            baseQueue: null,
            queue: {
              pending: null,
              lanes: 0,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: NotPendingTransition
            },
            next: null
          };
          var initialResetState = {};
          existingStateHook.next = {
            memoizedState: initialResetState,
            baseState: initialResetState,
            baseQueue: null,
            queue: {
              pending: null,
              lanes: 0,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialResetState
            },
            next: null
          };
          formFiber.memoizedState = existingStateHook;
          formFiber = formFiber.alternate;
          null !== formFiber && (formFiber.memoizedState = existingStateHook);
          return existingStateHook;
        }
        function requestFormReset$1(formFiber) {
          null === ReactSharedInternals.T && console.error(
            "requestFormReset was called outside a transition or action. To fix, move to an action, or wrap with startTransition."
          );
          var resetStateQueue = ensureFormComponentIsStateful(formFiber).next.queue;
          dispatchSetStateInternal(
            formFiber,
            resetStateQueue,
            {},
            requestUpdateLane(formFiber)
          );
        }
        function mountTransition() {
          var stateHook = mountStateImpl(false);
          stateHook = startTransition.bind(
            null,
            currentlyRenderingFiber,
            stateHook.queue,
            true,
            false
          );
          mountWorkInProgressHook().memoizedState = stateHook;
          return [false, stateHook];
        }
        function updateTransition() {
          var booleanOrThenable = updateReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
          return [
            "boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable),
            start
          ];
        }
        function rerenderTransition() {
          var booleanOrThenable = rerenderReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
          return [
            "boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable),
            start
          ];
        }
        function useHostTransitionStatus() {
          return readContext(HostTransitionContext);
        }
        function mountId() {
          var hook = mountWorkInProgressHook(), identifierPrefix = workInProgressRoot.identifierPrefix;
          if (isHydrating) {
            var treeId = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            treeId = (idWithLeadingBit & ~(1 << 32 - clz32(idWithLeadingBit) - 1)).toString(32) + treeId;
            identifierPrefix = "\xAB" + identifierPrefix + "R" + treeId;
            treeId = localIdCounter++;
            0 < treeId && (identifierPrefix += "H" + treeId.toString(32));
            identifierPrefix += "\xBB";
          } else
            treeId = globalClientIdCounter++, identifierPrefix = "\xAB" + identifierPrefix + "r" + treeId.toString(32) + "\xBB";
          return hook.memoizedState = identifierPrefix;
        }
        function mountRefresh() {
          return mountWorkInProgressHook().memoizedState = refreshCache.bind(
            null,
            currentlyRenderingFiber
          );
        }
        function refreshCache(fiber, seedKey) {
          for (var provider = fiber.return; null !== provider; ) {
            switch (provider.tag) {
              case 24:
              case 3:
                var lane = requestUpdateLane(provider);
                fiber = createUpdate(lane);
                var root3 = enqueueUpdate(provider, fiber, lane);
                null !== root3 && (scheduleUpdateOnFiber(root3, provider, lane), entangleTransitions(root3, provider, lane));
                provider = createCache();
                null !== seedKey && void 0 !== seedKey && null !== root3 && console.error(
                  "The seed argument is not enabled outside experimental channels."
                );
                fiber.payload = { cache: provider };
                return;
            }
            provider = provider.return;
          }
        }
        function dispatchReducerAction(fiber, queue, action) {
          var args = arguments;
          "function" === typeof args[3] && console.error(
            "State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."
          );
          args = requestUpdateLane(fiber);
          var update = {
            lane: args,
            revertLane: 0,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          isRenderPhaseUpdate(fiber) ? enqueueRenderPhaseUpdate(queue, update) : (update = enqueueConcurrentHookUpdate(fiber, queue, update, args), null !== update && (scheduleUpdateOnFiber(update, fiber, args), entangleTransitionUpdate(update, queue, args)));
          markStateUpdateScheduled(fiber, args);
        }
        function dispatchSetState(fiber, queue, action) {
          var args = arguments;
          "function" === typeof args[3] && console.error(
            "State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."
          );
          args = requestUpdateLane(fiber);
          dispatchSetStateInternal(fiber, queue, action, args);
          markStateUpdateScheduled(fiber, args);
        }
        function dispatchSetStateInternal(fiber, queue, action, lane) {
          var update = {
            lane,
            revertLane: 0,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
          else {
            var alternate = fiber.alternate;
            if (0 === fiber.lanes && (null === alternate || 0 === alternate.lanes) && (alternate = queue.lastRenderedReducer, null !== alternate)) {
              var prevDispatcher = ReactSharedInternals.H;
              ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                var currentState = queue.lastRenderedState, eagerState = alternate(currentState, action);
                update.hasEagerState = true;
                update.eagerState = eagerState;
                if (objectIs(eagerState, currentState))
                  return enqueueUpdate$1(fiber, queue, update, 0), null === workInProgressRoot && finishQueueingConcurrentUpdates(), false;
              } catch (error) {
              } finally {
                ReactSharedInternals.H = prevDispatcher;
              }
            }
            action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (null !== action)
              return scheduleUpdateOnFiber(action, fiber, lane), entangleTransitionUpdate(action, queue, lane), true;
          }
          return false;
        }
        function dispatchOptimisticSetState(fiber, throwIfDuringRender, queue, action) {
          null === ReactSharedInternals.T && 0 === currentEntangledLane && console.error(
            "An optimistic state update occurred outside a transition or action. To fix, move the update to an action, or wrap with startTransition."
          );
          action = {
            lane: 2,
            revertLane: requestTransitionLane(),
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            if (throwIfDuringRender)
              throw Error("Cannot update optimistic state while rendering.");
            console.error("Cannot call startTransition while rendering.");
          } else
            throwIfDuringRender = enqueueConcurrentHookUpdate(
              fiber,
              queue,
              action,
              2
            ), null !== throwIfDuringRender && scheduleUpdateOnFiber(throwIfDuringRender, fiber, 2);
          markStateUpdateScheduled(fiber, 2);
        }
        function isRenderPhaseUpdate(fiber) {
          var alternate = fiber.alternate;
          return fiber === currentlyRenderingFiber || null !== alternate && alternate === currentlyRenderingFiber;
        }
        function enqueueRenderPhaseUpdate(queue, update) {
          didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
          var pending = queue.pending;
          null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
          queue.pending = update;
        }
        function entangleTransitionUpdate(root3, queue, lane) {
          if (0 !== (lane & 4194048)) {
            var queueLanes = queue.lanes;
            queueLanes &= root3.pendingLanes;
            lane |= queueLanes;
            queue.lanes = lane;
            markRootEntangled(root3, lane);
          }
        }
        function pushDebugInfo(debugInfo) {
          var previousDebugInfo = currentDebugInfo;
          null != debugInfo && (currentDebugInfo = null === previousDebugInfo ? debugInfo : previousDebugInfo.concat(debugInfo));
          return previousDebugInfo;
        }
        function validateFragmentProps(element, fiber, returnFiber) {
          for (var keys = Object.keys(element.props), i = 0; i < keys.length; i++) {
            var key = keys[i];
            if ("children" !== key && "key" !== key) {
              null === fiber && (fiber = createFiberFromElement(element, returnFiber.mode, 0), fiber._debugInfo = currentDebugInfo, fiber.return = returnFiber);
              runWithFiberInDEV(
                fiber,
                function(erroredKey) {
                  console.error(
                    "Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",
                    erroredKey
                  );
                },
                key
              );
              break;
            }
          }
        }
        function unwrapThenable(thenable) {
          var index = thenableIndexCounter;
          thenableIndexCounter += 1;
          null === thenableState && (thenableState = createThenableState());
          return trackUsedThenable(thenableState, thenable, index);
        }
        function coerceRef(workInProgress2, element) {
          element = element.props.ref;
          workInProgress2.ref = void 0 !== element ? element : null;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE)
            throw Error(
              'A React Element from an older version of React was rendered. This is not supported. It can happen if:\n- Multiple copies of the "react" package is used.\n- A library pre-bundled an old copy of "react" or "react/jsx-runtime".\n- A compiler tries to "inline" JSX instead of using the runtime.'
            );
          returnFiber = Object.prototype.toString.call(newChild);
          throw Error(
            "Objects are not valid as a React child (found: " + ("[object Object]" === returnFiber ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : returnFiber) + "). If you meant to render a collection of children, use an array instead."
          );
        }
        function warnOnFunctionType(returnFiber, invalidChild) {
          var parentName = getComponentNameFromFiber(returnFiber) || "Component";
          ownerHasFunctionTypeWarning[parentName] || (ownerHasFunctionTypeWarning[parentName] = true, invalidChild = invalidChild.displayName || invalidChild.name || "Component", 3 === returnFiber.tag ? console.error(
            "Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.\n  root.render(%s)",
            invalidChild,
            invalidChild,
            invalidChild
          ) : console.error(
            "Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.\n  <%s>{%s}</%s>",
            invalidChild,
            invalidChild,
            parentName,
            invalidChild,
            parentName
          ));
        }
        function warnOnSymbolType(returnFiber, invalidChild) {
          var parentName = getComponentNameFromFiber(returnFiber) || "Component";
          ownerHasSymbolTypeWarning[parentName] || (ownerHasSymbolTypeWarning[parentName] = true, invalidChild = String(invalidChild), 3 === returnFiber.tag ? console.error(
            "Symbols are not valid as a React child.\n  root.render(%s)",
            invalidChild
          ) : console.error(
            "Symbols are not valid as a React child.\n  <%s>%s</%s>",
            parentName,
            invalidChild,
            parentName
          ));
        }
        function createChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (shouldTrackSideEffects) {
              var deletions = returnFiber.deletions;
              null === deletions ? (returnFiber.deletions = [childToDelete], returnFiber.flags |= 16) : deletions.push(childToDelete);
            }
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) return null;
            for (; null !== currentFirstChild; )
              deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
            return null;
          }
          function mapRemainingChildren(currentFirstChild) {
            for (var existingChildren = /* @__PURE__ */ new Map(); null !== currentFirstChild; )
              null !== currentFirstChild.key ? existingChildren.set(currentFirstChild.key, currentFirstChild) : existingChildren.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            fiber = createWorkInProgress(fiber, pendingProps);
            fiber.index = 0;
            fiber.sibling = null;
            return fiber;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects)
              return newFiber.flags |= 1048576, lastPlacedIndex;
            newIndex = newFiber.alternate;
            if (null !== newIndex)
              return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.flags |= 67108866, lastPlacedIndex) : newIndex;
            newFiber.flags |= 67108866;
            return lastPlacedIndex;
          }
          function placeSingleChild(newFiber) {
            shouldTrackSideEffects && null === newFiber.alternate && (newFiber.flags |= 67108866);
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, lanes) {
            if (null === current2 || 6 !== current2.tag)
              return current2 = createFiberFromText(
                textContent,
                returnFiber.mode,
                lanes
              ), current2.return = returnFiber, current2._debugOwner = returnFiber, current2._debugTask = returnFiber._debugTask, current2._debugInfo = currentDebugInfo, current2;
            current2 = useFiber(current2, textContent);
            current2.return = returnFiber;
            current2._debugInfo = currentDebugInfo;
            return current2;
          }
          function updateElement(returnFiber, current2, element, lanes) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE)
              return current2 = updateFragment(
                returnFiber,
                current2,
                element.props.children,
                lanes,
                element.key
              ), validateFragmentProps(element, current2, returnFiber), current2;
            if (null !== current2 && (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element) || "object" === typeof elementType && null !== elementType && elementType.$$typeof === REACT_LAZY_TYPE && callLazyInitInDEV(elementType) === current2.type))
              return current2 = useFiber(current2, element.props), coerceRef(current2, element), current2.return = returnFiber, current2._debugOwner = element._owner, current2._debugInfo = currentDebugInfo, current2;
            current2 = createFiberFromElement(element, returnFiber.mode, lanes);
            coerceRef(current2, element);
            current2.return = returnFiber;
            current2._debugInfo = currentDebugInfo;
            return current2;
          }
          function updatePortal(returnFiber, current2, portal, lanes) {
            if (null === current2 || 4 !== current2.tag || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation)
              return current2 = createFiberFromPortal(portal, returnFiber.mode, lanes), current2.return = returnFiber, current2._debugInfo = currentDebugInfo, current2;
            current2 = useFiber(current2, portal.children || []);
            current2.return = returnFiber;
            current2._debugInfo = currentDebugInfo;
            return current2;
          }
          function updateFragment(returnFiber, current2, fragment, lanes, key) {
            if (null === current2 || 7 !== current2.tag)
              return current2 = createFiberFromFragment(
                fragment,
                returnFiber.mode,
                lanes,
                key
              ), current2.return = returnFiber, current2._debugOwner = returnFiber, current2._debugTask = returnFiber._debugTask, current2._debugInfo = currentDebugInfo, current2;
            current2 = useFiber(current2, fragment);
            current2.return = returnFiber;
            current2._debugInfo = currentDebugInfo;
            return current2;
          }
          function createChild(returnFiber, newChild, lanes) {
            if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
              return newChild = createFiberFromText(
                "" + newChild,
                returnFiber.mode,
                lanes
              ), newChild.return = returnFiber, newChild._debugOwner = returnFiber, newChild._debugTask = returnFiber._debugTask, newChild._debugInfo = currentDebugInfo, newChild;
            if ("object" === typeof newChild && null !== newChild) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return lanes = createFiberFromElement(
                    newChild,
                    returnFiber.mode,
                    lanes
                  ), coerceRef(lanes, newChild), lanes.return = returnFiber, returnFiber = pushDebugInfo(newChild._debugInfo), lanes._debugInfo = currentDebugInfo, currentDebugInfo = returnFiber, lanes;
                case REACT_PORTAL_TYPE:
                  return newChild = createFiberFromPortal(
                    newChild,
                    returnFiber.mode,
                    lanes
                  ), newChild.return = returnFiber, newChild._debugInfo = currentDebugInfo, newChild;
                case REACT_LAZY_TYPE:
                  var _prevDebugInfo = pushDebugInfo(newChild._debugInfo);
                  newChild = callLazyInitInDEV(newChild);
                  returnFiber = createChild(returnFiber, newChild, lanes);
                  currentDebugInfo = _prevDebugInfo;
                  return returnFiber;
              }
              if (isArrayImpl(newChild) || getIteratorFn(newChild))
                return lanes = createFiberFromFragment(
                  newChild,
                  returnFiber.mode,
                  lanes,
                  null
                ), lanes.return = returnFiber, lanes._debugOwner = returnFiber, lanes._debugTask = returnFiber._debugTask, returnFiber = pushDebugInfo(newChild._debugInfo), lanes._debugInfo = currentDebugInfo, currentDebugInfo = returnFiber, lanes;
              if ("function" === typeof newChild.then)
                return _prevDebugInfo = pushDebugInfo(newChild._debugInfo), returnFiber = createChild(
                  returnFiber,
                  unwrapThenable(newChild),
                  lanes
                ), currentDebugInfo = _prevDebugInfo, returnFiber;
              if (newChild.$$typeof === REACT_CONTEXT_TYPE)
                return createChild(
                  returnFiber,
                  readContextDuringReconciliation(returnFiber, newChild),
                  lanes
                );
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            "function" === typeof newChild && warnOnFunctionType(returnFiber, newChild);
            "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = null !== oldFiber ? oldFiber.key : null;
            if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
              return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            if ("object" === typeof newChild && null !== newChild) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return newChild.key === key ? (key = pushDebugInfo(newChild._debugInfo), returnFiber = updateElement(
                    returnFiber,
                    oldFiber,
                    newChild,
                    lanes
                  ), currentDebugInfo = key, returnFiber) : null;
                case REACT_PORTAL_TYPE:
                  return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, lanes) : null;
                case REACT_LAZY_TYPE:
                  return key = pushDebugInfo(newChild._debugInfo), newChild = callLazyInitInDEV(newChild), returnFiber = updateSlot(
                    returnFiber,
                    oldFiber,
                    newChild,
                    lanes
                  ), currentDebugInfo = key, returnFiber;
              }
              if (isArrayImpl(newChild) || getIteratorFn(newChild)) {
                if (null !== key) return null;
                key = pushDebugInfo(newChild._debugInfo);
                returnFiber = updateFragment(
                  returnFiber,
                  oldFiber,
                  newChild,
                  lanes,
                  null
                );
                currentDebugInfo = key;
                return returnFiber;
              }
              if ("function" === typeof newChild.then)
                return key = pushDebugInfo(newChild._debugInfo), returnFiber = updateSlot(
                  returnFiber,
                  oldFiber,
                  unwrapThenable(newChild),
                  lanes
                ), currentDebugInfo = key, returnFiber;
              if (newChild.$$typeof === REACT_CONTEXT_TYPE)
                return updateSlot(
                  returnFiber,
                  oldFiber,
                  readContextDuringReconciliation(returnFiber, newChild),
                  lanes
                );
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            "function" === typeof newChild && warnOnFunctionType(returnFiber, newChild);
            "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
              return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, lanes);
            if ("object" === typeof newChild && null !== newChild) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return newIdx = existingChildren.get(
                    null === newChild.key ? newIdx : newChild.key
                  ) || null, existingChildren = pushDebugInfo(newChild._debugInfo), returnFiber = updateElement(
                    returnFiber,
                    newIdx,
                    newChild,
                    lanes
                  ), currentDebugInfo = existingChildren, returnFiber;
                case REACT_PORTAL_TYPE:
                  return existingChildren = existingChildren.get(
                    null === newChild.key ? newIdx : newChild.key
                  ) || null, updatePortal(returnFiber, existingChildren, newChild, lanes);
                case REACT_LAZY_TYPE:
                  var _prevDebugInfo7 = pushDebugInfo(newChild._debugInfo);
                  newChild = callLazyInitInDEV(newChild);
                  returnFiber = updateFromMap(
                    existingChildren,
                    returnFiber,
                    newIdx,
                    newChild,
                    lanes
                  );
                  currentDebugInfo = _prevDebugInfo7;
                  return returnFiber;
              }
              if (isArrayImpl(newChild) || getIteratorFn(newChild))
                return newIdx = existingChildren.get(newIdx) || null, existingChildren = pushDebugInfo(newChild._debugInfo), returnFiber = updateFragment(
                  returnFiber,
                  newIdx,
                  newChild,
                  lanes,
                  null
                ), currentDebugInfo = existingChildren, returnFiber;
              if ("function" === typeof newChild.then)
                return _prevDebugInfo7 = pushDebugInfo(newChild._debugInfo), returnFiber = updateFromMap(
                  existingChildren,
                  returnFiber,
                  newIdx,
                  unwrapThenable(newChild),
                  lanes
                ), currentDebugInfo = _prevDebugInfo7, returnFiber;
              if (newChild.$$typeof === REACT_CONTEXT_TYPE)
                return updateFromMap(
                  existingChildren,
                  returnFiber,
                  newIdx,
                  readContextDuringReconciliation(returnFiber, newChild),
                  lanes
                );
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            "function" === typeof newChild && warnOnFunctionType(returnFiber, newChild);
            "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
            return null;
          }
          function warnOnInvalidKey(returnFiber, workInProgress2, child, knownKeys) {
            if ("object" !== typeof child || null === child) return knownKeys;
            switch (child.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(returnFiber, workInProgress2, child);
                var key = child.key;
                if ("string" !== typeof key) break;
                if (null === knownKeys) {
                  knownKeys = /* @__PURE__ */ new Set();
                  knownKeys.add(key);
                  break;
                }
                if (!knownKeys.has(key)) {
                  knownKeys.add(key);
                  break;
                }
                runWithFiberInDEV(workInProgress2, function() {
                  console.error(
                    "Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.",
                    key
                  );
                });
                break;
              case REACT_LAZY_TYPE:
                child = callLazyInitInDEV(child), warnOnInvalidKey(returnFiber, workInProgress2, child, knownKeys);
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            for (var knownKeys = null, resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
              oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
              var newFiber = updateSlot(
                returnFiber,
                oldFiber,
                newChildren[newIdx],
                lanes
              );
              if (null === newFiber) {
                null === oldFiber && (oldFiber = nextOldFiber);
                break;
              }
              knownKeys = warnOnInvalidKey(
                returnFiber,
                newFiber,
                newChildren[newIdx],
                knownKeys
              );
              shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
              currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
              null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length)
              return deleteRemainingChildren(returnFiber, oldFiber), isHydrating && pushTreeFork(returnFiber, newIdx), resultingFirstChild;
            if (null === oldFiber) {
              for (; newIdx < newChildren.length; newIdx++)
                oldFiber = createChild(returnFiber, newChildren[newIdx], lanes), null !== oldFiber && (knownKeys = warnOnInvalidKey(
                  returnFiber,
                  oldFiber,
                  newChildren[newIdx],
                  knownKeys
                ), currentFirstChild = placeChild(
                  oldFiber,
                  currentFirstChild,
                  newIdx
                ), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
              isHydrating && pushTreeFork(returnFiber, newIdx);
              return resultingFirstChild;
            }
            for (oldFiber = mapRemainingChildren(oldFiber); newIdx < newChildren.length; newIdx++)
              nextOldFiber = updateFromMap(
                oldFiber,
                returnFiber,
                newIdx,
                newChildren[newIdx],
                lanes
              ), null !== nextOldFiber && (knownKeys = warnOnInvalidKey(
                returnFiber,
                nextOldFiber,
                newChildren[newIdx],
                knownKeys
              ), shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(
                null === nextOldFiber.key ? newIdx : nextOldFiber.key
              ), currentFirstChild = placeChild(
                nextOldFiber,
                currentFirstChild,
                newIdx
              ), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
            shouldTrackSideEffects && oldFiber.forEach(function(child) {
              return deleteChild(returnFiber, child);
            });
            isHydrating && pushTreeFork(returnFiber, newIdx);
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildren, lanes) {
            if (null == newChildren)
              throw Error("An iterable object provided no iterator.");
            for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, knownKeys = null, step = newChildren.next(); null !== oldFiber && !step.done; newIdx++, step = newChildren.next()) {
              oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
              if (null === newFiber) {
                null === oldFiber && (oldFiber = nextOldFiber);
                break;
              }
              knownKeys = warnOnInvalidKey(
                returnFiber,
                newFiber,
                step.value,
                knownKeys
              );
              shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
              currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
              null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done)
              return deleteRemainingChildren(returnFiber, oldFiber), isHydrating && pushTreeFork(returnFiber, newIdx), resultingFirstChild;
            if (null === oldFiber) {
              for (; !step.done; newIdx++, step = newChildren.next())
                oldFiber = createChild(returnFiber, step.value, lanes), null !== oldFiber && (knownKeys = warnOnInvalidKey(
                  returnFiber,
                  oldFiber,
                  step.value,
                  knownKeys
                ), currentFirstChild = placeChild(
                  oldFiber,
                  currentFirstChild,
                  newIdx
                ), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
              isHydrating && pushTreeFork(returnFiber, newIdx);
              return resultingFirstChild;
            }
            for (oldFiber = mapRemainingChildren(oldFiber); !step.done; newIdx++, step = newChildren.next())
              nextOldFiber = updateFromMap(
                oldFiber,
                returnFiber,
                newIdx,
                step.value,
                lanes
              ), null !== nextOldFiber && (knownKeys = warnOnInvalidKey(
                returnFiber,
                nextOldFiber,
                step.value,
                knownKeys
              ), shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(
                null === nextOldFiber.key ? newIdx : nextOldFiber.key
              ), currentFirstChild = placeChild(
                nextOldFiber,
                currentFirstChild,
                newIdx
              ), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
            shouldTrackSideEffects && oldFiber.forEach(function(child) {
              return deleteChild(returnFiber, child);
            });
            isHydrating && pushTreeFork(returnFiber, newIdx);
            return resultingFirstChild;
          }
          function reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes) {
            "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key && (validateFragmentProps(newChild, null, returnFiber), newChild = newChild.props.children);
            if ("object" === typeof newChild && null !== newChild) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  var prevDebugInfo = pushDebugInfo(newChild._debugInfo);
                  a: {
                    for (var key = newChild.key; null !== currentFirstChild; ) {
                      if (currentFirstChild.key === key) {
                        key = newChild.type;
                        if (key === REACT_FRAGMENT_TYPE) {
                          if (7 === currentFirstChild.tag) {
                            deleteRemainingChildren(
                              returnFiber,
                              currentFirstChild.sibling
                            );
                            lanes = useFiber(
                              currentFirstChild,
                              newChild.props.children
                            );
                            lanes.return = returnFiber;
                            lanes._debugOwner = newChild._owner;
                            lanes._debugInfo = currentDebugInfo;
                            validateFragmentProps(newChild, lanes, returnFiber);
                            returnFiber = lanes;
                            break a;
                          }
                        } else if (currentFirstChild.elementType === key || isCompatibleFamilyForHotReloading(
                          currentFirstChild,
                          newChild
                        ) || "object" === typeof key && null !== key && key.$$typeof === REACT_LAZY_TYPE && callLazyInitInDEV(key) === currentFirstChild.type) {
                          deleteRemainingChildren(
                            returnFiber,
                            currentFirstChild.sibling
                          );
                          lanes = useFiber(currentFirstChild, newChild.props);
                          coerceRef(lanes, newChild);
                          lanes.return = returnFiber;
                          lanes._debugOwner = newChild._owner;
                          lanes._debugInfo = currentDebugInfo;
                          returnFiber = lanes;
                          break a;
                        }
                        deleteRemainingChildren(returnFiber, currentFirstChild);
                        break;
                      } else deleteChild(returnFiber, currentFirstChild);
                      currentFirstChild = currentFirstChild.sibling;
                    }
                    newChild.type === REACT_FRAGMENT_TYPE ? (lanes = createFiberFromFragment(
                      newChild.props.children,
                      returnFiber.mode,
                      lanes,
                      newChild.key
                    ), lanes.return = returnFiber, lanes._debugOwner = returnFiber, lanes._debugTask = returnFiber._debugTask, lanes._debugInfo = currentDebugInfo, validateFragmentProps(newChild, lanes, returnFiber), returnFiber = lanes) : (lanes = createFiberFromElement(
                      newChild,
                      returnFiber.mode,
                      lanes
                    ), coerceRef(lanes, newChild), lanes.return = returnFiber, lanes._debugInfo = currentDebugInfo, returnFiber = lanes);
                  }
                  returnFiber = placeSingleChild(returnFiber);
                  currentDebugInfo = prevDebugInfo;
                  return returnFiber;
                case REACT_PORTAL_TYPE:
                  a: {
                    prevDebugInfo = newChild;
                    for (newChild = prevDebugInfo.key; null !== currentFirstChild; ) {
                      if (currentFirstChild.key === newChild)
                        if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === prevDebugInfo.containerInfo && currentFirstChild.stateNode.implementation === prevDebugInfo.implementation) {
                          deleteRemainingChildren(
                            returnFiber,
                            currentFirstChild.sibling
                          );
                          lanes = useFiber(
                            currentFirstChild,
                            prevDebugInfo.children || []
                          );
                          lanes.return = returnFiber;
                          returnFiber = lanes;
                          break a;
                        } else {
                          deleteRemainingChildren(returnFiber, currentFirstChild);
                          break;
                        }
                      else deleteChild(returnFiber, currentFirstChild);
                      currentFirstChild = currentFirstChild.sibling;
                    }
                    lanes = createFiberFromPortal(
                      prevDebugInfo,
                      returnFiber.mode,
                      lanes
                    );
                    lanes.return = returnFiber;
                    returnFiber = lanes;
                  }
                  return placeSingleChild(returnFiber);
                case REACT_LAZY_TYPE:
                  return prevDebugInfo = pushDebugInfo(newChild._debugInfo), newChild = callLazyInitInDEV(newChild), returnFiber = reconcileChildFibersImpl(
                    returnFiber,
                    currentFirstChild,
                    newChild,
                    lanes
                  ), currentDebugInfo = prevDebugInfo, returnFiber;
              }
              if (isArrayImpl(newChild))
                return prevDebugInfo = pushDebugInfo(newChild._debugInfo), returnFiber = reconcileChildrenArray(
                  returnFiber,
                  currentFirstChild,
                  newChild,
                  lanes
                ), currentDebugInfo = prevDebugInfo, returnFiber;
              if (getIteratorFn(newChild)) {
                prevDebugInfo = pushDebugInfo(newChild._debugInfo);
                key = getIteratorFn(newChild);
                if ("function" !== typeof key)
                  throw Error(
                    "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue."
                  );
                var newChildren = key.call(newChild);
                if (newChildren === newChild) {
                  if (0 !== returnFiber.tag || "[object GeneratorFunction]" !== Object.prototype.toString.call(returnFiber.type) || "[object Generator]" !== Object.prototype.toString.call(newChildren))
                    didWarnAboutGenerators || console.error(
                      "Using Iterators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. You can also use an Iterable that can iterate multiple times over the same items."
                    ), didWarnAboutGenerators = true;
                } else
                  newChild.entries !== key || didWarnAboutMaps || (console.error(
                    "Using Maps as children is not supported. Use an array of keyed ReactElements instead."
                  ), didWarnAboutMaps = true);
                returnFiber = reconcileChildrenIterator(
                  returnFiber,
                  currentFirstChild,
                  newChildren,
                  lanes
                );
                currentDebugInfo = prevDebugInfo;
                return returnFiber;
              }
              if ("function" === typeof newChild.then)
                return prevDebugInfo = pushDebugInfo(newChild._debugInfo), returnFiber = reconcileChildFibersImpl(
                  returnFiber,
                  currentFirstChild,
                  unwrapThenable(newChild),
                  lanes
                ), currentDebugInfo = prevDebugInfo, returnFiber;
              if (newChild.$$typeof === REACT_CONTEXT_TYPE)
                return reconcileChildFibersImpl(
                  returnFiber,
                  currentFirstChild,
                  readContextDuringReconciliation(returnFiber, newChild),
                  lanes
                );
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
              return prevDebugInfo = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(
                returnFiber,
                currentFirstChild.sibling
              ), lanes = useFiber(currentFirstChild, prevDebugInfo), lanes.return = returnFiber, returnFiber = lanes) : (deleteRemainingChildren(returnFiber, currentFirstChild), lanes = createFiberFromText(
                prevDebugInfo,
                returnFiber.mode,
                lanes
              ), lanes.return = returnFiber, lanes._debugOwner = returnFiber, lanes._debugTask = returnFiber._debugTask, lanes._debugInfo = currentDebugInfo, returnFiber = lanes), placeSingleChild(returnFiber);
            "function" === typeof newChild && warnOnFunctionType(returnFiber, newChild);
            "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return function(returnFiber, currentFirstChild, newChild, lanes) {
            var prevDebugInfo = currentDebugInfo;
            currentDebugInfo = null;
            try {
              thenableIndexCounter = 0;
              var firstChildFiber = reconcileChildFibersImpl(
                returnFiber,
                currentFirstChild,
                newChild,
                lanes
              );
              thenableState = null;
              return firstChildFiber;
            } catch (x) {
              if (x === SuspenseException || x === SuspenseActionException) throw x;
              var fiber = createFiber(29, x, null, returnFiber.mode);
              fiber.lanes = lanes;
              fiber.return = returnFiber;
              var debugInfo = fiber._debugInfo = currentDebugInfo;
              fiber._debugOwner = returnFiber._debugOwner;
              fiber._debugTask = returnFiber._debugTask;
              if (null != debugInfo) {
                for (var i = debugInfo.length - 1; 0 <= i; i--)
                  if ("string" === typeof debugInfo[i].stack) {
                    fiber._debugOwner = debugInfo[i];
                    fiber._debugTask = debugInfo[i].debugTask;
                    break;
                  }
              }
              return fiber;
            } finally {
              currentDebugInfo = prevDebugInfo;
            }
          };
        }
        function pushPrimaryTreeSuspenseHandler(handler) {
          var current2 = handler.alternate;
          push(
            suspenseStackCursor,
            suspenseStackCursor.current & SubtreeSuspenseContextMask,
            handler
          );
          push(suspenseHandlerStackCursor, handler, handler);
          null === shellBoundary && (null === current2 || null !== currentTreeHiddenStackCursor.current ? shellBoundary = handler : null !== current2.memoizedState && (shellBoundary = handler));
        }
        function pushOffscreenSuspenseHandler(fiber) {
          if (22 === fiber.tag) {
            if (push(suspenseStackCursor, suspenseStackCursor.current, fiber), push(suspenseHandlerStackCursor, fiber, fiber), null === shellBoundary) {
              var current2 = fiber.alternate;
              null !== current2 && null !== current2.memoizedState && (shellBoundary = fiber);
            }
          } else reuseSuspenseHandlerOnStack(fiber);
        }
        function reuseSuspenseHandlerOnStack(fiber) {
          push(suspenseStackCursor, suspenseStackCursor.current, fiber);
          push(
            suspenseHandlerStackCursor,
            suspenseHandlerStackCursor.current,
            fiber
          );
        }
        function popSuspenseHandler(fiber) {
          pop(suspenseHandlerStackCursor, fiber);
          shellBoundary === fiber && (shellBoundary = null);
          pop(suspenseStackCursor, fiber);
        }
        function findFirstSuspended(row) {
          for (var node = row; null !== node; ) {
            if (13 === node.tag) {
              var state = node.memoizedState;
              if (null !== state && (state = state.dehydrated, null === state || state.data === SUSPENSE_PENDING_START_DATA || isSuspenseInstanceFallback(state)))
                return node;
            } else if (19 === node.tag && void 0 !== node.memoizedProps.revealOrder) {
              if (0 !== (node.flags & 128)) return node;
            } else if (null !== node.child) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row) break;
            for (; null === node.sibling; ) {
              if (null === node.return || node.return === row) return null;
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        function warnOnInvalidCallback(callback) {
          if (null !== callback && "function" !== typeof callback) {
            var key = String(callback);
            didWarnOnInvalidCallback.has(key) || (didWarnOnInvalidCallback.add(key), console.error(
              "Expected the last optional `callback` argument to be a function. Instead received: %s.",
              callback
            ));
          }
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState, partialState = getDerivedStateFromProps(nextProps, prevState);
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              partialState = getDerivedStateFromProps(nextProps, prevState);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          void 0 === partialState && (ctor = getComponentNameFromType(ctor) || "Component", didWarnAboutUndefinedDerivedState.has(ctor) || (didWarnAboutUndefinedDerivedState.add(ctor), console.error(
            "%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.",
            ctor
          )));
          prevState = null === partialState || void 0 === partialState ? prevState : assign({}, prevState, partialState);
          workInProgress2.memoizedState = prevState;
          0 === workInProgress2.lanes && (workInProgress2.updateQueue.baseState = prevState);
        }
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if ("function" === typeof instance.shouldComponentUpdate) {
            oldProps = instance.shouldComponentUpdate(
              newProps,
              newState,
              nextContext
            );
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                oldProps = instance.shouldComponentUpdate(
                  newProps,
                  newState,
                  nextContext
                );
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            void 0 === oldProps && console.error(
              "%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",
              getComponentNameFromType(ctor) || "Component"
            );
            return oldProps;
          }
          return ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : true;
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
          "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          instance.state !== oldState && (workInProgress2 = getComponentNameFromFiber(workInProgress2) || "Component", didWarnAboutStateAssignmentForComponent.has(workInProgress2) || (didWarnAboutStateAssignmentForComponent.add(workInProgress2), console.error(
            "%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
            workInProgress2
          )), classComponentUpdater.enqueueReplaceState(
            instance,
            instance.state,
            null
          ));
        }
        function resolveClassComponentProps(Component, baseProps) {
          var newProps = baseProps;
          if ("ref" in baseProps) {
            newProps = {};
            for (var propName in baseProps)
              "ref" !== propName && (newProps[propName] = baseProps[propName]);
          }
          if (Component = Component.defaultProps) {
            newProps === baseProps && (newProps = assign({}, newProps));
            for (var _propName in Component)
              void 0 === newProps[_propName] && (newProps[_propName] = Component[_propName]);
          }
          return newProps;
        }
        function defaultOnUncaughtError(error) {
          reportGlobalError(error);
          console.warn(
            "%s\n\n%s\n",
            componentName ? "An error occurred in the <" + componentName + "> component." : "An error occurred in one of your React components.",
            "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://react.dev/link/error-boundaries to learn more about error boundaries."
          );
        }
        function defaultOnCaughtError(error) {
          var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component." : "The above error occurred in one of your React components.", recreateMessage = "React will try to recreate this component tree from scratch using the error boundary you provided, " + ((errorBoundaryName || "Anonymous") + ".");
          if ("object" === typeof error && null !== error && "string" === typeof error.environmentName) {
            var JSCompiler_inline_result = error.environmentName;
            error = [
              "%o\n\n%s\n\n%s\n",
              error,
              componentNameMessage,
              recreateMessage
            ].slice(0);
            "string" === typeof error[0] ? error.splice(
              0,
              1,
              badgeFormat + error[0],
              badgeStyle,
              pad + JSCompiler_inline_result + pad,
              resetStyle
            ) : error.splice(
              0,
              0,
              badgeFormat,
              badgeStyle,
              pad + JSCompiler_inline_result + pad,
              resetStyle
            );
            error.unshift(console);
            JSCompiler_inline_result = bind.apply(console.error, error);
            JSCompiler_inline_result();
          } else
            console.error(
              "%o\n\n%s\n\n%s\n",
              error,
              componentNameMessage,
              recreateMessage
            );
        }
        function defaultOnRecoverableError(error) {
          reportGlobalError(error);
        }
        function logUncaughtError(root3, errorInfo) {
          try {
            componentName = errorInfo.source ? getComponentNameFromFiber(errorInfo.source) : null;
            errorBoundaryName = null;
            var error = errorInfo.value;
            if (null !== ReactSharedInternals.actQueue)
              ReactSharedInternals.thrownErrors.push(error);
            else {
              var onUncaughtError = root3.onUncaughtError;
              onUncaughtError(error, { componentStack: errorInfo.stack });
            }
          } catch (e$5) {
            setTimeout(function() {
              throw e$5;
            });
          }
        }
        function logCaughtError(root3, boundary, errorInfo) {
          try {
            componentName = errorInfo.source ? getComponentNameFromFiber(errorInfo.source) : null;
            errorBoundaryName = getComponentNameFromFiber(boundary);
            var onCaughtError = root3.onCaughtError;
            onCaughtError(errorInfo.value, {
              componentStack: errorInfo.stack,
              errorBoundary: 1 === boundary.tag ? boundary.stateNode : null
            });
          } catch (e$6) {
            setTimeout(function() {
              throw e$6;
            });
          }
        }
        function createRootErrorUpdate(root3, errorInfo, lane) {
          lane = createUpdate(lane);
          lane.tag = CaptureUpdate;
          lane.payload = { element: null };
          lane.callback = function() {
            runWithFiberInDEV(errorInfo.source, logUncaughtError, root3, errorInfo);
          };
          return lane;
        }
        function createClassErrorUpdate(lane) {
          lane = createUpdate(lane);
          lane.tag = CaptureUpdate;
          return lane;
        }
        function initializeClassErrorUpdate(update, root3, fiber, errorInfo) {
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if ("function" === typeof getDerivedStateFromError) {
            var error = errorInfo.value;
            update.payload = function() {
              return getDerivedStateFromError(error);
            };
            update.callback = function() {
              markFailedErrorBoundaryForHotReloading(fiber);
              runWithFiberInDEV(
                errorInfo.source,
                logCaughtError,
                root3,
                fiber,
                errorInfo
              );
            };
          }
          var inst = fiber.stateNode;
          null !== inst && "function" === typeof inst.componentDidCatch && (update.callback = function() {
            markFailedErrorBoundaryForHotReloading(fiber);
            runWithFiberInDEV(
              errorInfo.source,
              logCaughtError,
              root3,
              fiber,
              errorInfo
            );
            "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this));
            callComponentDidCatchInDEV(this, errorInfo);
            "function" === typeof getDerivedStateFromError || 0 === (fiber.lanes & 2) && console.error(
              "%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.",
              getComponentNameFromFiber(fiber) || "Unknown"
            );
          });
        }
        function throwException(root3, returnFiber, sourceFiber, value, rootRenderLanes) {
          sourceFiber.flags |= 32768;
          isDevToolsPresent && restorePendingUpdaters(root3, rootRenderLanes);
          if (null !== value && "object" === typeof value && "function" === typeof value.then) {
            returnFiber = sourceFiber.alternate;
            null !== returnFiber && propagateParentContextChanges(
              returnFiber,
              sourceFiber,
              rootRenderLanes,
              true
            );
            isHydrating && (didSuspendOrErrorDEV = true);
            sourceFiber = suspenseHandlerStackCursor.current;
            if (null !== sourceFiber) {
              switch (sourceFiber.tag) {
                case 13:
                  return null === shellBoundary ? renderDidSuspendDelayIfPossible() : null === sourceFiber.alternate && workInProgressRootExitStatus === RootInProgress && (workInProgressRootExitStatus = RootSuspended), sourceFiber.flags &= -257, sourceFiber.flags |= 65536, sourceFiber.lanes = rootRenderLanes, value === noopSuspenseyCommitThenable ? sourceFiber.flags |= 16384 : (returnFiber = sourceFiber.updateQueue, null === returnFiber ? sourceFiber.updateQueue = /* @__PURE__ */ new Set([value]) : returnFiber.add(value), attachPingListener(root3, value, rootRenderLanes)), false;
                case 22:
                  return sourceFiber.flags |= 65536, value === noopSuspenseyCommitThenable ? sourceFiber.flags |= 16384 : (returnFiber = sourceFiber.updateQueue, null === returnFiber ? (returnFiber = {
                    transitions: null,
                    markerInstances: null,
                    retryQueue: /* @__PURE__ */ new Set([value])
                  }, sourceFiber.updateQueue = returnFiber) : (sourceFiber = returnFiber.retryQueue, null === sourceFiber ? returnFiber.retryQueue = /* @__PURE__ */ new Set([value]) : sourceFiber.add(value)), attachPingListener(root3, value, rootRenderLanes)), false;
              }
              throw Error(
                "Unexpected Suspense handler tag (" + sourceFiber.tag + "). This is a bug in React."
              );
            }
            attachPingListener(root3, value, rootRenderLanes);
            renderDidSuspendDelayIfPossible();
            return false;
          }
          if (isHydrating)
            return didSuspendOrErrorDEV = true, returnFiber = suspenseHandlerStackCursor.current, null !== returnFiber ? (0 === (returnFiber.flags & 65536) && (returnFiber.flags |= 256), returnFiber.flags |= 65536, returnFiber.lanes = rootRenderLanes, value !== HydrationMismatchException && queueHydrationError(
              createCapturedValueAtFiber(
                Error(
                  "There was an error while hydrating but React was able to recover by instead client rendering from the nearest Suspense boundary.",
                  { cause: value }
                ),
                sourceFiber
              )
            )) : (value !== HydrationMismatchException && queueHydrationError(
              createCapturedValueAtFiber(
                Error(
                  "There was an error while hydrating but React was able to recover by instead client rendering the entire root.",
                  { cause: value }
                ),
                sourceFiber
              )
            ), root3 = root3.current.alternate, root3.flags |= 65536, rootRenderLanes &= -rootRenderLanes, root3.lanes |= rootRenderLanes, value = createCapturedValueAtFiber(value, sourceFiber), rootRenderLanes = createRootErrorUpdate(
              root3.stateNode,
              value,
              rootRenderLanes
            ), enqueueCapturedUpdate(root3, rootRenderLanes), workInProgressRootExitStatus !== RootSuspendedWithDelay && (workInProgressRootExitStatus = RootErrored)), false;
          var error = createCapturedValueAtFiber(
            Error(
              "There was an error during concurrent rendering but React was able to recover by instead synchronously rendering the entire root.",
              { cause: value }
            ),
            sourceFiber
          );
          null === workInProgressRootConcurrentErrors ? workInProgressRootConcurrentErrors = [error] : workInProgressRootConcurrentErrors.push(error);
          workInProgressRootExitStatus !== RootSuspendedWithDelay && (workInProgressRootExitStatus = RootErrored);
          if (null === returnFiber) return true;
          value = createCapturedValueAtFiber(value, sourceFiber);
          sourceFiber = returnFiber;
          do {
            switch (sourceFiber.tag) {
              case 3:
                return sourceFiber.flags |= 65536, root3 = rootRenderLanes & -rootRenderLanes, sourceFiber.lanes |= root3, root3 = createRootErrorUpdate(
                  sourceFiber.stateNode,
                  value,
                  root3
                ), enqueueCapturedUpdate(sourceFiber, root3), false;
              case 1:
                if (returnFiber = sourceFiber.type, error = sourceFiber.stateNode, 0 === (sourceFiber.flags & 128) && ("function" === typeof returnFiber.getDerivedStateFromError || null !== error && "function" === typeof error.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(error))))
                  return sourceFiber.flags |= 65536, rootRenderLanes &= -rootRenderLanes, sourceFiber.lanes |= rootRenderLanes, rootRenderLanes = createClassErrorUpdate(rootRenderLanes), initializeClassErrorUpdate(
                    rootRenderLanes,
                    root3,
                    sourceFiber,
                    value
                  ), enqueueCapturedUpdate(sourceFiber, rootRenderLanes), false;
            }
            sourceFiber = sourceFiber.return;
          } while (null !== sourceFiber);
          return false;
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
          workInProgress2.child = null === current2 ? mountChildFibers(workInProgress2, null, nextChildren, renderLanes2) : reconcileChildFibers(
            workInProgress2,
            current2.child,
            nextChildren,
            renderLanes2
          );
        }
        function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
          Component = Component.render;
          var ref = workInProgress2.ref;
          if ("ref" in nextProps) {
            var propsWithoutRef = {};
            for (var key in nextProps)
              "ref" !== key && (propsWithoutRef[key] = nextProps[key]);
          } else propsWithoutRef = nextProps;
          prepareToReadContext(workInProgress2);
          markComponentRenderStarted(workInProgress2);
          nextProps = renderWithHooks(
            current2,
            workInProgress2,
            Component,
            propsWithoutRef,
            ref,
            renderLanes2
          );
          key = checkDidRenderIdHook();
          markComponentRenderStopped();
          if (null !== current2 && !didReceiveUpdate)
            return bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          isHydrating && key && pushMaterializedTreeId(workInProgress2);
          workInProgress2.flags |= 1;
          reconcileChildren(current2, workInProgress2, nextProps, renderLanes2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          if (null === current2) {
            var type = Component.type;
            if ("function" === typeof type && !shouldConstruct(type) && void 0 === type.defaultProps && null === Component.compare)
              return Component = resolveFunctionForHotReloading(type), workInProgress2.tag = 15, workInProgress2.type = Component, validateFunctionComponentInDev(workInProgress2, type), updateSimpleMemoComponent(
                current2,
                workInProgress2,
                Component,
                nextProps,
                renderLanes2
              );
            current2 = createFiberFromTypeAndProps(
              Component.type,
              null,
              nextProps,
              workInProgress2,
              workInProgress2.mode,
              renderLanes2
            );
            current2.ref = workInProgress2.ref;
            current2.return = workInProgress2;
            return workInProgress2.child = current2;
          }
          type = current2.child;
          if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
            var prevProps = type.memoizedProps;
            Component = Component.compare;
            Component = null !== Component ? Component : shallowEqual;
            if (Component(prevProps, nextProps) && current2.ref === workInProgress2.ref)
              return bailoutOnAlreadyFinishedWork(
                current2,
                workInProgress2,
                renderLanes2
              );
          }
          workInProgress2.flags |= 1;
          current2 = createWorkInProgress(type, nextProps);
          current2.ref = workInProgress2.ref;
          current2.return = workInProgress2;
          return workInProgress2.child = current2;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          if (null !== current2) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type)
              if (didReceiveUpdate = false, workInProgress2.pendingProps = nextProps = prevProps, checkScheduledUpdateOrContext(current2, renderLanes2))
                0 !== (current2.flags & 131072) && (didReceiveUpdate = true);
              else
                return workInProgress2.lanes = current2.lanes, bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          return updateFunctionComponent(
            current2,
            workInProgress2,
            Component,
            nextProps,
            renderLanes2
          );
        }
        function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps, nextChildren = nextProps.children, prevState = null !== current2 ? current2.memoizedState : null;
          if ("hidden" === nextProps.mode) {
            if (0 !== (workInProgress2.flags & 128)) {
              nextProps = null !== prevState ? prevState.baseLanes | renderLanes2 : renderLanes2;
              if (null !== current2) {
                nextChildren = workInProgress2.child = current2.child;
                for (prevState = 0; null !== nextChildren; )
                  prevState = prevState | nextChildren.lanes | nextChildren.childLanes, nextChildren = nextChildren.sibling;
                workInProgress2.childLanes = prevState & ~nextProps;
              } else workInProgress2.childLanes = 0, workInProgress2.child = null;
              return deferHiddenOffscreenComponent(
                current2,
                workInProgress2,
                nextProps,
                renderLanes2
              );
            }
            if (0 !== (renderLanes2 & 536870912))
              workInProgress2.memoizedState = { baseLanes: 0, cachePool: null }, null !== current2 && pushTransition(
                workInProgress2,
                null !== prevState ? prevState.cachePool : null
              ), null !== prevState ? pushHiddenContext(workInProgress2, prevState) : reuseHiddenContextOnStack(workInProgress2), pushOffscreenSuspenseHandler(workInProgress2);
            else
              return workInProgress2.lanes = workInProgress2.childLanes = 536870912, deferHiddenOffscreenComponent(
                current2,
                workInProgress2,
                null !== prevState ? prevState.baseLanes | renderLanes2 : renderLanes2,
                renderLanes2
              );
          } else
            null !== prevState ? (pushTransition(workInProgress2, prevState.cachePool), pushHiddenContext(workInProgress2, prevState), reuseSuspenseHandlerOnStack(workInProgress2), workInProgress2.memoizedState = null) : (null !== current2 && pushTransition(workInProgress2, null), reuseHiddenContextOnStack(workInProgress2), reuseSuspenseHandlerOnStack(workInProgress2));
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function deferHiddenOffscreenComponent(current2, workInProgress2, nextBaseLanes, renderLanes2) {
          var JSCompiler_inline_result = peekCacheFromPool();
          JSCompiler_inline_result = null === JSCompiler_inline_result ? null : {
            parent: CacheContext._currentValue,
            pool: JSCompiler_inline_result
          };
          workInProgress2.memoizedState = {
            baseLanes: nextBaseLanes,
            cachePool: JSCompiler_inline_result
          };
          null !== current2 && pushTransition(workInProgress2, null);
          reuseHiddenContextOnStack(workInProgress2);
          pushOffscreenSuspenseHandler(workInProgress2);
          null !== current2 && propagateParentContextChanges(current2, workInProgress2, renderLanes2, true);
          return null;
        }
        function markRef(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (null === ref)
            null !== current2 && null !== current2.ref && (workInProgress2.flags |= 4194816);
          else {
            if ("function" !== typeof ref && "object" !== typeof ref)
              throw Error(
                "Expected ref to be a function, an object returned by React.createRef(), or undefined/null."
              );
            if (null === current2 || current2.ref !== ref)
              workInProgress2.flags |= 4194816;
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          if (Component.prototype && "function" === typeof Component.prototype.render) {
            var componentName2 = getComponentNameFromType(Component) || "Unknown";
            didWarnAboutBadClass[componentName2] || (console.error(
              "The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.",
              componentName2,
              componentName2
            ), didWarnAboutBadClass[componentName2] = true);
          }
          workInProgress2.mode & StrictLegacyMode && ReactStrictModeWarnings.recordLegacyContextWarning(
            workInProgress2,
            null
          );
          null === current2 && (validateFunctionComponentInDev(workInProgress2, workInProgress2.type), Component.contextTypes && (componentName2 = getComponentNameFromType(Component) || "Unknown", didWarnAboutContextTypes[componentName2] || (didWarnAboutContextTypes[componentName2] = true, console.error(
            "%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with React.useContext() instead. (https://react.dev/link/legacy-context)",
            componentName2
          ))));
          prepareToReadContext(workInProgress2);
          markComponentRenderStarted(workInProgress2);
          Component = renderWithHooks(
            current2,
            workInProgress2,
            Component,
            nextProps,
            void 0,
            renderLanes2
          );
          nextProps = checkDidRenderIdHook();
          markComponentRenderStopped();
          if (null !== current2 && !didReceiveUpdate)
            return bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          isHydrating && nextProps && pushMaterializedTreeId(workInProgress2);
          workInProgress2.flags |= 1;
          reconcileChildren(current2, workInProgress2, Component, renderLanes2);
          return workInProgress2.child;
        }
        function replayFunctionComponent(current2, workInProgress2, nextProps, Component, secondArg, renderLanes2) {
          prepareToReadContext(workInProgress2);
          markComponentRenderStarted(workInProgress2);
          hookTypesUpdateIndexDev = -1;
          ignorePreviousDependencies = null !== current2 && current2.type !== workInProgress2.type;
          workInProgress2.updateQueue = null;
          nextProps = renderWithHooksAgain(
            workInProgress2,
            Component,
            nextProps,
            secondArg
          );
          finishRenderingHooks(current2, workInProgress2);
          Component = checkDidRenderIdHook();
          markComponentRenderStopped();
          if (null !== current2 && !didReceiveUpdate)
            return bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          isHydrating && Component && pushMaterializedTreeId(workInProgress2);
          workInProgress2.flags |= 1;
          reconcileChildren(current2, workInProgress2, nextProps, renderLanes2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          switch (shouldErrorImpl(workInProgress2)) {
            case false:
              var _instance = workInProgress2.stateNode, state = new workInProgress2.type(
                workInProgress2.memoizedProps,
                _instance.context
              ).state;
              _instance.updater.enqueueSetState(_instance, state, null);
              break;
            case true:
              workInProgress2.flags |= 128;
              workInProgress2.flags |= 65536;
              _instance = Error("Simulated error coming from DevTools");
              var lane = renderLanes2 & -renderLanes2;
              workInProgress2.lanes |= lane;
              state = workInProgressRoot;
              if (null === state)
                throw Error(
                  "Expected a work-in-progress root. This is a bug in React. Please file an issue."
                );
              lane = createClassErrorUpdate(lane);
              initializeClassErrorUpdate(
                lane,
                state,
                workInProgress2,
                createCapturedValueAtFiber(_instance, workInProgress2)
              );
              enqueueCapturedUpdate(workInProgress2, lane);
          }
          prepareToReadContext(workInProgress2);
          if (null === workInProgress2.stateNode) {
            state = emptyContextObject;
            _instance = Component.contextType;
            "contextType" in Component && null !== _instance && (void 0 === _instance || _instance.$$typeof !== REACT_CONTEXT_TYPE) && !didWarnAboutInvalidateContextType.has(Component) && (didWarnAboutInvalidateContextType.add(Component), lane = void 0 === _instance ? " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : "object" !== typeof _instance ? " However, it is set to a " + typeof _instance + "." : _instance.$$typeof === REACT_CONSUMER_TYPE ? " Did you accidentally pass the Context.Consumer instead?" : " However, it is set to an object with keys {" + Object.keys(_instance).join(", ") + "}.", console.error(
              "%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s",
              getComponentNameFromType(Component) || "Component",
              lane
            ));
            "object" === typeof _instance && null !== _instance && (state = readContext(_instance));
            _instance = new Component(nextProps, state);
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                _instance = new Component(nextProps, state);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            state = workInProgress2.memoizedState = null !== _instance.state && void 0 !== _instance.state ? _instance.state : null;
            _instance.updater = classComponentUpdater;
            workInProgress2.stateNode = _instance;
            _instance._reactInternals = workInProgress2;
            _instance._reactInternalInstance = fakeInternalInstance;
            "function" === typeof Component.getDerivedStateFromProps && null === state && (state = getComponentNameFromType(Component) || "Component", didWarnAboutUninitializedState.has(state) || (didWarnAboutUninitializedState.add(state), console.error(
              "`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.",
              state,
              null === _instance.state ? "null" : "undefined",
              state
            )));
            if ("function" === typeof Component.getDerivedStateFromProps || "function" === typeof _instance.getSnapshotBeforeUpdate) {
              var foundWillUpdateName = lane = state = null;
              "function" === typeof _instance.componentWillMount && true !== _instance.componentWillMount.__suppressDeprecationWarning ? state = "componentWillMount" : "function" === typeof _instance.UNSAFE_componentWillMount && (state = "UNSAFE_componentWillMount");
              "function" === typeof _instance.componentWillReceiveProps && true !== _instance.componentWillReceiveProps.__suppressDeprecationWarning ? lane = "componentWillReceiveProps" : "function" === typeof _instance.UNSAFE_componentWillReceiveProps && (lane = "UNSAFE_componentWillReceiveProps");
              "function" === typeof _instance.componentWillUpdate && true !== _instance.componentWillUpdate.__suppressDeprecationWarning ? foundWillUpdateName = "componentWillUpdate" : "function" === typeof _instance.UNSAFE_componentWillUpdate && (foundWillUpdateName = "UNSAFE_componentWillUpdate");
              if (null !== state || null !== lane || null !== foundWillUpdateName) {
                _instance = getComponentNameFromType(Component) || "Component";
                var newApiName = "function" === typeof Component.getDerivedStateFromProps ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                didWarnAboutLegacyLifecyclesAndDerivedState.has(_instance) || (didWarnAboutLegacyLifecyclesAndDerivedState.add(_instance), console.error(
                  "Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://react.dev/link/unsafe-component-lifecycles",
                  _instance,
                  newApiName,
                  null !== state ? "\n  " + state : "",
                  null !== lane ? "\n  " + lane : "",
                  null !== foundWillUpdateName ? "\n  " + foundWillUpdateName : ""
                ));
              }
            }
            _instance = workInProgress2.stateNode;
            state = getComponentNameFromType(Component) || "Component";
            _instance.render || (Component.prototype && "function" === typeof Component.prototype.render ? console.error(
              "No `render` method found on the %s instance: did you accidentally return an object from the constructor?",
              state
            ) : console.error(
              "No `render` method found on the %s instance: you may have forgotten to define `render`.",
              state
            ));
            !_instance.getInitialState || _instance.getInitialState.isReactClassApproved || _instance.state || console.error(
              "getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",
              state
            );
            _instance.getDefaultProps && !_instance.getDefaultProps.isReactClassApproved && console.error(
              "getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",
              state
            );
            _instance.contextType && console.error(
              "contextType was defined as an instance property on %s. Use a static property to define contextType instead.",
              state
            );
            Component.childContextTypes && !didWarnAboutChildContextTypes.has(Component) && (didWarnAboutChildContextTypes.add(Component), console.error(
              "%s uses the legacy childContextTypes API which was removed in React 19. Use React.createContext() instead. (https://react.dev/link/legacy-context)",
              state
            ));
            Component.contextTypes && !didWarnAboutContextTypes$1.has(Component) && (didWarnAboutContextTypes$1.add(Component), console.error(
              "%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with static contextType instead. (https://react.dev/link/legacy-context)",
              state
            ));
            "function" === typeof _instance.componentShouldUpdate && console.error(
              "%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",
              state
            );
            Component.prototype && Component.prototype.isPureReactComponent && "undefined" !== typeof _instance.shouldComponentUpdate && console.error(
              "%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.",
              getComponentNameFromType(Component) || "A pure component"
            );
            "function" === typeof _instance.componentDidUnmount && console.error(
              "%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?",
              state
            );
            "function" === typeof _instance.componentDidReceiveProps && console.error(
              "%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().",
              state
            );
            "function" === typeof _instance.componentWillRecieveProps && console.error(
              "%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",
              state
            );
            "function" === typeof _instance.UNSAFE_componentWillRecieveProps && console.error(
              "%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?",
              state
            );
            lane = _instance.props !== nextProps;
            void 0 !== _instance.props && lane && console.error(
              "When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.",
              state
            );
            _instance.defaultProps && console.error(
              "Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.",
              state,
              state
            );
            "function" !== typeof _instance.getSnapshotBeforeUpdate || "function" === typeof _instance.componentDidUpdate || didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(Component) || (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(Component), console.error(
              "%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.",
              getComponentNameFromType(Component)
            ));
            "function" === typeof _instance.getDerivedStateFromProps && console.error(
              "%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.",
              state
            );
            "function" === typeof _instance.getDerivedStateFromError && console.error(
              "%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.",
              state
            );
            "function" === typeof Component.getSnapshotBeforeUpdate && console.error(
              "%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.",
              state
            );
            (lane = _instance.state) && ("object" !== typeof lane || isArrayImpl(lane)) && console.error("%s.state: must be set to an object or null", state);
            "function" === typeof _instance.getChildContext && "object" !== typeof Component.childContextTypes && console.error(
              "%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",
              state
            );
            _instance = workInProgress2.stateNode;
            _instance.props = nextProps;
            _instance.state = workInProgress2.memoizedState;
            _instance.refs = {};
            initializeUpdateQueue(workInProgress2);
            state = Component.contextType;
            _instance.context = "object" === typeof state && null !== state ? readContext(state) : emptyContextObject;
            _instance.state === nextProps && (state = getComponentNameFromType(Component) || "Component", didWarnAboutDirectlyAssigningPropsToState.has(state) || (didWarnAboutDirectlyAssigningPropsToState.add(state), console.error(
              "%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.",
              state
            )));
            workInProgress2.mode & StrictLegacyMode && ReactStrictModeWarnings.recordLegacyContextWarning(
              workInProgress2,
              _instance
            );
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(
              workInProgress2,
              _instance
            );
            _instance.state = workInProgress2.memoizedState;
            state = Component.getDerivedStateFromProps;
            "function" === typeof state && (applyDerivedStateFromProps(
              workInProgress2,
              Component,
              state,
              nextProps
            ), _instance.state = workInProgress2.memoizedState);
            "function" === typeof Component.getDerivedStateFromProps || "function" === typeof _instance.getSnapshotBeforeUpdate || "function" !== typeof _instance.UNSAFE_componentWillMount && "function" !== typeof _instance.componentWillMount || (state = _instance.state, "function" === typeof _instance.componentWillMount && _instance.componentWillMount(), "function" === typeof _instance.UNSAFE_componentWillMount && _instance.UNSAFE_componentWillMount(), state !== _instance.state && (console.error(
              "%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
              getComponentNameFromFiber(workInProgress2) || "Component"
            ), classComponentUpdater.enqueueReplaceState(
              _instance,
              _instance.state,
              null
            )), processUpdateQueue(workInProgress2, nextProps, _instance, renderLanes2), suspendIfUpdateReadFromEntangledAsyncAction(), _instance.state = workInProgress2.memoizedState);
            "function" === typeof _instance.componentDidMount && (workInProgress2.flags |= 4194308);
            (workInProgress2.mode & StrictEffectsMode) !== NoMode && (workInProgress2.flags |= 134217728);
            _instance = true;
          } else if (null === current2) {
            _instance = workInProgress2.stateNode;
            var unresolvedOldProps = workInProgress2.memoizedProps;
            lane = resolveClassComponentProps(Component, unresolvedOldProps);
            _instance.props = lane;
            var oldContext = _instance.context;
            foundWillUpdateName = Component.contextType;
            state = emptyContextObject;
            "object" === typeof foundWillUpdateName && null !== foundWillUpdateName && (state = readContext(foundWillUpdateName));
            newApiName = Component.getDerivedStateFromProps;
            foundWillUpdateName = "function" === typeof newApiName || "function" === typeof _instance.getSnapshotBeforeUpdate;
            unresolvedOldProps = workInProgress2.pendingProps !== unresolvedOldProps;
            foundWillUpdateName || "function" !== typeof _instance.UNSAFE_componentWillReceiveProps && "function" !== typeof _instance.componentWillReceiveProps || (unresolvedOldProps || oldContext !== state) && callComponentWillReceiveProps(
              workInProgress2,
              _instance,
              nextProps,
              state
            );
            hasForceUpdate = false;
            var oldState = workInProgress2.memoizedState;
            _instance.state = oldState;
            processUpdateQueue(workInProgress2, nextProps, _instance, renderLanes2);
            suspendIfUpdateReadFromEntangledAsyncAction();
            oldContext = workInProgress2.memoizedState;
            unresolvedOldProps || oldState !== oldContext || hasForceUpdate ? ("function" === typeof newApiName && (applyDerivedStateFromProps(
              workInProgress2,
              Component,
              newApiName,
              nextProps
            ), oldContext = workInProgress2.memoizedState), (lane = hasForceUpdate || checkShouldComponentUpdate(
              workInProgress2,
              Component,
              lane,
              nextProps,
              oldState,
              oldContext,
              state
            )) ? (foundWillUpdateName || "function" !== typeof _instance.UNSAFE_componentWillMount && "function" !== typeof _instance.componentWillMount || ("function" === typeof _instance.componentWillMount && _instance.componentWillMount(), "function" === typeof _instance.UNSAFE_componentWillMount && _instance.UNSAFE_componentWillMount()), "function" === typeof _instance.componentDidMount && (workInProgress2.flags |= 4194308), (workInProgress2.mode & StrictEffectsMode) !== NoMode && (workInProgress2.flags |= 134217728)) : ("function" === typeof _instance.componentDidMount && (workInProgress2.flags |= 4194308), (workInProgress2.mode & StrictEffectsMode) !== NoMode && (workInProgress2.flags |= 134217728), workInProgress2.memoizedProps = nextProps, workInProgress2.memoizedState = oldContext), _instance.props = nextProps, _instance.state = oldContext, _instance.context = state, _instance = lane) : ("function" === typeof _instance.componentDidMount && (workInProgress2.flags |= 4194308), (workInProgress2.mode & StrictEffectsMode) !== NoMode && (workInProgress2.flags |= 134217728), _instance = false);
          } else {
            _instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            state = workInProgress2.memoizedProps;
            foundWillUpdateName = resolveClassComponentProps(Component, state);
            _instance.props = foundWillUpdateName;
            newApiName = workInProgress2.pendingProps;
            oldState = _instance.context;
            oldContext = Component.contextType;
            lane = emptyContextObject;
            "object" === typeof oldContext && null !== oldContext && (lane = readContext(oldContext));
            unresolvedOldProps = Component.getDerivedStateFromProps;
            (oldContext = "function" === typeof unresolvedOldProps || "function" === typeof _instance.getSnapshotBeforeUpdate) || "function" !== typeof _instance.UNSAFE_componentWillReceiveProps && "function" !== typeof _instance.componentWillReceiveProps || (state !== newApiName || oldState !== lane) && callComponentWillReceiveProps(
              workInProgress2,
              _instance,
              nextProps,
              lane
            );
            hasForceUpdate = false;
            oldState = workInProgress2.memoizedState;
            _instance.state = oldState;
            processUpdateQueue(workInProgress2, nextProps, _instance, renderLanes2);
            suspendIfUpdateReadFromEntangledAsyncAction();
            var newState = workInProgress2.memoizedState;
            state !== newApiName || oldState !== newState || hasForceUpdate || null !== current2 && null !== current2.dependencies && checkIfContextChanged(current2.dependencies) ? ("function" === typeof unresolvedOldProps && (applyDerivedStateFromProps(
              workInProgress2,
              Component,
              unresolvedOldProps,
              nextProps
            ), newState = workInProgress2.memoizedState), (foundWillUpdateName = hasForceUpdate || checkShouldComponentUpdate(
              workInProgress2,
              Component,
              foundWillUpdateName,
              nextProps,
              oldState,
              newState,
              lane
            ) || null !== current2 && null !== current2.dependencies && checkIfContextChanged(current2.dependencies)) ? (oldContext || "function" !== typeof _instance.UNSAFE_componentWillUpdate && "function" !== typeof _instance.componentWillUpdate || ("function" === typeof _instance.componentWillUpdate && _instance.componentWillUpdate(nextProps, newState, lane), "function" === typeof _instance.UNSAFE_componentWillUpdate && _instance.UNSAFE_componentWillUpdate(
              nextProps,
              newState,
              lane
            )), "function" === typeof _instance.componentDidUpdate && (workInProgress2.flags |= 4), "function" === typeof _instance.getSnapshotBeforeUpdate && (workInProgress2.flags |= 1024)) : ("function" !== typeof _instance.componentDidUpdate || state === current2.memoizedProps && oldState === current2.memoizedState || (workInProgress2.flags |= 4), "function" !== typeof _instance.getSnapshotBeforeUpdate || state === current2.memoizedProps && oldState === current2.memoizedState || (workInProgress2.flags |= 1024), workInProgress2.memoizedProps = nextProps, workInProgress2.memoizedState = newState), _instance.props = nextProps, _instance.state = newState, _instance.context = lane, _instance = foundWillUpdateName) : ("function" !== typeof _instance.componentDidUpdate || state === current2.memoizedProps && oldState === current2.memoizedState || (workInProgress2.flags |= 4), "function" !== typeof _instance.getSnapshotBeforeUpdate || state === current2.memoizedProps && oldState === current2.memoizedState || (workInProgress2.flags |= 1024), _instance = false);
          }
          lane = _instance;
          markRef(current2, workInProgress2);
          state = 0 !== (workInProgress2.flags & 128);
          if (lane || state) {
            lane = workInProgress2.stateNode;
            setCurrentFiber(workInProgress2);
            if (state && "function" !== typeof Component.getDerivedStateFromError)
              Component = null, profilerStartTime = -1;
            else {
              markComponentRenderStarted(workInProgress2);
              Component = callRenderInDEV(lane);
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  callRenderInDEV(lane);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              markComponentRenderStopped();
            }
            workInProgress2.flags |= 1;
            null !== current2 && state ? (workInProgress2.child = reconcileChildFibers(
              workInProgress2,
              current2.child,
              null,
              renderLanes2
            ), workInProgress2.child = reconcileChildFibers(
              workInProgress2,
              null,
              Component,
              renderLanes2
            )) : reconcileChildren(current2, workInProgress2, Component, renderLanes2);
            workInProgress2.memoizedState = lane.state;
            current2 = workInProgress2.child;
          } else
            current2 = bailoutOnAlreadyFinishedWork(
              current2,
              workInProgress2,
              renderLanes2
            );
          renderLanes2 = workInProgress2.stateNode;
          _instance && renderLanes2.props !== nextProps && (didWarnAboutReassigningProps || console.error(
            "It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.",
            getComponentNameFromFiber(workInProgress2) || "a component"
          ), didWarnAboutReassigningProps = true);
          return current2;
        }
        function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2) {
          resetHydrationState();
          workInProgress2.flags |= 256;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function validateFunctionComponentInDev(workInProgress2, Component) {
          Component && Component.childContextTypes && console.error(
            "childContextTypes cannot be defined on a function component.\n  %s.childContextTypes = ...",
            Component.displayName || Component.name || "Component"
          );
          "function" === typeof Component.getDerivedStateFromProps && (workInProgress2 = getComponentNameFromType(Component) || "Unknown", didWarnAboutGetDerivedStateOnFunctionComponent[workInProgress2] || (console.error(
            "%s: Function components do not support getDerivedStateFromProps.",
            workInProgress2
          ), didWarnAboutGetDerivedStateOnFunctionComponent[workInProgress2] = true));
          "object" === typeof Component.contextType && null !== Component.contextType && (Component = getComponentNameFromType(Component) || "Unknown", didWarnAboutContextTypeOnFunctionComponent[Component] || (console.error(
            "%s: Function components do not support contextType.",
            Component
          ), didWarnAboutContextTypeOnFunctionComponent[Component] = true));
        }
        function mountSuspenseOffscreenState(renderLanes2) {
          return { baseLanes: renderLanes2, cachePool: getSuspendedCache() };
        }
        function getRemainingWorkInPrimaryTree(current2, primaryTreeDidDefer, renderLanes2) {
          current2 = null !== current2 ? current2.childLanes & ~renderLanes2 : 0;
          primaryTreeDidDefer && (current2 |= workInProgressDeferredLane);
          return current2;
        }
        function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
          var JSCompiler_object_inline_digest_2451;
          var JSCompiler_object_inline_stack_2452 = workInProgress2.pendingProps;
          shouldSuspendImpl(workInProgress2) && (workInProgress2.flags |= 128);
          var JSCompiler_object_inline_componentStack_2453 = false;
          var didSuspend = 0 !== (workInProgress2.flags & 128);
          (JSCompiler_object_inline_digest_2451 = didSuspend) || (JSCompiler_object_inline_digest_2451 = null !== current2 && null === current2.memoizedState ? false : 0 !== (suspenseStackCursor.current & ForceSuspenseFallback));
          JSCompiler_object_inline_digest_2451 && (JSCompiler_object_inline_componentStack_2453 = true, workInProgress2.flags &= -129);
          JSCompiler_object_inline_digest_2451 = 0 !== (workInProgress2.flags & 32);
          workInProgress2.flags &= -33;
          if (null === current2) {
            if (isHydrating) {
              JSCompiler_object_inline_componentStack_2453 ? pushPrimaryTreeSuspenseHandler(workInProgress2) : reuseSuspenseHandlerOnStack(workInProgress2);
              if (isHydrating) {
                var JSCompiler_object_inline_message_2450 = nextHydratableInstance;
                var JSCompiler_temp;
                if (!(JSCompiler_temp = !JSCompiler_object_inline_message_2450)) {
                  c: {
                    var instance = JSCompiler_object_inline_message_2450;
                    for (JSCompiler_temp = rootOrSingletonContext; 8 !== instance.nodeType; ) {
                      if (!JSCompiler_temp) {
                        JSCompiler_temp = null;
                        break c;
                      }
                      instance = getNextHydratable(instance.nextSibling);
                      if (null === instance) {
                        JSCompiler_temp = null;
                        break c;
                      }
                    }
                    JSCompiler_temp = instance;
                  }
                  null !== JSCompiler_temp ? (warnIfNotHydrating(), workInProgress2.memoizedState = {
                    dehydrated: JSCompiler_temp,
                    treeContext: null !== treeContextProvider ? { id: treeContextId, overflow: treeContextOverflow } : null,
                    retryLane: 536870912,
                    hydrationErrors: null
                  }, instance = createFiber(18, null, null, NoMode), instance.stateNode = JSCompiler_temp, instance.return = workInProgress2, workInProgress2.child = instance, hydrationParentFiber = workInProgress2, nextHydratableInstance = null, JSCompiler_temp = true) : JSCompiler_temp = false;
                  JSCompiler_temp = !JSCompiler_temp;
                }
                JSCompiler_temp && (warnNonHydratedInstance(
                  workInProgress2,
                  JSCompiler_object_inline_message_2450
                ), throwOnHydrationMismatch(workInProgress2));
              }
              JSCompiler_object_inline_message_2450 = workInProgress2.memoizedState;
              if (null !== JSCompiler_object_inline_message_2450 && (JSCompiler_object_inline_message_2450 = JSCompiler_object_inline_message_2450.dehydrated, null !== JSCompiler_object_inline_message_2450))
                return isSuspenseInstanceFallback(JSCompiler_object_inline_message_2450) ? workInProgress2.lanes = 32 : workInProgress2.lanes = 536870912, null;
              popSuspenseHandler(workInProgress2);
            }
            JSCompiler_object_inline_message_2450 = JSCompiler_object_inline_stack_2452.children;
            JSCompiler_object_inline_stack_2452 = JSCompiler_object_inline_stack_2452.fallback;
            if (JSCompiler_object_inline_componentStack_2453)
              return reuseSuspenseHandlerOnStack(workInProgress2), JSCompiler_object_inline_componentStack_2453 = workInProgress2.mode, JSCompiler_object_inline_message_2450 = mountWorkInProgressOffscreenFiber(
                {
                  mode: "hidden",
                  children: JSCompiler_object_inline_message_2450
                },
                JSCompiler_object_inline_componentStack_2453
              ), JSCompiler_object_inline_stack_2452 = createFiberFromFragment(
                JSCompiler_object_inline_stack_2452,
                JSCompiler_object_inline_componentStack_2453,
                renderLanes2,
                null
              ), JSCompiler_object_inline_message_2450.return = workInProgress2, JSCompiler_object_inline_stack_2452.return = workInProgress2, JSCompiler_object_inline_message_2450.sibling = JSCompiler_object_inline_stack_2452, workInProgress2.child = JSCompiler_object_inline_message_2450, JSCompiler_object_inline_componentStack_2453 = workInProgress2.child, JSCompiler_object_inline_componentStack_2453.memoizedState = mountSuspenseOffscreenState(renderLanes2), JSCompiler_object_inline_componentStack_2453.childLanes = getRemainingWorkInPrimaryTree(
                current2,
                JSCompiler_object_inline_digest_2451,
                renderLanes2
              ), workInProgress2.memoizedState = SUSPENDED_MARKER, JSCompiler_object_inline_stack_2452;
            pushPrimaryTreeSuspenseHandler(workInProgress2);
            return mountSuspensePrimaryChildren(
              workInProgress2,
              JSCompiler_object_inline_message_2450
            );
          }
          var prevState = current2.memoizedState;
          if (null !== prevState && (JSCompiler_object_inline_message_2450 = prevState.dehydrated, null !== JSCompiler_object_inline_message_2450)) {
            if (didSuspend)
              workInProgress2.flags & 256 ? (pushPrimaryTreeSuspenseHandler(workInProgress2), workInProgress2.flags &= -257, workInProgress2 = retrySuspenseComponentWithoutHydrating(
                current2,
                workInProgress2,
                renderLanes2
              )) : null !== workInProgress2.memoizedState ? (reuseSuspenseHandlerOnStack(workInProgress2), workInProgress2.child = current2.child, workInProgress2.flags |= 128, workInProgress2 = null) : (reuseSuspenseHandlerOnStack(workInProgress2), JSCompiler_object_inline_componentStack_2453 = JSCompiler_object_inline_stack_2452.fallback, JSCompiler_object_inline_message_2450 = workInProgress2.mode, JSCompiler_object_inline_stack_2452 = mountWorkInProgressOffscreenFiber(
                {
                  mode: "visible",
                  children: JSCompiler_object_inline_stack_2452.children
                },
                JSCompiler_object_inline_message_2450
              ), JSCompiler_object_inline_componentStack_2453 = createFiberFromFragment(
                JSCompiler_object_inline_componentStack_2453,
                JSCompiler_object_inline_message_2450,
                renderLanes2,
                null
              ), JSCompiler_object_inline_componentStack_2453.flags |= 2, JSCompiler_object_inline_stack_2452.return = workInProgress2, JSCompiler_object_inline_componentStack_2453.return = workInProgress2, JSCompiler_object_inline_stack_2452.sibling = JSCompiler_object_inline_componentStack_2453, workInProgress2.child = JSCompiler_object_inline_stack_2452, reconcileChildFibers(
                workInProgress2,
                current2.child,
                null,
                renderLanes2
              ), JSCompiler_object_inline_stack_2452 = workInProgress2.child, JSCompiler_object_inline_stack_2452.memoizedState = mountSuspenseOffscreenState(renderLanes2), JSCompiler_object_inline_stack_2452.childLanes = getRemainingWorkInPrimaryTree(
                current2,
                JSCompiler_object_inline_digest_2451,
                renderLanes2
              ), workInProgress2.memoizedState = SUSPENDED_MARKER, workInProgress2 = JSCompiler_object_inline_componentStack_2453);
            else if (pushPrimaryTreeSuspenseHandler(workInProgress2), isHydrating && console.error(
              "We should not be hydrating here. This is a bug in React. Please file a bug."
            ), isSuspenseInstanceFallback(JSCompiler_object_inline_message_2450)) {
              JSCompiler_object_inline_digest_2451 = JSCompiler_object_inline_message_2450.nextSibling && JSCompiler_object_inline_message_2450.nextSibling.dataset;
              if (JSCompiler_object_inline_digest_2451) {
                JSCompiler_temp = JSCompiler_object_inline_digest_2451.dgst;
                var message2 = JSCompiler_object_inline_digest_2451.msg;
                instance = JSCompiler_object_inline_digest_2451.stck;
                var componentStack = JSCompiler_object_inline_digest_2451.cstck;
              }
              JSCompiler_object_inline_message_2450 = message2;
              JSCompiler_object_inline_digest_2451 = JSCompiler_temp;
              JSCompiler_object_inline_stack_2452 = instance;
              JSCompiler_temp = JSCompiler_object_inline_componentStack_2453 = componentStack;
              JSCompiler_object_inline_componentStack_2453 = JSCompiler_object_inline_message_2450 ? Error(JSCompiler_object_inline_message_2450) : Error(
                "The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."
              );
              JSCompiler_object_inline_componentStack_2453.stack = JSCompiler_object_inline_stack_2452 || "";
              JSCompiler_object_inline_componentStack_2453.digest = JSCompiler_object_inline_digest_2451;
              JSCompiler_object_inline_digest_2451 = void 0 === JSCompiler_temp ? null : JSCompiler_temp;
              JSCompiler_object_inline_stack_2452 = {
                value: JSCompiler_object_inline_componentStack_2453,
                source: null,
                stack: JSCompiler_object_inline_digest_2451
              };
              "string" === typeof JSCompiler_object_inline_digest_2451 && CapturedStacks.set(
                JSCompiler_object_inline_componentStack_2453,
                JSCompiler_object_inline_stack_2452
              );
              queueHydrationError(JSCompiler_object_inline_stack_2452);
              workInProgress2 = retrySuspenseComponentWithoutHydrating(
                current2,
                workInProgress2,
                renderLanes2
              );
            } else if (didReceiveUpdate || propagateParentContextChanges(
              current2,
              workInProgress2,
              renderLanes2,
              false
            ), JSCompiler_object_inline_digest_2451 = 0 !== (renderLanes2 & current2.childLanes), didReceiveUpdate || JSCompiler_object_inline_digest_2451) {
              JSCompiler_object_inline_digest_2451 = workInProgressRoot;
              if (null !== JSCompiler_object_inline_digest_2451 && (JSCompiler_object_inline_stack_2452 = renderLanes2 & -renderLanes2, JSCompiler_object_inline_stack_2452 = 0 !== (JSCompiler_object_inline_stack_2452 & 42) ? 1 : getBumpedLaneForHydrationByLane(
                JSCompiler_object_inline_stack_2452
              ), JSCompiler_object_inline_stack_2452 = 0 !== (JSCompiler_object_inline_stack_2452 & (JSCompiler_object_inline_digest_2451.suspendedLanes | renderLanes2)) ? 0 : JSCompiler_object_inline_stack_2452, 0 !== JSCompiler_object_inline_stack_2452 && JSCompiler_object_inline_stack_2452 !== prevState.retryLane))
                throw prevState.retryLane = JSCompiler_object_inline_stack_2452, enqueueConcurrentRenderForLane(
                  current2,
                  JSCompiler_object_inline_stack_2452
                ), scheduleUpdateOnFiber(
                  JSCompiler_object_inline_digest_2451,
                  current2,
                  JSCompiler_object_inline_stack_2452
                ), SelectiveHydrationException;
              JSCompiler_object_inline_message_2450.data === SUSPENSE_PENDING_START_DATA || renderDidSuspendDelayIfPossible();
              workInProgress2 = retrySuspenseComponentWithoutHydrating(
                current2,
                workInProgress2,
                renderLanes2
              );
            } else
              JSCompiler_object_inline_message_2450.data === SUSPENSE_PENDING_START_DATA ? (workInProgress2.flags |= 192, workInProgress2.child = current2.child, workInProgress2 = null) : (current2 = prevState.treeContext, nextHydratableInstance = getNextHydratable(
                JSCompiler_object_inline_message_2450.nextSibling
              ), hydrationParentFiber = workInProgress2, isHydrating = true, hydrationErrors = null, didSuspendOrErrorDEV = false, hydrationDiffRootDEV = null, rootOrSingletonContext = false, null !== current2 && (warnIfNotHydrating(), idStack[idStackIndex++] = treeContextId, idStack[idStackIndex++] = treeContextOverflow, idStack[idStackIndex++] = treeContextProvider, treeContextId = current2.id, treeContextOverflow = current2.overflow, treeContextProvider = workInProgress2), workInProgress2 = mountSuspensePrimaryChildren(
                workInProgress2,
                JSCompiler_object_inline_stack_2452.children
              ), workInProgress2.flags |= 4096);
            return workInProgress2;
          }
          if (JSCompiler_object_inline_componentStack_2453)
            return reuseSuspenseHandlerOnStack(workInProgress2), JSCompiler_object_inline_componentStack_2453 = JSCompiler_object_inline_stack_2452.fallback, JSCompiler_object_inline_message_2450 = workInProgress2.mode, JSCompiler_temp = current2.child, instance = JSCompiler_temp.sibling, JSCompiler_object_inline_stack_2452 = createWorkInProgress(
              JSCompiler_temp,
              {
                mode: "hidden",
                children: JSCompiler_object_inline_stack_2452.children
              }
            ), JSCompiler_object_inline_stack_2452.subtreeFlags = JSCompiler_temp.subtreeFlags & 65011712, null !== instance ? JSCompiler_object_inline_componentStack_2453 = createWorkInProgress(
              instance,
              JSCompiler_object_inline_componentStack_2453
            ) : (JSCompiler_object_inline_componentStack_2453 = createFiberFromFragment(
              JSCompiler_object_inline_componentStack_2453,
              JSCompiler_object_inline_message_2450,
              renderLanes2,
              null
            ), JSCompiler_object_inline_componentStack_2453.flags |= 2), JSCompiler_object_inline_componentStack_2453.return = workInProgress2, JSCompiler_object_inline_stack_2452.return = workInProgress2, JSCompiler_object_inline_stack_2452.sibling = JSCompiler_object_inline_componentStack_2453, workInProgress2.child = JSCompiler_object_inline_stack_2452, JSCompiler_object_inline_stack_2452 = JSCompiler_object_inline_componentStack_2453, JSCompiler_object_inline_componentStack_2453 = workInProgress2.child, JSCompiler_object_inline_message_2450 = current2.child.memoizedState, null === JSCompiler_object_inline_message_2450 ? JSCompiler_object_inline_message_2450 = mountSuspenseOffscreenState(renderLanes2) : (JSCompiler_temp = JSCompiler_object_inline_message_2450.cachePool, null !== JSCompiler_temp ? (instance = CacheContext._currentValue, JSCompiler_temp = JSCompiler_temp.parent !== instance ? { parent: instance, pool: instance } : JSCompiler_temp) : JSCompiler_temp = getSuspendedCache(), JSCompiler_object_inline_message_2450 = {
              baseLanes: JSCompiler_object_inline_message_2450.baseLanes | renderLanes2,
              cachePool: JSCompiler_temp
            }), JSCompiler_object_inline_componentStack_2453.memoizedState = JSCompiler_object_inline_message_2450, JSCompiler_object_inline_componentStack_2453.childLanes = getRemainingWorkInPrimaryTree(
              current2,
              JSCompiler_object_inline_digest_2451,
              renderLanes2
            ), workInProgress2.memoizedState = SUSPENDED_MARKER, JSCompiler_object_inline_stack_2452;
          pushPrimaryTreeSuspenseHandler(workInProgress2);
          renderLanes2 = current2.child;
          current2 = renderLanes2.sibling;
          renderLanes2 = createWorkInProgress(renderLanes2, {
            mode: "visible",
            children: JSCompiler_object_inline_stack_2452.children
          });
          renderLanes2.return = workInProgress2;
          renderLanes2.sibling = null;
          null !== current2 && (JSCompiler_object_inline_digest_2451 = workInProgress2.deletions, null === JSCompiler_object_inline_digest_2451 ? (workInProgress2.deletions = [current2], workInProgress2.flags |= 16) : JSCompiler_object_inline_digest_2451.push(current2));
          workInProgress2.child = renderLanes2;
          workInProgress2.memoizedState = null;
          return renderLanes2;
        }
        function mountSuspensePrimaryChildren(workInProgress2, primaryChildren) {
          primaryChildren = mountWorkInProgressOffscreenFiber(
            { mode: "visible", children: primaryChildren },
            workInProgress2.mode
          );
          primaryChildren.return = workInProgress2;
          return workInProgress2.child = primaryChildren;
        }
        function mountWorkInProgressOffscreenFiber(offscreenProps, mode) {
          offscreenProps = createFiber(22, offscreenProps, null, mode);
          offscreenProps.lanes = 0;
          offscreenProps.stateNode = {
            _visibility: OffscreenVisible,
            _pendingMarkers: null,
            _retryCache: null,
            _transitions: null
          };
          return offscreenProps;
        }
        function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2) {
          reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          current2 = mountSuspensePrimaryChildren(
            workInProgress2,
            workInProgress2.pendingProps.children
          );
          current2.flags |= 2;
          workInProgress2.memoizedState = null;
          return current2;
        }
        function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
          fiber.lanes |= renderLanes2;
          var alternate = fiber.alternate;
          null !== alternate && (alternate.lanes |= renderLanes2);
          scheduleContextWorkOnParentPath(
            fiber.return,
            renderLanes2,
            propagationRoot
          );
        }
        function validateSuspenseListNestedChild(childSlot, index) {
          var isAnArray = isArrayImpl(childSlot);
          childSlot = !isAnArray && "function" === typeof getIteratorFn(childSlot);
          return isAnArray || childSlot ? (isAnArray = isAnArray ? "array" : "iterable", console.error(
            "A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>",
            isAnArray,
            index,
            isAnArray
          ), false) : true;
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
          var renderState = workInProgress2.memoizedState;
          null === renderState ? workInProgress2.memoizedState = {
            isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail,
            tailMode
          } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailMode = tailMode);
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps, revealOrder = nextProps.revealOrder, tailMode = nextProps.tail;
          nextProps = nextProps.children;
          if (void 0 !== revealOrder && "forwards" !== revealOrder && "backwards" !== revealOrder && "together" !== revealOrder && !didWarnAboutRevealOrder[revealOrder])
            if (didWarnAboutRevealOrder[revealOrder] = true, "string" === typeof revealOrder)
              switch (revealOrder.toLowerCase()) {
                case "together":
                case "forwards":
                case "backwards":
                  console.error(
                    '"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.',
                    revealOrder,
                    revealOrder.toLowerCase()
                  );
                  break;
                case "forward":
                case "backward":
                  console.error(
                    '"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.',
                    revealOrder,
                    revealOrder.toLowerCase()
                  );
                  break;
                default:
                  console.error(
                    '"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',
                    revealOrder
                  );
              }
            else
              console.error(
                '%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',
                revealOrder
              );
          void 0 === tailMode || didWarnAboutTailOptions[tailMode] || ("collapsed" !== tailMode && "hidden" !== tailMode ? (didWarnAboutTailOptions[tailMode] = true, console.error(
            '"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?',
            tailMode
          )) : "forwards" !== revealOrder && "backwards" !== revealOrder && (didWarnAboutTailOptions[tailMode] = true, console.error(
            '<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?',
            tailMode
          )));
          a: if (("forwards" === revealOrder || "backwards" === revealOrder) && void 0 !== nextProps && null !== nextProps && false !== nextProps)
            if (isArrayImpl(nextProps))
              for (var i = 0; i < nextProps.length; i++) {
                if (!validateSuspenseListNestedChild(nextProps[i], i)) break a;
              }
            else if (i = getIteratorFn(nextProps), "function" === typeof i) {
              if (i = i.call(nextProps))
                for (var step = i.next(), _i = 0; !step.done; step = i.next()) {
                  if (!validateSuspenseListNestedChild(step.value, _i)) break a;
                  _i++;
                }
            } else
              console.error(
                'A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?',
                revealOrder
              );
          reconcileChildren(current2, workInProgress2, nextProps, renderLanes2);
          nextProps = suspenseStackCursor.current;
          if (0 !== (nextProps & ForceSuspenseFallback))
            nextProps = nextProps & SubtreeSuspenseContextMask | ForceSuspenseFallback, workInProgress2.flags |= 128;
          else {
            if (null !== current2 && 0 !== (current2.flags & 128))
              a: for (current2 = workInProgress2.child; null !== current2; ) {
                if (13 === current2.tag)
                  null !== current2.memoizedState && scheduleSuspenseWorkOnFiber(
                    current2,
                    renderLanes2,
                    workInProgress2
                  );
                else if (19 === current2.tag)
                  scheduleSuspenseWorkOnFiber(current2, renderLanes2, workInProgress2);
                else if (null !== current2.child) {
                  current2.child.return = current2;
                  current2 = current2.child;
                  continue;
                }
                if (current2 === workInProgress2) break a;
                for (; null === current2.sibling; ) {
                  if (null === current2.return || current2.return === workInProgress2)
                    break a;
                  current2 = current2.return;
                }
                current2.sibling.return = current2.return;
                current2 = current2.sibling;
              }
            nextProps &= SubtreeSuspenseContextMask;
          }
          push(suspenseStackCursor, nextProps, workInProgress2);
          switch (revealOrder) {
            case "forwards":
              renderLanes2 = workInProgress2.child;
              for (revealOrder = null; null !== renderLanes2; )
                current2 = renderLanes2.alternate, null !== current2 && null === findFirstSuspended(current2) && (revealOrder = renderLanes2), renderLanes2 = renderLanes2.sibling;
              renderLanes2 = revealOrder;
              null === renderLanes2 ? (revealOrder = workInProgress2.child, workInProgress2.child = null) : (revealOrder = renderLanes2.sibling, renderLanes2.sibling = null);
              initSuspenseListRenderState(
                workInProgress2,
                false,
                revealOrder,
                renderLanes2,
                tailMode
              );
              break;
            case "backwards":
              renderLanes2 = null;
              revealOrder = workInProgress2.child;
              for (workInProgress2.child = null; null !== revealOrder; ) {
                current2 = revealOrder.alternate;
                if (null !== current2 && null === findFirstSuspended(current2)) {
                  workInProgress2.child = revealOrder;
                  break;
                }
                current2 = revealOrder.sibling;
                revealOrder.sibling = renderLanes2;
                renderLanes2 = revealOrder;
                revealOrder = current2;
              }
              initSuspenseListRenderState(
                workInProgress2,
                true,
                renderLanes2,
                null,
                tailMode
              );
              break;
            case "together":
              initSuspenseListRenderState(workInProgress2, false, null, null, void 0);
              break;
            default:
              workInProgress2.memoizedState = null;
          }
          return workInProgress2.child;
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
          null !== current2 && (workInProgress2.dependencies = current2.dependencies);
          profilerStartTime = -1;
          workInProgressRootSkippedLanes |= workInProgress2.lanes;
          if (0 === (renderLanes2 & workInProgress2.childLanes))
            if (null !== current2) {
              if (propagateParentContextChanges(
                current2,
                workInProgress2,
                renderLanes2,
                false
              ), 0 === (renderLanes2 & workInProgress2.childLanes))
                return null;
            } else return null;
          if (null !== current2 && workInProgress2.child !== current2.child)
            throw Error("Resuming work not yet implemented.");
          if (null !== workInProgress2.child) {
            current2 = workInProgress2.child;
            renderLanes2 = createWorkInProgress(current2, current2.pendingProps);
            workInProgress2.child = renderLanes2;
            for (renderLanes2.return = workInProgress2; null !== current2.sibling; )
              current2 = current2.sibling, renderLanes2 = renderLanes2.sibling = createWorkInProgress(current2, current2.pendingProps), renderLanes2.return = workInProgress2;
            renderLanes2.sibling = null;
          }
          return workInProgress2.child;
        }
        function checkScheduledUpdateOrContext(current2, renderLanes2) {
          if (0 !== (current2.lanes & renderLanes2)) return true;
          current2 = current2.dependencies;
          return null !== current2 && checkIfContextChanged(current2) ? true : false;
        }
        function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
          switch (workInProgress2.tag) {
            case 3:
              pushHostContainer(
                workInProgress2,
                workInProgress2.stateNode.containerInfo
              );
              pushProvider(
                workInProgress2,
                CacheContext,
                current2.memoizedState.cache
              );
              resetHydrationState();
              break;
            case 27:
            case 5:
              pushHostContext(workInProgress2);
              break;
            case 4:
              pushHostContainer(
                workInProgress2,
                workInProgress2.stateNode.containerInfo
              );
              break;
            case 10:
              pushProvider(
                workInProgress2,
                workInProgress2.type,
                workInProgress2.memoizedProps.value
              );
              break;
            case 12:
              0 !== (renderLanes2 & workInProgress2.childLanes) && (workInProgress2.flags |= 4);
              workInProgress2.flags |= 2048;
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = -0;
              stateNode.passiveEffectDuration = -0;
              break;
            case 13:
              stateNode = workInProgress2.memoizedState;
              if (null !== stateNode) {
                if (null !== stateNode.dehydrated)
                  return pushPrimaryTreeSuspenseHandler(workInProgress2), workInProgress2.flags |= 128, null;
                if (0 !== (renderLanes2 & workInProgress2.child.childLanes))
                  return updateSuspenseComponent(
                    current2,
                    workInProgress2,
                    renderLanes2
                  );
                pushPrimaryTreeSuspenseHandler(workInProgress2);
                current2 = bailoutOnAlreadyFinishedWork(
                  current2,
                  workInProgress2,
                  renderLanes2
                );
                return null !== current2 ? current2.sibling : null;
              }
              pushPrimaryTreeSuspenseHandler(workInProgress2);
              break;
            case 19:
              var didSuspendBefore = 0 !== (current2.flags & 128);
              stateNode = 0 !== (renderLanes2 & workInProgress2.childLanes);
              stateNode || (propagateParentContextChanges(
                current2,
                workInProgress2,
                renderLanes2,
                false
              ), stateNode = 0 !== (renderLanes2 & workInProgress2.childLanes));
              if (didSuspendBefore) {
                if (stateNode)
                  return updateSuspenseListComponent(
                    current2,
                    workInProgress2,
                    renderLanes2
                  );
                workInProgress2.flags |= 128;
              }
              didSuspendBefore = workInProgress2.memoizedState;
              null !== didSuspendBefore && (didSuspendBefore.rendering = null, didSuspendBefore.tail = null, didSuspendBefore.lastEffect = null);
              push(
                suspenseStackCursor,
                suspenseStackCursor.current,
                workInProgress2
              );
              if (stateNode) break;
              else return null;
            case 22:
            case 23:
              return workInProgress2.lanes = 0, updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            case 24:
              pushProvider(
                workInProgress2,
                CacheContext,
                current2.memoizedState.cache
              );
          }
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        function beginWork(current2, workInProgress2, renderLanes2) {
          if (workInProgress2._debugNeedsRemount && null !== current2) {
            renderLanes2 = createFiberFromTypeAndProps(
              workInProgress2.type,
              workInProgress2.key,
              workInProgress2.pendingProps,
              workInProgress2._debugOwner || null,
              workInProgress2.mode,
              workInProgress2.lanes
            );
            renderLanes2._debugStack = workInProgress2._debugStack;
            renderLanes2._debugTask = workInProgress2._debugTask;
            var returnFiber = workInProgress2.return;
            if (null === returnFiber) throw Error("Cannot swap the root fiber.");
            current2.alternate = null;
            workInProgress2.alternate = null;
            renderLanes2.index = workInProgress2.index;
            renderLanes2.sibling = workInProgress2.sibling;
            renderLanes2.return = workInProgress2.return;
            renderLanes2.ref = workInProgress2.ref;
            renderLanes2._debugInfo = workInProgress2._debugInfo;
            if (workInProgress2 === returnFiber.child)
              returnFiber.child = renderLanes2;
            else {
              var prevSibling = returnFiber.child;
              if (null === prevSibling)
                throw Error("Expected parent to have a child.");
              for (; prevSibling.sibling !== workInProgress2; )
                if (prevSibling = prevSibling.sibling, null === prevSibling)
                  throw Error("Expected to find the previous sibling.");
              prevSibling.sibling = renderLanes2;
            }
            workInProgress2 = returnFiber.deletions;
            null === workInProgress2 ? (returnFiber.deletions = [current2], returnFiber.flags |= 16) : workInProgress2.push(current2);
            renderLanes2.flags |= 2;
            return renderLanes2;
          }
          if (null !== current2)
            if (current2.memoizedProps !== workInProgress2.pendingProps || workInProgress2.type !== current2.type)
              didReceiveUpdate = true;
            else {
              if (!checkScheduledUpdateOrContext(current2, renderLanes2) && 0 === (workInProgress2.flags & 128))
                return didReceiveUpdate = false, attemptEarlyBailoutIfNoScheduledUpdate(
                  current2,
                  workInProgress2,
                  renderLanes2
                );
              didReceiveUpdate = 0 !== (current2.flags & 131072) ? true : false;
            }
          else {
            didReceiveUpdate = false;
            if (returnFiber = isHydrating)
              warnIfNotHydrating(), returnFiber = 0 !== (workInProgress2.flags & 1048576);
            returnFiber && (returnFiber = workInProgress2.index, warnIfNotHydrating(), pushTreeId(workInProgress2, treeForkCount, returnFiber));
          }
          workInProgress2.lanes = 0;
          switch (workInProgress2.tag) {
            case 16:
              a: if (returnFiber = workInProgress2.pendingProps, current2 = callLazyInitInDEV(workInProgress2.elementType), workInProgress2.type = current2, "function" === typeof current2)
                shouldConstruct(current2) ? (returnFiber = resolveClassComponentProps(
                  current2,
                  returnFiber
                ), workInProgress2.tag = 1, workInProgress2.type = current2 = resolveFunctionForHotReloading(current2), workInProgress2 = updateClassComponent(
                  null,
                  workInProgress2,
                  current2,
                  returnFiber,
                  renderLanes2
                )) : (workInProgress2.tag = 0, validateFunctionComponentInDev(workInProgress2, current2), workInProgress2.type = current2 = resolveFunctionForHotReloading(current2), workInProgress2 = updateFunctionComponent(
                  null,
                  workInProgress2,
                  current2,
                  returnFiber,
                  renderLanes2
                ));
              else {
                if (void 0 !== current2 && null !== current2) {
                  if (prevSibling = current2.$$typeof, prevSibling === REACT_FORWARD_REF_TYPE) {
                    workInProgress2.tag = 11;
                    workInProgress2.type = current2 = resolveForwardRefForHotReloading(current2);
                    workInProgress2 = updateForwardRef(
                      null,
                      workInProgress2,
                      current2,
                      returnFiber,
                      renderLanes2
                    );
                    break a;
                  } else if (prevSibling === REACT_MEMO_TYPE) {
                    workInProgress2.tag = 14;
                    workInProgress2 = updateMemoComponent(
                      null,
                      workInProgress2,
                      current2,
                      returnFiber,
                      renderLanes2
                    );
                    break a;
                  }
                }
                workInProgress2 = "";
                null !== current2 && "object" === typeof current2 && current2.$$typeof === REACT_LAZY_TYPE && (workInProgress2 = " Did you wrap a component in React.lazy() more than once?");
                current2 = getComponentNameFromType(current2) || current2;
                throw Error(
                  "Element type is invalid. Received a promise that resolves to: " + current2 + ". Lazy element type must resolve to a class or function." + workInProgress2
                );
              }
              return workInProgress2;
            case 0:
              return updateFunctionComponent(
                current2,
                workInProgress2,
                workInProgress2.type,
                workInProgress2.pendingProps,
                renderLanes2
              );
            case 1:
              return returnFiber = workInProgress2.type, prevSibling = resolveClassComponentProps(
                returnFiber,
                workInProgress2.pendingProps
              ), updateClassComponent(
                current2,
                workInProgress2,
                returnFiber,
                prevSibling,
                renderLanes2
              );
            case 3:
              a: {
                pushHostContainer(
                  workInProgress2,
                  workInProgress2.stateNode.containerInfo
                );
                if (null === current2)
                  throw Error(
                    "Should have a current fiber. This is a bug in React."
                  );
                returnFiber = workInProgress2.pendingProps;
                var prevState = workInProgress2.memoizedState;
                prevSibling = prevState.element;
                cloneUpdateQueue(current2, workInProgress2);
                processUpdateQueue(workInProgress2, returnFiber, null, renderLanes2);
                var nextState = workInProgress2.memoizedState;
                returnFiber = nextState.cache;
                pushProvider(workInProgress2, CacheContext, returnFiber);
                returnFiber !== prevState.cache && propagateContextChanges(
                  workInProgress2,
                  [CacheContext],
                  renderLanes2,
                  true
                );
                suspendIfUpdateReadFromEntangledAsyncAction();
                returnFiber = nextState.element;
                if (prevState.isDehydrated)
                  if (prevState = {
                    element: returnFiber,
                    isDehydrated: false,
                    cache: nextState.cache
                  }, workInProgress2.updateQueue.baseState = prevState, workInProgress2.memoizedState = prevState, workInProgress2.flags & 256) {
                    workInProgress2 = mountHostRootWithoutHydrating(
                      current2,
                      workInProgress2,
                      returnFiber,
                      renderLanes2
                    );
                    break a;
                  } else if (returnFiber !== prevSibling) {
                    prevSibling = createCapturedValueAtFiber(
                      Error(
                        "This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."
                      ),
                      workInProgress2
                    );
                    queueHydrationError(prevSibling);
                    workInProgress2 = mountHostRootWithoutHydrating(
                      current2,
                      workInProgress2,
                      returnFiber,
                      renderLanes2
                    );
                    break a;
                  } else {
                    current2 = workInProgress2.stateNode.containerInfo;
                    switch (current2.nodeType) {
                      case 9:
                        current2 = current2.body;
                        break;
                      default:
                        current2 = "HTML" === current2.nodeName ? current2.ownerDocument.body : current2;
                    }
                    nextHydratableInstance = getNextHydratable(current2.firstChild);
                    hydrationParentFiber = workInProgress2;
                    isHydrating = true;
                    hydrationErrors = null;
                    didSuspendOrErrorDEV = false;
                    hydrationDiffRootDEV = null;
                    rootOrSingletonContext = true;
                    current2 = mountChildFibers(
                      workInProgress2,
                      null,
                      returnFiber,
                      renderLanes2
                    );
                    for (workInProgress2.child = current2; current2; )
                      current2.flags = current2.flags & -3 | 4096, current2 = current2.sibling;
                  }
                else {
                  resetHydrationState();
                  if (returnFiber === prevSibling) {
                    workInProgress2 = bailoutOnAlreadyFinishedWork(
                      current2,
                      workInProgress2,
                      renderLanes2
                    );
                    break a;
                  }
                  reconcileChildren(
                    current2,
                    workInProgress2,
                    returnFiber,
                    renderLanes2
                  );
                }
                workInProgress2 = workInProgress2.child;
              }
              return workInProgress2;
            case 26:
              return markRef(current2, workInProgress2), null === current2 ? (current2 = getResource(
                workInProgress2.type,
                null,
                workInProgress2.pendingProps,
                null
              )) ? workInProgress2.memoizedState = current2 : isHydrating || (current2 = workInProgress2.type, renderLanes2 = workInProgress2.pendingProps, returnFiber = requiredContext(
                rootInstanceStackCursor.current
              ), returnFiber = getOwnerDocumentFromRootContainer(
                returnFiber
              ).createElement(current2), returnFiber[internalInstanceKey] = workInProgress2, returnFiber[internalPropsKey] = renderLanes2, setInitialProperties(returnFiber, current2, renderLanes2), markNodeAsHoistable(returnFiber), workInProgress2.stateNode = returnFiber) : workInProgress2.memoizedState = getResource(
                workInProgress2.type,
                current2.memoizedProps,
                workInProgress2.pendingProps,
                current2.memoizedState
              ), null;
            case 27:
              return pushHostContext(workInProgress2), null === current2 && isHydrating && (returnFiber = requiredContext(rootInstanceStackCursor.current), prevSibling = getHostContext(), returnFiber = workInProgress2.stateNode = resolveSingletonInstance(
                workInProgress2.type,
                workInProgress2.pendingProps,
                returnFiber,
                prevSibling,
                false
              ), didSuspendOrErrorDEV || (prevSibling = diffHydratedProperties(
                returnFiber,
                workInProgress2.type,
                workInProgress2.pendingProps,
                prevSibling
              ), null !== prevSibling && (buildHydrationDiffNode(workInProgress2, 0).serverProps = prevSibling)), hydrationParentFiber = workInProgress2, rootOrSingletonContext = true, prevSibling = nextHydratableInstance, isSingletonScope(workInProgress2.type) ? (previousHydratableOnEnteringScopedSingleton = prevSibling, nextHydratableInstance = getNextHydratable(
                returnFiber.firstChild
              )) : nextHydratableInstance = prevSibling), reconcileChildren(
                current2,
                workInProgress2,
                workInProgress2.pendingProps.children,
                renderLanes2
              ), markRef(current2, workInProgress2), null === current2 && (workInProgress2.flags |= 4194304), workInProgress2.child;
            case 5:
              return null === current2 && isHydrating && (prevState = getHostContext(), returnFiber = validateDOMNesting(
                workInProgress2.type,
                prevState.ancestorInfo
              ), prevSibling = nextHydratableInstance, (nextState = !prevSibling) || (nextState = canHydrateInstance(
                prevSibling,
                workInProgress2.type,
                workInProgress2.pendingProps,
                rootOrSingletonContext
              ), null !== nextState ? (workInProgress2.stateNode = nextState, didSuspendOrErrorDEV || (prevState = diffHydratedProperties(
                nextState,
                workInProgress2.type,
                workInProgress2.pendingProps,
                prevState
              ), null !== prevState && (buildHydrationDiffNode(workInProgress2, 0).serverProps = prevState)), hydrationParentFiber = workInProgress2, nextHydratableInstance = getNextHydratable(
                nextState.firstChild
              ), rootOrSingletonContext = false, prevState = true) : prevState = false, nextState = !prevState), nextState && (returnFiber && warnNonHydratedInstance(workInProgress2, prevSibling), throwOnHydrationMismatch(workInProgress2))), pushHostContext(workInProgress2), prevSibling = workInProgress2.type, prevState = workInProgress2.pendingProps, nextState = null !== current2 ? current2.memoizedProps : null, returnFiber = prevState.children, shouldSetTextContent(prevSibling, prevState) ? returnFiber = null : null !== nextState && shouldSetTextContent(prevSibling, nextState) && (workInProgress2.flags |= 32), null !== workInProgress2.memoizedState && (prevSibling = renderWithHooks(
                current2,
                workInProgress2,
                TransitionAwareHostComponent,
                null,
                null,
                renderLanes2
              ), HostTransitionContext._currentValue = prevSibling), markRef(current2, workInProgress2), reconcileChildren(
                current2,
                workInProgress2,
                returnFiber,
                renderLanes2
              ), workInProgress2.child;
            case 6:
              return null === current2 && isHydrating && (current2 = workInProgress2.pendingProps, renderLanes2 = getHostContext(), returnFiber = renderLanes2.ancestorInfo.current, current2 = null != returnFiber ? validateTextNesting(
                current2,
                returnFiber.tag,
                renderLanes2.ancestorInfo.implicitRootScope
              ) : true, renderLanes2 = nextHydratableInstance, (returnFiber = !renderLanes2) || (returnFiber = canHydrateTextInstance(
                renderLanes2,
                workInProgress2.pendingProps,
                rootOrSingletonContext
              ), null !== returnFiber ? (workInProgress2.stateNode = returnFiber, hydrationParentFiber = workInProgress2, nextHydratableInstance = null, returnFiber = true) : returnFiber = false, returnFiber = !returnFiber), returnFiber && (current2 && warnNonHydratedInstance(workInProgress2, renderLanes2), throwOnHydrationMismatch(workInProgress2))), null;
            case 13:
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            case 4:
              return pushHostContainer(
                workInProgress2,
                workInProgress2.stateNode.containerInfo
              ), returnFiber = workInProgress2.pendingProps, null === current2 ? workInProgress2.child = reconcileChildFibers(
                workInProgress2,
                null,
                returnFiber,
                renderLanes2
              ) : reconcileChildren(
                current2,
                workInProgress2,
                returnFiber,
                renderLanes2
              ), workInProgress2.child;
            case 11:
              return updateForwardRef(
                current2,
                workInProgress2,
                workInProgress2.type,
                workInProgress2.pendingProps,
                renderLanes2
              );
            case 7:
              return reconcileChildren(
                current2,
                workInProgress2,
                workInProgress2.pendingProps,
                renderLanes2
              ), workInProgress2.child;
            case 8:
              return reconcileChildren(
                current2,
                workInProgress2,
                workInProgress2.pendingProps.children,
                renderLanes2
              ), workInProgress2.child;
            case 12:
              return workInProgress2.flags |= 4, workInProgress2.flags |= 2048, returnFiber = workInProgress2.stateNode, returnFiber.effectDuration = -0, returnFiber.passiveEffectDuration = -0, reconcileChildren(
                current2,
                workInProgress2,
                workInProgress2.pendingProps.children,
                renderLanes2
              ), workInProgress2.child;
            case 10:
              return returnFiber = workInProgress2.type, prevSibling = workInProgress2.pendingProps, prevState = prevSibling.value, "value" in prevSibling || hasWarnedAboutUsingNoValuePropOnContextProvider || (hasWarnedAboutUsingNoValuePropOnContextProvider = true, console.error(
                "The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?"
              )), pushProvider(workInProgress2, returnFiber, prevState), reconcileChildren(
                current2,
                workInProgress2,
                prevSibling.children,
                renderLanes2
              ), workInProgress2.child;
            case 9:
              return prevSibling = workInProgress2.type._context, returnFiber = workInProgress2.pendingProps.children, "function" !== typeof returnFiber && console.error(
                "A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."
              ), prepareToReadContext(workInProgress2), prevSibling = readContext(prevSibling), markComponentRenderStarted(workInProgress2), returnFiber = callComponentInDEV(
                returnFiber,
                prevSibling,
                void 0
              ), markComponentRenderStopped(), workInProgress2.flags |= 1, reconcileChildren(
                current2,
                workInProgress2,
                returnFiber,
                renderLanes2
              ), workInProgress2.child;
            case 14:
              return updateMemoComponent(
                current2,
                workInProgress2,
                workInProgress2.type,
                workInProgress2.pendingProps,
                renderLanes2
              );
            case 15:
              return updateSimpleMemoComponent(
                current2,
                workInProgress2,
                workInProgress2.type,
                workInProgress2.pendingProps,
                renderLanes2
              );
            case 19:
              return updateSuspenseListComponent(
                current2,
                workInProgress2,
                renderLanes2
              );
            case 31:
              return returnFiber = workInProgress2.pendingProps, renderLanes2 = workInProgress2.mode, returnFiber = {
                mode: returnFiber.mode,
                children: returnFiber.children
              }, null === current2 ? (current2 = mountWorkInProgressOffscreenFiber(
                returnFiber,
                renderLanes2
              ), current2.ref = workInProgress2.ref, workInProgress2.child = current2, current2.return = workInProgress2, workInProgress2 = current2) : (current2 = createWorkInProgress(current2.child, returnFiber), current2.ref = workInProgress2.ref, workInProgress2.child = current2, current2.return = workInProgress2, workInProgress2 = current2), workInProgress2;
            case 22:
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            case 24:
              return prepareToReadContext(workInProgress2), returnFiber = readContext(CacheContext), null === current2 ? (prevSibling = peekCacheFromPool(), null === prevSibling && (prevSibling = workInProgressRoot, prevState = createCache(), prevSibling.pooledCache = prevState, retainCache(prevState), null !== prevState && (prevSibling.pooledCacheLanes |= renderLanes2), prevSibling = prevState), workInProgress2.memoizedState = {
                parent: returnFiber,
                cache: prevSibling
              }, initializeUpdateQueue(workInProgress2), pushProvider(workInProgress2, CacheContext, prevSibling)) : (0 !== (current2.lanes & renderLanes2) && (cloneUpdateQueue(current2, workInProgress2), processUpdateQueue(workInProgress2, null, null, renderLanes2), suspendIfUpdateReadFromEntangledAsyncAction()), prevSibling = current2.memoizedState, prevState = workInProgress2.memoizedState, prevSibling.parent !== returnFiber ? (prevSibling = {
                parent: returnFiber,
                cache: returnFiber
              }, workInProgress2.memoizedState = prevSibling, 0 === workInProgress2.lanes && (workInProgress2.memoizedState = workInProgress2.updateQueue.baseState = prevSibling), pushProvider(workInProgress2, CacheContext, returnFiber)) : (returnFiber = prevState.cache, pushProvider(workInProgress2, CacheContext, returnFiber), returnFiber !== prevSibling.cache && propagateContextChanges(
                workInProgress2,
                [CacheContext],
                renderLanes2,
                true
              ))), reconcileChildren(
                current2,
                workInProgress2,
                workInProgress2.pendingProps.children,
                renderLanes2
              ), workInProgress2.child;
            case 29:
              throw workInProgress2.pendingProps;
          }
          throw Error(
            "Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue."
          );
        }
        function markUpdate(workInProgress2) {
          workInProgress2.flags |= 4;
        }
        function preloadResourceAndSuspendIfNeeded(workInProgress2, resource) {
          if ("stylesheet" !== resource.type || (resource.state.loading & Inserted) !== NotLoaded)
            workInProgress2.flags &= -16777217;
          else if (workInProgress2.flags |= 16777216, !preloadResource(resource)) {
            resource = suspenseHandlerStackCursor.current;
            if (null !== resource && ((workInProgressRootRenderLanes & 4194048) === workInProgressRootRenderLanes ? null !== shellBoundary : (workInProgressRootRenderLanes & 62914560) !== workInProgressRootRenderLanes && 0 === (workInProgressRootRenderLanes & 536870912) || resource !== shellBoundary))
              throw suspendedThenable = noopSuspenseyCommitThenable, SuspenseyCommitException;
            workInProgress2.flags |= 8192;
          }
        }
        function scheduleRetryEffect(workInProgress2, retryQueue) {
          null !== retryQueue && (workInProgress2.flags |= 4);
          workInProgress2.flags & 16384 && (retryQueue = 22 !== workInProgress2.tag ? claimNextRetryLane() : 536870912, workInProgress2.lanes |= retryQueue, workInProgressSuspendedRetryLanes |= retryQueue);
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (!isHydrating)
            switch (renderState.tailMode) {
              case "hidden":
                hasRenderedATailFallback = renderState.tail;
                for (var lastTailNode = null; null !== hasRenderedATailFallback; )
                  null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
                null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
                break;
              case "collapsed":
                lastTailNode = renderState.tail;
                for (var _lastTailNode = null; null !== lastTailNode; )
                  null !== lastTailNode.alternate && (_lastTailNode = lastTailNode), lastTailNode = lastTailNode.sibling;
                null === _lastTailNode ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : _lastTailNode.sibling = null;
            }
        }
        function bubbleProperties(completedWork) {
          var didBailout = null !== completedWork.alternate && completedWork.alternate.child === completedWork.child, newChildLanes = 0, subtreeFlags = 0;
          if (didBailout)
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              for (var _treeBaseDuration = completedWork.selfBaseDuration, _child2 = completedWork.child; null !== _child2; )
                newChildLanes |= _child2.lanes | _child2.childLanes, subtreeFlags |= _child2.subtreeFlags & 65011712, subtreeFlags |= _child2.flags & 65011712, _treeBaseDuration += _child2.treeBaseDuration, _child2 = _child2.sibling;
              completedWork.treeBaseDuration = _treeBaseDuration;
            } else
              for (_treeBaseDuration = completedWork.child; null !== _treeBaseDuration; )
                newChildLanes |= _treeBaseDuration.lanes | _treeBaseDuration.childLanes, subtreeFlags |= _treeBaseDuration.subtreeFlags & 65011712, subtreeFlags |= _treeBaseDuration.flags & 65011712, _treeBaseDuration.return = completedWork, _treeBaseDuration = _treeBaseDuration.sibling;
          else if ((completedWork.mode & ProfileMode) !== NoMode) {
            _treeBaseDuration = completedWork.actualDuration;
            _child2 = completedWork.selfBaseDuration;
            for (var child = completedWork.child; null !== child; )
              newChildLanes |= child.lanes | child.childLanes, subtreeFlags |= child.subtreeFlags, subtreeFlags |= child.flags, _treeBaseDuration += child.actualDuration, _child2 += child.treeBaseDuration, child = child.sibling;
            completedWork.actualDuration = _treeBaseDuration;
            completedWork.treeBaseDuration = _child2;
          } else
            for (_treeBaseDuration = completedWork.child; null !== _treeBaseDuration; )
              newChildLanes |= _treeBaseDuration.lanes | _treeBaseDuration.childLanes, subtreeFlags |= _treeBaseDuration.subtreeFlags, subtreeFlags |= _treeBaseDuration.flags, _treeBaseDuration.return = completedWork, _treeBaseDuration = _treeBaseDuration.sibling;
          completedWork.subtreeFlags |= subtreeFlags;
          completedWork.childLanes = newChildLanes;
          return didBailout;
        }
        function completeWork(current2, workInProgress2, renderLanes2) {
          var newProps = workInProgress2.pendingProps;
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case 31:
            case 16:
            case 15:
            case 0:
            case 11:
            case 7:
            case 8:
            case 12:
            case 9:
            case 14:
              return bubbleProperties(workInProgress2), null;
            case 1:
              return bubbleProperties(workInProgress2), null;
            case 3:
              renderLanes2 = workInProgress2.stateNode;
              newProps = null;
              null !== current2 && (newProps = current2.memoizedState.cache);
              workInProgress2.memoizedState.cache !== newProps && (workInProgress2.flags |= 2048);
              popProvider(CacheContext, workInProgress2);
              popHostContainer(workInProgress2);
              renderLanes2.pendingContext && (renderLanes2.context = renderLanes2.pendingContext, renderLanes2.pendingContext = null);
              if (null === current2 || null === current2.child)
                popHydrationState(workInProgress2) ? (emitPendingHydrationWarnings(), markUpdate(workInProgress2)) : null === current2 || current2.memoizedState.isDehydrated && 0 === (workInProgress2.flags & 256) || (workInProgress2.flags |= 1024, upgradeHydrationErrorsToRecoverable());
              bubbleProperties(workInProgress2);
              return null;
            case 26:
              return renderLanes2 = workInProgress2.memoizedState, null === current2 ? (markUpdate(workInProgress2), null !== renderLanes2 ? (bubbleProperties(workInProgress2), preloadResourceAndSuspendIfNeeded(
                workInProgress2,
                renderLanes2
              )) : (bubbleProperties(workInProgress2), workInProgress2.flags &= -16777217)) : renderLanes2 ? renderLanes2 !== current2.memoizedState ? (markUpdate(workInProgress2), bubbleProperties(workInProgress2), preloadResourceAndSuspendIfNeeded(
                workInProgress2,
                renderLanes2
              )) : (bubbleProperties(workInProgress2), workInProgress2.flags &= -16777217) : (current2.memoizedProps !== newProps && markUpdate(workInProgress2), bubbleProperties(workInProgress2), workInProgress2.flags &= -16777217), null;
            case 27:
              popHostContext(workInProgress2);
              renderLanes2 = requiredContext(rootInstanceStackCursor.current);
              var _type = workInProgress2.type;
              if (null !== current2 && null != workInProgress2.stateNode)
                current2.memoizedProps !== newProps && markUpdate(workInProgress2);
              else {
                if (!newProps) {
                  if (null === workInProgress2.stateNode)
                    throw Error(
                      "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
                    );
                  bubbleProperties(workInProgress2);
                  return null;
                }
                current2 = getHostContext();
                popHydrationState(workInProgress2) ? prepareToHydrateHostInstance(workInProgress2, current2) : (current2 = resolveSingletonInstance(
                  _type,
                  newProps,
                  renderLanes2,
                  current2,
                  true
                ), workInProgress2.stateNode = current2, markUpdate(workInProgress2));
              }
              bubbleProperties(workInProgress2);
              return null;
            case 5:
              popHostContext(workInProgress2);
              renderLanes2 = workInProgress2.type;
              if (null !== current2 && null != workInProgress2.stateNode)
                current2.memoizedProps !== newProps && markUpdate(workInProgress2);
              else {
                if (!newProps) {
                  if (null === workInProgress2.stateNode)
                    throw Error(
                      "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
                    );
                  bubbleProperties(workInProgress2);
                  return null;
                }
                _type = getHostContext();
                if (popHydrationState(workInProgress2))
                  prepareToHydrateHostInstance(workInProgress2, _type);
                else {
                  current2 = requiredContext(rootInstanceStackCursor.current);
                  validateDOMNesting(renderLanes2, _type.ancestorInfo);
                  _type = _type.context;
                  current2 = getOwnerDocumentFromRootContainer(current2);
                  switch (_type) {
                    case HostContextNamespaceSvg:
                      current2 = current2.createElementNS(SVG_NAMESPACE, renderLanes2);
                      break;
                    case HostContextNamespaceMath:
                      current2 = current2.createElementNS(
                        MATH_NAMESPACE,
                        renderLanes2
                      );
                      break;
                    default:
                      switch (renderLanes2) {
                        case "svg":
                          current2 = current2.createElementNS(
                            SVG_NAMESPACE,
                            renderLanes2
                          );
                          break;
                        case "math":
                          current2 = current2.createElementNS(
                            MATH_NAMESPACE,
                            renderLanes2
                          );
                          break;
                        case "script":
                          current2 = current2.createElement("div");
                          current2.innerHTML = "<script><\/script>";
                          current2 = current2.removeChild(current2.firstChild);
                          break;
                        case "select":
                          current2 = "string" === typeof newProps.is ? current2.createElement("select", { is: newProps.is }) : current2.createElement("select");
                          newProps.multiple ? current2.multiple = true : newProps.size && (current2.size = newProps.size);
                          break;
                        default:
                          current2 = "string" === typeof newProps.is ? current2.createElement(renderLanes2, {
                            is: newProps.is
                          }) : current2.createElement(renderLanes2), -1 === renderLanes2.indexOf("-") && (renderLanes2 !== renderLanes2.toLowerCase() && console.error(
                            "<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.",
                            renderLanes2
                          ), "[object HTMLUnknownElement]" !== Object.prototype.toString.call(current2) || hasOwnProperty.call(
                            warnedUnknownTags,
                            renderLanes2
                          ) || (warnedUnknownTags[renderLanes2] = true, console.error(
                            "The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.",
                            renderLanes2
                          )));
                      }
                  }
                  current2[internalInstanceKey] = workInProgress2;
                  current2[internalPropsKey] = newProps;
                  a: for (_type = workInProgress2.child; null !== _type; ) {
                    if (5 === _type.tag || 6 === _type.tag)
                      current2.appendChild(_type.stateNode);
                    else if (4 !== _type.tag && 27 !== _type.tag && null !== _type.child) {
                      _type.child.return = _type;
                      _type = _type.child;
                      continue;
                    }
                    if (_type === workInProgress2) break a;
                    for (; null === _type.sibling; ) {
                      if (null === _type.return || _type.return === workInProgress2)
                        break a;
                      _type = _type.return;
                    }
                    _type.sibling.return = _type.return;
                    _type = _type.sibling;
                  }
                  workInProgress2.stateNode = current2;
                  a: switch (setInitialProperties(current2, renderLanes2, newProps), renderLanes2) {
                    case "button":
                    case "input":
                    case "select":
                    case "textarea":
                      current2 = !!newProps.autoFocus;
                      break a;
                    case "img":
                      current2 = true;
                      break a;
                    default:
                      current2 = false;
                  }
                  current2 && markUpdate(workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              workInProgress2.flags &= -16777217;
              return null;
            case 6:
              if (current2 && null != workInProgress2.stateNode)
                current2.memoizedProps !== newProps && markUpdate(workInProgress2);
              else {
                if ("string" !== typeof newProps && null === workInProgress2.stateNode)
                  throw Error(
                    "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
                  );
                current2 = requiredContext(rootInstanceStackCursor.current);
                renderLanes2 = getHostContext();
                if (popHydrationState(workInProgress2)) {
                  current2 = workInProgress2.stateNode;
                  renderLanes2 = workInProgress2.memoizedProps;
                  _type = !didSuspendOrErrorDEV;
                  newProps = null;
                  var returnFiber = hydrationParentFiber;
                  if (null !== returnFiber)
                    switch (returnFiber.tag) {
                      case 3:
                        _type && (_type = diffHydratedTextForDevWarnings(
                          current2,
                          renderLanes2,
                          newProps
                        ), null !== _type && (buildHydrationDiffNode(workInProgress2, 0).serverProps = _type));
                        break;
                      case 27:
                      case 5:
                        newProps = returnFiber.memoizedProps, _type && (_type = diffHydratedTextForDevWarnings(
                          current2,
                          renderLanes2,
                          newProps
                        ), null !== _type && (buildHydrationDiffNode(
                          workInProgress2,
                          0
                        ).serverProps = _type));
                    }
                  current2[internalInstanceKey] = workInProgress2;
                  current2 = current2.nodeValue === renderLanes2 || null !== newProps && true === newProps.suppressHydrationWarning || checkForUnmatchedText(current2.nodeValue, renderLanes2) ? true : false;
                  current2 || throwOnHydrationMismatch(workInProgress2);
                } else
                  _type = renderLanes2.ancestorInfo.current, null != _type && validateTextNesting(
                    newProps,
                    _type.tag,
                    renderLanes2.ancestorInfo.implicitRootScope
                  ), current2 = getOwnerDocumentFromRootContainer(current2).createTextNode(
                    newProps
                  ), current2[internalInstanceKey] = workInProgress2, workInProgress2.stateNode = current2;
              }
              bubbleProperties(workInProgress2);
              return null;
            case 13:
              newProps = workInProgress2.memoizedState;
              if (null === current2 || null !== current2.memoizedState && null !== current2.memoizedState.dehydrated) {
                _type = popHydrationState(workInProgress2);
                if (null !== newProps && null !== newProps.dehydrated) {
                  if (null === current2) {
                    if (!_type)
                      throw Error(
                        "A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React."
                      );
                    _type = workInProgress2.memoizedState;
                    _type = null !== _type ? _type.dehydrated : null;
                    if (!_type)
                      throw Error(
                        "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue."
                      );
                    _type[internalInstanceKey] = workInProgress2;
                    bubbleProperties(workInProgress2);
                    (workInProgress2.mode & ProfileMode) !== NoMode && null !== newProps && (_type = workInProgress2.child, null !== _type && (workInProgress2.treeBaseDuration -= _type.treeBaseDuration));
                  } else
                    emitPendingHydrationWarnings(), resetHydrationState(), 0 === (workInProgress2.flags & 128) && (workInProgress2.memoizedState = null), workInProgress2.flags |= 4, bubbleProperties(workInProgress2), (workInProgress2.mode & ProfileMode) !== NoMode && null !== newProps && (_type = workInProgress2.child, null !== _type && (workInProgress2.treeBaseDuration -= _type.treeBaseDuration));
                  _type = false;
                } else
                  _type = upgradeHydrationErrorsToRecoverable(), null !== current2 && null !== current2.memoizedState && (current2.memoizedState.hydrationErrors = _type), _type = true;
                if (!_type) {
                  if (workInProgress2.flags & 256)
                    return popSuspenseHandler(workInProgress2), workInProgress2;
                  popSuspenseHandler(workInProgress2);
                  return null;
                }
              }
              popSuspenseHandler(workInProgress2);
              if (0 !== (workInProgress2.flags & 128))
                return workInProgress2.lanes = renderLanes2, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2;
              renderLanes2 = null !== newProps;
              current2 = null !== current2 && null !== current2.memoizedState;
              renderLanes2 && (newProps = workInProgress2.child, _type = null, null !== newProps.alternate && null !== newProps.alternate.memoizedState && null !== newProps.alternate.memoizedState.cachePool && (_type = newProps.alternate.memoizedState.cachePool.pool), returnFiber = null, null !== newProps.memoizedState && null !== newProps.memoizedState.cachePool && (returnFiber = newProps.memoizedState.cachePool.pool), returnFiber !== _type && (newProps.flags |= 2048));
              renderLanes2 !== current2 && renderLanes2 && (workInProgress2.child.flags |= 8192);
              scheduleRetryEffect(workInProgress2, workInProgress2.updateQueue);
              bubbleProperties(workInProgress2);
              (workInProgress2.mode & ProfileMode) !== NoMode && renderLanes2 && (current2 = workInProgress2.child, null !== current2 && (workInProgress2.treeBaseDuration -= current2.treeBaseDuration));
              return null;
            case 4:
              return popHostContainer(workInProgress2), null === current2 && listenToAllSupportedEvents(
                workInProgress2.stateNode.containerInfo
              ), bubbleProperties(workInProgress2), null;
            case 10:
              return popProvider(workInProgress2.type, workInProgress2), bubbleProperties(workInProgress2), null;
            case 19:
              pop(suspenseStackCursor, workInProgress2);
              _type = workInProgress2.memoizedState;
              if (null === _type) return bubbleProperties(workInProgress2), null;
              newProps = 0 !== (workInProgress2.flags & 128);
              returnFiber = _type.rendering;
              if (null === returnFiber)
                if (newProps) cutOffTailIfNeeded(_type, false);
                else {
                  if (workInProgressRootExitStatus !== RootInProgress || null !== current2 && 0 !== (current2.flags & 128))
                    for (current2 = workInProgress2.child; null !== current2; ) {
                      returnFiber = findFirstSuspended(current2);
                      if (null !== returnFiber) {
                        workInProgress2.flags |= 128;
                        cutOffTailIfNeeded(_type, false);
                        current2 = returnFiber.updateQueue;
                        workInProgress2.updateQueue = current2;
                        scheduleRetryEffect(workInProgress2, current2);
                        workInProgress2.subtreeFlags = 0;
                        current2 = renderLanes2;
                        for (renderLanes2 = workInProgress2.child; null !== renderLanes2; )
                          resetWorkInProgress(renderLanes2, current2), renderLanes2 = renderLanes2.sibling;
                        push(
                          suspenseStackCursor,
                          suspenseStackCursor.current & SubtreeSuspenseContextMask | ForceSuspenseFallback,
                          workInProgress2
                        );
                        return workInProgress2.child;
                      }
                      current2 = current2.sibling;
                    }
                  null !== _type.tail && now$1() > workInProgressRootRenderTargetTime && (workInProgress2.flags |= 128, newProps = true, cutOffTailIfNeeded(_type, false), workInProgress2.lanes = 4194304);
                }
              else {
                if (!newProps)
                  if (current2 = findFirstSuspended(returnFiber), null !== current2) {
                    if (workInProgress2.flags |= 128, newProps = true, current2 = current2.updateQueue, workInProgress2.updateQueue = current2, scheduleRetryEffect(workInProgress2, current2), cutOffTailIfNeeded(_type, true), null === _type.tail && "hidden" === _type.tailMode && !returnFiber.alternate && !isHydrating)
                      return bubbleProperties(workInProgress2), null;
                  } else
                    2 * now$1() - _type.renderingStartTime > workInProgressRootRenderTargetTime && 536870912 !== renderLanes2 && (workInProgress2.flags |= 128, newProps = true, cutOffTailIfNeeded(_type, false), workInProgress2.lanes = 4194304);
                _type.isBackwards ? (returnFiber.sibling = workInProgress2.child, workInProgress2.child = returnFiber) : (current2 = _type.last, null !== current2 ? current2.sibling = returnFiber : workInProgress2.child = returnFiber, _type.last = returnFiber);
              }
              if (null !== _type.tail)
                return current2 = _type.tail, _type.rendering = current2, _type.tail = current2.sibling, _type.renderingStartTime = now$1(), current2.sibling = null, renderLanes2 = suspenseStackCursor.current, renderLanes2 = newProps ? renderLanes2 & SubtreeSuspenseContextMask | ForceSuspenseFallback : renderLanes2 & SubtreeSuspenseContextMask, push(suspenseStackCursor, renderLanes2, workInProgress2), current2;
              bubbleProperties(workInProgress2);
              return null;
            case 22:
            case 23:
              return popSuspenseHandler(workInProgress2), popHiddenContext(workInProgress2), newProps = null !== workInProgress2.memoizedState, null !== current2 ? null !== current2.memoizedState !== newProps && (workInProgress2.flags |= 8192) : newProps && (workInProgress2.flags |= 8192), newProps ? 0 !== (renderLanes2 & 536870912) && 0 === (workInProgress2.flags & 128) && (bubbleProperties(workInProgress2), workInProgress2.subtreeFlags & 6 && (workInProgress2.flags |= 8192)) : bubbleProperties(workInProgress2), renderLanes2 = workInProgress2.updateQueue, null !== renderLanes2 && scheduleRetryEffect(workInProgress2, renderLanes2.retryQueue), renderLanes2 = null, null !== current2 && null !== current2.memoizedState && null !== current2.memoizedState.cachePool && (renderLanes2 = current2.memoizedState.cachePool.pool), newProps = null, null !== workInProgress2.memoizedState && null !== workInProgress2.memoizedState.cachePool && (newProps = workInProgress2.memoizedState.cachePool.pool), newProps !== renderLanes2 && (workInProgress2.flags |= 2048), null !== current2 && pop(resumedCache, workInProgress2), null;
            case 24:
              return renderLanes2 = null, null !== current2 && (renderLanes2 = current2.memoizedState.cache), workInProgress2.memoizedState.cache !== renderLanes2 && (workInProgress2.flags |= 2048), popProvider(CacheContext, workInProgress2), bubbleProperties(workInProgress2), null;
            case 25:
              return null;
            case 30:
              return null;
          }
          throw Error(
            "Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue."
          );
        }
        function unwindWork(current2, workInProgress2) {
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case 1:
              return current2 = workInProgress2.flags, current2 & 65536 ? (workInProgress2.flags = current2 & -65537 | 128, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2) : null;
            case 3:
              return popProvider(CacheContext, workInProgress2), popHostContainer(workInProgress2), current2 = workInProgress2.flags, 0 !== (current2 & 65536) && 0 === (current2 & 128) ? (workInProgress2.flags = current2 & -65537 | 128, workInProgress2) : null;
            case 26:
            case 27:
            case 5:
              return popHostContext(workInProgress2), null;
            case 13:
              popSuspenseHandler(workInProgress2);
              current2 = workInProgress2.memoizedState;
              if (null !== current2 && null !== current2.dehydrated) {
                if (null === workInProgress2.alternate)
                  throw Error(
                    "Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue."
                  );
                resetHydrationState();
              }
              current2 = workInProgress2.flags;
              return current2 & 65536 ? (workInProgress2.flags = current2 & -65537 | 128, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2) : null;
            case 19:
              return pop(suspenseStackCursor, workInProgress2), null;
            case 4:
              return popHostContainer(workInProgress2), null;
            case 10:
              return popProvider(workInProgress2.type, workInProgress2), null;
            case 22:
            case 23:
              return popSuspenseHandler(workInProgress2), popHiddenContext(workInProgress2), null !== current2 && pop(resumedCache, workInProgress2), current2 = workInProgress2.flags, current2 & 65536 ? (workInProgress2.flags = current2 & -65537 | 128, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2) : null;
            case 24:
              return popProvider(CacheContext, workInProgress2), null;
            case 25:
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(current2, interruptedWork) {
          popTreeContext(interruptedWork);
          switch (interruptedWork.tag) {
            case 3:
              popProvider(CacheContext, interruptedWork);
              popHostContainer(interruptedWork);
              break;
            case 26:
            case 27:
            case 5:
              popHostContext(interruptedWork);
              break;
            case 4:
              popHostContainer(interruptedWork);
              break;
            case 13:
              popSuspenseHandler(interruptedWork);
              break;
            case 19:
              pop(suspenseStackCursor, interruptedWork);
              break;
            case 10:
              popProvider(interruptedWork.type, interruptedWork);
              break;
            case 22:
            case 23:
              popSuspenseHandler(interruptedWork);
              popHiddenContext(interruptedWork);
              null !== current2 && pop(resumedCache, interruptedWork);
              break;
            case 24:
              popProvider(CacheContext, interruptedWork);
          }
        }
        function shouldProfile(current2) {
          return (current2.mode & ProfileMode) !== NoMode;
        }
        function commitHookLayoutEffects(finishedWork, hookFlags) {
          shouldProfile(finishedWork) ? (startEffectTimer(), commitHookEffectListMount(hookFlags, finishedWork), recordEffectDuration()) : commitHookEffectListMount(hookFlags, finishedWork);
        }
        function commitHookLayoutUnmountEffects(finishedWork, nearestMountedAncestor, hookFlags) {
          shouldProfile(finishedWork) ? (startEffectTimer(), commitHookEffectListUnmount(
            hookFlags,
            finishedWork,
            nearestMountedAncestor
          ), recordEffectDuration()) : commitHookEffectListUnmount(
            hookFlags,
            finishedWork,
            nearestMountedAncestor
          );
        }
        function commitHookEffectListMount(flags, finishedWork) {
          try {
            var updateQueue = finishedWork.updateQueue, lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
            if (null !== lastEffect) {
              var firstEffect = lastEffect.next;
              updateQueue = firstEffect;
              do {
                if ((updateQueue.tag & flags) === flags && ((flags & Passive) !== NoFlags ? null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted && injectedProfilingHooks.markComponentPassiveEffectMountStarted(
                  finishedWork
                ) : (flags & Layout) !== NoFlags && null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted && injectedProfilingHooks.markComponentLayoutEffectMountStarted(
                  finishedWork
                ), lastEffect = void 0, (flags & Insertion) !== NoFlags && (isRunningInsertionEffect = true), lastEffect = runWithFiberInDEV(
                  finishedWork,
                  callCreateInDEV,
                  updateQueue
                ), (flags & Insertion) !== NoFlags && (isRunningInsertionEffect = false), (flags & Passive) !== NoFlags ? null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped && injectedProfilingHooks.markComponentPassiveEffectMountStopped() : (flags & Layout) !== NoFlags && null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped && injectedProfilingHooks.markComponentLayoutEffectMountStopped(), void 0 !== lastEffect && "function" !== typeof lastEffect)) {
                  var hookName = void 0;
                  hookName = 0 !== (updateQueue.tag & Layout) ? "useLayoutEffect" : 0 !== (updateQueue.tag & Insertion) ? "useInsertionEffect" : "useEffect";
                  var addendum = void 0;
                  addendum = null === lastEffect ? " You returned null. If your effect does not require clean up, return undefined (or nothing)." : "function" === typeof lastEffect.then ? "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://react.dev/link/hooks-data-fetching" : " You returned: " + lastEffect;
                  runWithFiberInDEV(
                    finishedWork,
                    function(n, a) {
                      console.error(
                        "%s must not return anything besides a function, which is used for clean-up.%s",
                        n,
                        a
                      );
                    },
                    hookName,
                    addendum
                  );
                }
                updateQueue = updateQueue.next;
              } while (updateQueue !== firstEffect);
            }
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
        function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
          try {
            var updateQueue = finishedWork.updateQueue, lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
            if (null !== lastEffect) {
              var firstEffect = lastEffect.next;
              updateQueue = firstEffect;
              do {
                if ((updateQueue.tag & flags) === flags) {
                  var inst = updateQueue.inst, destroy = inst.destroy;
                  void 0 !== destroy && (inst.destroy = void 0, (flags & Passive) !== NoFlags ? null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted && injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(
                    finishedWork
                  ) : (flags & Layout) !== NoFlags && null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted && injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(
                    finishedWork
                  ), (flags & Insertion) !== NoFlags && (isRunningInsertionEffect = true), lastEffect = finishedWork, runWithFiberInDEV(
                    lastEffect,
                    callDestroyInDEV,
                    lastEffect,
                    nearestMountedAncestor,
                    destroy
                  ), (flags & Insertion) !== NoFlags && (isRunningInsertionEffect = false), (flags & Passive) !== NoFlags ? null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped && injectedProfilingHooks.markComponentPassiveEffectUnmountStopped() : (flags & Layout) !== NoFlags && null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped && injectedProfilingHooks.markComponentLayoutEffectUnmountStopped());
                }
                updateQueue = updateQueue.next;
              } while (updateQueue !== firstEffect);
            }
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
        function commitHookPassiveMountEffects(finishedWork, hookFlags) {
          shouldProfile(finishedWork) ? (startEffectTimer(), commitHookEffectListMount(hookFlags, finishedWork), recordEffectDuration()) : commitHookEffectListMount(hookFlags, finishedWork);
        }
        function commitHookPassiveUnmountEffects(finishedWork, nearestMountedAncestor, hookFlags) {
          shouldProfile(finishedWork) ? (startEffectTimer(), commitHookEffectListUnmount(
            hookFlags,
            finishedWork,
            nearestMountedAncestor
          ), recordEffectDuration()) : commitHookEffectListUnmount(
            hookFlags,
            finishedWork,
            nearestMountedAncestor
          );
        }
        function commitClassCallbacks(finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          if (null !== updateQueue) {
            var instance = finishedWork.stateNode;
            finishedWork.type.defaultProps || "ref" in finishedWork.memoizedProps || didWarnAboutReassigningProps || (instance.props !== finishedWork.memoizedProps && console.error(
              "Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
              getComponentNameFromFiber(finishedWork) || "instance"
            ), instance.state !== finishedWork.memoizedState && console.error(
              "Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
              getComponentNameFromFiber(finishedWork) || "instance"
            ));
            try {
              runWithFiberInDEV(
                finishedWork,
                commitCallbacks,
                updateQueue,
                instance
              );
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
        }
        function callGetSnapshotBeforeUpdates(instance, prevProps, prevState) {
          return instance.getSnapshotBeforeUpdate(prevProps, prevState);
        }
        function commitClassSnapshot(finishedWork, current2) {
          var prevProps = current2.memoizedProps, prevState = current2.memoizedState;
          current2 = finishedWork.stateNode;
          finishedWork.type.defaultProps || "ref" in finishedWork.memoizedProps || didWarnAboutReassigningProps || (current2.props !== finishedWork.memoizedProps && console.error(
            "Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
            getComponentNameFromFiber(finishedWork) || "instance"
          ), current2.state !== finishedWork.memoizedState && console.error(
            "Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
            getComponentNameFromFiber(finishedWork) || "instance"
          ));
          try {
            var resolvedPrevProps = resolveClassComponentProps(
              finishedWork.type,
              prevProps,
              finishedWork.elementType === finishedWork.type
            );
            var snapshot = runWithFiberInDEV(
              finishedWork,
              callGetSnapshotBeforeUpdates,
              current2,
              resolvedPrevProps,
              prevState
            );
            prevProps = didWarnAboutUndefinedSnapshotBeforeUpdate;
            void 0 !== snapshot || prevProps.has(finishedWork.type) || (prevProps.add(finishedWork.type), runWithFiberInDEV(finishedWork, function() {
              console.error(
                "%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.",
                getComponentNameFromFiber(finishedWork)
              );
            }));
            current2.__reactInternalSnapshotBeforeUpdate = snapshot;
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
        function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
          instance.props = resolveClassComponentProps(
            current2.type,
            current2.memoizedProps
          );
          instance.state = current2.memoizedState;
          shouldProfile(current2) ? (startEffectTimer(), runWithFiberInDEV(
            current2,
            callComponentWillUnmountInDEV,
            current2,
            nearestMountedAncestor,
            instance
          ), recordEffectDuration()) : runWithFiberInDEV(
            current2,
            callComponentWillUnmountInDEV,
            current2,
            nearestMountedAncestor,
            instance
          );
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (null !== ref) {
            switch (finishedWork.tag) {
              case 26:
              case 27:
              case 5:
                var instanceToUse = finishedWork.stateNode;
                break;
              case 30:
                instanceToUse = finishedWork.stateNode;
                break;
              default:
                instanceToUse = finishedWork.stateNode;
            }
            if ("function" === typeof ref)
              if (shouldProfile(finishedWork))
                try {
                  startEffectTimer(), finishedWork.refCleanup = ref(instanceToUse);
                } finally {
                  recordEffectDuration();
                }
              else finishedWork.refCleanup = ref(instanceToUse);
            else
              "string" === typeof ref ? console.error("String refs are no longer supported.") : ref.hasOwnProperty("current") || console.error(
                "Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().",
                getComponentNameFromFiber(finishedWork)
              ), ref.current = instanceToUse;
          }
        }
        function safelyAttachRef(current2, nearestMountedAncestor) {
          try {
            runWithFiberInDEV(current2, commitAttachRef, current2);
          } catch (error) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error);
          }
        }
        function safelyDetachRef(current2, nearestMountedAncestor) {
          var ref = current2.ref, refCleanup = current2.refCleanup;
          if (null !== ref)
            if ("function" === typeof refCleanup)
              try {
                if (shouldProfile(current2))
                  try {
                    startEffectTimer(), runWithFiberInDEV(current2, refCleanup);
                  } finally {
                    recordEffectDuration(current2);
                  }
                else runWithFiberInDEV(current2, refCleanup);
              } catch (error) {
                captureCommitPhaseError(current2, nearestMountedAncestor, error);
              } finally {
                current2.refCleanup = null, current2 = current2.alternate, null != current2 && (current2.refCleanup = null);
              }
            else if ("function" === typeof ref)
              try {
                if (shouldProfile(current2))
                  try {
                    startEffectTimer(), runWithFiberInDEV(current2, ref, null);
                  } finally {
                    recordEffectDuration(current2);
                  }
                else runWithFiberInDEV(current2, ref, null);
              } catch (error$7) {
                captureCommitPhaseError(current2, nearestMountedAncestor, error$7);
              }
            else ref.current = null;
        }
        function commitProfiler(finishedWork, current2, commitStartTime2, effectDuration) {
          var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onCommit = _finishedWork$memoize.onCommit;
          _finishedWork$memoize = _finishedWork$memoize.onRender;
          current2 = null === current2 ? "mount" : "update";
          currentUpdateIsNested && (current2 = "nested-update");
          "function" === typeof _finishedWork$memoize && _finishedWork$memoize(
            id,
            current2,
            finishedWork.actualDuration,
            finishedWork.treeBaseDuration,
            finishedWork.actualStartTime,
            commitStartTime2
          );
          "function" === typeof onCommit && onCommit(
            finishedWork.memoizedProps.id,
            current2,
            effectDuration,
            commitStartTime2
          );
        }
        function commitProfilerPostCommitImpl(finishedWork, current2, commitStartTime2, passiveEffectDuration) {
          var _finishedWork$memoize2 = finishedWork.memoizedProps;
          finishedWork = _finishedWork$memoize2.id;
          _finishedWork$memoize2 = _finishedWork$memoize2.onPostCommit;
          current2 = null === current2 ? "mount" : "update";
          currentUpdateIsNested && (current2 = "nested-update");
          "function" === typeof _finishedWork$memoize2 && _finishedWork$memoize2(
            finishedWork,
            current2,
            passiveEffectDuration,
            commitStartTime2
          );
        }
        function commitHostMount(finishedWork) {
          var type = finishedWork.type, props = finishedWork.memoizedProps, instance = finishedWork.stateNode;
          try {
            runWithFiberInDEV(
              finishedWork,
              commitMount,
              instance,
              type,
              props,
              finishedWork
            );
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
        function commitHostUpdate(finishedWork, newProps, oldProps) {
          try {
            runWithFiberInDEV(
              finishedWork,
              commitUpdate,
              finishedWork.stateNode,
              finishedWork.type,
              oldProps,
              newProps,
              finishedWork
            );
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
        function isHostParent(fiber) {
          return 5 === fiber.tag || 3 === fiber.tag || 26 === fiber.tag || 27 === fiber.tag && isSingletonScope(fiber.type) || 4 === fiber.tag;
        }
        function getHostSibling(fiber) {
          a: for (; ; ) {
            for (; null === fiber.sibling; ) {
              if (null === fiber.return || isHostParent(fiber.return)) return null;
              fiber = fiber.return;
            }
            fiber.sibling.return = fiber.return;
            for (fiber = fiber.sibling; 5 !== fiber.tag && 6 !== fiber.tag && 18 !== fiber.tag; ) {
              if (27 === fiber.tag && isSingletonScope(fiber.type)) continue a;
              if (fiber.flags & 2) continue a;
              if (null === fiber.child || 4 === fiber.tag) continue a;
              else fiber.child.return = fiber, fiber = fiber.child;
            }
            if (!(fiber.flags & 2)) return fiber.stateNode;
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
          var tag2 = node.tag;
          if (5 === tag2 || 6 === tag2)
            node = node.stateNode, before ? (9 === parent.nodeType ? parent.body : "HTML" === parent.nodeName ? parent.ownerDocument.body : parent).insertBefore(node, before) : (before = 9 === parent.nodeType ? parent.body : "HTML" === parent.nodeName ? parent.ownerDocument.body : parent, before.appendChild(node), parent = parent._reactRootContainer, null !== parent && void 0 !== parent || null !== before.onclick || (before.onclick = noop$1));
          else if (4 !== tag2 && (27 === tag2 && isSingletonScope(node.type) && (parent = node.stateNode, before = null), node = node.child, null !== node))
            for (insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling; null !== node; )
              insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling;
        }
        function insertOrAppendPlacementNode(node, before, parent) {
          var tag2 = node.tag;
          if (5 === tag2 || 6 === tag2)
            node = node.stateNode, before ? parent.insertBefore(node, before) : parent.appendChild(node);
          else if (4 !== tag2 && (27 === tag2 && isSingletonScope(node.type) && (parent = node.stateNode), node = node.child, null !== node))
            for (insertOrAppendPlacementNode(node, before, parent), node = node.sibling; null !== node; )
              insertOrAppendPlacementNode(node, before, parent), node = node.sibling;
        }
        function commitPlacement(finishedWork) {
          for (var hostParentFiber, parentFiber = finishedWork.return; null !== parentFiber; ) {
            if (isHostParent(parentFiber)) {
              hostParentFiber = parentFiber;
              break;
            }
            parentFiber = parentFiber.return;
          }
          if (null == hostParentFiber)
            throw Error(
              "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."
            );
          switch (hostParentFiber.tag) {
            case 27:
              hostParentFiber = hostParentFiber.stateNode;
              parentFiber = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(
                finishedWork,
                parentFiber,
                hostParentFiber
              );
              break;
            case 5:
              parentFiber = hostParentFiber.stateNode;
              hostParentFiber.flags & 32 && (resetTextContent(parentFiber), hostParentFiber.flags &= -33);
              hostParentFiber = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(
                finishedWork,
                hostParentFiber,
                parentFiber
              );
              break;
            case 3:
            case 4:
              hostParentFiber = hostParentFiber.stateNode.containerInfo;
              parentFiber = getHostSibling(finishedWork);
              insertOrAppendPlacementNodeIntoContainer(
                finishedWork,
                parentFiber,
                hostParentFiber
              );
              break;
            default:
              throw Error(
                "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue."
              );
          }
        }
        function commitHostSingletonAcquisition(finishedWork) {
          var singleton = finishedWork.stateNode, props = finishedWork.memoizedProps;
          try {
            runWithFiberInDEV(
              finishedWork,
              acquireSingletonInstance,
              finishedWork.type,
              props,
              singleton,
              finishedWork
            );
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
        function commitBeforeMutationEffects(root3, firstChild) {
          root3 = root3.containerInfo;
          eventsEnabled = _enabled;
          root3 = getActiveElementDeep(root3);
          if (hasSelectionCapabilities(root3)) {
            if ("selectionStart" in root3)
              var JSCompiler_temp = {
                start: root3.selectionStart,
                end: root3.selectionEnd
              };
            else
              a: {
                JSCompiler_temp = (JSCompiler_temp = root3.ownerDocument) && JSCompiler_temp.defaultView || window;
                var selection = JSCompiler_temp.getSelection && JSCompiler_temp.getSelection();
                if (selection && 0 !== selection.rangeCount) {
                  JSCompiler_temp = selection.anchorNode;
                  var anchorOffset = selection.anchorOffset, focusNode = selection.focusNode;
                  selection = selection.focusOffset;
                  try {
                    JSCompiler_temp.nodeType, focusNode.nodeType;
                  } catch (e$2) {
                    JSCompiler_temp = null;
                    break a;
                  }
                  var length2 = 0, start = -1, end = -1, indexWithinAnchor = 0, indexWithinFocus = 0, node = root3, parentNode = null;
                  b: for (; ; ) {
                    for (var next; ; ) {
                      node !== JSCompiler_temp || 0 !== anchorOffset && 3 !== node.nodeType || (start = length2 + anchorOffset);
                      node !== focusNode || 0 !== selection && 3 !== node.nodeType || (end = length2 + selection);
                      3 === node.nodeType && (length2 += node.nodeValue.length);
                      if (null === (next = node.firstChild)) break;
                      parentNode = node;
                      node = next;
                    }
                    for (; ; ) {
                      if (node === root3) break b;
                      parentNode === JSCompiler_temp && ++indexWithinAnchor === anchorOffset && (start = length2);
                      parentNode === focusNode && ++indexWithinFocus === selection && (end = length2);
                      if (null !== (next = node.nextSibling)) break;
                      node = parentNode;
                      parentNode = node.parentNode;
                    }
                    node = next;
                  }
                  JSCompiler_temp = -1 === start || -1 === end ? null : { start, end };
                } else JSCompiler_temp = null;
              }
            JSCompiler_temp = JSCompiler_temp || { start: 0, end: 0 };
          } else JSCompiler_temp = null;
          selectionInformation = {
            focusedElem: root3,
            selectionRange: JSCompiler_temp
          };
          _enabled = false;
          for (nextEffect = firstChild; null !== nextEffect; )
            if (firstChild = nextEffect, root3 = firstChild.child, 0 !== (firstChild.subtreeFlags & 1024) && null !== root3)
              root3.return = firstChild, nextEffect = root3;
            else
              for (; null !== nextEffect; ) {
                root3 = firstChild = nextEffect;
                JSCompiler_temp = root3.alternate;
                anchorOffset = root3.flags;
                switch (root3.tag) {
                  case 0:
                    break;
                  case 11:
                  case 15:
                    break;
                  case 1:
                    0 !== (anchorOffset & 1024) && null !== JSCompiler_temp && commitClassSnapshot(root3, JSCompiler_temp);
                    break;
                  case 3:
                    if (0 !== (anchorOffset & 1024)) {
                      if (root3 = root3.stateNode.containerInfo, JSCompiler_temp = root3.nodeType, 9 === JSCompiler_temp)
                        clearContainerSparingly(root3);
                      else if (1 === JSCompiler_temp)
                        switch (root3.nodeName) {
                          case "HEAD":
                          case "HTML":
                          case "BODY":
                            clearContainerSparingly(root3);
                            break;
                          default:
                            root3.textContent = "";
                        }
                    }
                    break;
                  case 5:
                  case 26:
                  case 27:
                  case 6:
                  case 4:
                  case 17:
                    break;
                  default:
                    if (0 !== (anchorOffset & 1024))
                      throw Error(
                        "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."
                      );
                }
                root3 = firstChild.sibling;
                if (null !== root3) {
                  root3.return = firstChild.return;
                  nextEffect = root3;
                  break;
                }
                nextEffect = firstChild.return;
              }
        }
        function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork) {
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 15:
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              flags & 4 && commitHookLayoutEffects(finishedWork, Layout | HasEffect);
              break;
            case 1:
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              if (flags & 4)
                if (finishedRoot = finishedWork.stateNode, null === current2)
                  finishedWork.type.defaultProps || "ref" in finishedWork.memoizedProps || didWarnAboutReassigningProps || (finishedRoot.props !== finishedWork.memoizedProps && console.error(
                    "Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
                    getComponentNameFromFiber(finishedWork) || "instance"
                  ), finishedRoot.state !== finishedWork.memoizedState && console.error(
                    "Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
                    getComponentNameFromFiber(finishedWork) || "instance"
                  )), shouldProfile(finishedWork) ? (startEffectTimer(), runWithFiberInDEV(
                    finishedWork,
                    callComponentDidMountInDEV,
                    finishedWork,
                    finishedRoot
                  ), recordEffectDuration()) : runWithFiberInDEV(
                    finishedWork,
                    callComponentDidMountInDEV,
                    finishedWork,
                    finishedRoot
                  );
                else {
                  var prevProps = resolveClassComponentProps(
                    finishedWork.type,
                    current2.memoizedProps
                  );
                  current2 = current2.memoizedState;
                  finishedWork.type.defaultProps || "ref" in finishedWork.memoizedProps || didWarnAboutReassigningProps || (finishedRoot.props !== finishedWork.memoizedProps && console.error(
                    "Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
                    getComponentNameFromFiber(finishedWork) || "instance"
                  ), finishedRoot.state !== finishedWork.memoizedState && console.error(
                    "Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
                    getComponentNameFromFiber(finishedWork) || "instance"
                  ));
                  shouldProfile(finishedWork) ? (startEffectTimer(), runWithFiberInDEV(
                    finishedWork,
                    callComponentDidUpdateInDEV,
                    finishedWork,
                    finishedRoot,
                    prevProps,
                    current2,
                    finishedRoot.__reactInternalSnapshotBeforeUpdate
                  ), recordEffectDuration()) : runWithFiberInDEV(
                    finishedWork,
                    callComponentDidUpdateInDEV,
                    finishedWork,
                    finishedRoot,
                    prevProps,
                    current2,
                    finishedRoot.__reactInternalSnapshotBeforeUpdate
                  );
                }
              flags & 64 && commitClassCallbacks(finishedWork);
              flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
              break;
            case 3:
              current2 = pushNestedEffectDurations();
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              if (flags & 64 && (flags = finishedWork.updateQueue, null !== flags)) {
                prevProps = null;
                if (null !== finishedWork.child)
                  switch (finishedWork.child.tag) {
                    case 27:
                    case 5:
                      prevProps = finishedWork.child.stateNode;
                      break;
                    case 1:
                      prevProps = finishedWork.child.stateNode;
                  }
                try {
                  runWithFiberInDEV(
                    finishedWork,
                    commitCallbacks,
                    flags,
                    prevProps
                  );
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              }
              finishedRoot.effectDuration += popNestedEffectDurations(current2);
              break;
            case 27:
              null === current2 && flags & 4 && commitHostSingletonAcquisition(finishedWork);
            case 26:
            case 5:
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              null === current2 && flags & 4 && commitHostMount(finishedWork);
              flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
              break;
            case 12:
              if (flags & 4) {
                flags = pushNestedEffectDurations();
                recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
                finishedRoot = finishedWork.stateNode;
                finishedRoot.effectDuration += bubbleNestedEffectDurations(flags);
                try {
                  runWithFiberInDEV(
                    finishedWork,
                    commitProfiler,
                    finishedWork,
                    current2,
                    commitStartTime,
                    finishedRoot.effectDuration
                  );
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              } else recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              break;
            case 13:
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              flags & 64 && (finishedRoot = finishedWork.memoizedState, null !== finishedRoot && (finishedRoot = finishedRoot.dehydrated, null !== finishedRoot && (finishedWork = retryDehydratedSuspenseBoundary.bind(
                null,
                finishedWork
              ), registerSuspenseInstanceRetry(finishedRoot, finishedWork))));
              break;
            case 22:
              flags = null !== finishedWork.memoizedState || offscreenSubtreeIsHidden;
              if (!flags) {
                current2 = null !== current2 && null !== current2.memoizedState || offscreenSubtreeWasHidden;
                prevProps = offscreenSubtreeIsHidden;
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = flags;
                (offscreenSubtreeWasHidden = current2) && !prevOffscreenSubtreeWasHidden ? recursivelyTraverseReappearLayoutEffects(
                  finishedRoot,
                  finishedWork,
                  0 !== (finishedWork.subtreeFlags & 8772)
                ) : recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
                offscreenSubtreeIsHidden = prevProps;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              }
              break;
            case 30:
              break;
            default:
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
          }
        }
        function detachFiberAfterEffects(fiber) {
          var alternate = fiber.alternate;
          null !== alternate && (fiber.alternate = null, detachFiberAfterEffects(alternate));
          fiber.child = null;
          fiber.deletions = null;
          fiber.sibling = null;
          5 === fiber.tag && (alternate = fiber.stateNode, null !== alternate && detachDeletedInstance(alternate));
          fiber.stateNode = null;
          fiber._debugOwner = null;
          fiber.return = null;
          fiber.dependencies = null;
          fiber.memoizedProps = null;
          fiber.memoizedState = null;
          fiber.pendingProps = null;
          fiber.stateNode = null;
          fiber.updateQueue = null;
        }
        function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
          for (parent = parent.child; null !== parent; )
            commitDeletionEffectsOnFiber(
              finishedRoot,
              nearestMountedAncestor,
              parent
            ), parent = parent.sibling;
        }
        function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
          if (injectedHook && "function" === typeof injectedHook.onCommitFiberUnmount)
            try {
              injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
            } catch (err) {
              hasLoggedError || (hasLoggedError = true, console.error(
                "React instrumentation encountered an error: %s",
                err
              ));
            }
          switch (deletedFiber.tag) {
            case 26:
              offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
              deletedFiber.memoizedState ? deletedFiber.memoizedState.count-- : deletedFiber.stateNode && (deletedFiber = deletedFiber.stateNode, deletedFiber.parentNode.removeChild(deletedFiber));
              break;
            case 27:
              offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
              var prevHostParent = hostParent, prevHostParentIsContainer = hostParentIsContainer;
              isSingletonScope(deletedFiber.type) && (hostParent = deletedFiber.stateNode, hostParentIsContainer = false);
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
              runWithFiberInDEV(
                deletedFiber,
                releaseSingletonInstance,
                deletedFiber.stateNode
              );
              hostParent = prevHostParent;
              hostParentIsContainer = prevHostParentIsContainer;
              break;
            case 5:
              offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
            case 6:
              prevHostParent = hostParent;
              prevHostParentIsContainer = hostParentIsContainer;
              hostParent = null;
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
              hostParent = prevHostParent;
              hostParentIsContainer = prevHostParentIsContainer;
              if (null !== hostParent)
                if (hostParentIsContainer)
                  try {
                    runWithFiberInDEV(
                      deletedFiber,
                      removeChildFromContainer,
                      hostParent,
                      deletedFiber.stateNode
                    );
                  } catch (error) {
                    captureCommitPhaseError(
                      deletedFiber,
                      nearestMountedAncestor,
                      error
                    );
                  }
                else
                  try {
                    runWithFiberInDEV(
                      deletedFiber,
                      removeChild,
                      hostParent,
                      deletedFiber.stateNode
                    );
                  } catch (error) {
                    captureCommitPhaseError(
                      deletedFiber,
                      nearestMountedAncestor,
                      error
                    );
                  }
              break;
            case 18:
              null !== hostParent && (hostParentIsContainer ? (finishedRoot = hostParent, clearSuspenseBoundary(
                9 === finishedRoot.nodeType ? finishedRoot.body : "HTML" === finishedRoot.nodeName ? finishedRoot.ownerDocument.body : finishedRoot,
                deletedFiber.stateNode
              ), retryIfBlockedOn(finishedRoot)) : clearSuspenseBoundary(hostParent, deletedFiber.stateNode));
              break;
            case 4:
              prevHostParent = hostParent;
              prevHostParentIsContainer = hostParentIsContainer;
              hostParent = deletedFiber.stateNode.containerInfo;
              hostParentIsContainer = true;
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
              hostParent = prevHostParent;
              hostParentIsContainer = prevHostParentIsContainer;
              break;
            case 0:
            case 11:
            case 14:
            case 15:
              offscreenSubtreeWasHidden || commitHookEffectListUnmount(
                Insertion,
                deletedFiber,
                nearestMountedAncestor
              );
              offscreenSubtreeWasHidden || commitHookLayoutUnmountEffects(
                deletedFiber,
                nearestMountedAncestor,
                Layout
              );
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
              break;
            case 1:
              offscreenSubtreeWasHidden || (safelyDetachRef(deletedFiber, nearestMountedAncestor), prevHostParent = deletedFiber.stateNode, "function" === typeof prevHostParent.componentWillUnmount && safelyCallComponentWillUnmount(
                deletedFiber,
                nearestMountedAncestor,
                prevHostParent
              ));
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
              break;
            case 21:
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
              break;
            case 22:
              offscreenSubtreeWasHidden = (prevHostParent = offscreenSubtreeWasHidden) || null !== deletedFiber.memoizedState;
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
              offscreenSubtreeWasHidden = prevHostParent;
              break;
            default:
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
          }
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          if (null === finishedWork.memoizedState && (finishedRoot = finishedWork.alternate, null !== finishedRoot && (finishedRoot = finishedRoot.memoizedState, null !== finishedRoot && (finishedRoot = finishedRoot.dehydrated, null !== finishedRoot))))
            try {
              runWithFiberInDEV(
                finishedWork,
                commitHydratedSuspenseInstance,
                finishedRoot
              );
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
        }
        function getRetryCache(finishedWork) {
          switch (finishedWork.tag) {
            case 13:
            case 19:
              var retryCache = finishedWork.stateNode;
              null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
              return retryCache;
            case 22:
              return finishedWork = finishedWork.stateNode, retryCache = finishedWork._retryCache, null === retryCache && (retryCache = finishedWork._retryCache = new PossiblyWeakSet()), retryCache;
            default:
              throw Error(
                "Unexpected Suspense handler tag (" + finishedWork.tag + "). This is a bug in React."
              );
          }
        }
        function attachSuspenseRetryListeners(finishedWork, wakeables) {
          var retryCache = getRetryCache(finishedWork);
          wakeables.forEach(function(wakeable) {
            var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
            if (!retryCache.has(wakeable)) {
              retryCache.add(wakeable);
              if (isDevToolsPresent)
                if (null !== inProgressLanes && null !== inProgressRoot)
                  restorePendingUpdaters(inProgressRoot, inProgressLanes);
                else
                  throw Error(
                    "Expected finished root and lanes to be set. This is a bug in React."
                  );
              wakeable.then(retry, retry);
            }
          });
        }
        function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber) {
          var deletions = parentFiber.deletions;
          if (null !== deletions)
            for (var i = 0; i < deletions.length; i++) {
              var root3 = root$jscomp$0, returnFiber = parentFiber, deletedFiber = deletions[i], parent = returnFiber;
              a: for (; null !== parent; ) {
                switch (parent.tag) {
                  case 27:
                    if (isSingletonScope(parent.type)) {
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break a;
                    }
                    break;
                  case 5:
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break a;
                  case 3:
                  case 4:
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break a;
                }
                parent = parent.return;
              }
              if (null === hostParent)
                throw Error(
                  "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."
                );
              commitDeletionEffectsOnFiber(root3, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
              root3 = deletedFiber;
              returnFiber = root3.alternate;
              null !== returnFiber && (returnFiber.return = null);
              root3.return = null;
            }
          if (parentFiber.subtreeFlags & 13878)
            for (parentFiber = parentFiber.child; null !== parentFiber; )
              commitMutationEffectsOnFiber(parentFiber, root$jscomp$0), parentFiber = parentFiber.sibling;
        }
        function commitMutationEffectsOnFiber(finishedWork, root3) {
          var current2 = finishedWork.alternate, flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 14:
            case 15:
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              flags & 4 && (commitHookEffectListUnmount(
                Insertion | HasEffect,
                finishedWork,
                finishedWork.return
              ), commitHookEffectListMount(Insertion | HasEffect, finishedWork), commitHookLayoutUnmountEffects(
                finishedWork,
                finishedWork.return,
                Layout | HasEffect
              ));
              break;
            case 1:
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              flags & 512 && (offscreenSubtreeWasHidden || null === current2 || safelyDetachRef(current2, current2.return));
              flags & 64 && offscreenSubtreeIsHidden && (finishedWork = finishedWork.updateQueue, null !== finishedWork && (flags = finishedWork.callbacks, null !== flags && (current2 = finishedWork.shared.hiddenCallbacks, finishedWork.shared.hiddenCallbacks = null === current2 ? flags : current2.concat(flags))));
              break;
            case 26:
              var hoistableRoot = currentHoistableRoot;
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              flags & 512 && (offscreenSubtreeWasHidden || null === current2 || safelyDetachRef(current2, current2.return));
              if (flags & 4)
                if (root3 = null !== current2 ? current2.memoizedState : null, flags = finishedWork.memoizedState, null === current2)
                  if (null === flags)
                    if (null === finishedWork.stateNode) {
                      a: {
                        flags = finishedWork.type;
                        current2 = finishedWork.memoizedProps;
                        root3 = hoistableRoot.ownerDocument || hoistableRoot;
                        b: switch (flags) {
                          case "title":
                            hoistableRoot = root3.getElementsByTagName("title")[0];
                            if (!hoistableRoot || hoistableRoot[internalHoistableMarker] || hoistableRoot[internalInstanceKey] || hoistableRoot.namespaceURI === SVG_NAMESPACE || hoistableRoot.hasAttribute("itemprop"))
                              hoistableRoot = root3.createElement(flags), root3.head.insertBefore(
                                hoistableRoot,
                                root3.querySelector("head > title")
                              );
                            setInitialProperties(hoistableRoot, flags, current2);
                            hoistableRoot[internalInstanceKey] = finishedWork;
                            markNodeAsHoistable(hoistableRoot);
                            flags = hoistableRoot;
                            break a;
                          case "link":
                            var maybeNodes = getHydratableHoistableCache(
                              "link",
                              "href",
                              root3
                            ).get(flags + (current2.href || ""));
                            if (maybeNodes) {
                              for (var i = 0; i < maybeNodes.length; i++)
                                if (hoistableRoot = maybeNodes[i], hoistableRoot.getAttribute("href") === (null == current2.href || "" === current2.href ? null : current2.href) && hoistableRoot.getAttribute("rel") === (null == current2.rel ? null : current2.rel) && hoistableRoot.getAttribute("title") === (null == current2.title ? null : current2.title) && hoistableRoot.getAttribute("crossorigin") === (null == current2.crossOrigin ? null : current2.crossOrigin)) {
                                  maybeNodes.splice(i, 1);
                                  break b;
                                }
                            }
                            hoistableRoot = root3.createElement(flags);
                            setInitialProperties(hoistableRoot, flags, current2);
                            root3.head.appendChild(hoistableRoot);
                            break;
                          case "meta":
                            if (maybeNodes = getHydratableHoistableCache(
                              "meta",
                              "content",
                              root3
                            ).get(flags + (current2.content || ""))) {
                              for (i = 0; i < maybeNodes.length; i++)
                                if (hoistableRoot = maybeNodes[i], checkAttributeStringCoercion(
                                  current2.content,
                                  "content"
                                ), hoistableRoot.getAttribute("content") === (null == current2.content ? null : "" + current2.content) && hoistableRoot.getAttribute("name") === (null == current2.name ? null : current2.name) && hoistableRoot.getAttribute("property") === (null == current2.property ? null : current2.property) && hoistableRoot.getAttribute("http-equiv") === (null == current2.httpEquiv ? null : current2.httpEquiv) && hoistableRoot.getAttribute("charset") === (null == current2.charSet ? null : current2.charSet)) {
                                  maybeNodes.splice(i, 1);
                                  break b;
                                }
                            }
                            hoistableRoot = root3.createElement(flags);
                            setInitialProperties(hoistableRoot, flags, current2);
                            root3.head.appendChild(hoistableRoot);
                            break;
                          default:
                            throw Error(
                              'getNodesForType encountered a type it did not expect: "' + flags + '". This is a bug in React.'
                            );
                        }
                        hoistableRoot[internalInstanceKey] = finishedWork;
                        markNodeAsHoistable(hoistableRoot);
                        flags = hoistableRoot;
                      }
                      finishedWork.stateNode = flags;
                    } else
                      mountHoistable(
                        hoistableRoot,
                        finishedWork.type,
                        finishedWork.stateNode
                      );
                  else
                    finishedWork.stateNode = acquireResource(
                      hoistableRoot,
                      flags,
                      finishedWork.memoizedProps
                    );
                else
                  root3 !== flags ? (null === root3 ? null !== current2.stateNode && (current2 = current2.stateNode, current2.parentNode.removeChild(current2)) : root3.count--, null === flags ? mountHoistable(
                    hoistableRoot,
                    finishedWork.type,
                    finishedWork.stateNode
                  ) : acquireResource(
                    hoistableRoot,
                    flags,
                    finishedWork.memoizedProps
                  )) : null === flags && null !== finishedWork.stateNode && commitHostUpdate(
                    finishedWork,
                    finishedWork.memoizedProps,
                    current2.memoizedProps
                  );
              break;
            case 27:
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              flags & 512 && (offscreenSubtreeWasHidden || null === current2 || safelyDetachRef(current2, current2.return));
              null !== current2 && flags & 4 && commitHostUpdate(
                finishedWork,
                finishedWork.memoizedProps,
                current2.memoizedProps
              );
              break;
            case 5:
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              flags & 512 && (offscreenSubtreeWasHidden || null === current2 || safelyDetachRef(current2, current2.return));
              if (finishedWork.flags & 32) {
                root3 = finishedWork.stateNode;
                try {
                  runWithFiberInDEV(finishedWork, resetTextContent, root3);
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              }
              flags & 4 && null != finishedWork.stateNode && (root3 = finishedWork.memoizedProps, commitHostUpdate(
                finishedWork,
                root3,
                null !== current2 ? current2.memoizedProps : root3
              ));
              flags & 1024 && (needsFormReset = true, "form" !== finishedWork.type && console.error(
                "Unexpected host component type. Expected a form. This is a bug in React."
              ));
              break;
            case 6:
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & 4) {
                if (null === finishedWork.stateNode)
                  throw Error(
                    "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue."
                  );
                flags = finishedWork.memoizedProps;
                current2 = null !== current2 ? current2.memoizedProps : flags;
                root3 = finishedWork.stateNode;
                try {
                  runWithFiberInDEV(
                    finishedWork,
                    commitTextUpdate,
                    root3,
                    current2,
                    flags
                  );
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              }
              break;
            case 3:
              hoistableRoot = pushNestedEffectDurations();
              tagCaches = null;
              maybeNodes = currentHoistableRoot;
              currentHoistableRoot = getHoistableRoot(root3.containerInfo);
              recursivelyTraverseMutationEffects(root3, finishedWork);
              currentHoistableRoot = maybeNodes;
              commitReconciliationEffects(finishedWork);
              if (flags & 4 && null !== current2 && current2.memoizedState.isDehydrated)
                try {
                  runWithFiberInDEV(
                    finishedWork,
                    commitHydratedContainer,
                    root3.containerInfo
                  );
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              needsFormReset && (needsFormReset = false, recursivelyResetForms(finishedWork));
              root3.effectDuration += popNestedEffectDurations(hoistableRoot);
              break;
            case 4:
              flags = currentHoistableRoot;
              currentHoistableRoot = getHoistableRoot(
                finishedWork.stateNode.containerInfo
              );
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              currentHoistableRoot = flags;
              break;
            case 12:
              flags = pushNestedEffectDurations();
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              finishedWork.stateNode.effectDuration += bubbleNestedEffectDurations(flags);
              break;
            case 13:
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              finishedWork.child.flags & 8192 && null !== finishedWork.memoizedState !== (null !== current2 && null !== current2.memoizedState) && (globalMostRecentFallbackTime = now$1());
              flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
              break;
            case 22:
              hoistableRoot = null !== finishedWork.memoizedState;
              var wasHidden = null !== current2 && null !== current2.memoizedState, prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden, prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden || hoistableRoot;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || wasHidden;
              recursivelyTraverseMutationEffects(root3, finishedWork);
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
              commitReconciliationEffects(finishedWork);
              if (flags & 8192)
                a: for (root3 = finishedWork.stateNode, root3._visibility = hoistableRoot ? root3._visibility & ~OffscreenVisible : root3._visibility | OffscreenVisible, hoistableRoot && (null === current2 || wasHidden || offscreenSubtreeIsHidden || offscreenSubtreeWasHidden || recursivelyTraverseDisappearLayoutEffects(finishedWork)), current2 = null, root3 = finishedWork; ; ) {
                  if (5 === root3.tag || 26 === root3.tag) {
                    if (null === current2) {
                      wasHidden = current2 = root3;
                      try {
                        maybeNodes = wasHidden.stateNode, hoistableRoot ? runWithFiberInDEV(wasHidden, hideInstance, maybeNodes) : runWithFiberInDEV(
                          wasHidden,
                          unhideInstance,
                          wasHidden.stateNode,
                          wasHidden.memoizedProps
                        );
                      } catch (error) {
                        captureCommitPhaseError(wasHidden, wasHidden.return, error);
                      }
                    }
                  } else if (6 === root3.tag) {
                    if (null === current2) {
                      wasHidden = root3;
                      try {
                        i = wasHidden.stateNode, hoistableRoot ? runWithFiberInDEV(wasHidden, hideTextInstance, i) : runWithFiberInDEV(
                          wasHidden,
                          unhideTextInstance,
                          i,
                          wasHidden.memoizedProps
                        );
                      } catch (error) {
                        captureCommitPhaseError(wasHidden, wasHidden.return, error);
                      }
                    }
                  } else if ((22 !== root3.tag && 23 !== root3.tag || null === root3.memoizedState || root3 === finishedWork) && null !== root3.child) {
                    root3.child.return = root3;
                    root3 = root3.child;
                    continue;
                  }
                  if (root3 === finishedWork) break a;
                  for (; null === root3.sibling; ) {
                    if (null === root3.return || root3.return === finishedWork)
                      break a;
                    current2 === root3 && (current2 = null);
                    root3 = root3.return;
                  }
                  current2 === root3 && (current2 = null);
                  root3.sibling.return = root3.return;
                  root3 = root3.sibling;
                }
              flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (current2 = flags.retryQueue, null !== current2 && (flags.retryQueue = null, attachSuspenseRetryListeners(finishedWork, current2))));
              break;
            case 19:
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
              break;
            case 30:
              break;
            case 21:
              break;
            default:
              recursivelyTraverseMutationEffects(root3, finishedWork), commitReconciliationEffects(finishedWork);
          }
        }
        function commitReconciliationEffects(finishedWork) {
          var flags = finishedWork.flags;
          if (flags & 2) {
            try {
              runWithFiberInDEV(finishedWork, commitPlacement, finishedWork);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
            finishedWork.flags &= -3;
          }
          flags & 4096 && (finishedWork.flags &= -4097);
        }
        function recursivelyResetForms(parentFiber) {
          if (parentFiber.subtreeFlags & 1024)
            for (parentFiber = parentFiber.child; null !== parentFiber; ) {
              var fiber = parentFiber;
              recursivelyResetForms(fiber);
              5 === fiber.tag && fiber.flags & 1024 && fiber.stateNode.reset();
              parentFiber = parentFiber.sibling;
            }
        }
        function recursivelyTraverseLayoutEffects(root3, parentFiber) {
          if (parentFiber.subtreeFlags & 8772)
            for (parentFiber = parentFiber.child; null !== parentFiber; )
              commitLayoutEffectOnFiber(root3, parentFiber.alternate, parentFiber), parentFiber = parentFiber.sibling;
        }
        function disappearLayoutEffects(finishedWork) {
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 14:
            case 15:
              commitHookLayoutUnmountEffects(
                finishedWork,
                finishedWork.return,
                Layout
              );
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            case 1:
              safelyDetachRef(finishedWork, finishedWork.return);
              var instance = finishedWork.stateNode;
              "function" === typeof instance.componentWillUnmount && safelyCallComponentWillUnmount(
                finishedWork,
                finishedWork.return,
                instance
              );
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            case 27:
              runWithFiberInDEV(
                finishedWork,
                releaseSingletonInstance,
                finishedWork.stateNode
              );
            case 26:
            case 5:
              safelyDetachRef(finishedWork, finishedWork.return);
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            case 22:
              null === finishedWork.memoizedState && recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            case 30:
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            default:
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
          }
        }
        function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            disappearLayoutEffects(parentFiber), parentFiber = parentFiber.sibling;
        }
        function reappearLayoutEffects(finishedRoot, current2, finishedWork, includeWorkInProgressEffects) {
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 15:
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              commitHookLayoutEffects(finishedWork, Layout);
              break;
            case 1:
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              current2 = finishedWork.stateNode;
              "function" === typeof current2.componentDidMount && runWithFiberInDEV(
                finishedWork,
                callComponentDidMountInDEV,
                finishedWork,
                current2
              );
              current2 = finishedWork.updateQueue;
              if (null !== current2) {
                finishedRoot = finishedWork.stateNode;
                try {
                  runWithFiberInDEV(
                    finishedWork,
                    commitHiddenCallbacks,
                    current2,
                    finishedRoot
                  );
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              }
              includeWorkInProgressEffects && flags & 64 && commitClassCallbacks(finishedWork);
              safelyAttachRef(finishedWork, finishedWork.return);
              break;
            case 27:
              commitHostSingletonAcquisition(finishedWork);
            case 26:
            case 5:
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              includeWorkInProgressEffects && null === current2 && flags & 4 && commitHostMount(finishedWork);
              safelyAttachRef(finishedWork, finishedWork.return);
              break;
            case 12:
              if (includeWorkInProgressEffects && flags & 4) {
                flags = pushNestedEffectDurations();
                recursivelyTraverseReappearLayoutEffects(
                  finishedRoot,
                  finishedWork,
                  includeWorkInProgressEffects
                );
                includeWorkInProgressEffects = finishedWork.stateNode;
                includeWorkInProgressEffects.effectDuration += bubbleNestedEffectDurations(flags);
                try {
                  runWithFiberInDEV(
                    finishedWork,
                    commitProfiler,
                    finishedWork,
                    current2,
                    commitStartTime,
                    includeWorkInProgressEffects.effectDuration
                  );
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              } else
                recursivelyTraverseReappearLayoutEffects(
                  finishedRoot,
                  finishedWork,
                  includeWorkInProgressEffects
                );
              break;
            case 13:
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              includeWorkInProgressEffects && flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              break;
            case 22:
              null === finishedWork.memoizedState && recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              safelyAttachRef(finishedWork, finishedWork.return);
              break;
            case 30:
              break;
            default:
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
          }
        }
        function recursivelyTraverseReappearLayoutEffects(finishedRoot, parentFiber, includeWorkInProgressEffects) {
          includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 8772);
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            reappearLayoutEffects(
              finishedRoot,
              parentFiber.alternate,
              parentFiber,
              includeWorkInProgressEffects
            ), parentFiber = parentFiber.sibling;
        }
        function commitOffscreenPassiveMountEffects(current2, finishedWork) {
          var previousCache = null;
          null !== current2 && null !== current2.memoizedState && null !== current2.memoizedState.cachePool && (previousCache = current2.memoizedState.cachePool.pool);
          current2 = null;
          null !== finishedWork.memoizedState && null !== finishedWork.memoizedState.cachePool && (current2 = finishedWork.memoizedState.cachePool.pool);
          current2 !== previousCache && (null != current2 && retainCache(current2), null != previousCache && releaseCache(previousCache));
        }
        function commitCachePassiveMountEffect(current2, finishedWork) {
          current2 = null;
          null !== finishedWork.alternate && (current2 = finishedWork.alternate.memoizedState.cache);
          finishedWork = finishedWork.memoizedState.cache;
          finishedWork !== current2 && (retainCache(finishedWork), null != current2 && releaseCache(current2));
        }
        function recursivelyTraversePassiveMountEffects(root3, parentFiber, committedLanes, committedTransitions) {
          if (parentFiber.subtreeFlags & 10256)
            for (parentFiber = parentFiber.child; null !== parentFiber; )
              commitPassiveMountOnFiber(
                root3,
                parentFiber,
                committedLanes,
                committedTransitions
              ), parentFiber = parentFiber.sibling;
        }
        function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 15:
              recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions
              );
              flags & 2048 && commitHookPassiveMountEffects(finishedWork, Passive | HasEffect);
              break;
            case 1:
              recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions
              );
              break;
            case 3:
              var prevEffectDuration = pushNestedEffectDurations();
              recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions
              );
              flags & 2048 && (committedLanes = null, null !== finishedWork.alternate && (committedLanes = finishedWork.alternate.memoizedState.cache), finishedWork = finishedWork.memoizedState.cache, finishedWork !== committedLanes && (retainCache(finishedWork), null != committedLanes && releaseCache(committedLanes)));
              finishedRoot.passiveEffectDuration += popNestedEffectDurations(prevEffectDuration);
              break;
            case 12:
              if (flags & 2048) {
                flags = pushNestedEffectDurations();
                recursivelyTraversePassiveMountEffects(
                  finishedRoot,
                  finishedWork,
                  committedLanes,
                  committedTransitions
                );
                finishedRoot = finishedWork.stateNode;
                finishedRoot.passiveEffectDuration += bubbleNestedEffectDurations(flags);
                try {
                  runWithFiberInDEV(
                    finishedWork,
                    commitProfilerPostCommitImpl,
                    finishedWork,
                    finishedWork.alternate,
                    commitStartTime,
                    finishedRoot.passiveEffectDuration
                  );
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              } else
                recursivelyTraversePassiveMountEffects(
                  finishedRoot,
                  finishedWork,
                  committedLanes,
                  committedTransitions
                );
              break;
            case 13:
              recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions
              );
              break;
            case 23:
              break;
            case 22:
              prevEffectDuration = finishedWork.stateNode;
              var _current = finishedWork.alternate;
              null !== finishedWork.memoizedState ? prevEffectDuration._visibility & OffscreenPassiveEffectsConnected ? recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions
              ) : recursivelyTraverseAtomicPassiveEffects(
                finishedRoot,
                finishedWork
              ) : prevEffectDuration._visibility & OffscreenPassiveEffectsConnected ? recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions
              ) : (prevEffectDuration._visibility |= OffscreenPassiveEffectsConnected, recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                0 !== (finishedWork.subtreeFlags & 10256)
              ));
              flags & 2048 && commitOffscreenPassiveMountEffects(_current, finishedWork);
              break;
            case 24:
              recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions
              );
              flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
              break;
            default:
              recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions
              );
          }
        }
        function recursivelyTraverseReconnectPassiveEffects(finishedRoot, parentFiber, committedLanes, committedTransitions, includeWorkInProgressEffects) {
          includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 10256);
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            reconnectPassiveEffects(
              finishedRoot,
              parentFiber,
              committedLanes,
              committedTransitions,
              includeWorkInProgressEffects
            ), parentFiber = parentFiber.sibling;
        }
        function reconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects) {
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 15:
              recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                includeWorkInProgressEffects
              );
              commitHookPassiveMountEffects(finishedWork, Passive);
              break;
            case 23:
              break;
            case 22:
              var _instance2 = finishedWork.stateNode;
              null !== finishedWork.memoizedState ? _instance2._visibility & OffscreenPassiveEffectsConnected ? recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                includeWorkInProgressEffects
              ) : recursivelyTraverseAtomicPassiveEffects(
                finishedRoot,
                finishedWork
              ) : (_instance2._visibility |= OffscreenPassiveEffectsConnected, recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                includeWorkInProgressEffects
              ));
              includeWorkInProgressEffects && flags & 2048 && commitOffscreenPassiveMountEffects(
                finishedWork.alternate,
                finishedWork
              );
              break;
            case 24:
              recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                includeWorkInProgressEffects
              );
              includeWorkInProgressEffects && flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
              break;
            default:
              recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                includeWorkInProgressEffects
              );
          }
        }
        function recursivelyTraverseAtomicPassiveEffects(finishedRoot$jscomp$0, parentFiber) {
          if (parentFiber.subtreeFlags & 10256)
            for (parentFiber = parentFiber.child; null !== parentFiber; ) {
              var finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, flags = finishedWork.flags;
              switch (finishedWork.tag) {
                case 22:
                  recursivelyTraverseAtomicPassiveEffects(
                    finishedRoot,
                    finishedWork
                  );
                  flags & 2048 && commitOffscreenPassiveMountEffects(
                    finishedWork.alternate,
                    finishedWork
                  );
                  break;
                case 24:
                  recursivelyTraverseAtomicPassiveEffects(
                    finishedRoot,
                    finishedWork
                  );
                  flags & 2048 && commitCachePassiveMountEffect(
                    finishedWork.alternate,
                    finishedWork
                  );
                  break;
                default:
                  recursivelyTraverseAtomicPassiveEffects(
                    finishedRoot,
                    finishedWork
                  );
              }
              parentFiber = parentFiber.sibling;
            }
        }
        function recursivelyAccumulateSuspenseyCommit(parentFiber) {
          if (parentFiber.subtreeFlags & suspenseyCommitFlag)
            for (parentFiber = parentFiber.child; null !== parentFiber; )
              accumulateSuspenseyCommitOnFiber(parentFiber), parentFiber = parentFiber.sibling;
        }
        function accumulateSuspenseyCommitOnFiber(fiber) {
          switch (fiber.tag) {
            case 26:
              recursivelyAccumulateSuspenseyCommit(fiber);
              fiber.flags & suspenseyCommitFlag && null !== fiber.memoizedState && suspendResource(
                currentHoistableRoot,
                fiber.memoizedState,
                fiber.memoizedProps
              );
              break;
            case 5:
              recursivelyAccumulateSuspenseyCommit(fiber);
              break;
            case 3:
            case 4:
              var previousHoistableRoot = currentHoistableRoot;
              currentHoistableRoot = getHoistableRoot(
                fiber.stateNode.containerInfo
              );
              recursivelyAccumulateSuspenseyCommit(fiber);
              currentHoistableRoot = previousHoistableRoot;
              break;
            case 22:
              null === fiber.memoizedState && (previousHoistableRoot = fiber.alternate, null !== previousHoistableRoot && null !== previousHoistableRoot.memoizedState ? (previousHoistableRoot = suspenseyCommitFlag, suspenseyCommitFlag = 16777216, recursivelyAccumulateSuspenseyCommit(fiber), suspenseyCommitFlag = previousHoistableRoot) : recursivelyAccumulateSuspenseyCommit(fiber));
              break;
            default:
              recursivelyAccumulateSuspenseyCommit(fiber);
          }
        }
        function detachAlternateSiblings(parentFiber) {
          var previousFiber = parentFiber.alternate;
          if (null !== previousFiber && (parentFiber = previousFiber.child, null !== parentFiber)) {
            previousFiber.child = null;
            do
              previousFiber = parentFiber.sibling, parentFiber.sibling = null, parentFiber = previousFiber;
            while (null !== parentFiber);
          }
        }
        function recursivelyTraversePassiveUnmountEffects(parentFiber) {
          var deletions = parentFiber.deletions;
          if (0 !== (parentFiber.flags & 16)) {
            if (null !== deletions)
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                nextEffect = childToDelete;
                commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
                  childToDelete,
                  parentFiber
                );
              }
            detachAlternateSiblings(parentFiber);
          }
          if (parentFiber.subtreeFlags & 10256)
            for (parentFiber = parentFiber.child; null !== parentFiber; )
              commitPassiveUnmountOnFiber(parentFiber), parentFiber = parentFiber.sibling;
        }
        function commitPassiveUnmountOnFiber(finishedWork) {
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 15:
              recursivelyTraversePassiveUnmountEffects(finishedWork);
              finishedWork.flags & 2048 && commitHookPassiveUnmountEffects(
                finishedWork,
                finishedWork.return,
                Passive | HasEffect
              );
              break;
            case 3:
              var prevEffectDuration = pushNestedEffectDurations();
              recursivelyTraversePassiveUnmountEffects(finishedWork);
              finishedWork.stateNode.passiveEffectDuration += popNestedEffectDurations(prevEffectDuration);
              break;
            case 12:
              prevEffectDuration = pushNestedEffectDurations();
              recursivelyTraversePassiveUnmountEffects(finishedWork);
              finishedWork.stateNode.passiveEffectDuration += bubbleNestedEffectDurations(prevEffectDuration);
              break;
            case 22:
              prevEffectDuration = finishedWork.stateNode;
              null !== finishedWork.memoizedState && prevEffectDuration._visibility & OffscreenPassiveEffectsConnected && (null === finishedWork.return || 13 !== finishedWork.return.tag) ? (prevEffectDuration._visibility &= ~OffscreenPassiveEffectsConnected, recursivelyTraverseDisconnectPassiveEffects(finishedWork)) : recursivelyTraversePassiveUnmountEffects(finishedWork);
              break;
            default:
              recursivelyTraversePassiveUnmountEffects(finishedWork);
          }
        }
        function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
          var deletions = parentFiber.deletions;
          if (0 !== (parentFiber.flags & 16)) {
            if (null !== deletions)
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                nextEffect = childToDelete;
                commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
                  childToDelete,
                  parentFiber
                );
              }
            detachAlternateSiblings(parentFiber);
          }
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            disconnectPassiveEffect(parentFiber), parentFiber = parentFiber.sibling;
        }
        function disconnectPassiveEffect(finishedWork) {
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 15:
              commitHookPassiveUnmountEffects(
                finishedWork,
                finishedWork.return,
                Passive
              );
              recursivelyTraverseDisconnectPassiveEffects(finishedWork);
              break;
            case 22:
              var instance = finishedWork.stateNode;
              instance._visibility & OffscreenPassiveEffectsConnected && (instance._visibility &= ~OffscreenPassiveEffectsConnected, recursivelyTraverseDisconnectPassiveEffects(finishedWork));
              break;
            default:
              recursivelyTraverseDisconnectPassiveEffects(finishedWork);
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
          for (; null !== nextEffect; ) {
            var fiber = nextEffect, current2 = fiber;
            switch (current2.tag) {
              case 0:
              case 11:
              case 15:
                commitHookPassiveUnmountEffects(
                  current2,
                  nearestMountedAncestor,
                  Passive
                );
                break;
              case 23:
              case 22:
                null !== current2.memoizedState && null !== current2.memoizedState.cachePool && (current2 = current2.memoizedState.cachePool.pool, null != current2 && retainCache(current2));
                break;
              case 24:
                releaseCache(current2.memoizedState.cache);
            }
            current2 = fiber.child;
            if (null !== current2) current2.return = fiber, nextEffect = current2;
            else
              a: for (fiber = deletedSubtreeRoot; null !== nextEffect; ) {
                current2 = nextEffect;
                var sibling = current2.sibling, returnFiber = current2.return;
                detachFiberAfterEffects(current2);
                if (current2 === fiber) {
                  nextEffect = null;
                  break a;
                }
                if (null !== sibling) {
                  sibling.return = returnFiber;
                  nextEffect = sibling;
                  break a;
                }
                nextEffect = returnFiber;
              }
          }
        }
        function onCommitRoot() {
          commitHooks.forEach(function(commitHook) {
            return commitHook();
          });
        }
        function isConcurrentActEnvironment() {
          var isReactActEnvironmentGlobal = "undefined" !== typeof IS_REACT_ACT_ENVIRONMENT ? IS_REACT_ACT_ENVIRONMENT : void 0;
          isReactActEnvironmentGlobal || null === ReactSharedInternals.actQueue || console.error(
            "The current testing environment is not configured to support act(...)"
          );
          return isReactActEnvironmentGlobal;
        }
        function requestUpdateLane(fiber) {
          if ((executionContext & RenderContext) !== NoContext && 0 !== workInProgressRootRenderLanes)
            return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
          var transition = ReactSharedInternals.T;
          return null !== transition ? (transition._updatedFibers || (transition._updatedFibers = /* @__PURE__ */ new Set()), transition._updatedFibers.add(fiber), fiber = currentEntangledLane, 0 !== fiber ? fiber : requestTransitionLane()) : resolveUpdatePriority();
        }
        function requestDeferredLane() {
          0 === workInProgressDeferredLane && (workInProgressDeferredLane = 0 === (workInProgressRootRenderLanes & 536870912) || isHydrating ? claimNextTransitionLane() : 536870912);
          var suspenseHandler = suspenseHandlerStackCursor.current;
          null !== suspenseHandler && (suspenseHandler.flags |= 32);
          return workInProgressDeferredLane;
        }
        function scheduleUpdateOnFiber(root3, fiber, lane) {
          isRunningInsertionEffect && console.error("useInsertionEffect must not schedule updates.");
          isFlushingPassiveEffects && (didScheduleUpdateDuringPassiveEffects = true);
          if (root3 === workInProgressRoot && (workInProgressSuspendedReason === SuspendedOnData || workInProgressSuspendedReason === SuspendedOnAction) || null !== root3.cancelPendingCommit)
            prepareFreshStack(root3, 0), markRootSuspended(
              root3,
              workInProgressRootRenderLanes,
              workInProgressDeferredLane,
              false
            );
          markRootUpdated$1(root3, lane);
          if (0 !== (executionContext & RenderContext) && root3 === workInProgressRoot) {
            if (isRendering)
              switch (fiber.tag) {
                case 0:
                case 11:
                case 15:
                  root3 = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                  didWarnAboutUpdateInRenderForAnotherComponent.has(root3) || (didWarnAboutUpdateInRenderForAnotherComponent.add(root3), fiber = getComponentNameFromFiber(fiber) || "Unknown", console.error(
                    "Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://react.dev/link/setstate-in-render",
                    fiber,
                    root3,
                    root3
                  ));
                  break;
                case 1:
                  didWarnAboutUpdateInRender || (console.error(
                    "Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."
                  ), didWarnAboutUpdateInRender = true);
              }
          } else
            isDevToolsPresent && addFiberToLanesMap(root3, fiber, lane), warnIfUpdatesNotWrappedWithActDEV(fiber), root3 === workInProgressRoot && ((executionContext & RenderContext) === NoContext && (workInProgressRootInterleavedUpdatedLanes |= lane), workInProgressRootExitStatus === RootSuspendedWithDelay && markRootSuspended(
              root3,
              workInProgressRootRenderLanes,
              workInProgressDeferredLane,
              false
            )), ensureRootIsScheduled(root3);
        }
        function performWorkOnRoot(root3, lanes, forceSync) {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
            throw Error("Should not already be working.");
          var shouldTimeSlice = !forceSync && 0 === (lanes & 124) && 0 === (lanes & root3.expiredLanes) || checkIfRootIsPrerendering(root3, lanes), exitStatus = shouldTimeSlice ? renderRootConcurrent(root3, lanes) : renderRootSync(root3, lanes, true), renderWasConcurrent = shouldTimeSlice;
          do {
            if (exitStatus === RootInProgress) {
              workInProgressRootIsPrerendering && !shouldTimeSlice && markRootSuspended(root3, lanes, 0, false);
              break;
            } else {
              forceSync = root3.current.alternate;
              if (renderWasConcurrent && !isRenderConsistentWithExternalStores(forceSync)) {
                exitStatus = renderRootSync(root3, lanes, false);
                renderWasConcurrent = false;
                continue;
              }
              if (exitStatus === RootErrored) {
                renderWasConcurrent = lanes;
                if (root3.errorRecoveryDisabledLanes & renderWasConcurrent)
                  var errorRetryLanes = 0;
                else
                  errorRetryLanes = root3.pendingLanes & -536870913, errorRetryLanes = 0 !== errorRetryLanes ? errorRetryLanes : errorRetryLanes & 536870912 ? 536870912 : 0;
                if (0 !== errorRetryLanes) {
                  lanes = errorRetryLanes;
                  a: {
                    exitStatus = root3;
                    var errorRetryLanes$jscomp$0 = errorRetryLanes;
                    errorRetryLanes = workInProgressRootConcurrentErrors;
                    var wasRootDehydrated = exitStatus.current.memoizedState.isDehydrated;
                    wasRootDehydrated && (prepareFreshStack(
                      exitStatus,
                      errorRetryLanes$jscomp$0
                    ).flags |= 256);
                    errorRetryLanes$jscomp$0 = renderRootSync(
                      exitStatus,
                      errorRetryLanes$jscomp$0,
                      false
                    );
                    if (errorRetryLanes$jscomp$0 !== RootErrored) {
                      if (workInProgressRootDidAttachPingListener && !wasRootDehydrated) {
                        exitStatus.errorRecoveryDisabledLanes |= renderWasConcurrent;
                        workInProgressRootInterleavedUpdatedLanes |= renderWasConcurrent;
                        exitStatus = RootSuspendedWithDelay;
                        break a;
                      }
                      exitStatus = workInProgressRootRecoverableErrors;
                      workInProgressRootRecoverableErrors = errorRetryLanes;
                      null !== exitStatus && (null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = exitStatus : workInProgressRootRecoverableErrors.push.apply(
                        workInProgressRootRecoverableErrors,
                        exitStatus
                      ));
                    }
                    exitStatus = errorRetryLanes$jscomp$0;
                  }
                  renderWasConcurrent = false;
                  if (exitStatus !== RootErrored) continue;
                }
              }
              if (exitStatus === RootFatalErrored) {
                prepareFreshStack(root3, 0);
                markRootSuspended(root3, lanes, 0, true);
                break;
              }
              a: {
                shouldTimeSlice = root3;
                switch (exitStatus) {
                  case RootInProgress:
                  case RootFatalErrored:
                    throw Error("Root did not complete. This is a bug in React.");
                  case RootSuspendedWithDelay:
                    if ((lanes & 4194048) !== lanes) break;
                  case RootSuspendedAtTheShell:
                    markRootSuspended(
                      shouldTimeSlice,
                      lanes,
                      workInProgressDeferredLane,
                      !workInProgressRootDidSkipSuspendedSiblings
                    );
                    break a;
                  case RootErrored:
                    workInProgressRootRecoverableErrors = null;
                    break;
                  case RootSuspended:
                  case RootCompleted:
                    break;
                  default:
                    throw Error("Unknown root exit status.");
                }
                if (null !== ReactSharedInternals.actQueue)
                  commitRoot(
                    shouldTimeSlice,
                    forceSync,
                    lanes,
                    workInProgressRootRecoverableErrors,
                    workInProgressTransitions,
                    workInProgressRootDidIncludeRecursiveRenderUpdate,
                    workInProgressDeferredLane,
                    workInProgressRootInterleavedUpdatedLanes,
                    workInProgressSuspendedRetryLanes
                  );
                else {
                  if ((lanes & 62914560) === lanes && (renderWasConcurrent = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now$1(), 10 < renderWasConcurrent)) {
                    markRootSuspended(
                      shouldTimeSlice,
                      lanes,
                      workInProgressDeferredLane,
                      !workInProgressRootDidSkipSuspendedSiblings
                    );
                    if (0 !== getNextLanes(shouldTimeSlice, 0, true)) break a;
                    shouldTimeSlice.timeoutHandle = scheduleTimeout(
                      commitRootWhenReady.bind(
                        null,
                        shouldTimeSlice,
                        forceSync,
                        workInProgressRootRecoverableErrors,
                        workInProgressTransitions,
                        workInProgressRootDidIncludeRecursiveRenderUpdate,
                        lanes,
                        workInProgressDeferredLane,
                        workInProgressRootInterleavedUpdatedLanes,
                        workInProgressSuspendedRetryLanes,
                        workInProgressRootDidSkipSuspendedSiblings,
                        exitStatus,
                        THROTTLED_COMMIT,
                        renderStartTime,
                        0
                      ),
                      renderWasConcurrent
                    );
                    break a;
                  }
                  commitRootWhenReady(
                    shouldTimeSlice,
                    forceSync,
                    workInProgressRootRecoverableErrors,
                    workInProgressTransitions,
                    workInProgressRootDidIncludeRecursiveRenderUpdate,
                    lanes,
                    workInProgressDeferredLane,
                    workInProgressRootInterleavedUpdatedLanes,
                    workInProgressSuspendedRetryLanes,
                    workInProgressRootDidSkipSuspendedSiblings,
                    exitStatus,
                    IMMEDIATE_COMMIT,
                    renderStartTime,
                    0
                  );
                }
              }
            }
            break;
          } while (1);
          ensureRootIsScheduled(root3);
        }
        function commitRootWhenReady(root3, finishedWork, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, lanes, spawnedLane, updatedLanes, suspendedRetryLanes, didSkipSuspendedSiblings, exitStatus, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime) {
          root3.timeoutHandle = noTimeout;
          suspendedCommitReason = finishedWork.subtreeFlags;
          if (suspendedCommitReason & 8192 || 16785408 === (suspendedCommitReason & 16785408)) {
            if (suspendedState = { stylesheets: null, count: 0, unsuspend: noop }, accumulateSuspenseyCommitOnFiber(finishedWork), suspendedCommitReason = waitForCommitToBeReady(), null !== suspendedCommitReason) {
              root3.cancelPendingCommit = suspendedCommitReason(
                commitRoot.bind(
                  null,
                  root3,
                  finishedWork,
                  lanes,
                  recoverableErrors,
                  transitions,
                  didIncludeRenderPhaseUpdate,
                  spawnedLane,
                  updatedLanes,
                  suspendedRetryLanes,
                  exitStatus,
                  SUSPENDED_COMMIT,
                  completedRenderStartTime,
                  completedRenderEndTime
                )
              );
              markRootSuspended(
                root3,
                lanes,
                spawnedLane,
                !didSkipSuspendedSiblings
              );
              return;
            }
          }
          commitRoot(
            root3,
            finishedWork,
            lanes,
            recoverableErrors,
            transitions,
            didIncludeRenderPhaseUpdate,
            spawnedLane,
            updatedLanes,
            suspendedRetryLanes
          );
        }
        function isRenderConsistentWithExternalStores(finishedWork) {
          for (var node = finishedWork; ; ) {
            var tag2 = node.tag;
            if ((0 === tag2 || 11 === tag2 || 15 === tag2) && node.flags & 16384 && (tag2 = node.updateQueue, null !== tag2 && (tag2 = tag2.stores, null !== tag2)))
              for (var i = 0; i < tag2.length; i++) {
                var check2 = tag2[i], getSnapshot = check2.getSnapshot;
                check2 = check2.value;
                try {
                  if (!objectIs(getSnapshot(), check2)) return false;
                } catch (error) {
                  return false;
                }
              }
            tag2 = node.child;
            if (node.subtreeFlags & 16384 && null !== tag2)
              tag2.return = node, node = tag2;
            else {
              if (node === finishedWork) break;
              for (; null === node.sibling; ) {
                if (null === node.return || node.return === finishedWork) return true;
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return true;
        }
        function markRootSuspended(root3, suspendedLanes, spawnedLane, didAttemptEntireTree) {
          suspendedLanes &= ~workInProgressRootPingedLanes;
          suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
          root3.suspendedLanes |= suspendedLanes;
          root3.pingedLanes &= ~suspendedLanes;
          didAttemptEntireTree && (root3.warmLanes |= suspendedLanes);
          didAttemptEntireTree = root3.expirationTimes;
          for (var lanes = suspendedLanes; 0 < lanes; ) {
            var index = 31 - clz32(lanes), lane = 1 << index;
            didAttemptEntireTree[index] = -1;
            lanes &= ~lane;
          }
          0 !== spawnedLane && markSpawnedDeferredLane(root3, spawnedLane, suspendedLanes);
        }
        function flushSyncWork$1() {
          return (executionContext & (RenderContext | CommitContext)) === NoContext ? (flushSyncWorkAcrossRoots_impl(0, false), false) : true;
        }
        function resetWorkInProgressStack() {
          if (null !== workInProgress) {
            if (workInProgressSuspendedReason === NotSuspended)
              var interruptedWork = workInProgress.return;
            else
              interruptedWork = workInProgress, resetContextDependencies(), resetHooksOnUnwind(interruptedWork), thenableState = null, thenableIndexCounter = 0, interruptedWork = workInProgress;
            for (; null !== interruptedWork; )
              unwindInterruptedWork(interruptedWork.alternate, interruptedWork), interruptedWork = interruptedWork.return;
            workInProgress = null;
          }
        }
        function prepareFreshStack(root3, lanes) {
          var timeoutHandle = root3.timeoutHandle;
          timeoutHandle !== noTimeout && (root3.timeoutHandle = noTimeout, cancelTimeout(timeoutHandle));
          timeoutHandle = root3.cancelPendingCommit;
          null !== timeoutHandle && (root3.cancelPendingCommit = null, timeoutHandle());
          resetWorkInProgressStack();
          workInProgressRoot = root3;
          workInProgress = timeoutHandle = createWorkInProgress(root3.current, null);
          workInProgressRootRenderLanes = lanes;
          workInProgressSuspendedReason = NotSuspended;
          workInProgressThrownValue = null;
          workInProgressRootDidSkipSuspendedSiblings = false;
          workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root3, lanes);
          workInProgressRootDidAttachPingListener = false;
          workInProgressRootExitStatus = RootInProgress;
          workInProgressSuspendedRetryLanes = workInProgressDeferredLane = workInProgressRootPingedLanes = workInProgressRootInterleavedUpdatedLanes = workInProgressRootSkippedLanes = 0;
          workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors = null;
          workInProgressRootDidIncludeRecursiveRenderUpdate = false;
          0 !== (lanes & 8) && (lanes |= lanes & 32);
          var allEntangledLanes = root3.entangledLanes;
          if (0 !== allEntangledLanes)
            for (root3 = root3.entanglements, allEntangledLanes &= lanes; 0 < allEntangledLanes; ) {
              var index = 31 - clz32(allEntangledLanes), lane = 1 << index;
              lanes |= root3[index];
              allEntangledLanes &= ~lane;
            }
          entangledRenderLanes = lanes;
          finishQueueingConcurrentUpdates();
          lanes = getCurrentTime();
          1e3 < lanes - lastResetTime && (ReactSharedInternals.recentlyCreatedOwnerStacks = 0, lastResetTime = lanes);
          ReactStrictModeWarnings.discardPendingWarnings();
          return timeoutHandle;
        }
        function handleThrow(root3, thrownValue) {
          currentlyRenderingFiber = null;
          ReactSharedInternals.H = ContextOnlyDispatcher;
          ReactSharedInternals.getCurrentStack = null;
          isRendering = false;
          current = null;
          thrownValue === SuspenseException || thrownValue === SuspenseActionException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = SuspendedOnImmediate) : thrownValue === SuspenseyCommitException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = SuspendedOnInstance) : workInProgressSuspendedReason = thrownValue === SelectiveHydrationException ? SuspendedOnHydration : null !== thrownValue && "object" === typeof thrownValue && "function" === typeof thrownValue.then ? SuspendedOnDeprecatedThrowPromise : SuspendedOnError;
          workInProgressThrownValue = thrownValue;
          var erroredWork = workInProgress;
          if (null === erroredWork)
            workInProgressRootExitStatus = RootFatalErrored, logUncaughtError(
              root3,
              createCapturedValueAtFiber(thrownValue, root3.current)
            );
          else
            switch (erroredWork.mode & ProfileMode && stopProfilerTimerIfRunningAndRecordDuration(erroredWork), markComponentRenderStopped(), workInProgressSuspendedReason) {
              case SuspendedOnError:
                null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentErrored && injectedProfilingHooks.markComponentErrored(
                  erroredWork,
                  thrownValue,
                  workInProgressRootRenderLanes
                );
                break;
              case SuspendedOnData:
              case SuspendedOnAction:
              case SuspendedOnImmediate:
              case SuspendedOnDeprecatedThrowPromise:
              case SuspendedAndReadyToContinue:
                null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentSuspended && injectedProfilingHooks.markComponentSuspended(
                  erroredWork,
                  thrownValue,
                  workInProgressRootRenderLanes
                );
            }
        }
        function pushDispatcher() {
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = ContextOnlyDispatcher;
          return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
        }
        function pushAsyncDispatcher() {
          var prevAsyncDispatcher = ReactSharedInternals.A;
          ReactSharedInternals.A = DefaultAsyncDispatcher;
          return prevAsyncDispatcher;
        }
        function renderDidSuspendDelayIfPossible() {
          workInProgressRootExitStatus = RootSuspendedWithDelay;
          workInProgressRootDidSkipSuspendedSiblings || (workInProgressRootRenderLanes & 4194048) !== workInProgressRootRenderLanes && null !== suspenseHandlerStackCursor.current || (workInProgressRootIsPrerendering = true);
          0 === (workInProgressRootSkippedLanes & 134217727) && 0 === (workInProgressRootInterleavedUpdatedLanes & 134217727) || null === workInProgressRoot || markRootSuspended(
            workInProgressRoot,
            workInProgressRootRenderLanes,
            workInProgressDeferredLane,
            false
          );
        }
        function renderRootSync(root3, lanes, shouldYieldForPrerendering) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
          if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root3.memoizedUpdaters;
              0 < memoizedUpdaters.size && (restorePendingUpdaters(root3, workInProgressRootRenderLanes), memoizedUpdaters.clear());
              movePendingFibersToMemoized(root3, lanes);
            }
            workInProgressTransitions = null;
            prepareFreshStack(root3, lanes);
          }
          markRenderStarted(lanes);
          lanes = false;
          memoizedUpdaters = workInProgressRootExitStatus;
          a: do
            try {
              if (workInProgressSuspendedReason !== NotSuspended && null !== workInProgress) {
                var unitOfWork = workInProgress, thrownValue = workInProgressThrownValue;
                switch (workInProgressSuspendedReason) {
                  case SuspendedOnHydration:
                    resetWorkInProgressStack();
                    memoizedUpdaters = RootSuspendedAtTheShell;
                    break a;
                  case SuspendedOnImmediate:
                  case SuspendedOnData:
                  case SuspendedOnAction:
                  case SuspendedOnDeprecatedThrowPromise:
                    null === suspenseHandlerStackCursor.current && (lanes = true);
                    var reason = workInProgressSuspendedReason;
                    workInProgressSuspendedReason = NotSuspended;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(root3, unitOfWork, thrownValue, reason);
                    if (shouldYieldForPrerendering && workInProgressRootIsPrerendering) {
                      memoizedUpdaters = RootInProgress;
                      break a;
                    }
                    break;
                  default:
                    reason = workInProgressSuspendedReason, workInProgressSuspendedReason = NotSuspended, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root3, unitOfWork, thrownValue, reason);
                }
              }
              workLoopSync();
              memoizedUpdaters = workInProgressRootExitStatus;
              break;
            } catch (thrownValue$8) {
              handleThrow(root3, thrownValue$8);
            }
          while (1);
          lanes && root3.shellSuspendCounter++;
          resetContextDependencies();
          executionContext = prevExecutionContext;
          ReactSharedInternals.H = prevDispatcher;
          ReactSharedInternals.A = prevAsyncDispatcher;
          markRenderStopped();
          null === workInProgress && (workInProgressRoot = null, workInProgressRootRenderLanes = 0, finishQueueingConcurrentUpdates());
          return memoizedUpdaters;
        }
        function workLoopSync() {
          for (; null !== workInProgress; ) performUnitOfWork(workInProgress);
        }
        function renderRootConcurrent(root3, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
          if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root3.memoizedUpdaters;
              0 < memoizedUpdaters.size && (restorePendingUpdaters(root3, workInProgressRootRenderLanes), memoizedUpdaters.clear());
              movePendingFibersToMemoized(root3, lanes);
            }
            workInProgressTransitions = null;
            workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS;
            prepareFreshStack(root3, lanes);
          } else
            workInProgressRootIsPrerendering = checkIfRootIsPrerendering(
              root3,
              lanes
            );
          markRenderStarted(lanes);
          a: do
            try {
              if (workInProgressSuspendedReason !== NotSuspended && null !== workInProgress)
                b: switch (lanes = workInProgress, memoizedUpdaters = workInProgressThrownValue, workInProgressSuspendedReason) {
                  case SuspendedOnError:
                    workInProgressSuspendedReason = NotSuspended;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(
                      root3,
                      lanes,
                      memoizedUpdaters,
                      SuspendedOnError
                    );
                    break;
                  case SuspendedOnData:
                  case SuspendedOnAction:
                    if (isThenableResolved(memoizedUpdaters)) {
                      workInProgressSuspendedReason = NotSuspended;
                      workInProgressThrownValue = null;
                      replaySuspendedUnitOfWork(lanes);
                      break;
                    }
                    lanes = function() {
                      workInProgressSuspendedReason !== SuspendedOnData && workInProgressSuspendedReason !== SuspendedOnAction || workInProgressRoot !== root3 || (workInProgressSuspendedReason = SuspendedAndReadyToContinue);
                      ensureRootIsScheduled(root3);
                    };
                    memoizedUpdaters.then(lanes, lanes);
                    break a;
                  case SuspendedOnImmediate:
                    workInProgressSuspendedReason = SuspendedAndReadyToContinue;
                    break a;
                  case SuspendedOnInstance:
                    workInProgressSuspendedReason = SuspendedOnInstanceAndReadyToContinue;
                    break a;
                  case SuspendedAndReadyToContinue:
                    isThenableResolved(memoizedUpdaters) ? (workInProgressSuspendedReason = NotSuspended, workInProgressThrownValue = null, replaySuspendedUnitOfWork(lanes)) : (workInProgressSuspendedReason = NotSuspended, workInProgressThrownValue = null, throwAndUnwindWorkLoop(
                      root3,
                      lanes,
                      memoizedUpdaters,
                      SuspendedAndReadyToContinue
                    ));
                    break;
                  case SuspendedOnInstanceAndReadyToContinue:
                    var resource = null;
                    switch (workInProgress.tag) {
                      case 26:
                        resource = workInProgress.memoizedState;
                      case 5:
                      case 27:
                        var hostFiber = workInProgress;
                        if (resource ? preloadResource(resource) : 1) {
                          workInProgressSuspendedReason = NotSuspended;
                          workInProgressThrownValue = null;
                          var sibling = hostFiber.sibling;
                          if (null !== sibling) workInProgress = sibling;
                          else {
                            var returnFiber = hostFiber.return;
                            null !== returnFiber ? (workInProgress = returnFiber, completeUnitOfWork(returnFiber)) : workInProgress = null;
                          }
                          break b;
                        }
                        break;
                      default:
                        console.error(
                          "Unexpected type of fiber triggered a suspensey commit. This is a bug in React."
                        );
                    }
                    workInProgressSuspendedReason = NotSuspended;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(
                      root3,
                      lanes,
                      memoizedUpdaters,
                      SuspendedOnInstanceAndReadyToContinue
                    );
                    break;
                  case SuspendedOnDeprecatedThrowPromise:
                    workInProgressSuspendedReason = NotSuspended;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(
                      root3,
                      lanes,
                      memoizedUpdaters,
                      SuspendedOnDeprecatedThrowPromise
                    );
                    break;
                  case SuspendedOnHydration:
                    resetWorkInProgressStack();
                    workInProgressRootExitStatus = RootSuspendedAtTheShell;
                    break a;
                  default:
                    throw Error(
                      "Unexpected SuspendedReason. This is a bug in React."
                    );
                }
              null !== ReactSharedInternals.actQueue ? workLoopSync() : workLoopConcurrentByScheduler();
              break;
            } catch (thrownValue$9) {
              handleThrow(root3, thrownValue$9);
            }
          while (1);
          resetContextDependencies();
          ReactSharedInternals.H = prevDispatcher;
          ReactSharedInternals.A = prevAsyncDispatcher;
          executionContext = prevExecutionContext;
          if (null !== workInProgress)
            return null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markRenderYielded && injectedProfilingHooks.markRenderYielded(), RootInProgress;
          markRenderStopped();
          workInProgressRoot = null;
          workInProgressRootRenderLanes = 0;
          finishQueueingConcurrentUpdates();
          return workInProgressRootExitStatus;
        }
        function workLoopConcurrentByScheduler() {
          for (; null !== workInProgress && !shouldYield(); )
            performUnitOfWork(workInProgress);
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          (unitOfWork.mode & ProfileMode) !== NoMode ? (startProfilerTimer(unitOfWork), current2 = runWithFiberInDEV(
            unitOfWork,
            beginWork,
            current2,
            unitOfWork,
            entangledRenderLanes
          ), stopProfilerTimerIfRunningAndRecordDuration(unitOfWork)) : current2 = runWithFiberInDEV(
            unitOfWork,
            beginWork,
            current2,
            unitOfWork,
            entangledRenderLanes
          );
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          null === current2 ? completeUnitOfWork(unitOfWork) : workInProgress = current2;
        }
        function replaySuspendedUnitOfWork(unitOfWork) {
          var next = runWithFiberInDEV(unitOfWork, replayBeginWork, unitOfWork);
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          null === next ? completeUnitOfWork(unitOfWork) : workInProgress = next;
        }
        function replayBeginWork(unitOfWork) {
          var current2 = unitOfWork.alternate, isProfilingMode = (unitOfWork.mode & ProfileMode) !== NoMode;
          isProfilingMode && startProfilerTimer(unitOfWork);
          switch (unitOfWork.tag) {
            case 15:
            case 0:
              current2 = replayFunctionComponent(
                current2,
                unitOfWork,
                unitOfWork.pendingProps,
                unitOfWork.type,
                void 0,
                workInProgressRootRenderLanes
              );
              break;
            case 11:
              current2 = replayFunctionComponent(
                current2,
                unitOfWork,
                unitOfWork.pendingProps,
                unitOfWork.type.render,
                unitOfWork.ref,
                workInProgressRootRenderLanes
              );
              break;
            case 5:
              resetHooksOnUnwind(unitOfWork);
            default:
              unwindInterruptedWork(current2, unitOfWork), unitOfWork = workInProgress = resetWorkInProgress(unitOfWork, entangledRenderLanes), current2 = beginWork(current2, unitOfWork, entangledRenderLanes);
          }
          isProfilingMode && stopProfilerTimerIfRunningAndRecordDuration(unitOfWork);
          return current2;
        }
        function throwAndUnwindWorkLoop(root3, unitOfWork, thrownValue, suspendedReason) {
          resetContextDependencies();
          resetHooksOnUnwind(unitOfWork);
          thenableState = null;
          thenableIndexCounter = 0;
          var returnFiber = unitOfWork.return;
          try {
            if (throwException(
              root3,
              returnFiber,
              unitOfWork,
              thrownValue,
              workInProgressRootRenderLanes
            )) {
              workInProgressRootExitStatus = RootFatalErrored;
              logUncaughtError(
                root3,
                createCapturedValueAtFiber(thrownValue, root3.current)
              );
              workInProgress = null;
              return;
            }
          } catch (error) {
            if (null !== returnFiber) throw workInProgress = returnFiber, error;
            workInProgressRootExitStatus = RootFatalErrored;
            logUncaughtError(
              root3,
              createCapturedValueAtFiber(thrownValue, root3.current)
            );
            workInProgress = null;
            return;
          }
          if (unitOfWork.flags & 32768) {
            if (isHydrating || suspendedReason === SuspendedOnError) root3 = true;
            else if (workInProgressRootIsPrerendering || 0 !== (workInProgressRootRenderLanes & 536870912))
              root3 = false;
            else if (workInProgressRootDidSkipSuspendedSiblings = root3 = true, suspendedReason === SuspendedOnData || suspendedReason === SuspendedOnAction || suspendedReason === SuspendedOnImmediate || suspendedReason === SuspendedOnDeprecatedThrowPromise)
              suspendedReason = suspenseHandlerStackCursor.current, null !== suspendedReason && 13 === suspendedReason.tag && (suspendedReason.flags |= 16384);
            unwindUnitOfWork(unitOfWork, root3);
          } else completeUnitOfWork(unitOfWork);
        }
        function completeUnitOfWork(unitOfWork) {
          var completedWork = unitOfWork;
          do {
            if (0 !== (completedWork.flags & 32768)) {
              unwindUnitOfWork(
                completedWork,
                workInProgressRootDidSkipSuspendedSiblings
              );
              return;
            }
            var current2 = completedWork.alternate;
            unitOfWork = completedWork.return;
            startProfilerTimer(completedWork);
            current2 = runWithFiberInDEV(
              completedWork,
              completeWork,
              current2,
              completedWork,
              entangledRenderLanes
            );
            (completedWork.mode & ProfileMode) !== NoMode && stopProfilerTimerIfRunningAndRecordIncompleteDuration(completedWork);
            if (null !== current2) {
              workInProgress = current2;
              return;
            }
            completedWork = completedWork.sibling;
            if (null !== completedWork) {
              workInProgress = completedWork;
              return;
            }
            workInProgress = completedWork = unitOfWork;
          } while (null !== completedWork);
          workInProgressRootExitStatus === RootInProgress && (workInProgressRootExitStatus = RootCompleted);
        }
        function unwindUnitOfWork(unitOfWork, skipSiblings) {
          do {
            var next = unwindWork(unitOfWork.alternate, unitOfWork);
            if (null !== next) {
              next.flags &= 32767;
              workInProgress = next;
              return;
            }
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              stopProfilerTimerIfRunningAndRecordIncompleteDuration(unitOfWork);
              next = unitOfWork.actualDuration;
              for (var child = unitOfWork.child; null !== child; )
                next += child.actualDuration, child = child.sibling;
              unitOfWork.actualDuration = next;
            }
            next = unitOfWork.return;
            null !== next && (next.flags |= 32768, next.subtreeFlags = 0, next.deletions = null);
            if (!skipSiblings && (unitOfWork = unitOfWork.sibling, null !== unitOfWork)) {
              workInProgress = unitOfWork;
              return;
            }
            workInProgress = unitOfWork = next;
          } while (null !== unitOfWork);
          workInProgressRootExitStatus = RootSuspendedAtTheShell;
          workInProgress = null;
        }
        function commitRoot(root3, finishedWork, lanes, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, spawnedLane, updatedLanes, suspendedRetryLanes) {
          root3.cancelPendingCommit = null;
          do
            flushPendingEffects();
          while (pendingEffectsStatus !== NO_PENDING_EFFECTS);
          ReactStrictModeWarnings.flushLegacyContextWarning();
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
            throw Error("Should not already be working.");
          null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markCommitStarted && injectedProfilingHooks.markCommitStarted(lanes);
          if (null === finishedWork) markCommitStopped();
          else {
            0 === lanes && console.error(
              "finishedLanes should not be empty during a commit. This is a bug in React."
            );
            if (finishedWork === root3.current)
              throw Error(
                "Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue."
              );
            didIncludeRenderPhaseUpdate = finishedWork.lanes | finishedWork.childLanes;
            didIncludeRenderPhaseUpdate |= concurrentlyUpdatedLanes;
            markRootFinished(
              root3,
              lanes,
              didIncludeRenderPhaseUpdate,
              spawnedLane,
              updatedLanes,
              suspendedRetryLanes
            );
            root3 === workInProgressRoot && (workInProgress = workInProgressRoot = null, workInProgressRootRenderLanes = 0);
            pendingFinishedWork = finishedWork;
            pendingEffectsRoot = root3;
            pendingEffectsLanes = lanes;
            pendingEffectsRemainingLanes = didIncludeRenderPhaseUpdate;
            pendingPassiveTransitions = transitions;
            pendingRecoverableErrors = recoverableErrors;
            0 !== (finishedWork.subtreeFlags & 10256) || 0 !== (finishedWork.flags & 10256) ? (root3.callbackNode = null, root3.callbackPriority = 0, scheduleCallback$1(NormalPriority$1, function() {
              flushPassiveEffects(true);
              return null;
            })) : (root3.callbackNode = null, root3.callbackPriority = 0);
            commitStartTime = now();
            recoverableErrors = 0 !== (finishedWork.flags & 13878);
            if (0 !== (finishedWork.subtreeFlags & 13878) || recoverableErrors) {
              recoverableErrors = ReactSharedInternals.T;
              ReactSharedInternals.T = null;
              transitions = ReactDOMSharedInternals.p;
              ReactDOMSharedInternals.p = DiscreteEventPriority;
              spawnedLane = executionContext;
              executionContext |= CommitContext;
              try {
                commitBeforeMutationEffects(root3, finishedWork, lanes);
              } finally {
                executionContext = spawnedLane, ReactDOMSharedInternals.p = transitions, ReactSharedInternals.T = recoverableErrors;
              }
            }
            pendingEffectsStatus = PENDING_MUTATION_PHASE;
            flushMutationEffects();
            flushLayoutEffects();
            flushSpawnedWork();
          }
        }
        function flushMutationEffects() {
          if (pendingEffectsStatus === PENDING_MUTATION_PHASE) {
            pendingEffectsStatus = NO_PENDING_EFFECTS;
            var root3 = pendingEffectsRoot, finishedWork = pendingFinishedWork, lanes = pendingEffectsLanes, rootMutationHasEffect = 0 !== (finishedWork.flags & 13878);
            if (0 !== (finishedWork.subtreeFlags & 13878) || rootMutationHasEffect) {
              rootMutationHasEffect = ReactSharedInternals.T;
              ReactSharedInternals.T = null;
              var previousPriority = ReactDOMSharedInternals.p;
              ReactDOMSharedInternals.p = DiscreteEventPriority;
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              try {
                inProgressLanes = lanes;
                inProgressRoot = root3;
                commitMutationEffectsOnFiber(finishedWork, root3);
                inProgressRoot = inProgressLanes = null;
                lanes = selectionInformation;
                var curFocusedElem = getActiveElementDeep(root3.containerInfo), priorFocusedElem = lanes.focusedElem, priorSelectionRange = lanes.selectionRange;
                if (curFocusedElem !== priorFocusedElem && priorFocusedElem && priorFocusedElem.ownerDocument && containsNode(
                  priorFocusedElem.ownerDocument.documentElement,
                  priorFocusedElem
                )) {
                  if (null !== priorSelectionRange && hasSelectionCapabilities(priorFocusedElem)) {
                    var start = priorSelectionRange.start, end = priorSelectionRange.end;
                    void 0 === end && (end = start);
                    if ("selectionStart" in priorFocusedElem)
                      priorFocusedElem.selectionStart = start, priorFocusedElem.selectionEnd = Math.min(
                        end,
                        priorFocusedElem.value.length
                      );
                    else {
                      var doc = priorFocusedElem.ownerDocument || document, win = doc && doc.defaultView || window;
                      if (win.getSelection) {
                        var selection = win.getSelection(), length2 = priorFocusedElem.textContent.length, start$jscomp$0 = Math.min(
                          priorSelectionRange.start,
                          length2
                        ), end$jscomp$0 = void 0 === priorSelectionRange.end ? start$jscomp$0 : Math.min(priorSelectionRange.end, length2);
                        !selection.extend && start$jscomp$0 > end$jscomp$0 && (curFocusedElem = end$jscomp$0, end$jscomp$0 = start$jscomp$0, start$jscomp$0 = curFocusedElem);
                        var startMarker = getNodeForCharacterOffset(
                          priorFocusedElem,
                          start$jscomp$0
                        ), endMarker = getNodeForCharacterOffset(
                          priorFocusedElem,
                          end$jscomp$0
                        );
                        if (startMarker && endMarker && (1 !== selection.rangeCount || selection.anchorNode !== startMarker.node || selection.anchorOffset !== startMarker.offset || selection.focusNode !== endMarker.node || selection.focusOffset !== endMarker.offset)) {
                          var range = doc.createRange();
                          range.setStart(startMarker.node, startMarker.offset);
                          selection.removeAllRanges();
                          start$jscomp$0 > end$jscomp$0 ? (selection.addRange(range), selection.extend(endMarker.node, endMarker.offset)) : (range.setEnd(endMarker.node, endMarker.offset), selection.addRange(range));
                        }
                      }
                    }
                  }
                  doc = [];
                  for (selection = priorFocusedElem; selection = selection.parentNode; )
                    1 === selection.nodeType && doc.push({
                      element: selection,
                      left: selection.scrollLeft,
                      top: selection.scrollTop
                    });
                  "function" === typeof priorFocusedElem.focus && priorFocusedElem.focus();
                  for (priorFocusedElem = 0; priorFocusedElem < doc.length; priorFocusedElem++) {
                    var info = doc[priorFocusedElem];
                    info.element.scrollLeft = info.left;
                    info.element.scrollTop = info.top;
                  }
                }
                _enabled = !!eventsEnabled;
                selectionInformation = eventsEnabled = null;
              } finally {
                executionContext = prevExecutionContext, ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = rootMutationHasEffect;
              }
            }
            root3.current = finishedWork;
            pendingEffectsStatus = PENDING_LAYOUT_PHASE;
          }
        }
        function flushLayoutEffects() {
          if (pendingEffectsStatus === PENDING_LAYOUT_PHASE) {
            pendingEffectsStatus = NO_PENDING_EFFECTS;
            var root3 = pendingEffectsRoot, finishedWork = pendingFinishedWork, lanes = pendingEffectsLanes, rootHasLayoutEffect = 0 !== (finishedWork.flags & 8772);
            if (0 !== (finishedWork.subtreeFlags & 8772) || rootHasLayoutEffect) {
              rootHasLayoutEffect = ReactSharedInternals.T;
              ReactSharedInternals.T = null;
              var previousPriority = ReactDOMSharedInternals.p;
              ReactDOMSharedInternals.p = DiscreteEventPriority;
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              try {
                null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markLayoutEffectsStarted && injectedProfilingHooks.markLayoutEffectsStarted(lanes), inProgressLanes = lanes, inProgressRoot = root3, commitLayoutEffectOnFiber(
                  root3,
                  finishedWork.alternate,
                  finishedWork
                ), inProgressRoot = inProgressLanes = null, null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markLayoutEffectsStopped && injectedProfilingHooks.markLayoutEffectsStopped();
              } finally {
                executionContext = prevExecutionContext, ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = rootHasLayoutEffect;
              }
            }
            pendingEffectsStatus = PENDING_AFTER_MUTATION_PHASE;
          }
        }
        function flushSpawnedWork() {
          if (pendingEffectsStatus === PENDING_SPAWNED_WORK || pendingEffectsStatus === PENDING_AFTER_MUTATION_PHASE) {
            pendingEffectsStatus = NO_PENDING_EFFECTS;
            requestPaint();
            var root3 = pendingEffectsRoot, finishedWork = pendingFinishedWork, lanes = pendingEffectsLanes, recoverableErrors = pendingRecoverableErrors, rootDidHavePassiveEffects = 0 !== (finishedWork.subtreeFlags & 10256) || 0 !== (finishedWork.flags & 10256);
            rootDidHavePassiveEffects ? pendingEffectsStatus = PENDING_PASSIVE_PHASE : (pendingEffectsStatus = NO_PENDING_EFFECTS, pendingFinishedWork = pendingEffectsRoot = null, releaseRootPooledCache(root3, root3.pendingLanes), nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null);
            var remainingLanes = root3.pendingLanes;
            0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
            rootDidHavePassiveEffects || commitDoubleInvokeEffectsInDEV(root3);
            rootDidHavePassiveEffects = lanesToEventPriority(lanes);
            finishedWork = finishedWork.stateNode;
            if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot)
              try {
                var didError = 128 === (finishedWork.current.flags & 128);
                switch (rootDidHavePassiveEffects) {
                  case DiscreteEventPriority:
                    var schedulerPriority = ImmediatePriority;
                    break;
                  case ContinuousEventPriority:
                    schedulerPriority = UserBlockingPriority;
                    break;
                  case DefaultEventPriority:
                    schedulerPriority = NormalPriority$1;
                    break;
                  case IdleEventPriority:
                    schedulerPriority = IdlePriority;
                    break;
                  default:
                    schedulerPriority = NormalPriority$1;
                }
                injectedHook.onCommitFiberRoot(
                  rendererID,
                  finishedWork,
                  schedulerPriority,
                  didError
                );
              } catch (err) {
                hasLoggedError || (hasLoggedError = true, console.error(
                  "React instrumentation encountered an error: %s",
                  err
                ));
              }
            isDevToolsPresent && root3.memoizedUpdaters.clear();
            onCommitRoot();
            if (null !== recoverableErrors) {
              didError = ReactSharedInternals.T;
              schedulerPriority = ReactDOMSharedInternals.p;
              ReactDOMSharedInternals.p = DiscreteEventPriority;
              ReactSharedInternals.T = null;
              try {
                var onRecoverableError = root3.onRecoverableError;
                for (finishedWork = 0; finishedWork < recoverableErrors.length; finishedWork++) {
                  var recoverableError = recoverableErrors[finishedWork], errorInfo = makeErrorInfo(recoverableError.stack);
                  runWithFiberInDEV(
                    recoverableError.source,
                    onRecoverableError,
                    recoverableError.value,
                    errorInfo
                  );
                }
              } finally {
                ReactSharedInternals.T = didError, ReactDOMSharedInternals.p = schedulerPriority;
              }
            }
            0 !== (pendingEffectsLanes & 3) && flushPendingEffects();
            ensureRootIsScheduled(root3);
            remainingLanes = root3.pendingLanes;
            0 !== (lanes & 4194090) && 0 !== (remainingLanes & 42) ? (nestedUpdateScheduled = true, root3 === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root3)) : nestedUpdateCount = 0;
            flushSyncWorkAcrossRoots_impl(0, false);
            markCommitStopped();
          }
        }
        function makeErrorInfo(componentStack) {
          componentStack = { componentStack };
          Object.defineProperty(componentStack, "digest", {
            get: function() {
              console.error(
                'You are accessing "digest" from the errorInfo object passed to onRecoverableError. This property is no longer provided as part of errorInfo but can be accessed as a property of the Error instance itself.'
              );
            }
          });
          return componentStack;
        }
        function releaseRootPooledCache(root3, remainingLanes) {
          0 === (root3.pooledCacheLanes &= remainingLanes) && (remainingLanes = root3.pooledCache, null != remainingLanes && (root3.pooledCache = null, releaseCache(remainingLanes)));
        }
        function flushPendingEffects(wasDelayedCommit) {
          flushMutationEffects();
          flushLayoutEffects();
          flushSpawnedWork();
          return flushPassiveEffects(wasDelayedCommit);
        }
        function flushPassiveEffects() {
          if (pendingEffectsStatus !== PENDING_PASSIVE_PHASE) return false;
          var root3 = pendingEffectsRoot, remainingLanes = pendingEffectsRemainingLanes;
          pendingEffectsRemainingLanes = 0;
          var renderPriority = lanesToEventPriority(pendingEffectsLanes), priority = 0 === DefaultEventPriority || DefaultEventPriority > renderPriority ? DefaultEventPriority : renderPriority;
          renderPriority = ReactSharedInternals.T;
          var previousPriority = ReactDOMSharedInternals.p;
          try {
            ReactDOMSharedInternals.p = priority;
            ReactSharedInternals.T = null;
            priority = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root$jscomp$0 = pendingEffectsRoot, lanes = pendingEffectsLanes;
            pendingEffectsStatus = NO_PENDING_EFFECTS;
            pendingFinishedWork = pendingEffectsRoot = null;
            pendingEffectsLanes = 0;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
              throw Error("Cannot flush passive effects while already rendering.");
            isFlushingPassiveEffects = true;
            didScheduleUpdateDuringPassiveEffects = false;
            null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markPassiveEffectsStarted && injectedProfilingHooks.markPassiveEffectsStarted(lanes);
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountOnFiber(root$jscomp$0.current);
            commitPassiveMountOnFiber(
              root$jscomp$0,
              root$jscomp$0.current,
              lanes,
              priority
            );
            null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markPassiveEffectsStopped && injectedProfilingHooks.markPassiveEffectsStopped();
            commitDoubleInvokeEffectsInDEV(root$jscomp$0);
            executionContext = prevExecutionContext;
            flushSyncWorkAcrossRoots_impl(0, false);
            didScheduleUpdateDuringPassiveEffects ? root$jscomp$0 === rootWithPassiveNestedUpdates ? nestedPassiveUpdateCount++ : (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = root$jscomp$0) : nestedPassiveUpdateCount = 0;
            didScheduleUpdateDuringPassiveEffects = isFlushingPassiveEffects = false;
            if (injectedHook && "function" === typeof injectedHook.onPostCommitFiberRoot)
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root$jscomp$0);
              } catch (err) {
                hasLoggedError || (hasLoggedError = true, console.error(
                  "React instrumentation encountered an error: %s",
                  err
                ));
              }
            var stateNode = root$jscomp$0.current.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
            return true;
          } finally {
            ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = renderPriority, releaseRootPooledCache(root3, remainingLanes);
          }
        }
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
          sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
          sourceFiber = createRootErrorUpdate(rootFiber.stateNode, sourceFiber, 2);
          rootFiber = enqueueUpdate(rootFiber, sourceFiber, 2);
          null !== rootFiber && (markRootUpdated$1(rootFiber, 2), ensureRootIsScheduled(rootFiber));
        }
        function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error) {
          isRunningInsertionEffect = false;
          if (3 === sourceFiber.tag)
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
          else {
            for (; null !== nearestMountedAncestor; ) {
              if (3 === nearestMountedAncestor.tag) {
                captureCommitPhaseErrorOnRoot(
                  nearestMountedAncestor,
                  sourceFiber,
                  error
                );
                return;
              }
              if (1 === nearestMountedAncestor.tag) {
                var instance = nearestMountedAncestor.stateNode;
                if ("function" === typeof nearestMountedAncestor.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
                  sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
                  error = createClassErrorUpdate(2);
                  instance = enqueueUpdate(nearestMountedAncestor, error, 2);
                  null !== instance && (initializeClassErrorUpdate(
                    error,
                    instance,
                    nearestMountedAncestor,
                    sourceFiber
                  ), markRootUpdated$1(instance, 2), ensureRootIsScheduled(instance));
                  return;
                }
              }
              nearestMountedAncestor = nearestMountedAncestor.return;
            }
            console.error(
              "Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Potential causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s",
              error
            );
          }
        }
        function attachPingListener(root3, wakeable, lanes) {
          var pingCache = root3.pingCache;
          if (null === pingCache) {
            pingCache = root3.pingCache = new PossiblyWeakMap();
            var threadIDs = /* @__PURE__ */ new Set();
            pingCache.set(wakeable, threadIDs);
          } else
            threadIDs = pingCache.get(wakeable), void 0 === threadIDs && (threadIDs = /* @__PURE__ */ new Set(), pingCache.set(wakeable, threadIDs));
          threadIDs.has(lanes) || (workInProgressRootDidAttachPingListener = true, threadIDs.add(lanes), pingCache = pingSuspendedRoot.bind(null, root3, wakeable, lanes), isDevToolsPresent && restorePendingUpdaters(root3, lanes), wakeable.then(pingCache, pingCache));
        }
        function pingSuspendedRoot(root3, wakeable, pingedLanes) {
          var pingCache = root3.pingCache;
          null !== pingCache && pingCache.delete(wakeable);
          root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
          root3.warmLanes &= ~pingedLanes;
          isConcurrentActEnvironment() && null === ReactSharedInternals.actQueue && console.error(
            "A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act"
          );
          workInProgressRoot === root3 && (workInProgressRootRenderLanes & pingedLanes) === pingedLanes && (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && (workInProgressRootRenderLanes & 62914560) === workInProgressRootRenderLanes && now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS ? (executionContext & RenderContext) === NoContext && prepareFreshStack(root3, 0) : workInProgressRootPingedLanes |= pingedLanes, workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes && (workInProgressSuspendedRetryLanes = 0));
          ensureRootIsScheduled(root3);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          0 === retryLane && (retryLane = claimNextRetryLane());
          boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
          null !== boundaryFiber && (markRootUpdated$1(boundaryFiber, retryLane), ensureRootIsScheduled(boundaryFiber));
        }
        function retryDehydratedSuspenseBoundary(boundaryFiber) {
          var suspenseState = boundaryFiber.memoizedState, retryLane = 0;
          null !== suspenseState && (retryLane = suspenseState.retryLane);
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = 0;
          switch (boundaryFiber.tag) {
            case 13:
              var retryCache = boundaryFiber.stateNode;
              var suspenseState = boundaryFiber.memoizedState;
              null !== suspenseState && (retryLane = suspenseState.retryLane);
              break;
            case 19:
              retryCache = boundaryFiber.stateNode;
              break;
            case 22:
              retryCache = boundaryFiber.stateNode._retryCache;
              break;
            default:
              throw Error(
                "Pinged unknown suspense boundary type. This is probably a bug in React."
              );
          }
          null !== retryCache && retryCache.delete(wakeable);
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function recursivelyTraverseAndDoubleInvokeEffectsInDEV(root$jscomp$0, parentFiber, isInStrictMode) {
          if (0 !== (parentFiber.subtreeFlags & 67117056))
            for (parentFiber = parentFiber.child; null !== parentFiber; ) {
              var root3 = root$jscomp$0, fiber = parentFiber, isStrictModeFiber = fiber.type === REACT_STRICT_MODE_TYPE;
              isStrictModeFiber = isInStrictMode || isStrictModeFiber;
              22 !== fiber.tag ? fiber.flags & 67108864 ? isStrictModeFiber && runWithFiberInDEV(
                fiber,
                doubleInvokeEffectsOnFiber,
                root3,
                fiber,
                (fiber.mode & NoStrictPassiveEffectsMode) === NoMode
              ) : recursivelyTraverseAndDoubleInvokeEffectsInDEV(
                root3,
                fiber,
                isStrictModeFiber
              ) : null === fiber.memoizedState && (isStrictModeFiber && fiber.flags & 8192 ? runWithFiberInDEV(
                fiber,
                doubleInvokeEffectsOnFiber,
                root3,
                fiber
              ) : fiber.subtreeFlags & 67108864 && runWithFiberInDEV(
                fiber,
                recursivelyTraverseAndDoubleInvokeEffectsInDEV,
                root3,
                fiber,
                isStrictModeFiber
              ));
              parentFiber = parentFiber.sibling;
            }
        }
        function doubleInvokeEffectsOnFiber(root3, fiber) {
          var shouldDoubleInvokePassiveEffects = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : true;
          setIsStrictModeForDevtools(true);
          try {
            disappearLayoutEffects(fiber), shouldDoubleInvokePassiveEffects && disconnectPassiveEffect(fiber), reappearLayoutEffects(root3, fiber.alternate, fiber, false), shouldDoubleInvokePassiveEffects && reconnectPassiveEffects(root3, fiber, 0, null, false, 0);
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        function commitDoubleInvokeEffectsInDEV(root3) {
          var doubleInvokeEffects = true;
          root3.current.mode & (StrictLegacyMode | StrictEffectsMode) || (doubleInvokeEffects = false);
          recursivelyTraverseAndDoubleInvokeEffectsInDEV(
            root3,
            root3.current,
            doubleInvokeEffects
          );
        }
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          if ((executionContext & RenderContext) === NoContext) {
            var tag2 = fiber.tag;
            if (3 === tag2 || 1 === tag2 || 0 === tag2 || 11 === tag2 || 14 === tag2 || 15 === tag2) {
              tag2 = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (null !== didWarnStateUpdateForNotYetMountedComponent) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(tag2)) return;
                didWarnStateUpdateForNotYetMountedComponent.add(tag2);
              } else didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([tag2]);
              runWithFiberInDEV(fiber, function() {
                console.error(
                  "Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead."
                );
              });
            }
          }
        }
        function restorePendingUpdaters(root3, lanes) {
          isDevToolsPresent && root3.memoizedUpdaters.forEach(function(schedulingFiber) {
            addFiberToLanesMap(root3, schedulingFiber, lanes);
          });
        }
        function scheduleCallback$1(priorityLevel, callback) {
          var actQueue = ReactSharedInternals.actQueue;
          return null !== actQueue ? (actQueue.push(callback), fakeActCallbackNode$1) : scheduleCallback$3(priorityLevel, callback);
        }
        function warnIfUpdatesNotWrappedWithActDEV(fiber) {
          isConcurrentActEnvironment() && null === ReactSharedInternals.actQueue && runWithFiberInDEV(fiber, function() {
            console.error(
              "An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act",
              getComponentNameFromFiber(fiber)
            );
          });
        }
        function ensureRootIsScheduled(root3) {
          root3 !== lastScheduledRoot && null === root3.next && (null === lastScheduledRoot ? firstScheduledRoot = lastScheduledRoot = root3 : lastScheduledRoot = lastScheduledRoot.next = root3);
          mightHavePendingSyncWork = true;
          null !== ReactSharedInternals.actQueue ? didScheduleMicrotask_act || (didScheduleMicrotask_act = true, scheduleImmediateRootScheduleTask()) : didScheduleMicrotask || (didScheduleMicrotask = true, scheduleImmediateRootScheduleTask());
        }
        function flushSyncWorkAcrossRoots_impl(syncTransitionLanes, onlyLegacy) {
          if (!isFlushingWork && mightHavePendingSyncWork) {
            isFlushingWork = true;
            do {
              var didPerformSomeWork = false;
              for (var root3 = firstScheduledRoot; null !== root3; ) {
                if (!onlyLegacy)
                  if (0 !== syncTransitionLanes) {
                    var pendingLanes = root3.pendingLanes;
                    if (0 === pendingLanes) var nextLanes = 0;
                    else {
                      var suspendedLanes = root3.suspendedLanes, pingedLanes = root3.pingedLanes;
                      nextLanes = (1 << 31 - clz32(42 | syncTransitionLanes) + 1) - 1;
                      nextLanes &= pendingLanes & ~(suspendedLanes & ~pingedLanes);
                      nextLanes = nextLanes & 201326741 ? nextLanes & 201326741 | 1 : nextLanes ? nextLanes | 2 : 0;
                    }
                    0 !== nextLanes && (didPerformSomeWork = true, performSyncWorkOnRoot(root3, nextLanes));
                  } else
                    nextLanes = workInProgressRootRenderLanes, nextLanes = getNextLanes(
                      root3,
                      root3 === workInProgressRoot ? nextLanes : 0,
                      null !== root3.cancelPendingCommit || root3.timeoutHandle !== noTimeout
                    ), 0 === (nextLanes & 3) || checkIfRootIsPrerendering(root3, nextLanes) || (didPerformSomeWork = true, performSyncWorkOnRoot(root3, nextLanes));
                root3 = root3.next;
              }
            } while (didPerformSomeWork);
            isFlushingWork = false;
          }
        }
        function processRootScheduleInImmediateTask() {
          processRootScheduleInMicrotask();
        }
        function processRootScheduleInMicrotask() {
          mightHavePendingSyncWork = didScheduleMicrotask_act = didScheduleMicrotask = false;
          var syncTransitionLanes = 0;
          0 !== currentEventTransitionLane && (shouldAttemptEagerTransition() && (syncTransitionLanes = currentEventTransitionLane), currentEventTransitionLane = 0);
          for (var currentTime = now$1(), prev = null, root3 = firstScheduledRoot; null !== root3; ) {
            var next = root3.next, nextLanes = scheduleTaskForRootDuringMicrotask(root3, currentTime);
            if (0 === nextLanes)
              root3.next = null, null === prev ? firstScheduledRoot = next : prev.next = next, null === next && (lastScheduledRoot = prev);
            else if (prev = root3, 0 !== syncTransitionLanes || 0 !== (nextLanes & 3))
              mightHavePendingSyncWork = true;
            root3 = next;
          }
          flushSyncWorkAcrossRoots_impl(syncTransitionLanes, false);
        }
        function scheduleTaskForRootDuringMicrotask(root3, currentTime) {
          for (var suspendedLanes = root3.suspendedLanes, pingedLanes = root3.pingedLanes, expirationTimes = root3.expirationTimes, lanes = root3.pendingLanes & -62914561; 0 < lanes; ) {
            var index = 31 - clz32(lanes), lane = 1 << index, expirationTime = expirationTimes[index];
            if (-1 === expirationTime) {
              if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes))
                expirationTimes[index] = computeExpirationTime(lane, currentTime);
            } else expirationTime <= currentTime && (root3.expiredLanes |= lane);
            lanes &= ~lane;
          }
          currentTime = workInProgressRoot;
          suspendedLanes = workInProgressRootRenderLanes;
          suspendedLanes = getNextLanes(
            root3,
            root3 === currentTime ? suspendedLanes : 0,
            null !== root3.cancelPendingCommit || root3.timeoutHandle !== noTimeout
          );
          pingedLanes = root3.callbackNode;
          if (0 === suspendedLanes || root3 === currentTime && (workInProgressSuspendedReason === SuspendedOnData || workInProgressSuspendedReason === SuspendedOnAction) || null !== root3.cancelPendingCommit)
            return null !== pingedLanes && cancelCallback(pingedLanes), root3.callbackNode = null, root3.callbackPriority = 0;
          if (0 === (suspendedLanes & 3) || checkIfRootIsPrerendering(root3, suspendedLanes)) {
            currentTime = suspendedLanes & -suspendedLanes;
            if (currentTime !== root3.callbackPriority || null !== ReactSharedInternals.actQueue && pingedLanes !== fakeActCallbackNode)
              cancelCallback(pingedLanes);
            else return currentTime;
            switch (lanesToEventPriority(suspendedLanes)) {
              case DiscreteEventPriority:
              case ContinuousEventPriority:
                suspendedLanes = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                suspendedLanes = NormalPriority$1;
                break;
              case IdleEventPriority:
                suspendedLanes = IdlePriority;
                break;
              default:
                suspendedLanes = NormalPriority$1;
            }
            pingedLanes = performWorkOnRootViaSchedulerTask.bind(null, root3);
            null !== ReactSharedInternals.actQueue ? (ReactSharedInternals.actQueue.push(pingedLanes), suspendedLanes = fakeActCallbackNode) : suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes);
            root3.callbackPriority = currentTime;
            root3.callbackNode = suspendedLanes;
            return currentTime;
          }
          null !== pingedLanes && cancelCallback(pingedLanes);
          root3.callbackPriority = 2;
          root3.callbackNode = null;
          return 2;
        }
        function performWorkOnRootViaSchedulerTask(root3, didTimeout) {
          nestedUpdateScheduled = currentUpdateIsNested = false;
          if (pendingEffectsStatus !== NO_PENDING_EFFECTS && pendingEffectsStatus !== PENDING_PASSIVE_PHASE)
            return root3.callbackNode = null, root3.callbackPriority = 0, null;
          var originalCallbackNode = root3.callbackNode;
          if (flushPendingEffects(true) && root3.callbackNode !== originalCallbackNode)
            return null;
          var workInProgressRootRenderLanes$jscomp$0 = workInProgressRootRenderLanes;
          workInProgressRootRenderLanes$jscomp$0 = getNextLanes(
            root3,
            root3 === workInProgressRoot ? workInProgressRootRenderLanes$jscomp$0 : 0,
            null !== root3.cancelPendingCommit || root3.timeoutHandle !== noTimeout
          );
          if (0 === workInProgressRootRenderLanes$jscomp$0) return null;
          performWorkOnRoot(
            root3,
            workInProgressRootRenderLanes$jscomp$0,
            didTimeout
          );
          scheduleTaskForRootDuringMicrotask(root3, now$1());
          return null != root3.callbackNode && root3.callbackNode === originalCallbackNode ? performWorkOnRootViaSchedulerTask.bind(null, root3) : null;
        }
        function performSyncWorkOnRoot(root3, lanes) {
          if (flushPendingEffects()) return null;
          currentUpdateIsNested = nestedUpdateScheduled;
          nestedUpdateScheduled = false;
          performWorkOnRoot(root3, lanes, true);
        }
        function cancelCallback(callbackNode) {
          callbackNode !== fakeActCallbackNode && null !== callbackNode && cancelCallback$1(callbackNode);
        }
        function scheduleImmediateRootScheduleTask() {
          null !== ReactSharedInternals.actQueue && ReactSharedInternals.actQueue.push(function() {
            processRootScheduleInMicrotask();
            return null;
          });
          scheduleMicrotask(function() {
            (executionContext & (RenderContext | CommitContext)) !== NoContext ? scheduleCallback$3(
              ImmediatePriority,
              processRootScheduleInImmediateTask
            ) : processRootScheduleInMicrotask();
          });
        }
        function requestTransitionLane() {
          0 === currentEventTransitionLane && (currentEventTransitionLane = claimNextTransitionLane());
          return currentEventTransitionLane;
        }
        function coerceFormActionProp(actionProp) {
          if (null == actionProp || "symbol" === typeof actionProp || "boolean" === typeof actionProp)
            return null;
          if ("function" === typeof actionProp) return actionProp;
          checkAttributeStringCoercion(actionProp, "action");
          return sanitizeURL("" + actionProp);
        }
        function createFormDataWithSubmitter(form, submitter) {
          var temp = submitter.ownerDocument.createElement("input");
          temp.name = submitter.name;
          temp.value = submitter.value;
          form.id && temp.setAttribute("form", form.id);
          submitter.parentNode.insertBefore(temp, submitter);
          form = new FormData(form);
          temp.parentNode.removeChild(temp);
          return form;
        }
        function extractEvents$1(dispatchQueue, domEventName, maybeTargetInst, nativeEvent, nativeEventTarget) {
          if ("submit" === domEventName && maybeTargetInst && maybeTargetInst.stateNode === nativeEventTarget) {
            var action = coerceFormActionProp(
              (nativeEventTarget[internalPropsKey] || null).action
            ), submitter = nativeEvent.submitter;
            submitter && (domEventName = (domEventName = submitter[internalPropsKey] || null) ? coerceFormActionProp(domEventName.formAction) : submitter.getAttribute("formAction"), null !== domEventName && (action = domEventName, submitter = null));
            var event = new SyntheticEvent(
              "action",
              "action",
              null,
              nativeEvent,
              nativeEventTarget
            );
            dispatchQueue.push({
              event,
              listeners: [
                {
                  instance: null,
                  listener: function() {
                    if (nativeEvent.defaultPrevented) {
                      if (0 !== currentEventTransitionLane) {
                        var formData = submitter ? createFormDataWithSubmitter(
                          nativeEventTarget,
                          submitter
                        ) : new FormData(nativeEventTarget), pendingState = {
                          pending: true,
                          data: formData,
                          method: nativeEventTarget.method,
                          action
                        };
                        Object.freeze(pendingState);
                        startHostTransition(
                          maybeTargetInst,
                          pendingState,
                          null,
                          formData
                        );
                      }
                    } else
                      "function" === typeof action && (event.preventDefault(), formData = submitter ? createFormDataWithSubmitter(
                        nativeEventTarget,
                        submitter
                      ) : new FormData(nativeEventTarget), pendingState = {
                        pending: true,
                        data: formData,
                        method: nativeEventTarget.method,
                        action
                      }, Object.freeze(pendingState), startHostTransition(
                        maybeTargetInst,
                        pendingState,
                        action,
                        formData
                      ));
                  },
                  currentTarget: nativeEventTarget
                }
              ]
            });
          }
        }
        function executeDispatch(event, listener, currentTarget) {
          event.currentTarget = currentTarget;
          try {
            listener(event);
          } catch (error) {
            reportGlobalError(error);
          }
          event.currentTarget = null;
        }
        function processDispatchQueue(dispatchQueue, eventSystemFlags) {
          eventSystemFlags = 0 !== (eventSystemFlags & 4);
          for (var i = 0; i < dispatchQueue.length; i++) {
            var _dispatchQueue$i = dispatchQueue[i];
            a: {
              var previousInstance = void 0, event = _dispatchQueue$i.event;
              _dispatchQueue$i = _dispatchQueue$i.listeners;
              if (eventSystemFlags)
                for (var i$jscomp$0 = _dispatchQueue$i.length - 1; 0 <= i$jscomp$0; i$jscomp$0--) {
                  var _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget;
                  _dispatchListeners$i = _dispatchListeners$i.listener;
                  if (instance !== previousInstance && event.isPropagationStopped())
                    break a;
                  null !== instance ? runWithFiberInDEV(
                    instance,
                    executeDispatch,
                    event,
                    _dispatchListeners$i,
                    currentTarget
                  ) : executeDispatch(event, _dispatchListeners$i, currentTarget);
                  previousInstance = instance;
                }
              else
                for (i$jscomp$0 = 0; i$jscomp$0 < _dispatchQueue$i.length; i$jscomp$0++) {
                  _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0];
                  instance = _dispatchListeners$i.instance;
                  currentTarget = _dispatchListeners$i.currentTarget;
                  _dispatchListeners$i = _dispatchListeners$i.listener;
                  if (instance !== previousInstance && event.isPropagationStopped())
                    break a;
                  null !== instance ? runWithFiberInDEV(
                    instance,
                    executeDispatch,
                    event,
                    _dispatchListeners$i,
                    currentTarget
                  ) : executeDispatch(event, _dispatchListeners$i, currentTarget);
                  previousInstance = instance;
                }
            }
          }
        }
        function listenToNonDelegatedEvent(domEventName, targetElement) {
          nonDelegatedEvents.has(domEventName) || console.error(
            'Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.',
            domEventName
          );
          var listenerSet = targetElement[internalEventHandlersKey];
          void 0 === listenerSet && (listenerSet = targetElement[internalEventHandlersKey] = /* @__PURE__ */ new Set());
          var listenerSetKey = domEventName + "__bubble";
          listenerSet.has(listenerSetKey) || (addTrappedEventListener(targetElement, domEventName, 2, false), listenerSet.add(listenerSetKey));
        }
        function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
          nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener && console.error(
            'Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.',
            domEventName
          );
          var eventSystemFlags = 0;
          isCapturePhaseListener && (eventSystemFlags |= 4);
          addTrappedEventListener(
            target,
            domEventName,
            eventSystemFlags,
            isCapturePhaseListener
          );
        }
        function listenToAllSupportedEvents(rootContainerElement) {
          if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
              "selectionchange" !== domEventName && (nonDelegatedEvents.has(domEventName) || listenToNativeEvent(domEventName, false, rootContainerElement), listenToNativeEvent(domEventName, true, rootContainerElement));
            });
            var ownerDocument = 9 === rootContainerElement.nodeType ? rootContainerElement : rootContainerElement.ownerDocument;
            null === ownerDocument || ownerDocument[listeningMarker] || (ownerDocument[listeningMarker] = true, listenToNativeEvent("selectionchange", false, ownerDocument));
          }
        }
        function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener) {
          switch (getEventPriority(domEventName)) {
            case DiscreteEventPriority:
              var listenerWrapper = dispatchDiscreteEvent;
              break;
            case ContinuousEventPriority:
              listenerWrapper = dispatchContinuousEvent;
              break;
            default:
              listenerWrapper = dispatchEvent;
          }
          eventSystemFlags = listenerWrapper.bind(
            null,
            domEventName,
            eventSystemFlags,
            targetContainer
          );
          listenerWrapper = void 0;
          !passiveBrowserEventsSupported || "touchstart" !== domEventName && "touchmove" !== domEventName && "wheel" !== domEventName || (listenerWrapper = true);
          isCapturePhaseListener ? void 0 !== listenerWrapper ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
            capture: true,
            passive: listenerWrapper
          }) : targetContainer.addEventListener(domEventName, eventSystemFlags, true) : void 0 !== listenerWrapper ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
            passive: listenerWrapper
          }) : targetContainer.addEventListener(
            domEventName,
            eventSystemFlags,
            false
          );
        }
        function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst$jscomp$0, targetContainer) {
          var ancestorInst = targetInst$jscomp$0;
          if (0 === (eventSystemFlags & 1) && 0 === (eventSystemFlags & 2) && null !== targetInst$jscomp$0)
            a: for (; ; ) {
              if (null === targetInst$jscomp$0) return;
              var nodeTag = targetInst$jscomp$0.tag;
              if (3 === nodeTag || 4 === nodeTag) {
                var container = targetInst$jscomp$0.stateNode.containerInfo;
                if (container === targetContainer) break;
                if (4 === nodeTag)
                  for (nodeTag = targetInst$jscomp$0.return; null !== nodeTag; ) {
                    var grandTag = nodeTag.tag;
                    if ((3 === grandTag || 4 === grandTag) && nodeTag.stateNode.containerInfo === targetContainer)
                      return;
                    nodeTag = nodeTag.return;
                  }
                for (; null !== container; ) {
                  nodeTag = getClosestInstanceFromNode(container);
                  if (null === nodeTag) return;
                  grandTag = nodeTag.tag;
                  if (5 === grandTag || 6 === grandTag || 26 === grandTag || 27 === grandTag) {
                    targetInst$jscomp$0 = ancestorInst = nodeTag;
                    continue a;
                  }
                  container = container.parentNode;
                }
              }
              targetInst$jscomp$0 = targetInst$jscomp$0.return;
            }
          batchedUpdates$1(function() {
            var targetInst = ancestorInst, nativeEventTarget = getEventTarget(nativeEvent), dispatchQueue = [];
            a: {
              var reactName = topLevelEventsToReactNames.get(domEventName);
              if (void 0 !== reactName) {
                var SyntheticEventCtor = SyntheticEvent, reactEventType = domEventName;
                switch (domEventName) {
                  case "keypress":
                    if (0 === getEventCharCode(nativeEvent)) break a;
                  case "keydown":
                  case "keyup":
                    SyntheticEventCtor = SyntheticKeyboardEvent;
                    break;
                  case "focusin":
                    reactEventType = "focus";
                    SyntheticEventCtor = SyntheticFocusEvent;
                    break;
                  case "focusout":
                    reactEventType = "blur";
                    SyntheticEventCtor = SyntheticFocusEvent;
                    break;
                  case "beforeblur":
                  case "afterblur":
                    SyntheticEventCtor = SyntheticFocusEvent;
                    break;
                  case "click":
                    if (2 === nativeEvent.button) break a;
                  case "auxclick":
                  case "dblclick":
                  case "mousedown":
                  case "mousemove":
                  case "mouseup":
                  case "mouseout":
                  case "mouseover":
                  case "contextmenu":
                    SyntheticEventCtor = SyntheticMouseEvent;
                    break;
                  case "drag":
                  case "dragend":
                  case "dragenter":
                  case "dragexit":
                  case "dragleave":
                  case "dragover":
                  case "dragstart":
                  case "drop":
                    SyntheticEventCtor = SyntheticDragEvent;
                    break;
                  case "touchcancel":
                  case "touchend":
                  case "touchmove":
                  case "touchstart":
                    SyntheticEventCtor = SyntheticTouchEvent;
                    break;
                  case ANIMATION_END:
                  case ANIMATION_ITERATION:
                  case ANIMATION_START:
                    SyntheticEventCtor = SyntheticAnimationEvent;
                    break;
                  case TRANSITION_END:
                    SyntheticEventCtor = SyntheticTransitionEvent;
                    break;
                  case "scroll":
                  case "scrollend":
                    SyntheticEventCtor = SyntheticUIEvent;
                    break;
                  case "wheel":
                    SyntheticEventCtor = SyntheticWheelEvent;
                    break;
                  case "copy":
                  case "cut":
                  case "paste":
                    SyntheticEventCtor = SyntheticClipboardEvent;
                    break;
                  case "gotpointercapture":
                  case "lostpointercapture":
                  case "pointercancel":
                  case "pointerdown":
                  case "pointermove":
                  case "pointerout":
                  case "pointerover":
                  case "pointerup":
                    SyntheticEventCtor = SyntheticPointerEvent;
                    break;
                  case "toggle":
                  case "beforetoggle":
                    SyntheticEventCtor = SyntheticToggleEvent;
                }
                var inCapturePhase = 0 !== (eventSystemFlags & 4), accumulateTargetOnly = !inCapturePhase && ("scroll" === domEventName || "scrollend" === domEventName), reactEventName = inCapturePhase ? null !== reactName ? reactName + "Capture" : null : reactName;
                inCapturePhase = [];
                for (var instance = targetInst, lastHostComponent; null !== instance; ) {
                  var _instance2 = instance;
                  lastHostComponent = _instance2.stateNode;
                  _instance2 = _instance2.tag;
                  5 !== _instance2 && 26 !== _instance2 && 27 !== _instance2 || null === lastHostComponent || null === reactEventName || (_instance2 = getListener(instance, reactEventName), null != _instance2 && inCapturePhase.push(
                    createDispatchListener(
                      instance,
                      _instance2,
                      lastHostComponent
                    )
                  ));
                  if (accumulateTargetOnly) break;
                  instance = instance.return;
                }
                0 < inCapturePhase.length && (reactName = new SyntheticEventCtor(
                  reactName,
                  reactEventType,
                  null,
                  nativeEvent,
                  nativeEventTarget
                ), dispatchQueue.push({
                  event: reactName,
                  listeners: inCapturePhase
                }));
              }
            }
            if (0 === (eventSystemFlags & 7)) {
              a: {
                reactName = "mouseover" === domEventName || "pointerover" === domEventName;
                SyntheticEventCtor = "mouseout" === domEventName || "pointerout" === domEventName;
                if (reactName && nativeEvent !== currentReplayingEvent && (reactEventType = nativeEvent.relatedTarget || nativeEvent.fromElement) && (getClosestInstanceFromNode(reactEventType) || reactEventType[internalContainerInstanceKey]))
                  break a;
                if (SyntheticEventCtor || reactName) {
                  reactName = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget : (reactName = nativeEventTarget.ownerDocument) ? reactName.defaultView || reactName.parentWindow : window;
                  if (SyntheticEventCtor) {
                    if (reactEventType = nativeEvent.relatedTarget || nativeEvent.toElement, SyntheticEventCtor = targetInst, reactEventType = reactEventType ? getClosestInstanceFromNode(reactEventType) : null, null !== reactEventType && (accumulateTargetOnly = getNearestMountedFiber(reactEventType), inCapturePhase = reactEventType.tag, reactEventType !== accumulateTargetOnly || 5 !== inCapturePhase && 27 !== inCapturePhase && 6 !== inCapturePhase))
                      reactEventType = null;
                  } else SyntheticEventCtor = null, reactEventType = targetInst;
                  if (SyntheticEventCtor !== reactEventType) {
                    inCapturePhase = SyntheticMouseEvent;
                    _instance2 = "onMouseLeave";
                    reactEventName = "onMouseEnter";
                    instance = "mouse";
                    if ("pointerout" === domEventName || "pointerover" === domEventName)
                      inCapturePhase = SyntheticPointerEvent, _instance2 = "onPointerLeave", reactEventName = "onPointerEnter", instance = "pointer";
                    accumulateTargetOnly = null == SyntheticEventCtor ? reactName : getNodeFromInstance(SyntheticEventCtor);
                    lastHostComponent = null == reactEventType ? reactName : getNodeFromInstance(reactEventType);
                    reactName = new inCapturePhase(
                      _instance2,
                      instance + "leave",
                      SyntheticEventCtor,
                      nativeEvent,
                      nativeEventTarget
                    );
                    reactName.target = accumulateTargetOnly;
                    reactName.relatedTarget = lastHostComponent;
                    _instance2 = null;
                    getClosestInstanceFromNode(nativeEventTarget) === targetInst && (inCapturePhase = new inCapturePhase(
                      reactEventName,
                      instance + "enter",
                      reactEventType,
                      nativeEvent,
                      nativeEventTarget
                    ), inCapturePhase.target = lastHostComponent, inCapturePhase.relatedTarget = accumulateTargetOnly, _instance2 = inCapturePhase);
                    accumulateTargetOnly = _instance2;
                    if (SyntheticEventCtor && reactEventType)
                      b: {
                        inCapturePhase = SyntheticEventCtor;
                        reactEventName = reactEventType;
                        instance = 0;
                        for (lastHostComponent = inCapturePhase; lastHostComponent; lastHostComponent = getParent(lastHostComponent))
                          instance++;
                        lastHostComponent = 0;
                        for (_instance2 = reactEventName; _instance2; _instance2 = getParent(_instance2))
                          lastHostComponent++;
                        for (; 0 < instance - lastHostComponent; )
                          inCapturePhase = getParent(inCapturePhase), instance--;
                        for (; 0 < lastHostComponent - instance; )
                          reactEventName = getParent(reactEventName), lastHostComponent--;
                        for (; instance--; ) {
                          if (inCapturePhase === reactEventName || null !== reactEventName && inCapturePhase === reactEventName.alternate)
                            break b;
                          inCapturePhase = getParent(inCapturePhase);
                          reactEventName = getParent(reactEventName);
                        }
                        inCapturePhase = null;
                      }
                    else inCapturePhase = null;
                    null !== SyntheticEventCtor && accumulateEnterLeaveListenersForEvent(
                      dispatchQueue,
                      reactName,
                      SyntheticEventCtor,
                      inCapturePhase,
                      false
                    );
                    null !== reactEventType && null !== accumulateTargetOnly && accumulateEnterLeaveListenersForEvent(
                      dispatchQueue,
                      accumulateTargetOnly,
                      reactEventType,
                      inCapturePhase,
                      true
                    );
                  }
                }
              }
              a: {
                reactName = targetInst ? getNodeFromInstance(targetInst) : window;
                SyntheticEventCtor = reactName.nodeName && reactName.nodeName.toLowerCase();
                if ("select" === SyntheticEventCtor || "input" === SyntheticEventCtor && "file" === reactName.type)
                  var getTargetInstFunc = getTargetInstForChangeEvent;
                else if (isTextInputElement(reactName))
                  if (isInputEventSupported)
                    getTargetInstFunc = getTargetInstForInputOrChangeEvent;
                  else {
                    getTargetInstFunc = getTargetInstForInputEventPolyfill;
                    var handleEventFunc = handleEventsForInputEventPolyfill;
                  }
                else
                  SyntheticEventCtor = reactName.nodeName, !SyntheticEventCtor || "input" !== SyntheticEventCtor.toLowerCase() || "checkbox" !== reactName.type && "radio" !== reactName.type ? targetInst && isCustomElement(targetInst.elementType) && (getTargetInstFunc = getTargetInstForChangeEvent) : getTargetInstFunc = getTargetInstForClickEvent;
                if (getTargetInstFunc && (getTargetInstFunc = getTargetInstFunc(domEventName, targetInst))) {
                  createAndAccumulateChangeEvent(
                    dispatchQueue,
                    getTargetInstFunc,
                    nativeEvent,
                    nativeEventTarget
                  );
                  break a;
                }
                handleEventFunc && handleEventFunc(domEventName, reactName, targetInst);
                "focusout" === domEventName && targetInst && "number" === reactName.type && null != targetInst.memoizedProps.value && setDefaultValue(reactName, "number", reactName.value);
              }
              handleEventFunc = targetInst ? getNodeFromInstance(targetInst) : window;
              switch (domEventName) {
                case "focusin":
                  if (isTextInputElement(handleEventFunc) || "true" === handleEventFunc.contentEditable)
                    activeElement = handleEventFunc, activeElementInst = targetInst, lastSelection = null;
                  break;
                case "focusout":
                  lastSelection = activeElementInst = activeElement = null;
                  break;
                case "mousedown":
                  mouseDown = true;
                  break;
                case "contextmenu":
                case "mouseup":
                case "dragend":
                  mouseDown = false;
                  constructSelectEvent(
                    dispatchQueue,
                    nativeEvent,
                    nativeEventTarget
                  );
                  break;
                case "selectionchange":
                  if (skipSelectionChangeEvent) break;
                case "keydown":
                case "keyup":
                  constructSelectEvent(
                    dispatchQueue,
                    nativeEvent,
                    nativeEventTarget
                  );
              }
              var fallbackData;
              if (canUseCompositionEvent)
                b: {
                  switch (domEventName) {
                    case "compositionstart":
                      var eventType = "onCompositionStart";
                      break b;
                    case "compositionend":
                      eventType = "onCompositionEnd";
                      break b;
                    case "compositionupdate":
                      eventType = "onCompositionUpdate";
                      break b;
                  }
                  eventType = void 0;
                }
              else
                isComposing ? isFallbackCompositionEnd(domEventName, nativeEvent) && (eventType = "onCompositionEnd") : "keydown" === domEventName && nativeEvent.keyCode === START_KEYCODE && (eventType = "onCompositionStart");
              eventType && (useFallbackCompositionData && "ko" !== nativeEvent.locale && (isComposing || "onCompositionStart" !== eventType ? "onCompositionEnd" === eventType && isComposing && (fallbackData = getData()) : (root2 = nativeEventTarget, startText = "value" in root2 ? root2.value : root2.textContent, isComposing = true)), handleEventFunc = accumulateTwoPhaseListeners(
                targetInst,
                eventType
              ), 0 < handleEventFunc.length && (eventType = new SyntheticCompositionEvent(
                eventType,
                domEventName,
                null,
                nativeEvent,
                nativeEventTarget
              ), dispatchQueue.push({
                event: eventType,
                listeners: handleEventFunc
              }), fallbackData ? eventType.data = fallbackData : (fallbackData = getDataFromCustomEvent(nativeEvent), null !== fallbackData && (eventType.data = fallbackData))));
              if (fallbackData = canUseTextInputEvent ? getNativeBeforeInputChars(domEventName, nativeEvent) : getFallbackBeforeInputChars(domEventName, nativeEvent))
                eventType = accumulateTwoPhaseListeners(
                  targetInst,
                  "onBeforeInput"
                ), 0 < eventType.length && (handleEventFunc = new SyntheticInputEvent(
                  "onBeforeInput",
                  "beforeinput",
                  null,
                  nativeEvent,
                  nativeEventTarget
                ), dispatchQueue.push({
                  event: handleEventFunc,
                  listeners: eventType
                }), handleEventFunc.data = fallbackData);
              extractEvents$1(
                dispatchQueue,
                domEventName,
                targetInst,
                nativeEvent,
                nativeEventTarget
              );
            }
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          });
        }
        function createDispatchListener(instance, listener, currentTarget) {
          return {
            instance,
            listener,
            currentTarget
          };
        }
        function accumulateTwoPhaseListeners(targetFiber, reactName) {
          for (var captureName = reactName + "Capture", listeners = []; null !== targetFiber; ) {
            var _instance3 = targetFiber, stateNode = _instance3.stateNode;
            _instance3 = _instance3.tag;
            5 !== _instance3 && 26 !== _instance3 && 27 !== _instance3 || null === stateNode || (_instance3 = getListener(targetFiber, captureName), null != _instance3 && listeners.unshift(
              createDispatchListener(targetFiber, _instance3, stateNode)
            ), _instance3 = getListener(targetFiber, reactName), null != _instance3 && listeners.push(
              createDispatchListener(targetFiber, _instance3, stateNode)
            ));
            if (3 === targetFiber.tag) return listeners;
            targetFiber = targetFiber.return;
          }
          return [];
        }
        function getParent(inst) {
          if (null === inst) return null;
          do
            inst = inst.return;
          while (inst && 5 !== inst.tag && 27 !== inst.tag);
          return inst ? inst : null;
        }
        function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
          for (var registrationName = event._reactName, listeners = []; null !== target && target !== common; ) {
            var _instance4 = target, alternate = _instance4.alternate, stateNode = _instance4.stateNode;
            _instance4 = _instance4.tag;
            if (null !== alternate && alternate === common) break;
            5 !== _instance4 && 26 !== _instance4 && 27 !== _instance4 || null === stateNode || (alternate = stateNode, inCapturePhase ? (stateNode = getListener(target, registrationName), null != stateNode && listeners.unshift(
              createDispatchListener(target, stateNode, alternate)
            )) : inCapturePhase || (stateNode = getListener(target, registrationName), null != stateNode && listeners.push(
              createDispatchListener(target, stateNode, alternate)
            )));
            target = target.return;
          }
          0 !== listeners.length && dispatchQueue.push({ event, listeners });
        }
        function validatePropertiesInDevelopment(type, props) {
          validateProperties$2(type, props);
          "input" !== type && "textarea" !== type && "select" !== type || null == props || null !== props.value || didWarnValueNull || (didWarnValueNull = true, "select" === type && props.multiple ? console.error(
            "`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.",
            type
          ) : console.error(
            "`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.",
            type
          ));
          var eventRegistry = {
            registrationNameDependencies,
            possibleRegistrationNames
          };
          isCustomElement(type) || "string" === typeof props.is || warnUnknownProperties(type, props, eventRegistry);
          props.contentEditable && !props.suppressContentEditableWarning && null != props.children && console.error(
            "A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."
          );
        }
        function warnForPropDifference(propName, serverValue, clientValue, serverDifferences) {
          serverValue !== clientValue && (clientValue = normalizeMarkupForTextOrAttribute(clientValue), normalizeMarkupForTextOrAttribute(serverValue) !== clientValue && (serverDifferences[propName] = serverValue));
        }
        function warnForExtraAttributes(domElement, attributeNames, serverDifferences) {
          attributeNames.forEach(function(attributeName) {
            serverDifferences[getPropNameFromAttributeName(attributeName)] = "style" === attributeName ? getStylesObjectFromElement(domElement) : domElement.getAttribute(attributeName);
          });
        }
        function warnForInvalidEventListener(registrationName, listener) {
          false === listener ? console.error(
            "Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.",
            registrationName,
            registrationName,
            registrationName
          ) : console.error(
            "Expected `%s` listener to be a function, instead got a value of `%s` type.",
            registrationName,
            typeof listener
          );
        }
        function normalizeHTML(parent, html) {
          parent = parent.namespaceURI === MATH_NAMESPACE || parent.namespaceURI === SVG_NAMESPACE ? parent.ownerDocument.createElementNS(
            parent.namespaceURI,
            parent.tagName
          ) : parent.ownerDocument.createElement(parent.tagName);
          parent.innerHTML = html;
          return parent.innerHTML;
        }
        function normalizeMarkupForTextOrAttribute(markup) {
          willCoercionThrow(markup) && (console.error(
            "The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before using it here.",
            typeName(markup)
          ), testStringCoercion(markup));
          return ("string" === typeof markup ? markup : "" + markup).replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
        }
        function checkForUnmatchedText(serverText, clientText) {
          clientText = normalizeMarkupForTextOrAttribute(clientText);
          return normalizeMarkupForTextOrAttribute(serverText) === clientText ? true : false;
        }
        function noop$1() {
        }
        function setProp(domElement, tag2, key, value, props, prevValue) {
          switch (key) {
            case "children":
              if ("string" === typeof value)
                validateTextNesting(value, tag2, false), "body" === tag2 || "textarea" === tag2 && "" === value || setTextContent(domElement, value);
              else if ("number" === typeof value || "bigint" === typeof value)
                validateTextNesting("" + value, tag2, false), "body" !== tag2 && setTextContent(domElement, "" + value);
              break;
            case "className":
              setValueForKnownAttribute(domElement, "class", value);
              break;
            case "tabIndex":
              setValueForKnownAttribute(domElement, "tabindex", value);
              break;
            case "dir":
            case "role":
            case "viewBox":
            case "width":
            case "height":
              setValueForKnownAttribute(domElement, key, value);
              break;
            case "style":
              setValueForStyles(domElement, value, prevValue);
              break;
            case "data":
              if ("object" !== tag2) {
                setValueForKnownAttribute(domElement, "data", value);
                break;
              }
            case "src":
            case "href":
              if ("" === value && ("a" !== tag2 || "href" !== key)) {
                "src" === key ? console.error(
                  'An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
                  key,
                  key
                ) : console.error(
                  'An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
                  key,
                  key
                );
                domElement.removeAttribute(key);
                break;
              }
              if (null == value || "function" === typeof value || "symbol" === typeof value || "boolean" === typeof value) {
                domElement.removeAttribute(key);
                break;
              }
              checkAttributeStringCoercion(value, key);
              value = sanitizeURL("" + value);
              domElement.setAttribute(key, value);
              break;
            case "action":
            case "formAction":
              null != value && ("form" === tag2 ? "formAction" === key ? console.error(
                "You can only pass the formAction prop to <input> or <button>. Use the action prop on <form>."
              ) : "function" === typeof value && (null == props.encType && null == props.method || didWarnFormActionMethod || (didWarnFormActionMethod = true, console.error(
                "Cannot specify a encType or method for a form that specifies a function as the action. React provides those automatically. They will get overridden."
              )), null == props.target || didWarnFormActionTarget || (didWarnFormActionTarget = true, console.error(
                "Cannot specify a target for a form that specifies a function as the action. The function will always be executed in the same window."
              ))) : "input" === tag2 || "button" === tag2 ? "action" === key ? console.error(
                "You can only pass the action prop to <form>. Use the formAction prop on <input> or <button>."
              ) : "input" !== tag2 || "submit" === props.type || "image" === props.type || didWarnFormActionType ? "button" !== tag2 || null == props.type || "submit" === props.type || didWarnFormActionType ? "function" === typeof value && (null == props.name || didWarnFormActionName || (didWarnFormActionName = true, console.error(
                'Cannot specify a "name" prop for a button that specifies a function as a formAction. React needs it to encode which action should be invoked. It will get overridden.'
              )), null == props.formEncType && null == props.formMethod || didWarnFormActionMethod || (didWarnFormActionMethod = true, console.error(
                "Cannot specify a formEncType or formMethod for a button that specifies a function as a formAction. React provides those automatically. They will get overridden."
              )), null == props.formTarget || didWarnFormActionTarget || (didWarnFormActionTarget = true, console.error(
                "Cannot specify a formTarget for a button that specifies a function as a formAction. The function will always be executed in the same window."
              ))) : (didWarnFormActionType = true, console.error(
                'A button can only specify a formAction along with type="submit" or no type.'
              )) : (didWarnFormActionType = true, console.error(
                'An input can only specify a formAction along with type="submit" or type="image".'
              )) : "action" === key ? console.error(
                "You can only pass the action prop to <form>."
              ) : console.error(
                "You can only pass the formAction prop to <input> or <button>."
              ));
              if ("function" === typeof value) {
                domElement.setAttribute(
                  key,
                  "javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')"
                );
                break;
              } else
                "function" === typeof prevValue && ("formAction" === key ? ("input" !== tag2 && setProp(domElement, tag2, "name", props.name, props, null), setProp(
                  domElement,
                  tag2,
                  "formEncType",
                  props.formEncType,
                  props,
                  null
                ), setProp(
                  domElement,
                  tag2,
                  "formMethod",
                  props.formMethod,
                  props,
                  null
                ), setProp(
                  domElement,
                  tag2,
                  "formTarget",
                  props.formTarget,
                  props,
                  null
                )) : (setProp(
                  domElement,
                  tag2,
                  "encType",
                  props.encType,
                  props,
                  null
                ), setProp(domElement, tag2, "method", props.method, props, null), setProp(
                  domElement,
                  tag2,
                  "target",
                  props.target,
                  props,
                  null
                )));
              if (null == value || "symbol" === typeof value || "boolean" === typeof value) {
                domElement.removeAttribute(key);
                break;
              }
              checkAttributeStringCoercion(value, key);
              value = sanitizeURL("" + value);
              domElement.setAttribute(key, value);
              break;
            case "onClick":
              null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), domElement.onclick = noop$1);
              break;
            case "onScroll":
              null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), listenToNonDelegatedEvent("scroll", domElement));
              break;
            case "onScrollEnd":
              null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), listenToNonDelegatedEvent("scrollend", domElement));
              break;
            case "dangerouslySetInnerHTML":
              if (null != value) {
                if ("object" !== typeof value || !("__html" in value))
                  throw Error(
                    "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information."
                  );
                key = value.__html;
                if (null != key) {
                  if (null != props.children)
                    throw Error(
                      "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
                    );
                  domElement.innerHTML = key;
                }
              }
              break;
            case "multiple":
              domElement.multiple = value && "function" !== typeof value && "symbol" !== typeof value;
              break;
            case "muted":
              domElement.muted = value && "function" !== typeof value && "symbol" !== typeof value;
              break;
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "defaultValue":
            case "defaultChecked":
            case "innerHTML":
            case "ref":
              break;
            case "autoFocus":
              break;
            case "xlinkHref":
              if (null == value || "function" === typeof value || "boolean" === typeof value || "symbol" === typeof value) {
                domElement.removeAttribute("xlink:href");
                break;
              }
              checkAttributeStringCoercion(value, key);
              key = sanitizeURL("" + value);
              domElement.setAttributeNS(xlinkNamespace, "xlink:href", key);
              break;
            case "contentEditable":
            case "spellCheck":
            case "draggable":
            case "value":
            case "autoReverse":
            case "externalResourcesRequired":
            case "focusable":
            case "preserveAlpha":
              null != value && "function" !== typeof value && "symbol" !== typeof value ? (checkAttributeStringCoercion(value, key), domElement.setAttribute(key, "" + value)) : domElement.removeAttribute(key);
              break;
            case "inert":
              "" !== value || didWarnForNewBooleanPropsWithEmptyValue[key] || (didWarnForNewBooleanPropsWithEmptyValue[key] = true, console.error(
                "Received an empty string for a boolean attribute `%s`. This will treat the attribute as if it were false. Either pass `false` to silence this warning, or pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.",
                key
              ));
            case "allowFullScreen":
            case "async":
            case "autoPlay":
            case "controls":
            case "default":
            case "defer":
            case "disabled":
            case "disablePictureInPicture":
            case "disableRemotePlayback":
            case "formNoValidate":
            case "hidden":
            case "loop":
            case "noModule":
            case "noValidate":
            case "open":
            case "playsInline":
            case "readOnly":
            case "required":
            case "reversed":
            case "scoped":
            case "seamless":
            case "itemScope":
              value && "function" !== typeof value && "symbol" !== typeof value ? domElement.setAttribute(key, "") : domElement.removeAttribute(key);
              break;
            case "capture":
            case "download":
              true === value ? domElement.setAttribute(key, "") : false !== value && null != value && "function" !== typeof value && "symbol" !== typeof value ? (checkAttributeStringCoercion(value, key), domElement.setAttribute(key, value)) : domElement.removeAttribute(key);
              break;
            case "cols":
            case "rows":
            case "size":
            case "span":
              null != value && "function" !== typeof value && "symbol" !== typeof value && !isNaN(value) && 1 <= value ? (checkAttributeStringCoercion(value, key), domElement.setAttribute(key, value)) : domElement.removeAttribute(key);
              break;
            case "rowSpan":
            case "start":
              null == value || "function" === typeof value || "symbol" === typeof value || isNaN(value) ? domElement.removeAttribute(key) : (checkAttributeStringCoercion(value, key), domElement.setAttribute(key, value));
              break;
            case "popover":
              listenToNonDelegatedEvent("beforetoggle", domElement);
              listenToNonDelegatedEvent("toggle", domElement);
              setValueForAttribute(domElement, "popover", value);
              break;
            case "xlinkActuate":
              setValueForNamespacedAttribute(
                domElement,
                xlinkNamespace,
                "xlink:actuate",
                value
              );
              break;
            case "xlinkArcrole":
              setValueForNamespacedAttribute(
                domElement,
                xlinkNamespace,
                "xlink:arcrole",
                value
              );
              break;
            case "xlinkRole":
              setValueForNamespacedAttribute(
                domElement,
                xlinkNamespace,
                "xlink:role",
                value
              );
              break;
            case "xlinkShow":
              setValueForNamespacedAttribute(
                domElement,
                xlinkNamespace,
                "xlink:show",
                value
              );
              break;
            case "xlinkTitle":
              setValueForNamespacedAttribute(
                domElement,
                xlinkNamespace,
                "xlink:title",
                value
              );
              break;
            case "xlinkType":
              setValueForNamespacedAttribute(
                domElement,
                xlinkNamespace,
                "xlink:type",
                value
              );
              break;
            case "xmlBase":
              setValueForNamespacedAttribute(
                domElement,
                xmlNamespace,
                "xml:base",
                value
              );
              break;
            case "xmlLang":
              setValueForNamespacedAttribute(
                domElement,
                xmlNamespace,
                "xml:lang",
                value
              );
              break;
            case "xmlSpace":
              setValueForNamespacedAttribute(
                domElement,
                xmlNamespace,
                "xml:space",
                value
              );
              break;
            case "is":
              null != prevValue && console.error(
                'Cannot update the "is" prop after it has been initialized.'
              );
              setValueForAttribute(domElement, "is", value);
              break;
            case "innerText":
            case "textContent":
              break;
            case "popoverTarget":
              didWarnPopoverTargetObject || null == value || "object" !== typeof value || (didWarnPopoverTargetObject = true, console.error(
                "The `popoverTarget` prop expects the ID of an Element as a string. Received %s instead.",
                value
              ));
            default:
              !(2 < key.length) || "o" !== key[0] && "O" !== key[0] || "n" !== key[1] && "N" !== key[1] ? (key = getAttributeAlias(key), setValueForAttribute(domElement, key, value)) : registrationNameDependencies.hasOwnProperty(key) && null != value && "function" !== typeof value && warnForInvalidEventListener(key, value);
          }
        }
        function setPropOnCustomElement(domElement, tag2, key, value, props, prevValue) {
          switch (key) {
            case "style":
              setValueForStyles(domElement, value, prevValue);
              break;
            case "dangerouslySetInnerHTML":
              if (null != value) {
                if ("object" !== typeof value || !("__html" in value))
                  throw Error(
                    "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information."
                  );
                key = value.__html;
                if (null != key) {
                  if (null != props.children)
                    throw Error(
                      "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
                    );
                  domElement.innerHTML = key;
                }
              }
              break;
            case "children":
              "string" === typeof value ? setTextContent(domElement, value) : ("number" === typeof value || "bigint" === typeof value) && setTextContent(domElement, "" + value);
              break;
            case "onScroll":
              null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), listenToNonDelegatedEvent("scroll", domElement));
              break;
            case "onScrollEnd":
              null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), listenToNonDelegatedEvent("scrollend", domElement));
              break;
            case "onClick":
              null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), domElement.onclick = noop$1);
              break;
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "innerHTML":
            case "ref":
              break;
            case "innerText":
            case "textContent":
              break;
            default:
              if (registrationNameDependencies.hasOwnProperty(key))
                null != value && "function" !== typeof value && warnForInvalidEventListener(key, value);
              else
                a: {
                  if ("o" === key[0] && "n" === key[1] && (props = key.endsWith("Capture"), tag2 = key.slice(2, props ? key.length - 7 : void 0), prevValue = domElement[internalPropsKey] || null, prevValue = null != prevValue ? prevValue[key] : null, "function" === typeof prevValue && domElement.removeEventListener(tag2, prevValue, props), "function" === typeof value)) {
                    "function" !== typeof prevValue && null !== prevValue && (key in domElement ? domElement[key] = null : domElement.hasAttribute(key) && domElement.removeAttribute(key));
                    domElement.addEventListener(tag2, value, props);
                    break a;
                  }
                  key in domElement ? domElement[key] = value : true === value ? domElement.setAttribute(key, "") : setValueForAttribute(domElement, key, value);
                }
          }
        }
        function setInitialProperties(domElement, tag2, props) {
          validatePropertiesInDevelopment(tag2, props);
          switch (tag2) {
            case "div":
            case "span":
            case "svg":
            case "path":
            case "a":
            case "g":
            case "p":
            case "li":
              break;
            case "img":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              var hasSrc = false, hasSrcSet = false, propKey;
              for (propKey in props)
                if (props.hasOwnProperty(propKey)) {
                  var propValue = props[propKey];
                  if (null != propValue)
                    switch (propKey) {
                      case "src":
                        hasSrc = true;
                        break;
                      case "srcSet":
                        hasSrcSet = true;
                        break;
                      case "children":
                      case "dangerouslySetInnerHTML":
                        throw Error(
                          tag2 + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                        );
                      default:
                        setProp(domElement, tag2, propKey, propValue, props, null);
                    }
                }
              hasSrcSet && setProp(domElement, tag2, "srcSet", props.srcSet, props, null);
              hasSrc && setProp(domElement, tag2, "src", props.src, props, null);
              return;
            case "input":
              checkControlledValueProps("input", props);
              listenToNonDelegatedEvent("invalid", domElement);
              var defaultValue = propKey = propValue = hasSrcSet = null, checked = null, defaultChecked = null;
              for (hasSrc in props)
                if (props.hasOwnProperty(hasSrc)) {
                  var _propValue = props[hasSrc];
                  if (null != _propValue)
                    switch (hasSrc) {
                      case "name":
                        hasSrcSet = _propValue;
                        break;
                      case "type":
                        propValue = _propValue;
                        break;
                      case "checked":
                        checked = _propValue;
                        break;
                      case "defaultChecked":
                        defaultChecked = _propValue;
                        break;
                      case "value":
                        propKey = _propValue;
                        break;
                      case "defaultValue":
                        defaultValue = _propValue;
                        break;
                      case "children":
                      case "dangerouslySetInnerHTML":
                        if (null != _propValue)
                          throw Error(
                            tag2 + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                          );
                        break;
                      default:
                        setProp(domElement, tag2, hasSrc, _propValue, props, null);
                    }
                }
              validateInputProps(domElement, props);
              initInput(
                domElement,
                propKey,
                defaultValue,
                checked,
                defaultChecked,
                propValue,
                hasSrcSet,
                false
              );
              track(domElement);
              return;
            case "select":
              checkControlledValueProps("select", props);
              listenToNonDelegatedEvent("invalid", domElement);
              hasSrc = propValue = propKey = null;
              for (hasSrcSet in props)
                if (props.hasOwnProperty(hasSrcSet) && (defaultValue = props[hasSrcSet], null != defaultValue))
                  switch (hasSrcSet) {
                    case "value":
                      propKey = defaultValue;
                      break;
                    case "defaultValue":
                      propValue = defaultValue;
                      break;
                    case "multiple":
                      hasSrc = defaultValue;
                    default:
                      setProp(
                        domElement,
                        tag2,
                        hasSrcSet,
                        defaultValue,
                        props,
                        null
                      );
                  }
              validateSelectProps(domElement, props);
              tag2 = propKey;
              props = propValue;
              domElement.multiple = !!hasSrc;
              null != tag2 ? updateOptions(domElement, !!hasSrc, tag2, false) : null != props && updateOptions(domElement, !!hasSrc, props, true);
              return;
            case "textarea":
              checkControlledValueProps("textarea", props);
              listenToNonDelegatedEvent("invalid", domElement);
              propKey = hasSrcSet = hasSrc = null;
              for (propValue in props)
                if (props.hasOwnProperty(propValue) && (defaultValue = props[propValue], null != defaultValue))
                  switch (propValue) {
                    case "value":
                      hasSrc = defaultValue;
                      break;
                    case "defaultValue":
                      hasSrcSet = defaultValue;
                      break;
                    case "children":
                      propKey = defaultValue;
                      break;
                    case "dangerouslySetInnerHTML":
                      if (null != defaultValue)
                        throw Error(
                          "`dangerouslySetInnerHTML` does not make sense on <textarea>."
                        );
                      break;
                    default:
                      setProp(
                        domElement,
                        tag2,
                        propValue,
                        defaultValue,
                        props,
                        null
                      );
                  }
              validateTextareaProps(domElement, props);
              initTextarea(domElement, hasSrc, hasSrcSet, propKey);
              track(domElement);
              return;
            case "option":
              validateOptionProps(domElement, props);
              for (checked in props)
                if (props.hasOwnProperty(checked) && (hasSrc = props[checked], null != hasSrc))
                  switch (checked) {
                    case "selected":
                      domElement.selected = hasSrc && "function" !== typeof hasSrc && "symbol" !== typeof hasSrc;
                      break;
                    default:
                      setProp(domElement, tag2, checked, hasSrc, props, null);
                  }
              return;
            case "dialog":
              listenToNonDelegatedEvent("beforetoggle", domElement);
              listenToNonDelegatedEvent("toggle", domElement);
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              break;
            case "iframe":
            case "object":
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "video":
            case "audio":
              for (hasSrc = 0; hasSrc < mediaEventTypes.length; hasSrc++)
                listenToNonDelegatedEvent(mediaEventTypes[hasSrc], domElement);
              break;
            case "image":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              break;
            case "embed":
            case "source":
            case "link":
              listenToNonDelegatedEvent("error", domElement), listenToNonDelegatedEvent("load", domElement);
            case "area":
            case "base":
            case "br":
            case "col":
            case "hr":
            case "keygen":
            case "meta":
            case "param":
            case "track":
            case "wbr":
            case "menuitem":
              for (defaultChecked in props)
                if (props.hasOwnProperty(defaultChecked) && (hasSrc = props[defaultChecked], null != hasSrc))
                  switch (defaultChecked) {
                    case "children":
                    case "dangerouslySetInnerHTML":
                      throw Error(
                        tag2 + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                      );
                    default:
                      setProp(domElement, tag2, defaultChecked, hasSrc, props, null);
                  }
              return;
            default:
              if (isCustomElement(tag2)) {
                for (_propValue in props)
                  props.hasOwnProperty(_propValue) && (hasSrc = props[_propValue], void 0 !== hasSrc && setPropOnCustomElement(
                    domElement,
                    tag2,
                    _propValue,
                    hasSrc,
                    props,
                    void 0
                  ));
                return;
              }
          }
          for (defaultValue in props)
            props.hasOwnProperty(defaultValue) && (hasSrc = props[defaultValue], null != hasSrc && setProp(domElement, tag2, defaultValue, hasSrc, props, null));
        }
        function updateProperties(domElement, tag2, lastProps, nextProps) {
          validatePropertiesInDevelopment(tag2, nextProps);
          switch (tag2) {
            case "div":
            case "span":
            case "svg":
            case "path":
            case "a":
            case "g":
            case "p":
            case "li":
              break;
            case "input":
              var name2 = null, type = null, value = null, defaultValue = null, lastDefaultValue = null, checked = null, defaultChecked = null;
              for (propKey in lastProps) {
                var lastProp = lastProps[propKey];
                if (lastProps.hasOwnProperty(propKey) && null != lastProp)
                  switch (propKey) {
                    case "checked":
                      break;
                    case "value":
                      break;
                    case "defaultValue":
                      lastDefaultValue = lastProp;
                    default:
                      nextProps.hasOwnProperty(propKey) || setProp(
                        domElement,
                        tag2,
                        propKey,
                        null,
                        nextProps,
                        lastProp
                      );
                  }
              }
              for (var _propKey8 in nextProps) {
                var propKey = nextProps[_propKey8];
                lastProp = lastProps[_propKey8];
                if (nextProps.hasOwnProperty(_propKey8) && (null != propKey || null != lastProp))
                  switch (_propKey8) {
                    case "type":
                      type = propKey;
                      break;
                    case "name":
                      name2 = propKey;
                      break;
                    case "checked":
                      checked = propKey;
                      break;
                    case "defaultChecked":
                      defaultChecked = propKey;
                      break;
                    case "value":
                      value = propKey;
                      break;
                    case "defaultValue":
                      defaultValue = propKey;
                      break;
                    case "children":
                    case "dangerouslySetInnerHTML":
                      if (null != propKey)
                        throw Error(
                          tag2 + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                        );
                      break;
                    default:
                      propKey !== lastProp && setProp(
                        domElement,
                        tag2,
                        _propKey8,
                        propKey,
                        nextProps,
                        lastProp
                      );
                  }
              }
              tag2 = "checkbox" === lastProps.type || "radio" === lastProps.type ? null != lastProps.checked : null != lastProps.value;
              nextProps = "checkbox" === nextProps.type || "radio" === nextProps.type ? null != nextProps.checked : null != nextProps.value;
              tag2 || !nextProps || didWarnUncontrolledToControlled || (console.error(
                "A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://react.dev/link/controlled-components"
              ), didWarnUncontrolledToControlled = true);
              !tag2 || nextProps || didWarnControlledToUncontrolled || (console.error(
                "A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://react.dev/link/controlled-components"
              ), didWarnControlledToUncontrolled = true);
              updateInput(
                domElement,
                value,
                defaultValue,
                lastDefaultValue,
                checked,
                defaultChecked,
                type,
                name2
              );
              return;
            case "select":
              propKey = value = defaultValue = _propKey8 = null;
              for (type in lastProps)
                if (lastDefaultValue = lastProps[type], lastProps.hasOwnProperty(type) && null != lastDefaultValue)
                  switch (type) {
                    case "value":
                      break;
                    case "multiple":
                      propKey = lastDefaultValue;
                    default:
                      nextProps.hasOwnProperty(type) || setProp(
                        domElement,
                        tag2,
                        type,
                        null,
                        nextProps,
                        lastDefaultValue
                      );
                  }
              for (name2 in nextProps)
                if (type = nextProps[name2], lastDefaultValue = lastProps[name2], nextProps.hasOwnProperty(name2) && (null != type || null != lastDefaultValue))
                  switch (name2) {
                    case "value":
                      _propKey8 = type;
                      break;
                    case "defaultValue":
                      defaultValue = type;
                      break;
                    case "multiple":
                      value = type;
                    default:
                      type !== lastDefaultValue && setProp(
                        domElement,
                        tag2,
                        name2,
                        type,
                        nextProps,
                        lastDefaultValue
                      );
                  }
              nextProps = defaultValue;
              tag2 = value;
              lastProps = propKey;
              null != _propKey8 ? updateOptions(domElement, !!tag2, _propKey8, false) : !!lastProps !== !!tag2 && (null != nextProps ? updateOptions(domElement, !!tag2, nextProps, true) : updateOptions(domElement, !!tag2, tag2 ? [] : "", false));
              return;
            case "textarea":
              propKey = _propKey8 = null;
              for (defaultValue in lastProps)
                if (name2 = lastProps[defaultValue], lastProps.hasOwnProperty(defaultValue) && null != name2 && !nextProps.hasOwnProperty(defaultValue))
                  switch (defaultValue) {
                    case "value":
                      break;
                    case "children":
                      break;
                    default:
                      setProp(domElement, tag2, defaultValue, null, nextProps, name2);
                  }
              for (value in nextProps)
                if (name2 = nextProps[value], type = lastProps[value], nextProps.hasOwnProperty(value) && (null != name2 || null != type))
                  switch (value) {
                    case "value":
                      _propKey8 = name2;
                      break;
                    case "defaultValue":
                      propKey = name2;
                      break;
                    case "children":
                      break;
                    case "dangerouslySetInnerHTML":
                      if (null != name2)
                        throw Error(
                          "`dangerouslySetInnerHTML` does not make sense on <textarea>."
                        );
                      break;
                    default:
                      name2 !== type && setProp(domElement, tag2, value, name2, nextProps, type);
                  }
              updateTextarea(domElement, _propKey8, propKey);
              return;
            case "option":
              for (var _propKey13 in lastProps)
                if (_propKey8 = lastProps[_propKey13], lastProps.hasOwnProperty(_propKey13) && null != _propKey8 && !nextProps.hasOwnProperty(_propKey13))
                  switch (_propKey13) {
                    case "selected":
                      domElement.selected = false;
                      break;
                    default:
                      setProp(
                        domElement,
                        tag2,
                        _propKey13,
                        null,
                        nextProps,
                        _propKey8
                      );
                  }
              for (lastDefaultValue in nextProps)
                if (_propKey8 = nextProps[lastDefaultValue], propKey = lastProps[lastDefaultValue], nextProps.hasOwnProperty(lastDefaultValue) && _propKey8 !== propKey && (null != _propKey8 || null != propKey))
                  switch (lastDefaultValue) {
                    case "selected":
                      domElement.selected = _propKey8 && "function" !== typeof _propKey8 && "symbol" !== typeof _propKey8;
                      break;
                    default:
                      setProp(
                        domElement,
                        tag2,
                        lastDefaultValue,
                        _propKey8,
                        nextProps,
                        propKey
                      );
                  }
              return;
            case "img":
            case "link":
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "keygen":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr":
            case "menuitem":
              for (var _propKey15 in lastProps)
                _propKey8 = lastProps[_propKey15], lastProps.hasOwnProperty(_propKey15) && null != _propKey8 && !nextProps.hasOwnProperty(_propKey15) && setProp(
                  domElement,
                  tag2,
                  _propKey15,
                  null,
                  nextProps,
                  _propKey8
                );
              for (checked in nextProps)
                if (_propKey8 = nextProps[checked], propKey = lastProps[checked], nextProps.hasOwnProperty(checked) && _propKey8 !== propKey && (null != _propKey8 || null != propKey))
                  switch (checked) {
                    case "children":
                    case "dangerouslySetInnerHTML":
                      if (null != _propKey8)
                        throw Error(
                          tag2 + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                        );
                      break;
                    default:
                      setProp(
                        domElement,
                        tag2,
                        checked,
                        _propKey8,
                        nextProps,
                        propKey
                      );
                  }
              return;
            default:
              if (isCustomElement(tag2)) {
                for (var _propKey17 in lastProps)
                  _propKey8 = lastProps[_propKey17], lastProps.hasOwnProperty(_propKey17) && void 0 !== _propKey8 && !nextProps.hasOwnProperty(_propKey17) && setPropOnCustomElement(
                    domElement,
                    tag2,
                    _propKey17,
                    void 0,
                    nextProps,
                    _propKey8
                  );
                for (defaultChecked in nextProps)
                  _propKey8 = nextProps[defaultChecked], propKey = lastProps[defaultChecked], !nextProps.hasOwnProperty(defaultChecked) || _propKey8 === propKey || void 0 === _propKey8 && void 0 === propKey || setPropOnCustomElement(
                    domElement,
                    tag2,
                    defaultChecked,
                    _propKey8,
                    nextProps,
                    propKey
                  );
                return;
              }
          }
          for (var _propKey19 in lastProps)
            _propKey8 = lastProps[_propKey19], lastProps.hasOwnProperty(_propKey19) && null != _propKey8 && !nextProps.hasOwnProperty(_propKey19) && setProp(domElement, tag2, _propKey19, null, nextProps, _propKey8);
          for (lastProp in nextProps)
            _propKey8 = nextProps[lastProp], propKey = lastProps[lastProp], !nextProps.hasOwnProperty(lastProp) || _propKey8 === propKey || null == _propKey8 && null == propKey || setProp(domElement, tag2, lastProp, _propKey8, nextProps, propKey);
        }
        function getPropNameFromAttributeName(attrName) {
          switch (attrName) {
            case "class":
              return "className";
            case "for":
              return "htmlFor";
            default:
              return attrName;
          }
        }
        function getStylesObjectFromElement(domElement) {
          var serverValueInObjectForm = {};
          domElement = domElement.style;
          for (var i = 0; i < domElement.length; i++) {
            var styleName = domElement[i];
            serverValueInObjectForm[styleName] = domElement.getPropertyValue(styleName);
          }
          return serverValueInObjectForm;
        }
        function diffHydratedStyles(domElement, value$jscomp$0, serverDifferences) {
          if (null != value$jscomp$0 && "object" !== typeof value$jscomp$0)
            console.error(
              "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."
            );
          else {
            var clientValue;
            var delimiter = clientValue = "", styleName;
            for (styleName in value$jscomp$0)
              if (value$jscomp$0.hasOwnProperty(styleName)) {
                var value = value$jscomp$0[styleName];
                null != value && "boolean" !== typeof value && "" !== value && (0 === styleName.indexOf("--") ? (checkCSSPropertyStringCoercion(value, styleName), clientValue += delimiter + styleName + ":" + ("" + value).trim()) : "number" !== typeof value || 0 === value || unitlessNumbers.has(styleName) ? (checkCSSPropertyStringCoercion(value, styleName), clientValue += delimiter + styleName.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-") + ":" + ("" + value).trim()) : clientValue += delimiter + styleName.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-") + ":" + value + "px", delimiter = ";");
              }
            clientValue = clientValue || null;
            value$jscomp$0 = domElement.getAttribute("style");
            value$jscomp$0 !== clientValue && (clientValue = normalizeMarkupForTextOrAttribute(clientValue), normalizeMarkupForTextOrAttribute(value$jscomp$0) !== clientValue && (serverDifferences.style = getStylesObjectFromElement(domElement)));
          }
        }
        function hydrateAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
          extraAttributes.delete(attributeName);
          domElement = domElement.getAttribute(attributeName);
          if (null === domElement)
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
              case "boolean":
                return;
            }
          else if (null != value)
            switch (typeof value) {
              case "function":
              case "symbol":
              case "boolean":
                break;
              default:
                if (checkAttributeStringCoercion(value, propKey), domElement === "" + value)
                  return;
            }
          warnForPropDifference(propKey, domElement, value, serverDifferences);
        }
        function hydrateBooleanAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
          extraAttributes.delete(attributeName);
          domElement = domElement.getAttribute(attributeName);
          if (null === domElement) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
            }
            if (!value) return;
          } else
            switch (typeof value) {
              case "function":
              case "symbol":
                break;
              default:
                if (value) return;
            }
          warnForPropDifference(propKey, domElement, value, serverDifferences);
        }
        function hydrateBooleanishAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
          extraAttributes.delete(attributeName);
          domElement = domElement.getAttribute(attributeName);
          if (null === domElement)
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
                return;
            }
          else if (null != value)
            switch (typeof value) {
              case "function":
              case "symbol":
                break;
              default:
                if (checkAttributeStringCoercion(value, attributeName), domElement === "" + value)
                  return;
            }
          warnForPropDifference(propKey, domElement, value, serverDifferences);
        }
        function hydrateNumericAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
          extraAttributes.delete(attributeName);
          domElement = domElement.getAttribute(attributeName);
          if (null === domElement)
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
              case "boolean":
                return;
              default:
                if (isNaN(value)) return;
            }
          else if (null != value)
            switch (typeof value) {
              case "function":
              case "symbol":
              case "boolean":
                break;
              default:
                if (!isNaN(value) && (checkAttributeStringCoercion(value, propKey), domElement === "" + value))
                  return;
            }
          warnForPropDifference(propKey, domElement, value, serverDifferences);
        }
        function hydrateSanitizedAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
          extraAttributes.delete(attributeName);
          domElement = domElement.getAttribute(attributeName);
          if (null === domElement)
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
              case "boolean":
                return;
            }
          else if (null != value)
            switch (typeof value) {
              case "function":
              case "symbol":
              case "boolean":
                break;
              default:
                if (checkAttributeStringCoercion(value, propKey), attributeName = sanitizeURL("" + value), domElement === attributeName)
                  return;
            }
          warnForPropDifference(propKey, domElement, value, serverDifferences);
        }
        function diffHydratedProperties(domElement, tag2, props, hostContext) {
          for (var serverDifferences = {}, extraAttributes = /* @__PURE__ */ new Set(), attributes = domElement.attributes, i = 0; i < attributes.length; i++)
            switch (attributes[i].name.toLowerCase()) {
              case "value":
                break;
              case "checked":
                break;
              case "selected":
                break;
              default:
                extraAttributes.add(attributes[i].name);
            }
          if (isCustomElement(tag2))
            for (var propKey in props) {
              if (props.hasOwnProperty(propKey)) {
                var value = props[propKey];
                if (null != value) {
                  if (registrationNameDependencies.hasOwnProperty(propKey))
                    "function" !== typeof value && warnForInvalidEventListener(propKey, value);
                  else if (true !== props.suppressHydrationWarning)
                    switch (propKey) {
                      case "children":
                        "string" !== typeof value && "number" !== typeof value || warnForPropDifference(
                          "children",
                          domElement.textContent,
                          value,
                          serverDifferences
                        );
                        continue;
                      case "suppressContentEditableWarning":
                      case "suppressHydrationWarning":
                      case "defaultValue":
                      case "defaultChecked":
                      case "innerHTML":
                      case "ref":
                        continue;
                      case "dangerouslySetInnerHTML":
                        attributes = domElement.innerHTML;
                        value = value ? value.__html : void 0;
                        null != value && (value = normalizeHTML(domElement, value), warnForPropDifference(
                          propKey,
                          attributes,
                          value,
                          serverDifferences
                        ));
                        continue;
                      case "style":
                        extraAttributes.delete(propKey);
                        diffHydratedStyles(domElement, value, serverDifferences);
                        continue;
                      case "offsetParent":
                      case "offsetTop":
                      case "offsetLeft":
                      case "offsetWidth":
                      case "offsetHeight":
                      case "isContentEditable":
                      case "outerText":
                      case "outerHTML":
                        extraAttributes.delete(propKey.toLowerCase());
                        console.error(
                          "Assignment to read-only property will result in a no-op: `%s`",
                          propKey
                        );
                        continue;
                      case "className":
                        extraAttributes.delete("class");
                        attributes = getValueForAttributeOnCustomComponent(
                          domElement,
                          "class",
                          value
                        );
                        warnForPropDifference(
                          "className",
                          attributes,
                          value,
                          serverDifferences
                        );
                        continue;
                      default:
                        hostContext.context === HostContextNamespaceNone && "svg" !== tag2 && "math" !== tag2 ? extraAttributes.delete(propKey.toLowerCase()) : extraAttributes.delete(propKey), attributes = getValueForAttributeOnCustomComponent(
                          domElement,
                          propKey,
                          value
                        ), warnForPropDifference(
                          propKey,
                          attributes,
                          value,
                          serverDifferences
                        );
                    }
                }
              }
            }
          else
            for (value in props)
              if (props.hasOwnProperty(value) && (propKey = props[value], null != propKey)) {
                if (registrationNameDependencies.hasOwnProperty(value))
                  "function" !== typeof propKey && warnForInvalidEventListener(value, propKey);
                else if (true !== props.suppressHydrationWarning)
                  switch (value) {
                    case "children":
                      "string" !== typeof propKey && "number" !== typeof propKey || warnForPropDifference(
                        "children",
                        domElement.textContent,
                        propKey,
                        serverDifferences
                      );
                      continue;
                    case "suppressContentEditableWarning":
                    case "suppressHydrationWarning":
                    case "value":
                    case "checked":
                    case "selected":
                    case "defaultValue":
                    case "defaultChecked":
                    case "innerHTML":
                    case "ref":
                      continue;
                    case "dangerouslySetInnerHTML":
                      attributes = domElement.innerHTML;
                      propKey = propKey ? propKey.__html : void 0;
                      null != propKey && (propKey = normalizeHTML(domElement, propKey), attributes !== propKey && (serverDifferences[value] = { __html: attributes }));
                      continue;
                    case "className":
                      hydrateAttribute(
                        domElement,
                        value,
                        "class",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "tabIndex":
                      hydrateAttribute(
                        domElement,
                        value,
                        "tabindex",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "style":
                      extraAttributes.delete(value);
                      diffHydratedStyles(domElement, propKey, serverDifferences);
                      continue;
                    case "multiple":
                      extraAttributes.delete(value);
                      warnForPropDifference(
                        value,
                        domElement.multiple,
                        propKey,
                        serverDifferences
                      );
                      continue;
                    case "muted":
                      extraAttributes.delete(value);
                      warnForPropDifference(
                        value,
                        domElement.muted,
                        propKey,
                        serverDifferences
                      );
                      continue;
                    case "autoFocus":
                      extraAttributes.delete("autofocus");
                      warnForPropDifference(
                        value,
                        domElement.autofocus,
                        propKey,
                        serverDifferences
                      );
                      continue;
                    case "data":
                      if ("object" !== tag2) {
                        extraAttributes.delete(value);
                        attributes = domElement.getAttribute("data");
                        warnForPropDifference(
                          value,
                          attributes,
                          propKey,
                          serverDifferences
                        );
                        continue;
                      }
                    case "src":
                    case "href":
                      if (!("" !== propKey || "a" === tag2 && "href" === value || "object" === tag2 && "data" === value)) {
                        "src" === value ? console.error(
                          'An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
                          value,
                          value
                        ) : console.error(
                          'An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
                          value,
                          value
                        );
                        continue;
                      }
                      hydrateSanitizedAttribute(
                        domElement,
                        value,
                        value,
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "action":
                    case "formAction":
                      attributes = domElement.getAttribute(value);
                      if ("function" === typeof propKey) {
                        extraAttributes.delete(value.toLowerCase());
                        "formAction" === value ? (extraAttributes.delete("name"), extraAttributes.delete("formenctype"), extraAttributes.delete("formmethod"), extraAttributes.delete("formtarget")) : (extraAttributes.delete("enctype"), extraAttributes.delete("method"), extraAttributes.delete("target"));
                        continue;
                      } else if (attributes === EXPECTED_FORM_ACTION_URL) {
                        extraAttributes.delete(value.toLowerCase());
                        warnForPropDifference(
                          value,
                          "function",
                          propKey,
                          serverDifferences
                        );
                        continue;
                      }
                      hydrateSanitizedAttribute(
                        domElement,
                        value,
                        value.toLowerCase(),
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xlinkHref":
                      hydrateSanitizedAttribute(
                        domElement,
                        value,
                        "xlink:href",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "contentEditable":
                      hydrateBooleanishAttribute(
                        domElement,
                        value,
                        "contenteditable",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "spellCheck":
                      hydrateBooleanishAttribute(
                        domElement,
                        value,
                        "spellcheck",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "draggable":
                    case "autoReverse":
                    case "externalResourcesRequired":
                    case "focusable":
                    case "preserveAlpha":
                      hydrateBooleanishAttribute(
                        domElement,
                        value,
                        value,
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "allowFullScreen":
                    case "async":
                    case "autoPlay":
                    case "controls":
                    case "default":
                    case "defer":
                    case "disabled":
                    case "disablePictureInPicture":
                    case "disableRemotePlayback":
                    case "formNoValidate":
                    case "hidden":
                    case "loop":
                    case "noModule":
                    case "noValidate":
                    case "open":
                    case "playsInline":
                    case "readOnly":
                    case "required":
                    case "reversed":
                    case "scoped":
                    case "seamless":
                    case "itemScope":
                      hydrateBooleanAttribute(
                        domElement,
                        value,
                        value.toLowerCase(),
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "capture":
                    case "download":
                      a: {
                        i = domElement;
                        var attributeName = attributes = value, serverDifferences$jscomp$0 = serverDifferences;
                        extraAttributes.delete(attributeName);
                        i = i.getAttribute(attributeName);
                        if (null === i)
                          switch (typeof propKey) {
                            case "undefined":
                            case "function":
                            case "symbol":
                              break a;
                            default:
                              if (false === propKey) break a;
                          }
                        else if (null != propKey)
                          switch (typeof propKey) {
                            case "function":
                            case "symbol":
                              break;
                            case "boolean":
                              if (true === propKey && "" === i) break a;
                              break;
                            default:
                              if (checkAttributeStringCoercion(propKey, attributes), i === "" + propKey)
                                break a;
                          }
                        warnForPropDifference(
                          attributes,
                          i,
                          propKey,
                          serverDifferences$jscomp$0
                        );
                      }
                      continue;
                    case "cols":
                    case "rows":
                    case "size":
                    case "span":
                      a: {
                        i = domElement;
                        attributeName = attributes = value;
                        serverDifferences$jscomp$0 = serverDifferences;
                        extraAttributes.delete(attributeName);
                        i = i.getAttribute(attributeName);
                        if (null === i)
                          switch (typeof propKey) {
                            case "undefined":
                            case "function":
                            case "symbol":
                            case "boolean":
                              break a;
                            default:
                              if (isNaN(propKey) || 1 > propKey) break a;
                          }
                        else if (null != propKey)
                          switch (typeof propKey) {
                            case "function":
                            case "symbol":
                            case "boolean":
                              break;
                            default:
                              if (!(isNaN(propKey) || 1 > propKey) && (checkAttributeStringCoercion(propKey, attributes), i === "" + propKey))
                                break a;
                          }
                        warnForPropDifference(
                          attributes,
                          i,
                          propKey,
                          serverDifferences$jscomp$0
                        );
                      }
                      continue;
                    case "rowSpan":
                      hydrateNumericAttribute(
                        domElement,
                        value,
                        "rowspan",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "start":
                      hydrateNumericAttribute(
                        domElement,
                        value,
                        value,
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xHeight":
                      hydrateAttribute(
                        domElement,
                        value,
                        "x-height",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xlinkActuate":
                      hydrateAttribute(
                        domElement,
                        value,
                        "xlink:actuate",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xlinkArcrole":
                      hydrateAttribute(
                        domElement,
                        value,
                        "xlink:arcrole",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xlinkRole":
                      hydrateAttribute(
                        domElement,
                        value,
                        "xlink:role",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xlinkShow":
                      hydrateAttribute(
                        domElement,
                        value,
                        "xlink:show",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xlinkTitle":
                      hydrateAttribute(
                        domElement,
                        value,
                        "xlink:title",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xlinkType":
                      hydrateAttribute(
                        domElement,
                        value,
                        "xlink:type",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xmlBase":
                      hydrateAttribute(
                        domElement,
                        value,
                        "xml:base",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xmlLang":
                      hydrateAttribute(
                        domElement,
                        value,
                        "xml:lang",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "xmlSpace":
                      hydrateAttribute(
                        domElement,
                        value,
                        "xml:space",
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    case "inert":
                      "" !== propKey || didWarnForNewBooleanPropsWithEmptyValue[value] || (didWarnForNewBooleanPropsWithEmptyValue[value] = true, console.error(
                        "Received an empty string for a boolean attribute `%s`. This will treat the attribute as if it were false. Either pass `false` to silence this warning, or pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.",
                        value
                      ));
                      hydrateBooleanAttribute(
                        domElement,
                        value,
                        value,
                        propKey,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    default:
                      if (!(2 < value.length) || "o" !== value[0] && "O" !== value[0] || "n" !== value[1] && "N" !== value[1]) {
                        i = getAttributeAlias(value);
                        attributes = false;
                        hostContext.context === HostContextNamespaceNone && "svg" !== tag2 && "math" !== tag2 ? extraAttributes.delete(i.toLowerCase()) : (attributeName = value.toLowerCase(), attributeName = possibleStandardNames.hasOwnProperty(
                          attributeName
                        ) ? possibleStandardNames[attributeName] || null : null, null !== attributeName && attributeName !== value && (attributes = true, extraAttributes.delete(attributeName)), extraAttributes.delete(i));
                        a: if (attributeName = domElement, serverDifferences$jscomp$0 = i, i = propKey, isAttributeNameSafe(serverDifferences$jscomp$0))
                          if (attributeName.hasAttribute(serverDifferences$jscomp$0))
                            attributeName = attributeName.getAttribute(
                              serverDifferences$jscomp$0
                            ), checkAttributeStringCoercion(
                              i,
                              serverDifferences$jscomp$0
                            ), i = attributeName === "" + i ? i : attributeName;
                          else {
                            switch (typeof i) {
                              case "function":
                              case "symbol":
                                break a;
                              case "boolean":
                                if (attributeName = serverDifferences$jscomp$0.toLowerCase().slice(0, 5), "data-" !== attributeName && "aria-" !== attributeName)
                                  break a;
                            }
                            i = void 0 === i ? void 0 : null;
                          }
                        else i = void 0;
                        attributes || warnForPropDifference(
                          value,
                          i,
                          propKey,
                          serverDifferences
                        );
                      }
                  }
              }
          0 < extraAttributes.size && true !== props.suppressHydrationWarning && warnForExtraAttributes(domElement, extraAttributes, serverDifferences);
          return 0 === Object.keys(serverDifferences).length ? null : serverDifferences;
        }
        function propNamesListJoin(list, combinator) {
          switch (list.length) {
            case 0:
              return "";
            case 1:
              return list[0];
            case 2:
              return list[0] + " " + combinator + " " + list[1];
            default:
              return list.slice(0, -1).join(", ") + ", " + combinator + " " + list[list.length - 1];
          }
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return 9 === rootContainerElement.nodeType ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function getOwnHostContext(namespaceURI) {
          switch (namespaceURI) {
            case SVG_NAMESPACE:
              return HostContextNamespaceSvg;
            case MATH_NAMESPACE:
              return HostContextNamespaceMath;
            default:
              return HostContextNamespaceNone;
          }
        }
        function getChildHostContextProd(parentNamespace, type) {
          if (parentNamespace === HostContextNamespaceNone)
            switch (type) {
              case "svg":
                return HostContextNamespaceSvg;
              case "math":
                return HostContextNamespaceMath;
              default:
                return HostContextNamespaceNone;
            }
          return parentNamespace === HostContextNamespaceSvg && "foreignObject" === type ? HostContextNamespaceNone : parentNamespace;
        }
        function shouldSetTextContent(type, props) {
          return "textarea" === type || "noscript" === type || "string" === typeof props.children || "number" === typeof props.children || "bigint" === typeof props.children || "object" === typeof props.dangerouslySetInnerHTML && null !== props.dangerouslySetInnerHTML && null != props.dangerouslySetInnerHTML.__html;
        }
        function shouldAttemptEagerTransition() {
          var event = window.event;
          if (event && "popstate" === event.type) {
            if (event === currentPopstateTransitionEvent) return false;
            currentPopstateTransitionEvent = event;
            return true;
          }
          currentPopstateTransitionEvent = null;
          return false;
        }
        function handleErrorInNextTick(error) {
          setTimeout(function() {
            throw error;
          });
        }
        function commitMount(domElement, type, newProps) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              newProps.autoFocus && domElement.focus();
              break;
            case "img":
              newProps.src ? domElement.src = newProps.src : newProps.srcSet && (domElement.srcset = newProps.srcSet);
          }
        }
        function commitUpdate(domElement, type, oldProps, newProps) {
          updateProperties(domElement, type, oldProps, newProps);
          domElement[internalPropsKey] = newProps;
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function isSingletonScope(type) {
          return "head" === type;
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container, child) {
          (9 === container.nodeType ? container.body : "HTML" === container.nodeName ? container.ownerDocument.body : container).removeChild(child);
        }
        function clearSuspenseBoundary(parentInstance, suspenseInstance) {
          var node = suspenseInstance, possiblePreambleContribution = 0, depth = 0;
          do {
            var nextNode = node.nextSibling;
            parentInstance.removeChild(node);
            if (nextNode && 8 === nextNode.nodeType)
              if (node = nextNode.data, node === SUSPENSE_END_DATA) {
                if (0 < possiblePreambleContribution && 8 > possiblePreambleContribution) {
                  node = possiblePreambleContribution;
                  var ownerDocument = parentInstance.ownerDocument;
                  node & PREAMBLE_CONTRIBUTION_HTML && releaseSingletonInstance(ownerDocument.documentElement);
                  node & PREAMBLE_CONTRIBUTION_BODY && releaseSingletonInstance(ownerDocument.body);
                  if (node & PREAMBLE_CONTRIBUTION_HEAD)
                    for (node = ownerDocument.head, releaseSingletonInstance(node), ownerDocument = node.firstChild; ownerDocument; ) {
                      var nextNode$jscomp$0 = ownerDocument.nextSibling, nodeName = ownerDocument.nodeName;
                      ownerDocument[internalHoistableMarker] || "SCRIPT" === nodeName || "STYLE" === nodeName || "LINK" === nodeName && "stylesheet" === ownerDocument.rel.toLowerCase() || node.removeChild(ownerDocument);
                      ownerDocument = nextNode$jscomp$0;
                    }
                }
                if (0 === depth) {
                  parentInstance.removeChild(nextNode);
                  retryIfBlockedOn(suspenseInstance);
                  return;
                }
                depth--;
              } else
                node === SUSPENSE_START_DATA || node === SUSPENSE_PENDING_START_DATA || node === SUSPENSE_FALLBACK_START_DATA ? depth++ : possiblePreambleContribution = node.charCodeAt(0) - 48;
            else possiblePreambleContribution = 0;
            node = nextNode;
          } while (node);
          retryIfBlockedOn(suspenseInstance);
        }
        function hideInstance(instance) {
          instance = instance.style;
          "function" === typeof instance.setProperty ? instance.setProperty("display", "none", "important") : instance.display = "none";
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props) {
          props = props[STYLE];
          props = void 0 !== props && null !== props && props.hasOwnProperty("display") ? props.display : null;
          instance.style.display = null == props || "boolean" === typeof props ? "" : ("" + props).trim();
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function clearContainerSparingly(container) {
          var nextNode = container.firstChild;
          nextNode && 10 === nextNode.nodeType && (nextNode = nextNode.nextSibling);
          for (; nextNode; ) {
            var node = nextNode;
            nextNode = nextNode.nextSibling;
            switch (node.nodeName) {
              case "HTML":
              case "HEAD":
              case "BODY":
                clearContainerSparingly(node);
                detachDeletedInstance(node);
                continue;
              case "SCRIPT":
              case "STYLE":
                continue;
              case "LINK":
                if ("stylesheet" === node.rel.toLowerCase()) continue;
            }
            container.removeChild(node);
          }
        }
        function canHydrateInstance(instance, type, props, inRootOrSingleton) {
          for (; 1 === instance.nodeType; ) {
            var anyProps = props;
            if (instance.nodeName.toLowerCase() !== type.toLowerCase()) {
              if (!inRootOrSingleton && ("INPUT" !== instance.nodeName || "hidden" !== instance.type))
                break;
            } else if (!inRootOrSingleton)
              if ("input" === type && "hidden" === instance.type) {
                checkAttributeStringCoercion(anyProps.name, "name");
                var name2 = null == anyProps.name ? null : "" + anyProps.name;
                if ("hidden" === anyProps.type && instance.getAttribute("name") === name2)
                  return instance;
              } else return instance;
            else if (!instance[internalHoistableMarker])
              switch (type) {
                case "meta":
                  if (!instance.hasAttribute("itemprop")) break;
                  return instance;
                case "link":
                  name2 = instance.getAttribute("rel");
                  if ("stylesheet" === name2 && instance.hasAttribute("data-precedence"))
                    break;
                  else if (name2 !== anyProps.rel || instance.getAttribute("href") !== (null == anyProps.href || "" === anyProps.href ? null : anyProps.href) || instance.getAttribute("crossorigin") !== (null == anyProps.crossOrigin ? null : anyProps.crossOrigin) || instance.getAttribute("title") !== (null == anyProps.title ? null : anyProps.title))
                    break;
                  return instance;
                case "style":
                  if (instance.hasAttribute("data-precedence")) break;
                  return instance;
                case "script":
                  name2 = instance.getAttribute("src");
                  if ((name2 !== (null == anyProps.src ? null : anyProps.src) || instance.getAttribute("type") !== (null == anyProps.type ? null : anyProps.type) || instance.getAttribute("crossorigin") !== (null == anyProps.crossOrigin ? null : anyProps.crossOrigin)) && name2 && instance.hasAttribute("async") && !instance.hasAttribute("itemprop"))
                    break;
                  return instance;
                default:
                  return instance;
              }
            instance = getNextHydratable(instance.nextSibling);
            if (null === instance) break;
          }
          return null;
        }
        function canHydrateTextInstance(instance, text, inRootOrSingleton) {
          if ("" === text) return null;
          for (; 3 !== instance.nodeType; ) {
            if ((1 !== instance.nodeType || "INPUT" !== instance.nodeName || "hidden" !== instance.type) && !inRootOrSingleton)
              return null;
            instance = getNextHydratable(instance.nextSibling);
            if (null === instance) return null;
          }
          return instance;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA || instance.data === SUSPENSE_PENDING_START_DATA && instance.ownerDocument.readyState === DOCUMENT_READY_STATE_COMPLETE;
        }
        function registerSuspenseInstanceRetry(instance, callback) {
          var ownerDocument = instance.ownerDocument;
          if (instance.data !== SUSPENSE_PENDING_START_DATA || ownerDocument.readyState === DOCUMENT_READY_STATE_COMPLETE)
            callback();
          else {
            var listener = function() {
              callback();
              ownerDocument.removeEventListener("DOMContentLoaded", listener);
            };
            ownerDocument.addEventListener("DOMContentLoaded", listener);
            instance._reactRetry = listener;
          }
        }
        function getNextHydratable(node) {
          for (; null != node; node = node.nextSibling) {
            var nodeType = node.nodeType;
            if (1 === nodeType || 3 === nodeType) break;
            if (8 === nodeType) {
              nodeType = node.data;
              if (nodeType === SUSPENSE_START_DATA || nodeType === SUSPENSE_FALLBACK_START_DATA || nodeType === SUSPENSE_PENDING_START_DATA || nodeType === FORM_STATE_IS_MATCHING || nodeType === FORM_STATE_IS_NOT_MATCHING)
                break;
              if (nodeType === SUSPENSE_END_DATA) return null;
            }
          }
          return node;
        }
        function describeHydratableInstanceForDevWarnings(instance) {
          if (1 === instance.nodeType) {
            for (var JSCompiler_temp_const = instance.nodeName.toLowerCase(), serverDifferences = {}, attributes = instance.attributes, i = 0; i < attributes.length; i++) {
              var attr = attributes[i];
              serverDifferences[getPropNameFromAttributeName(attr.name)] = "style" === attr.name.toLowerCase() ? getStylesObjectFromElement(instance) : attr.value;
            }
            return { type: JSCompiler_temp_const, props: serverDifferences };
          }
          return 8 === instance.nodeType ? { type: "Suspense", props: {} } : instance.nodeValue;
        }
        function diffHydratedTextForDevWarnings(textInstance, text, parentProps) {
          return null === parentProps || true !== parentProps[SUPPRESS_HYDRATION_WARNING] ? (textInstance.nodeValue === text ? textInstance = null : (text = normalizeMarkupForTextOrAttribute(text), textInstance = normalizeMarkupForTextOrAttribute(textInstance.nodeValue) === text ? null : textInstance.nodeValue), textInstance) : null;
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          suspenseInstance = suspenseInstance.nextSibling;
          for (var depth = 0; suspenseInstance; ) {
            if (8 === suspenseInstance.nodeType) {
              var data = suspenseInstance.data;
              if (data === SUSPENSE_END_DATA) {
                if (0 === depth)
                  return getNextHydratable(suspenseInstance.nextSibling);
                depth--;
              } else
                data !== SUSPENSE_START_DATA && data !== SUSPENSE_FALLBACK_START_DATA && data !== SUSPENSE_PENDING_START_DATA || depth++;
            }
            suspenseInstance = suspenseInstance.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          targetInstance = targetInstance.previousSibling;
          for (var depth = 0; targetInstance; ) {
            if (8 === targetInstance.nodeType) {
              var data = targetInstance.data;
              if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                if (0 === depth) return targetInstance;
                depth--;
              } else data === SUSPENSE_END_DATA && depth++;
            }
            targetInstance = targetInstance.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container) {
          retryIfBlockedOn(container);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function resolveSingletonInstance(type, props, rootContainerInstance, hostContext, validateDOMNestingDev) {
          validateDOMNestingDev && validateDOMNesting(type, hostContext.ancestorInfo);
          props = getOwnerDocumentFromRootContainer(rootContainerInstance);
          switch (type) {
            case "html":
              type = props.documentElement;
              if (!type)
                throw Error(
                  "React expected an <html> element (document.documentElement) to exist in the Document but one was not found. React never removes the documentElement for any Document it renders into so the cause is likely in some other script running on this page."
                );
              return type;
            case "head":
              type = props.head;
              if (!type)
                throw Error(
                  "React expected a <head> element (document.head) to exist in the Document but one was not found. React never removes the head for any Document it renders into so the cause is likely in some other script running on this page."
                );
              return type;
            case "body":
              type = props.body;
              if (!type)
                throw Error(
                  "React expected a <body> element (document.body) to exist in the Document but one was not found. React never removes the body for any Document it renders into so the cause is likely in some other script running on this page."
                );
              return type;
            default:
              throw Error(
                "resolveSingletonInstance was called with an element type that is not supported. This is a bug in React."
              );
          }
        }
        function acquireSingletonInstance(type, props, instance, internalInstanceHandle) {
          if (!instance[internalContainerInstanceKey] && getInstanceFromNode(instance)) {
            var tagName = instance.tagName.toLowerCase();
            console.error(
              "You are mounting a new %s component when a previous one has not first unmounted. It is an error to render more than one %s component at a time and attributes and children of these components will likely fail in unpredictable ways. Please only render a single instance of <%s> and if you need to mount a new one, ensure any previous ones have unmounted first.",
              tagName,
              tagName,
              tagName
            );
          }
          switch (type) {
            case "html":
            case "head":
            case "body":
              break;
            default:
              console.error(
                "acquireSingletonInstance was called with an element type that is not supported. This is a bug in React."
              );
          }
          for (tagName = instance.attributes; tagName.length; )
            instance.removeAttributeNode(tagName[0]);
          setInitialProperties(instance, type, props);
          instance[internalInstanceKey] = internalInstanceHandle;
          instance[internalPropsKey] = props;
        }
        function releaseSingletonInstance(instance) {
          for (var attributes = instance.attributes; attributes.length; )
            instance.removeAttributeNode(attributes[0]);
          detachDeletedInstance(instance);
        }
        function getHoistableRoot(container) {
          return "function" === typeof container.getRootNode ? container.getRootNode() : 9 === container.nodeType ? container : container.ownerDocument;
        }
        function preconnectAs(rel, href, crossOrigin) {
          var ownerDocument = globalDocument;
          if (ownerDocument && "string" === typeof href && href) {
            var limitedEscapedHref = escapeSelectorAttributeValueInsideDoubleQuotes(href);
            limitedEscapedHref = 'link[rel="' + rel + '"][href="' + limitedEscapedHref + '"]';
            "string" === typeof crossOrigin && (limitedEscapedHref += '[crossorigin="' + crossOrigin + '"]');
            preconnectsSet.has(limitedEscapedHref) || (preconnectsSet.add(limitedEscapedHref), rel = { rel, crossOrigin, href }, null === ownerDocument.querySelector(limitedEscapedHref) && (href = ownerDocument.createElement("link"), setInitialProperties(href, "link", rel), markNodeAsHoistable(href), ownerDocument.head.appendChild(href)));
          }
        }
        function getResource(type, currentProps, pendingProps, currentResource) {
          var resourceRoot = (resourceRoot = rootInstanceStackCursor.current) ? getHoistableRoot(resourceRoot) : null;
          if (!resourceRoot)
            throw Error(
              '"resourceRoot" was expected to exist. This is a bug in React.'
            );
          switch (type) {
            case "meta":
            case "title":
              return null;
            case "style":
              return "string" === typeof pendingProps.precedence && "string" === typeof pendingProps.href ? (pendingProps = getStyleKey(pendingProps.href), currentProps = getResourcesFromRoot(resourceRoot).hoistableStyles, currentResource = currentProps.get(pendingProps), currentResource || (currentResource = {
                type: "style",
                instance: null,
                count: 0,
                state: null
              }, currentProps.set(pendingProps, currentResource)), currentResource) : { type: "void", instance: null, count: 0, state: null };
            case "link":
              if ("stylesheet" === pendingProps.rel && "string" === typeof pendingProps.href && "string" === typeof pendingProps.precedence) {
                type = getStyleKey(pendingProps.href);
                var _styles = getResourcesFromRoot(resourceRoot).hoistableStyles, _resource = _styles.get(type);
                if (!_resource && (resourceRoot = resourceRoot.ownerDocument || resourceRoot, _resource = {
                  type: "stylesheet",
                  instance: null,
                  count: 0,
                  state: { loading: NotLoaded, preload: null }
                }, _styles.set(type, _resource), (_styles = resourceRoot.querySelector(
                  getStylesheetSelectorFromKey(type)
                )) && !_styles._p && (_resource.instance = _styles, _resource.state.loading = Loaded | Inserted), !preloadPropsMap.has(type))) {
                  var preloadProps = {
                    rel: "preload",
                    as: "style",
                    href: pendingProps.href,
                    crossOrigin: pendingProps.crossOrigin,
                    integrity: pendingProps.integrity,
                    media: pendingProps.media,
                    hrefLang: pendingProps.hrefLang,
                    referrerPolicy: pendingProps.referrerPolicy
                  };
                  preloadPropsMap.set(type, preloadProps);
                  _styles || preloadStylesheet(
                    resourceRoot,
                    type,
                    preloadProps,
                    _resource.state
                  );
                }
                if (currentProps && null === currentResource)
                  throw pendingProps = "\n\n  - " + describeLinkForResourceErrorDEV(currentProps) + "\n  + " + describeLinkForResourceErrorDEV(pendingProps), Error(
                    "Expected <link> not to update to be updated to a stylesheet with precedence. Check the `rel`, `href`, and `precedence` props of this component. Alternatively, check whether two different <link> components render in the same slot or share the same key." + pendingProps
                  );
                return _resource;
              }
              if (currentProps && null !== currentResource)
                throw pendingProps = "\n\n  - " + describeLinkForResourceErrorDEV(currentProps) + "\n  + " + describeLinkForResourceErrorDEV(pendingProps), Error(
                  "Expected stylesheet with precedence to not be updated to a different kind of <link>. Check the `rel`, `href`, and `precedence` props of this component. Alternatively, check whether two different <link> components render in the same slot or share the same key." + pendingProps
                );
              return null;
            case "script":
              return currentProps = pendingProps.async, pendingProps = pendingProps.src, "string" === typeof pendingProps && currentProps && "function" !== typeof currentProps && "symbol" !== typeof currentProps ? (pendingProps = getScriptKey(pendingProps), currentProps = getResourcesFromRoot(resourceRoot).hoistableScripts, currentResource = currentProps.get(pendingProps), currentResource || (currentResource = {
                type: "script",
                instance: null,
                count: 0,
                state: null
              }, currentProps.set(pendingProps, currentResource)), currentResource) : { type: "void", instance: null, count: 0, state: null };
            default:
              throw Error(
                'getResource encountered a type it did not expect: "' + type + '". this is a bug in React.'
              );
          }
        }
        function describeLinkForResourceErrorDEV(props) {
          var describedProps = 0, description = "<link";
          "string" === typeof props.rel ? (describedProps++, description += ' rel="' + props.rel + '"') : hasOwnProperty.call(props, "rel") && (describedProps++, description += ' rel="' + (null === props.rel ? "null" : "invalid type " + typeof props.rel) + '"');
          "string" === typeof props.href ? (describedProps++, description += ' href="' + props.href + '"') : hasOwnProperty.call(props, "href") && (describedProps++, description += ' href="' + (null === props.href ? "null" : "invalid type " + typeof props.href) + '"');
          "string" === typeof props.precedence ? (describedProps++, description += ' precedence="' + props.precedence + '"') : hasOwnProperty.call(props, "precedence") && (describedProps++, description += " precedence={" + (null === props.precedence ? "null" : "invalid type " + typeof props.precedence) + "}");
          Object.getOwnPropertyNames(props).length > describedProps && (description += " ...");
          return description + " />";
        }
        function getStyleKey(href) {
          return 'href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"';
        }
        function getStylesheetSelectorFromKey(key) {
          return 'link[rel="stylesheet"][' + key + "]";
        }
        function stylesheetPropsFromRawProps(rawProps) {
          return assign({}, rawProps, {
            "data-precedence": rawProps.precedence,
            precedence: null
          });
        }
        function preloadStylesheet(ownerDocument, key, preloadProps, state) {
          ownerDocument.querySelector(
            'link[rel="preload"][as="style"][' + key + "]"
          ) ? state.loading = Loaded : (key = ownerDocument.createElement("link"), state.preload = key, key.addEventListener("load", function() {
            return state.loading |= Loaded;
          }), key.addEventListener("error", function() {
            return state.loading |= Errored;
          }), setInitialProperties(key, "link", preloadProps), markNodeAsHoistable(key), ownerDocument.head.appendChild(key));
        }
        function getScriptKey(src2) {
          return '[src="' + escapeSelectorAttributeValueInsideDoubleQuotes(src2) + '"]';
        }
        function getScriptSelectorFromKey(key) {
          return "script[async]" + key;
        }
        function acquireResource(hoistableRoot, resource, props) {
          resource.count++;
          if (null === resource.instance)
            switch (resource.type) {
              case "style":
                var instance = hoistableRoot.querySelector(
                  'style[data-href~="' + escapeSelectorAttributeValueInsideDoubleQuotes(props.href) + '"]'
                );
                if (instance)
                  return resource.instance = instance, markNodeAsHoistable(instance), instance;
                var styleProps = assign({}, props, {
                  "data-href": props.href,
                  "data-precedence": props.precedence,
                  href: null,
                  precedence: null
                });
                instance = (hoistableRoot.ownerDocument || hoistableRoot).createElement("style");
                markNodeAsHoistable(instance);
                setInitialProperties(instance, "style", styleProps);
                insertStylesheet(instance, props.precedence, hoistableRoot);
                return resource.instance = instance;
              case "stylesheet":
                styleProps = getStyleKey(props.href);
                var _instance = hoistableRoot.querySelector(
                  getStylesheetSelectorFromKey(styleProps)
                );
                if (_instance)
                  return resource.state.loading |= Inserted, resource.instance = _instance, markNodeAsHoistable(_instance), _instance;
                instance = stylesheetPropsFromRawProps(props);
                (styleProps = preloadPropsMap.get(styleProps)) && adoptPreloadPropsForStylesheet(instance, styleProps);
                _instance = (hoistableRoot.ownerDocument || hoistableRoot).createElement("link");
                markNodeAsHoistable(_instance);
                var linkInstance = _instance;
                linkInstance._p = new Promise(function(resolve, reject) {
                  linkInstance.onload = resolve;
                  linkInstance.onerror = reject;
                });
                setInitialProperties(_instance, "link", instance);
                resource.state.loading |= Inserted;
                insertStylesheet(_instance, props.precedence, hoistableRoot);
                return resource.instance = _instance;
              case "script":
                _instance = getScriptKey(props.src);
                if (styleProps = hoistableRoot.querySelector(
                  getScriptSelectorFromKey(_instance)
                ))
                  return resource.instance = styleProps, markNodeAsHoistable(styleProps), styleProps;
                instance = props;
                if (styleProps = preloadPropsMap.get(_instance))
                  instance = assign({}, props), adoptPreloadPropsForScript(instance, styleProps);
                hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
                styleProps = hoistableRoot.createElement("script");
                markNodeAsHoistable(styleProps);
                setInitialProperties(styleProps, "link", instance);
                hoistableRoot.head.appendChild(styleProps);
                return resource.instance = styleProps;
              case "void":
                return null;
              default:
                throw Error(
                  'acquireResource encountered a resource type it did not expect: "' + resource.type + '". this is a bug in React.'
                );
            }
          else
            "stylesheet" === resource.type && (resource.state.loading & Inserted) === NotLoaded && (instance = resource.instance, resource.state.loading |= Inserted, insertStylesheet(instance, props.precedence, hoistableRoot));
          return resource.instance;
        }
        function insertStylesheet(instance, precedence, root3) {
          for (var nodes = root3.querySelectorAll(
            'link[rel="stylesheet"][data-precedence],style[data-precedence]'
          ), last = nodes.length ? nodes[nodes.length - 1] : null, prior = last, i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            if (node.dataset.precedence === precedence) prior = node;
            else if (prior !== last) break;
          }
          prior ? prior.parentNode.insertBefore(instance, prior.nextSibling) : (precedence = 9 === root3.nodeType ? root3.head : root3, precedence.insertBefore(instance, precedence.firstChild));
        }
        function adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps) {
          null == stylesheetProps.crossOrigin && (stylesheetProps.crossOrigin = preloadProps.crossOrigin);
          null == stylesheetProps.referrerPolicy && (stylesheetProps.referrerPolicy = preloadProps.referrerPolicy);
          null == stylesheetProps.title && (stylesheetProps.title = preloadProps.title);
        }
        function adoptPreloadPropsForScript(scriptProps, preloadProps) {
          null == scriptProps.crossOrigin && (scriptProps.crossOrigin = preloadProps.crossOrigin);
          null == scriptProps.referrerPolicy && (scriptProps.referrerPolicy = preloadProps.referrerPolicy);
          null == scriptProps.integrity && (scriptProps.integrity = preloadProps.integrity);
        }
        function getHydratableHoistableCache(type, keyAttribute, ownerDocument) {
          if (null === tagCaches) {
            var cache = /* @__PURE__ */ new Map();
            var caches = tagCaches = /* @__PURE__ */ new Map();
            caches.set(ownerDocument, cache);
          } else
            caches = tagCaches, cache = caches.get(ownerDocument), cache || (cache = /* @__PURE__ */ new Map(), caches.set(ownerDocument, cache));
          if (cache.has(type)) return cache;
          cache.set(type, null);
          ownerDocument = ownerDocument.getElementsByTagName(type);
          for (caches = 0; caches < ownerDocument.length; caches++) {
            var node = ownerDocument[caches];
            if (!(node[internalHoistableMarker] || node[internalInstanceKey] || "link" === type && "stylesheet" === node.getAttribute("rel")) && node.namespaceURI !== SVG_NAMESPACE) {
              var nodeKey = node.getAttribute(keyAttribute) || "";
              nodeKey = type + nodeKey;
              var existing = cache.get(nodeKey);
              existing ? existing.push(node) : cache.set(nodeKey, [node]);
            }
          }
          return cache;
        }
        function mountHoistable(hoistableRoot, type, instance) {
          hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
          hoistableRoot.head.insertBefore(
            instance,
            "title" === type ? hoistableRoot.querySelector("head > title") : null
          );
        }
        function isHostHoistableType(type, props, hostContext) {
          var outsideHostContainerContext = !hostContext.ancestorInfo.containerTagInScope;
          if (hostContext.context === HostContextNamespaceSvg || null != props.itemProp)
            return !outsideHostContainerContext || null == props.itemProp || "meta" !== type && "title" !== type && "style" !== type && "link" !== type && "script" !== type || console.error(
              "Cannot render a <%s> outside the main document if it has an `itemProp` prop. `itemProp` suggests the tag belongs to an `itemScope` which can appear anywhere in the DOM. If you were intending for React to hoist this <%s> remove the `itemProp` prop. Otherwise, try moving this tag into the <head> or <body> of the Document.",
              type,
              type
            ), false;
          switch (type) {
            case "meta":
            case "title":
              return true;
            case "style":
              if ("string" !== typeof props.precedence || "string" !== typeof props.href || "" === props.href) {
                outsideHostContainerContext && console.error(
                  'Cannot render a <style> outside the main document without knowing its precedence and a unique href key. React can hoist and deduplicate <style> tags if you provide a `precedence` prop along with an `href` prop that does not conflict with the `href` values used in any other hoisted <style> or <link rel="stylesheet" ...> tags.  Note that hoisting <style> tags is considered an advanced feature that most will not use directly. Consider moving the <style> tag to the <head> or consider adding a `precedence="default"` and `href="some unique resource identifier"`.'
                );
                break;
              }
              return true;
            case "link":
              if ("string" !== typeof props.rel || "string" !== typeof props.href || "" === props.href || props.onLoad || props.onError) {
                if ("stylesheet" === props.rel && "string" === typeof props.precedence) {
                  type = props.href;
                  var onError = props.onError, disabled = props.disabled;
                  hostContext = [];
                  props.onLoad && hostContext.push("`onLoad`");
                  onError && hostContext.push("`onError`");
                  null != disabled && hostContext.push("`disabled`");
                  onError = propNamesListJoin(hostContext, "and");
                  onError += 1 === hostContext.length ? " prop" : " props";
                  disabled = 1 === hostContext.length ? "an " + onError : "the " + onError;
                  hostContext.length && console.error(
                    'React encountered a <link rel="stylesheet" href="%s" ... /> with a `precedence` prop that also included %s. The presence of loading and error handlers indicates an intent to manage the stylesheet loading state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the %s, otherwise remove the `precedence` prop.',
                    type,
                    disabled,
                    onError
                  );
                }
                outsideHostContainerContext && ("string" !== typeof props.rel || "string" !== typeof props.href || "" === props.href ? console.error(
                  "Cannot render a <link> outside the main document without a `rel` and `href` prop. Try adding a `rel` and/or `href` prop to this <link> or moving the link into the <head> tag"
                ) : (props.onError || props.onLoad) && console.error(
                  "Cannot render a <link> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>."
                ));
                break;
              }
              switch (props.rel) {
                case "stylesheet":
                  return type = props.precedence, props = props.disabled, "string" !== typeof type && outsideHostContainerContext && console.error(
                    'Cannot render a <link rel="stylesheet" /> outside the main document without knowing its precedence. Consider adding precedence="default" or moving it into the root <head> tag.'
                  ), "string" === typeof type && null == props;
                default:
                  return true;
              }
            case "script":
              type = props.async && "function" !== typeof props.async && "symbol" !== typeof props.async;
              if (!type || props.onLoad || props.onError || !props.src || "string" !== typeof props.src) {
                outsideHostContainerContext && (type ? props.onLoad || props.onError ? console.error(
                  "Cannot render a <script> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>."
                ) : console.error(
                  "Cannot render a <script> outside the main document without `async={true}` and a non-empty `src` prop. Ensure there is a valid `src` and either make the script async or move it into the root <head> tag or somewhere in the <body>."
                ) : console.error(
                  'Cannot render a sync or defer <script> outside the main document without knowing its order. Try adding async="" or moving it into the root <head> tag.'
                ));
                break;
              }
              return true;
            case "noscript":
            case "template":
              outsideHostContainerContext && console.error(
                "Cannot render <%s> outside the main document. Try moving it into the root <head> tag.",
                type
              );
          }
          return false;
        }
        function preloadResource(resource) {
          return "stylesheet" === resource.type && (resource.state.loading & Settled) === NotLoaded ? false : true;
        }
        function noop() {
        }
        function suspendResource(hoistableRoot, resource, props) {
          if (null === suspendedState)
            throw Error(
              "Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug."
            );
          var state = suspendedState;
          if ("stylesheet" === resource.type && ("string" !== typeof props.media || false !== matchMedia(props.media).matches) && (resource.state.loading & Inserted) === NotLoaded) {
            if (null === resource.instance) {
              var key = getStyleKey(props.href), instance = hoistableRoot.querySelector(
                getStylesheetSelectorFromKey(key)
              );
              if (instance) {
                hoistableRoot = instance._p;
                null !== hoistableRoot && "object" === typeof hoistableRoot && "function" === typeof hoistableRoot.then && (state.count++, state = onUnsuspend.bind(state), hoistableRoot.then(state, state));
                resource.state.loading |= Inserted;
                resource.instance = instance;
                markNodeAsHoistable(instance);
                return;
              }
              instance = hoistableRoot.ownerDocument || hoistableRoot;
              props = stylesheetPropsFromRawProps(props);
              (key = preloadPropsMap.get(key)) && adoptPreloadPropsForStylesheet(props, key);
              instance = instance.createElement("link");
              markNodeAsHoistable(instance);
              var linkInstance = instance;
              linkInstance._p = new Promise(function(resolve, reject) {
                linkInstance.onload = resolve;
                linkInstance.onerror = reject;
              });
              setInitialProperties(instance, "link", props);
              resource.instance = instance;
            }
            null === state.stylesheets && (state.stylesheets = /* @__PURE__ */ new Map());
            state.stylesheets.set(resource, hoistableRoot);
            (hoistableRoot = resource.state.preload) && (resource.state.loading & Settled) === NotLoaded && (state.count++, resource = onUnsuspend.bind(state), hoistableRoot.addEventListener("load", resource), hoistableRoot.addEventListener("error", resource));
          }
        }
        function waitForCommitToBeReady() {
          if (null === suspendedState)
            throw Error(
              "Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug."
            );
          var state = suspendedState;
          state.stylesheets && 0 === state.count && insertSuspendedStylesheets(state, state.stylesheets);
          return 0 < state.count ? function(commit) {
            var stylesheetTimer = setTimeout(function() {
              state.stylesheets && insertSuspendedStylesheets(state, state.stylesheets);
              if (state.unsuspend) {
                var unsuspend = state.unsuspend;
                state.unsuspend = null;
                unsuspend();
              }
            }, 6e4);
            state.unsuspend = commit;
            return function() {
              state.unsuspend = null;
              clearTimeout(stylesheetTimer);
            };
          } : null;
        }
        function onUnsuspend() {
          this.count--;
          if (0 === this.count) {
            if (this.stylesheets)
              insertSuspendedStylesheets(this, this.stylesheets);
            else if (this.unsuspend) {
              var unsuspend = this.unsuspend;
              this.unsuspend = null;
              unsuspend();
            }
          }
        }
        function insertSuspendedStylesheets(state, resources) {
          state.stylesheets = null;
          null !== state.unsuspend && (state.count++, precedencesByRoot = /* @__PURE__ */ new Map(), resources.forEach(insertStylesheetIntoRoot, state), precedencesByRoot = null, onUnsuspend.call(state));
        }
        function insertStylesheetIntoRoot(root3, resource) {
          if (!(resource.state.loading & Inserted)) {
            var precedences = precedencesByRoot.get(root3);
            if (precedences) var last = precedences.get(LAST_PRECEDENCE);
            else {
              precedences = /* @__PURE__ */ new Map();
              precedencesByRoot.set(root3, precedences);
              for (var nodes = root3.querySelectorAll(
                "link[data-precedence],style[data-precedence]"
              ), i = 0; i < nodes.length; i++) {
                var node = nodes[i];
                if ("LINK" === node.nodeName || "not all" !== node.getAttribute("media"))
                  precedences.set(node.dataset.precedence, node), last = node;
              }
              last && precedences.set(LAST_PRECEDENCE, last);
            }
            nodes = resource.instance;
            node = nodes.getAttribute("data-precedence");
            i = precedences.get(node) || last;
            i === last && precedences.set(LAST_PRECEDENCE, nodes);
            precedences.set(node, nodes);
            this.count++;
            last = onUnsuspend.bind(this);
            nodes.addEventListener("load", last);
            nodes.addEventListener("error", last);
            i ? i.parentNode.insertBefore(nodes, i.nextSibling) : (root3 = 9 === root3.nodeType ? root3.head : root3, root3.insertBefore(nodes, root3.firstChild));
            resource.state.loading |= Inserted;
          }
        }
        function FiberRootNode(containerInfo, tag2, hydrate, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, formState) {
          this.tag = 1;
          this.containerInfo = containerInfo;
          this.pingCache = this.current = this.pendingChildren = null;
          this.timeoutHandle = noTimeout;
          this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null;
          this.callbackPriority = 0;
          this.expirationTimes = createLaneMap(-1);
          this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.expiredLanes = this.warmLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
          this.entanglements = createLaneMap(0);
          this.hiddenUpdates = createLaneMap(null);
          this.identifierPrefix = identifierPrefix;
          this.onUncaughtError = onUncaughtError;
          this.onCaughtError = onCaughtError;
          this.onRecoverableError = onRecoverableError;
          this.pooledCache = null;
          this.pooledCacheLanes = 0;
          this.formState = formState;
          this.incompleteTransitions = /* @__PURE__ */ new Map();
          this.passiveEffectDuration = this.effectDuration = -0;
          this.memoizedUpdaters = /* @__PURE__ */ new Set();
          containerInfo = this.pendingUpdatersLaneMap = [];
          for (tag2 = 0; 31 > tag2; tag2++) containerInfo.push(/* @__PURE__ */ new Set());
          this._debugRootType = hydrate ? "hydrateRoot()" : "createRoot()";
        }
        function createFiberRoot(containerInfo, tag2, hydrate, initialChildren, hydrationCallbacks, isStrictMode, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, transitionCallbacks, formState) {
          containerInfo = new FiberRootNode(
            containerInfo,
            tag2,
            hydrate,
            identifierPrefix,
            onUncaughtError,
            onCaughtError,
            onRecoverableError,
            formState
          );
          tag2 = ConcurrentMode;
          true === isStrictMode && (tag2 |= StrictLegacyMode | StrictEffectsMode);
          isDevToolsPresent && (tag2 |= ProfileMode);
          isStrictMode = createFiber(3, null, null, tag2);
          containerInfo.current = isStrictMode;
          isStrictMode.stateNode = containerInfo;
          tag2 = createCache();
          retainCache(tag2);
          containerInfo.pooledCache = tag2;
          retainCache(tag2);
          isStrictMode.memoizedState = {
            element: initialChildren,
            isDehydrated: hydrate,
            cache: tag2
          };
          initializeUpdateQueue(isStrictMode);
          return containerInfo;
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) return emptyContextObject;
          parentComponent = emptyContextObject;
          return parentComponent;
        }
        function updateContainerImpl(rootFiber, lane, element, container, parentComponent, callback) {
          if (injectedHook && "function" === typeof injectedHook.onScheduleFiberRoot)
            try {
              injectedHook.onScheduleFiberRoot(rendererID, container, element);
            } catch (err) {
              hasLoggedError || (hasLoggedError = true, console.error(
                "React instrumentation encountered an error: %s",
                err
              ));
            }
          null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markRenderScheduled && injectedProfilingHooks.markRenderScheduled(lane);
          parentComponent = getContextForSubtree(parentComponent);
          null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
          isRendering && null !== current && !didWarnAboutNestedUpdates && (didWarnAboutNestedUpdates = true, console.error(
            "Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.",
            getComponentNameFromFiber(current) || "Unknown"
          ));
          container = createUpdate(lane);
          container.payload = { element };
          callback = void 0 === callback ? null : callback;
          null !== callback && ("function" !== typeof callback && console.error(
            "Expected the last optional `callback` argument to be a function. Instead received: %s.",
            callback
          ), container.callback = callback);
          element = enqueueUpdate(rootFiber, container, lane);
          null !== element && (scheduleUpdateOnFiber(element, rootFiber, lane), entangleTransitions(element, rootFiber, lane));
        }
        function markRetryLaneImpl(fiber, retryLane) {
          fiber = fiber.memoizedState;
          if (null !== fiber && null !== fiber.dehydrated) {
            var a = fiber.retryLane;
            fiber.retryLane = 0 !== a && a < retryLane ? a : retryLane;
          }
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          (fiber = fiber.alternate) && markRetryLaneImpl(fiber, retryLane);
        }
        function attemptContinuousHydration(fiber) {
          if (13 === fiber.tag) {
            var root3 = enqueueConcurrentRenderForLane(fiber, 67108864);
            null !== root3 && scheduleUpdateOnFiber(root3, fiber, 67108864);
            markRetryLaneIfNotHydrated(fiber, 67108864);
          }
        }
        function getCurrentFiberForDevTools() {
          return current;
        }
        function getLaneLabelMap() {
          for (var map = /* @__PURE__ */ new Map(), lane = 1, index = 0; 31 > index; index++) {
            var label = getLabelForLane(lane);
            map.set(lane, label);
            lane *= 2;
          }
          return map;
        }
        function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var prevTransition = ReactSharedInternals.T;
          ReactSharedInternals.T = null;
          var previousPriority = ReactDOMSharedInternals.p;
          try {
            ReactDOMSharedInternals.p = DiscreteEventPriority, dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition;
          }
        }
        function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var prevTransition = ReactSharedInternals.T;
          ReactSharedInternals.T = null;
          var previousPriority = ReactDOMSharedInternals.p;
          try {
            ReactDOMSharedInternals.p = ContinuousEventPriority, dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition;
          }
        }
        function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (_enabled) {
            var blockedOn = findInstanceBlockingEvent(nativeEvent);
            if (null === blockedOn)
              dispatchEventForPluginEventSystem(
                domEventName,
                eventSystemFlags,
                nativeEvent,
                return_targetInst,
                targetContainer
              ), clearIfContinuousEvent(domEventName, nativeEvent);
            else if (queueIfContinuousEvent(
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent
            ))
              nativeEvent.stopPropagation();
            else if (clearIfContinuousEvent(domEventName, nativeEvent), eventSystemFlags & 4 && -1 < discreteReplayableEvents.indexOf(domEventName)) {
              for (; null !== blockedOn; ) {
                var fiber = getInstanceFromNode(blockedOn);
                if (null !== fiber)
                  switch (fiber.tag) {
                    case 3:
                      fiber = fiber.stateNode;
                      if (fiber.current.memoizedState.isDehydrated) {
                        var lanes = getHighestPriorityLanes(fiber.pendingLanes);
                        if (0 !== lanes) {
                          var root3 = fiber;
                          root3.pendingLanes |= 2;
                          for (root3.entangledLanes |= 2; lanes; ) {
                            var lane = 1 << 31 - clz32(lanes);
                            root3.entanglements[1] |= lane;
                            lanes &= ~lane;
                          }
                          ensureRootIsScheduled(fiber);
                          (executionContext & (RenderContext | CommitContext)) === NoContext && (workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS, flushSyncWorkAcrossRoots_impl(0, false));
                        }
                      }
                      break;
                    case 13:
                      root3 = enqueueConcurrentRenderForLane(fiber, 2), null !== root3 && scheduleUpdateOnFiber(root3, fiber, 2), flushSyncWork$1(), markRetryLaneIfNotHydrated(fiber, 2);
                  }
                fiber = findInstanceBlockingEvent(nativeEvent);
                null === fiber && dispatchEventForPluginEventSystem(
                  domEventName,
                  eventSystemFlags,
                  nativeEvent,
                  return_targetInst,
                  targetContainer
                );
                if (fiber === blockedOn) break;
                blockedOn = fiber;
              }
              null !== blockedOn && nativeEvent.stopPropagation();
            } else
              dispatchEventForPluginEventSystem(
                domEventName,
                eventSystemFlags,
                nativeEvent,
                null,
                targetContainer
              );
          }
        }
        function findInstanceBlockingEvent(nativeEvent) {
          nativeEvent = getEventTarget(nativeEvent);
          return findInstanceBlockingTarget(nativeEvent);
        }
        function findInstanceBlockingTarget(targetNode) {
          return_targetInst = null;
          targetNode = getClosestInstanceFromNode(targetNode);
          if (null !== targetNode) {
            var nearestMounted = getNearestMountedFiber(targetNode);
            if (null === nearestMounted) targetNode = null;
            else {
              var tag2 = nearestMounted.tag;
              if (13 === tag2) {
                targetNode = getSuspenseInstanceFromFiber(nearestMounted);
                if (null !== targetNode) return targetNode;
                targetNode = null;
              } else if (3 === tag2) {
                if (nearestMounted.stateNode.current.memoizedState.isDehydrated)
                  return 3 === nearestMounted.tag ? nearestMounted.stateNode.containerInfo : null;
                targetNode = null;
              } else nearestMounted !== targetNode && (targetNode = null);
            }
          }
          return_targetInst = targetNode;
          return null;
        }
        function getEventPriority(domEventName) {
          switch (domEventName) {
            case "beforetoggle":
            case "cancel":
            case "click":
            case "close":
            case "contextmenu":
            case "copy":
            case "cut":
            case "auxclick":
            case "dblclick":
            case "dragend":
            case "dragstart":
            case "drop":
            case "focusin":
            case "focusout":
            case "input":
            case "invalid":
            case "keydown":
            case "keypress":
            case "keyup":
            case "mousedown":
            case "mouseup":
            case "paste":
            case "pause":
            case "play":
            case "pointercancel":
            case "pointerdown":
            case "pointerup":
            case "ratechange":
            case "reset":
            case "resize":
            case "seeked":
            case "submit":
            case "toggle":
            case "touchcancel":
            case "touchend":
            case "touchstart":
            case "volumechange":
            case "change":
            case "selectionchange":
            case "textInput":
            case "compositionstart":
            case "compositionend":
            case "compositionupdate":
            case "beforeblur":
            case "afterblur":
            case "beforeinput":
            case "blur":
            case "fullscreenchange":
            case "focus":
            case "hashchange":
            case "popstate":
            case "select":
            case "selectstart":
              return DiscreteEventPriority;
            case "drag":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "mousemove":
            case "mouseout":
            case "mouseover":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "scroll":
            case "touchmove":
            case "wheel":
            case "mouseenter":
            case "mouseleave":
            case "pointerenter":
            case "pointerleave":
              return ContinuousEventPriority;
            case "message":
              switch (getCurrentPriorityLevel()) {
                case ImmediatePriority:
                  return DiscreteEventPriority;
                case UserBlockingPriority:
                  return ContinuousEventPriority;
                case NormalPriority$1:
                case LowPriority:
                  return DefaultEventPriority;
                case IdlePriority:
                  return IdleEventPriority;
                default:
                  return DefaultEventPriority;
              }
            default:
              return DefaultEventPriority;
          }
        }
        function clearIfContinuousEvent(domEventName, nativeEvent) {
          switch (domEventName) {
            case "focusin":
            case "focusout":
              queuedFocus = null;
              break;
            case "dragenter":
            case "dragleave":
              queuedDrag = null;
              break;
            case "mouseover":
            case "mouseout":
              queuedMouse = null;
              break;
            case "pointerover":
            case "pointerout":
              queuedPointers.delete(nativeEvent.pointerId);
              break;
            case "gotpointercapture":
            case "lostpointercapture":
              queuedPointerCaptures.delete(nativeEvent.pointerId);
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (null === existingQueuedEvent || existingQueuedEvent.nativeEvent !== nativeEvent)
            return existingQueuedEvent = {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            }, null !== blockedOn && (blockedOn = getInstanceFromNode(blockedOn), null !== blockedOn && attemptContinuousHydration(blockedOn)), existingQueuedEvent;
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          blockedOn = existingQueuedEvent.targetContainers;
          null !== targetContainer && -1 === blockedOn.indexOf(targetContainer) && blockedOn.push(targetContainer);
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          switch (domEventName) {
            case "focusin":
              return queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(
                queuedFocus,
                blockedOn,
                domEventName,
                eventSystemFlags,
                targetContainer,
                nativeEvent
              ), true;
            case "dragenter":
              return queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(
                queuedDrag,
                blockedOn,
                domEventName,
                eventSystemFlags,
                targetContainer,
                nativeEvent
              ), true;
            case "mouseover":
              return queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(
                queuedMouse,
                blockedOn,
                domEventName,
                eventSystemFlags,
                targetContainer,
                nativeEvent
              ), true;
            case "pointerover":
              var pointerId = nativeEvent.pointerId;
              queuedPointers.set(
                pointerId,
                accumulateOrCreateContinuousQueuedReplayableEvent(
                  queuedPointers.get(pointerId) || null,
                  blockedOn,
                  domEventName,
                  eventSystemFlags,
                  targetContainer,
                  nativeEvent
                )
              );
              return true;
            case "gotpointercapture":
              return pointerId = nativeEvent.pointerId, queuedPointerCaptures.set(
                pointerId,
                accumulateOrCreateContinuousQueuedReplayableEvent(
                  queuedPointerCaptures.get(pointerId) || null,
                  blockedOn,
                  domEventName,
                  eventSystemFlags,
                  targetContainer,
                  nativeEvent
                )
              ), true;
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (null !== targetInst) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (null !== nearestMounted) {
              if (targetInst = nearestMounted.tag, 13 === targetInst) {
                if (targetInst = getSuspenseInstanceFromFiber(nearestMounted), null !== targetInst) {
                  queuedTarget.blockedOn = targetInst;
                  runWithPriority(queuedTarget.priority, function() {
                    if (13 === nearestMounted.tag) {
                      var lane = requestUpdateLane(nearestMounted);
                      lane = getBumpedLaneForHydrationByLane(lane);
                      var root3 = enqueueConcurrentRenderForLane(
                        nearestMounted,
                        lane
                      );
                      null !== root3 && scheduleUpdateOnFiber(root3, nearestMounted, lane);
                      markRetryLaneIfNotHydrated(nearestMounted, lane);
                    }
                  });
                  return;
                }
              } else if (3 === targetInst && nearestMounted.stateNode.current.memoizedState.isDehydrated) {
                queuedTarget.blockedOn = 3 === nearestMounted.tag ? nearestMounted.stateNode.containerInfo : null;
                return;
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (null !== queuedEvent.blockedOn) return false;
          for (var targetContainers = queuedEvent.targetContainers; 0 < targetContainers.length; ) {
            var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.nativeEvent);
            if (null === nextBlockedOn) {
              nextBlockedOn = queuedEvent.nativeEvent;
              var nativeEventClone = new nextBlockedOn.constructor(
                nextBlockedOn.type,
                nextBlockedOn
              ), event = nativeEventClone;
              null !== currentReplayingEvent && console.error(
                "Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue."
              );
              currentReplayingEvent = event;
              nextBlockedOn.target.dispatchEvent(nativeEventClone);
              null === currentReplayingEvent && console.error(
                "Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue."
              );
              currentReplayingEvent = null;
            } else
              return targetContainers = getInstanceFromNode(nextBlockedOn), null !== targetContainers && attemptContinuousHydration(targetContainers), queuedEvent.blockedOn = nextBlockedOn, false;
            targetContainers.shift();
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
          attemptReplayContinuousQueuedEvent(queuedEvent) && map.delete(key);
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          null !== queuedFocus && attemptReplayContinuousQueuedEvent(queuedFocus) && (queuedFocus = null);
          null !== queuedDrag && attemptReplayContinuousQueuedEvent(queuedDrag) && (queuedDrag = null);
          null !== queuedMouse && attemptReplayContinuousQueuedEvent(queuedMouse) && (queuedMouse = null);
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          queuedEvent.blockedOn === unblocked && (queuedEvent.blockedOn = null, hasScheduledReplayAttempt || (hasScheduledReplayAttempt = true, Scheduler.unstable_scheduleCallback(
            Scheduler.unstable_NormalPriority,
            replayUnblockedEvents
          )));
        }
        function scheduleReplayQueueIfNeeded(formReplayingQueue) {
          lastScheduledReplayQueue !== formReplayingQueue && (lastScheduledReplayQueue = formReplayingQueue, Scheduler.unstable_scheduleCallback(
            Scheduler.unstable_NormalPriority,
            function() {
              lastScheduledReplayQueue === formReplayingQueue && (lastScheduledReplayQueue = null);
              for (var i = 0; i < formReplayingQueue.length; i += 3) {
                var form = formReplayingQueue[i], submitterOrAction = formReplayingQueue[i + 1], formData = formReplayingQueue[i + 2];
                if ("function" !== typeof submitterOrAction)
                  if (null === findInstanceBlockingTarget(submitterOrAction || form))
                    continue;
                  else break;
                var formInst = getInstanceFromNode(form);
                null !== formInst && (formReplayingQueue.splice(i, 3), i -= 3, form = {
                  pending: true,
                  data: formData,
                  method: form.method,
                  action: submitterOrAction
                }, Object.freeze(form), startHostTransition(
                  formInst,
                  form,
                  submitterOrAction,
                  formData
                ));
              }
            }
          ));
        }
        function retryIfBlockedOn(unblocked) {
          function unblock(queuedEvent) {
            return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
          }
          null !== queuedFocus && scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          null !== queuedDrag && scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          null !== queuedMouse && scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var i = 0; i < queuedExplicitHydrationTargets.length; i++) {
            var queuedTarget = queuedExplicitHydrationTargets[i];
            queuedTarget.blockedOn === unblocked && (queuedTarget.blockedOn = null);
          }
          for (; 0 < queuedExplicitHydrationTargets.length && (i = queuedExplicitHydrationTargets[0], null === i.blockedOn); )
            attemptExplicitHydrationTarget(i), null === i.blockedOn && queuedExplicitHydrationTargets.shift();
          i = (unblocked.ownerDocument || unblocked).$$reactFormReplay;
          if (null != i)
            for (queuedTarget = 0; queuedTarget < i.length; queuedTarget += 3) {
              var form = i[queuedTarget], submitterOrAction = i[queuedTarget + 1], formProps = form[internalPropsKey] || null;
              if ("function" === typeof submitterOrAction)
                formProps || scheduleReplayQueueIfNeeded(i);
              else if (formProps) {
                var action = null;
                if (submitterOrAction && submitterOrAction.hasAttribute("formAction"))
                  if (form = submitterOrAction, formProps = submitterOrAction[internalPropsKey] || null)
                    action = formProps.formAction;
                  else {
                    if (null !== findInstanceBlockingTarget(form)) continue;
                  }
                else action = formProps.action;
                "function" === typeof action ? i[queuedTarget + 1] = action : (i.splice(queuedTarget, 3), queuedTarget -= 3);
                scheduleReplayQueueIfNeeded(i);
              }
            }
        }
        function ReactDOMRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        function ReactDOMHydrationRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        function warnIfReactDOMContainerInDEV(container) {
          container[internalContainerInstanceKey] && (container._reactRootContainer ? console.error(
            "You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported."
          ) : console.error(
            "You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it."
          ));
        }
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
        var Scheduler = require_scheduler(), React2 = require_react(), ReactDOM2 = require_react_dom(), assign = Object.assign, REACT_LEGACY_ELEMENT_TYPE = Symbol.for("react.element"), REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy");
        Symbol.for("react.scope");
        var REACT_ACTIVITY_TYPE = Symbol.for("react.activity");
        Symbol.for("react.legacy_hidden");
        Symbol.for("react.tracing_marker");
        var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel");
        Symbol.for("react.view_transition");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator, REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), isArrayImpl = Array.isArray, ReactSharedInternals = React2.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, ReactDOMSharedInternals = ReactDOM2.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, NotPending = Object.freeze({
          pending: false,
          data: null,
          method: null,
          action: null
        }), valueStack = [];
        var fiberStack = [];
        var index$jscomp$0 = -1, contextStackCursor = createCursor(null), contextFiberStackCursor = createCursor(null), rootInstanceStackCursor = createCursor(null), hostTransitionProviderCursor = createCursor(null), hasOwnProperty = Object.prototype.hasOwnProperty, scheduleCallback$3 = Scheduler.unstable_scheduleCallback, cancelCallback$1 = Scheduler.unstable_cancelCallback, shouldYield = Scheduler.unstable_shouldYield, requestPaint = Scheduler.unstable_requestPaint, now$1 = Scheduler.unstable_now, getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, ImmediatePriority = Scheduler.unstable_ImmediatePriority, UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, NormalPriority$1 = Scheduler.unstable_NormalPriority, LowPriority = Scheduler.unstable_LowPriority, IdlePriority = Scheduler.unstable_IdlePriority, log$1 = Scheduler.log, unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue, rendererID = null, injectedHook = null, injectedProfilingHooks = null, hasLoggedError = false, isDevToolsPresent = "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__, clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2, nextTransitionLane = 256, nextRetryLane = 4194304, DiscreteEventPriority = 2, ContinuousEventPriority = 8, DefaultEventPriority = 32, IdleEventPriority = 268435456, randomKey = Math.random().toString(36).slice(2), internalInstanceKey = "__reactFiber$" + randomKey, internalPropsKey = "__reactProps$" + randomKey, internalContainerInstanceKey = "__reactContainer$" + randomKey, internalEventHandlersKey = "__reactEvents$" + randomKey, internalEventHandlerListenersKey = "__reactListeners$" + randomKey, internalEventHandlesSetKey = "__reactHandles$" + randomKey, internalRootNodeResourcesKey = "__reactResources$" + randomKey, internalHoistableMarker = "__reactMarker$" + randomKey, allNativeEvents = /* @__PURE__ */ new Set(), registrationNameDependencies = {}, possibleRegistrationNames = {}, hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        }, VALID_ATTRIBUTE_NAME_REGEX = RegExp(
          "^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
        ), illegalAttributeNameCache = {}, validatedAttributeNameCache = {}, disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
        disabledLog.__reactDisabledLog = true;
        var prefix, suffix, reentry = false;
        var componentFrameCache = new ("function" === typeof WeakMap ? WeakMap : Map)();
        var current = null, isRendering = false, escapeSelectorAttributeValueInsideDoubleQuotesRegex = /[\n"\\]/g, didWarnValueDefaultValue$1 = false, didWarnCheckedDefaultChecked = false, didWarnSelectedSetOnOption = false, didWarnInvalidChild = false, didWarnInvalidInnerHTML = false;
        var didWarnValueDefaultValue = false;
        var valuePropNames = ["value", "defaultValue"], didWarnValDefaultVal = false, needsEscaping = /["'&<>\n\t]|^\s|\s$/, specialTags = "address applet area article aside base basefont bgsound blockquote body br button caption center col colgroup dd details dir div dl dt embed fieldset figcaption figure footer form frame frameset h1 h2 h3 h4 h5 h6 head header hgroup hr html iframe img input isindex li link listing main marquee menu menuitem meta nav noembed noframes noscript object ol p param plaintext pre script section select source style summary table tbody td template textarea tfoot th thead title tr track ul wbr xmp".split(
          " "
        ), inScopeTags = "applet caption html table td th marquee object template foreignObject desc title".split(
          " "
        ), buttonScopeTags = inScopeTags.concat(["button"]), impliedEndTags = "dd dt li option optgroup p rp rt".split(" "), emptyAncestorInfoDev = {
          current: null,
          formTag: null,
          aTagInScope: null,
          buttonTagInScope: null,
          nobrTagInScope: null,
          pTagInButtonScope: null,
          listItemTagAutoclosing: null,
          dlItemTagAutoclosing: null,
          containerTagInScope: null,
          implicitRootScope: false
        }, didWarn = {}, shorthandToLonghand = {
          animation: "animationDelay animationDirection animationDuration animationFillMode animationIterationCount animationName animationPlayState animationTimingFunction".split(
            " "
          ),
          background: "backgroundAttachment backgroundClip backgroundColor backgroundImage backgroundOrigin backgroundPositionX backgroundPositionY backgroundRepeat backgroundSize".split(
            " "
          ),
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: "borderBottomColor borderBottomStyle borderBottomWidth borderImageOutset borderImageRepeat borderImageSlice borderImageSource borderImageWidth borderLeftColor borderLeftStyle borderLeftWidth borderRightColor borderRightStyle borderRightWidth borderTopColor borderTopStyle borderTopWidth".split(
            " "
          ),
          borderBlockEnd: [
            "borderBlockEndColor",
            "borderBlockEndStyle",
            "borderBlockEndWidth"
          ],
          borderBlockStart: [
            "borderBlockStartColor",
            "borderBlockStartStyle",
            "borderBlockStartWidth"
          ],
          borderBottom: [
            "borderBottomColor",
            "borderBottomStyle",
            "borderBottomWidth"
          ],
          borderColor: [
            "borderBottomColor",
            "borderLeftColor",
            "borderRightColor",
            "borderTopColor"
          ],
          borderImage: [
            "borderImageOutset",
            "borderImageRepeat",
            "borderImageSlice",
            "borderImageSource",
            "borderImageWidth"
          ],
          borderInlineEnd: [
            "borderInlineEndColor",
            "borderInlineEndStyle",
            "borderInlineEndWidth"
          ],
          borderInlineStart: [
            "borderInlineStartColor",
            "borderInlineStartStyle",
            "borderInlineStartWidth"
          ],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: [
            "borderBottomLeftRadius",
            "borderBottomRightRadius",
            "borderTopLeftRadius",
            "borderTopRightRadius"
          ],
          borderRight: [
            "borderRightColor",
            "borderRightStyle",
            "borderRightWidth"
          ],
          borderStyle: [
            "borderBottomStyle",
            "borderLeftStyle",
            "borderRightStyle",
            "borderTopStyle"
          ],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: [
            "borderBottomWidth",
            "borderLeftWidth",
            "borderRightWidth",
            "borderTopWidth"
          ],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: "fontFamily fontFeatureSettings fontKerning fontLanguageOverride fontSize fontSizeAdjust fontStretch fontStyle fontVariant fontVariantAlternates fontVariantCaps fontVariantEastAsian fontVariantLigatures fontVariantNumeric fontVariantPosition fontWeight lineHeight".split(
            " "
          ),
          fontVariant: "fontVariantAlternates fontVariantCaps fontVariantEastAsian fontVariantLigatures fontVariantNumeric fontVariantPosition".split(
            " "
          ),
          gap: ["columnGap", "rowGap"],
          grid: "gridAutoColumns gridAutoFlow gridAutoRows gridTemplateAreas gridTemplateColumns gridTemplateRows".split(
            " "
          ),
          gridArea: [
            "gridColumnEnd",
            "gridColumnStart",
            "gridRowEnd",
            "gridRowStart"
          ],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: [
            "gridTemplateAreas",
            "gridTemplateColumns",
            "gridTemplateRows"
          ],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: "maskClip maskComposite maskImage maskMode maskOrigin maskPositionX maskPositionY maskRepeat maskSize".split(
            " "
          ),
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: [
            "textDecorationColor",
            "textDecorationLine",
            "textDecorationStyle"
          ],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: [
            "transitionDelay",
            "transitionDuration",
            "transitionProperty",
            "transitionTimingFunction"
          ],
          wordWrap: ["overflowWrap"]
        }, uppercasePattern = /([A-Z])/g, msPattern$1 = /^ms-/, badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/, msPattern = /^-ms-/, hyphenPattern = /-(.)/g, badStyleValueWithSemicolonPattern = /;\s*$/, warnedStyleNames = {}, warnedStyleValues = {}, warnedForNaNValue = false, warnedForInfinityValue = false, unitlessNumbers = new Set(
          "animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(
            " "
          )
        ), MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML", SVG_NAMESPACE = "http://www.w3.org/2000/svg", aliases = /* @__PURE__ */ new Map([
          ["acceptCharset", "accept-charset"],
          ["htmlFor", "for"],
          ["httpEquiv", "http-equiv"],
          ["crossOrigin", "crossorigin"],
          ["accentHeight", "accent-height"],
          ["alignmentBaseline", "alignment-baseline"],
          ["arabicForm", "arabic-form"],
          ["baselineShift", "baseline-shift"],
          ["capHeight", "cap-height"],
          ["clipPath", "clip-path"],
          ["clipRule", "clip-rule"],
          ["colorInterpolation", "color-interpolation"],
          ["colorInterpolationFilters", "color-interpolation-filters"],
          ["colorProfile", "color-profile"],
          ["colorRendering", "color-rendering"],
          ["dominantBaseline", "dominant-baseline"],
          ["enableBackground", "enable-background"],
          ["fillOpacity", "fill-opacity"],
          ["fillRule", "fill-rule"],
          ["floodColor", "flood-color"],
          ["floodOpacity", "flood-opacity"],
          ["fontFamily", "font-family"],
          ["fontSize", "font-size"],
          ["fontSizeAdjust", "font-size-adjust"],
          ["fontStretch", "font-stretch"],
          ["fontStyle", "font-style"],
          ["fontVariant", "font-variant"],
          ["fontWeight", "font-weight"],
          ["glyphName", "glyph-name"],
          ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
          ["glyphOrientationVertical", "glyph-orientation-vertical"],
          ["horizAdvX", "horiz-adv-x"],
          ["horizOriginX", "horiz-origin-x"],
          ["imageRendering", "image-rendering"],
          ["letterSpacing", "letter-spacing"],
          ["lightingColor", "lighting-color"],
          ["markerEnd", "marker-end"],
          ["markerMid", "marker-mid"],
          ["markerStart", "marker-start"],
          ["overlinePosition", "overline-position"],
          ["overlineThickness", "overline-thickness"],
          ["paintOrder", "paint-order"],
          ["panose-1", "panose-1"],
          ["pointerEvents", "pointer-events"],
          ["renderingIntent", "rendering-intent"],
          ["shapeRendering", "shape-rendering"],
          ["stopColor", "stop-color"],
          ["stopOpacity", "stop-opacity"],
          ["strikethroughPosition", "strikethrough-position"],
          ["strikethroughThickness", "strikethrough-thickness"],
          ["strokeDasharray", "stroke-dasharray"],
          ["strokeDashoffset", "stroke-dashoffset"],
          ["strokeLinecap", "stroke-linecap"],
          ["strokeLinejoin", "stroke-linejoin"],
          ["strokeMiterlimit", "stroke-miterlimit"],
          ["strokeOpacity", "stroke-opacity"],
          ["strokeWidth", "stroke-width"],
          ["textAnchor", "text-anchor"],
          ["textDecoration", "text-decoration"],
          ["textRendering", "text-rendering"],
          ["transformOrigin", "transform-origin"],
          ["underlinePosition", "underline-position"],
          ["underlineThickness", "underline-thickness"],
          ["unicodeBidi", "unicode-bidi"],
          ["unicodeRange", "unicode-range"],
          ["unitsPerEm", "units-per-em"],
          ["vAlphabetic", "v-alphabetic"],
          ["vHanging", "v-hanging"],
          ["vIdeographic", "v-ideographic"],
          ["vMathematical", "v-mathematical"],
          ["vectorEffect", "vector-effect"],
          ["vertAdvY", "vert-adv-y"],
          ["vertOriginX", "vert-origin-x"],
          ["vertOriginY", "vert-origin-y"],
          ["wordSpacing", "word-spacing"],
          ["writingMode", "writing-mode"],
          ["xmlnsXlink", "xmlns:xlink"],
          ["xHeight", "x-height"]
        ]), possibleStandardNames = {
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          fetchpriority: "fetchPriority",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          inert: "inert",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          popover: "popover",
          popovertarget: "popoverTarget",
          popovertargetaction: "popoverTargetAction",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          transformorigin: "transformOrigin",
          "transform-origin": "transformOrigin",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        }, ariaProperties = {
          "aria-current": 0,
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          "aria-hidden": 0,
          "aria-invalid": 0,
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        }, warnedProperties$1 = {}, rARIA$1 = RegExp(
          "^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
        ), rARIACamel$1 = RegExp(
          "^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
        ), didWarnValueNull = false, warnedProperties = {}, EVENT_NAME_REGEX = /^on./, INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/, rARIA = RegExp(
          "^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
        ), rARIACamel = RegExp(
          "^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
        ), isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i, currentReplayingEvent = null, restoreTarget = null, restoreQueue = null, isInsideEventHandler = false, canUseDOM = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), passiveBrowserEventsSupported = false;
        if (canUseDOM)
          try {
            var options$jscomp$0 = {};
            Object.defineProperty(options$jscomp$0, "passive", {
              get: function() {
                passiveBrowserEventsSupported = true;
              }
            });
            window.addEventListener("test", options$jscomp$0, options$jscomp$0);
            window.removeEventListener("test", options$jscomp$0, options$jscomp$0);
          } catch (e) {
            passiveBrowserEventsSupported = false;
          }
        var root2 = null, startText = null, fallbackText = null, EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0
        }, SyntheticEvent = createSyntheticEvent(EventInterface), UIEventInterface = assign({}, EventInterface, { view: 0, detail: 0 }), SyntheticUIEvent = createSyntheticEvent(UIEventInterface), lastMovementX, lastMovementY, lastMouseEvent, MouseEventInterface = assign({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget: function(event) {
            return void 0 === event.relatedTarget ? event.fromElement === event.srcElement ? event.toElement : event.fromElement : event.relatedTarget;
          },
          movementX: function(event) {
            if ("movementX" in event) return event.movementX;
            event !== lastMouseEvent && (lastMouseEvent && "mousemove" === event.type ? (lastMovementX = event.screenX - lastMouseEvent.screenX, lastMovementY = event.screenY - lastMouseEvent.screenY) : lastMovementY = lastMovementX = 0, lastMouseEvent = event);
            return lastMovementX;
          },
          movementY: function(event) {
            return "movementY" in event ? event.movementY : lastMovementY;
          }
        }), SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface), DragEventInterface = assign({}, MouseEventInterface, { dataTransfer: 0 }), SyntheticDragEvent = createSyntheticEvent(DragEventInterface), FocusEventInterface = assign({}, UIEventInterface, { relatedTarget: 0 }), SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface), AnimationEventInterface = assign({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        }), SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface), ClipboardEventInterface = assign({}, EventInterface, {
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        }), SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface), CompositionEventInterface = assign({}, EventInterface, { data: 0 }), SyntheticCompositionEvent = createSyntheticEvent(
          CompositionEventInterface
        ), SyntheticInputEvent = SyntheticCompositionEvent, normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        }, translateToKey = {
          8: "Backspace",
          9: "Tab",
          12: "Clear",
          13: "Enter",
          16: "Shift",
          17: "Control",
          18: "Alt",
          19: "Pause",
          20: "CapsLock",
          27: "Escape",
          32: " ",
          33: "PageUp",
          34: "PageDown",
          35: "End",
          36: "Home",
          37: "ArrowLeft",
          38: "ArrowUp",
          39: "ArrowRight",
          40: "ArrowDown",
          45: "Insert",
          46: "Delete",
          112: "F1",
          113: "F2",
          114: "F3",
          115: "F4",
          116: "F5",
          117: "F6",
          118: "F7",
          119: "F8",
          120: "F9",
          121: "F10",
          122: "F11",
          123: "F12",
          144: "NumLock",
          145: "ScrollLock",
          224: "Meta"
        }, modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        }, KeyboardEventInterface = assign({}, UIEventInterface, {
          key: function(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if ("Unidentified" !== key) return key;
            }
            return "keypress" === nativeEvent.type ? (nativeEvent = getEventCharCode(nativeEvent), 13 === nativeEvent ? "Enter" : String.fromCharCode(nativeEvent)) : "keydown" === nativeEvent.type || "keyup" === nativeEvent.type ? translateToKey[nativeEvent.keyCode] || "Unidentified" : "";
          },
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          charCode: function(event) {
            return "keypress" === event.type ? getEventCharCode(event) : 0;
          },
          keyCode: function(event) {
            return "keydown" === event.type || "keyup" === event.type ? event.keyCode : 0;
          },
          which: function(event) {
            return "keypress" === event.type ? getEventCharCode(event) : "keydown" === event.type || "keyup" === event.type ? event.keyCode : 0;
          }
        }), SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface), PointerEventInterface = assign({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0
        }), SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface), TouchEventInterface = assign({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState
        }), SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface), TransitionEventInterface = assign({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        }), SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface), WheelEventInterface = assign({}, MouseEventInterface, {
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
          },
          deltaZ: 0,
          deltaMode: 0
        }), SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface), ToggleEventInterface = assign({}, EventInterface, {
          newState: 0,
          oldState: 0
        }), SyntheticToggleEvent = createSyntheticEvent(ToggleEventInterface), END_KEYCODES = [9, 13, 27, 32], START_KEYCODE = 229, canUseCompositionEvent = canUseDOM && "CompositionEvent" in window, documentMode = null;
        canUseDOM && "documentMode" in document && (documentMode = document.documentMode);
        var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode, useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && 8 < documentMode && 11 >= documentMode), SPACEBAR_CODE = 32, SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE), hasSpaceKeypress = false, isComposing = false, supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        }, activeElement$1 = null, activeElementInst$1 = null, isInputEventSupported = false;
        canUseDOM && (isInputEventSupported = isEventSupported("input") && (!document.documentMode || 9 < document.documentMode));
        var objectIs = "function" === typeof Object.is ? Object.is : is, skipSelectionChangeEvent = canUseDOM && "documentMode" in document && 11 >= document.documentMode, activeElement = null, activeElementInst = null, lastSelection = null, mouseDown = false, vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionrun: makePrefixMap("Transition", "TransitionRun"),
          transitionstart: makePrefixMap("Transition", "TransitionStart"),
          transitioncancel: makePrefixMap("Transition", "TransitionCancel"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        }, prefixedEventNames = {}, style = {};
        canUseDOM && (style = document.createElement("div").style, "AnimationEvent" in window || (delete vendorPrefixes.animationend.animation, delete vendorPrefixes.animationiteration.animation, delete vendorPrefixes.animationstart.animation), "TransitionEvent" in window || delete vendorPrefixes.transitionend.transition);
        var ANIMATION_END = getVendorPrefixedEventName("animationend"), ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration"), ANIMATION_START = getVendorPrefixedEventName("animationstart"), TRANSITION_RUN = getVendorPrefixedEventName("transitionrun"), TRANSITION_START = getVendorPrefixedEventName("transitionstart"), TRANSITION_CANCEL = getVendorPrefixedEventName("transitioncancel"), TRANSITION_END = getVendorPrefixedEventName("transitionend"), topLevelEventsToReactNames = /* @__PURE__ */ new Map(), simpleEventPluginEvents = "abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(
          " "
        );
        simpleEventPluginEvents.push("scrollEnd");
        var CapturedStacks = /* @__PURE__ */ new WeakMap(), OffscreenVisible = 1, OffscreenPassiveEffectsConnected = 2, concurrentQueues = [], concurrentQueuesIndex = 0, concurrentlyUpdatedLanes = 0, emptyContextObject = {};
        Object.freeze(emptyContextObject);
        var resolveFamily = null, failedBoundaries = null, NoMode = 0, ConcurrentMode = 1, ProfileMode = 2, StrictLegacyMode = 8, StrictEffectsMode = 16, NoStrictPassiveEffectsMode = 64;
        var hasBadMapPolyfill = false;
        try {
          var nonExtensibleObject = Object.preventExtensions({});
          /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
          /* @__PURE__ */ new Set([nonExtensibleObject]);
        } catch (e$3) {
          hasBadMapPolyfill = true;
        }
        var forkStack = [], forkStackIndex = 0, treeForkProvider = null, treeForkCount = 0, idStack = [], idStackIndex = 0, treeContextProvider = null, treeContextId = 1, treeContextOverflow = "", hydrationParentFiber = null, nextHydratableInstance = null, isHydrating = false, didSuspendOrErrorDEV = false, hydrationDiffRootDEV = null, hydrationErrors = null, rootOrSingletonContext = false, HydrationMismatchException = Error(
          "Hydration Mismatch Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."
        ), lastResetTime = 0;
        if ("object" === typeof performance && "function" === typeof performance.now) {
          var localPerformance = performance;
          var getCurrentTime = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          getCurrentTime = function() {
            return localDate.now();
          };
        }
        var valueCursor = createCursor(null);
        var rendererCursorDEV = createCursor(null);
        var rendererSigil = {};
        var currentlyRenderingFiber$1 = null, lastContextDependency = null, isDisallowedContextReadInDEV = false, AbortControllerLocal = "undefined" !== typeof AbortController ? AbortController : function() {
          var listeners = [], signal = this.signal = {
            aborted: false,
            addEventListener: function(type, listener) {
              listeners.push(listener);
            }
          };
          this.abort = function() {
            signal.aborted = true;
            listeners.forEach(function(listener) {
              return listener();
            });
          };
        }, scheduleCallback$2 = Scheduler.unstable_scheduleCallback, NormalPriority = Scheduler.unstable_NormalPriority, CacheContext = {
          $$typeof: REACT_CONTEXT_TYPE,
          Consumer: null,
          Provider: null,
          _currentValue: null,
          _currentValue2: null,
          _threadCount: 0,
          _currentRenderer: null,
          _currentRenderer2: null
        }, now = Scheduler.unstable_now, renderStartTime = -0, commitStartTime = -0, profilerStartTime = -1.1, profilerEffectDuration = -0, currentUpdateIsNested = false, nestedUpdateScheduled = false, currentEntangledListeners = null, currentEntangledPendingCount = 0, currentEntangledLane = 0, currentEntangledActionThenable = null, prevOnStartTransitionFinish = ReactSharedInternals.S;
        ReactSharedInternals.S = function(transition, returnValue) {
          "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && entangleAsyncAction(transition, returnValue);
          null !== prevOnStartTransitionFinish && prevOnStartTransitionFinish(transition, returnValue);
        };
        var resumedCache = createCursor(null), ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function() {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function() {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        }, pendingComponentWillMountWarnings = [], pendingUNSAFE_ComponentWillMountWarnings = [], pendingComponentWillReceivePropsWarnings = [], pendingUNSAFE_ComponentWillReceivePropsWarnings = [], pendingComponentWillUpdateWarnings = [], pendingUNSAFE_ComponentWillUpdateWarnings = [], didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
          didWarnAboutUnsafeLifecycles.has(fiber.type) || ("function" === typeof instance.componentWillMount && true !== instance.componentWillMount.__suppressDeprecationWarning && pendingComponentWillMountWarnings.push(fiber), fiber.mode & StrictLegacyMode && "function" === typeof instance.UNSAFE_componentWillMount && pendingUNSAFE_ComponentWillMountWarnings.push(fiber), "function" === typeof instance.componentWillReceiveProps && true !== instance.componentWillReceiveProps.__suppressDeprecationWarning && pendingComponentWillReceivePropsWarnings.push(fiber), fiber.mode & StrictLegacyMode && "function" === typeof instance.UNSAFE_componentWillReceiveProps && pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber), "function" === typeof instance.componentWillUpdate && true !== instance.componentWillUpdate.__suppressDeprecationWarning && pendingComponentWillUpdateWarnings.push(fiber), fiber.mode & StrictLegacyMode && "function" === typeof instance.UNSAFE_componentWillUpdate && pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber));
        };
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
          var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
          0 < pendingComponentWillMountWarnings.length && (pendingComponentWillMountWarnings.forEach(function(fiber) {
            componentWillMountUniqueNames.add(
              getComponentNameFromFiber(fiber) || "Component"
            );
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingComponentWillMountWarnings = []);
          var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
          0 < pendingUNSAFE_ComponentWillMountWarnings.length && (pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
            UNSAFE_componentWillMountUniqueNames.add(
              getComponentNameFromFiber(fiber) || "Component"
            );
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingUNSAFE_ComponentWillMountWarnings = []);
          var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
          0 < pendingComponentWillReceivePropsWarnings.length && (pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
            componentWillReceivePropsUniqueNames.add(
              getComponentNameFromFiber(fiber) || "Component"
            );
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingComponentWillReceivePropsWarnings = []);
          var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
          0 < pendingUNSAFE_ComponentWillReceivePropsWarnings.length && (pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(
            function(fiber) {
              UNSAFE_componentWillReceivePropsUniqueNames.add(
                getComponentNameFromFiber(fiber) || "Component"
              );
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            }
          ), pendingUNSAFE_ComponentWillReceivePropsWarnings = []);
          var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
          0 < pendingComponentWillUpdateWarnings.length && (pendingComponentWillUpdateWarnings.forEach(function(fiber) {
            componentWillUpdateUniqueNames.add(
              getComponentNameFromFiber(fiber) || "Component"
            );
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingComponentWillUpdateWarnings = []);
          var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
          0 < pendingUNSAFE_ComponentWillUpdateWarnings.length && (pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
            UNSAFE_componentWillUpdateUniqueNames.add(
              getComponentNameFromFiber(fiber) || "Component"
            );
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingUNSAFE_ComponentWillUpdateWarnings = []);
          if (0 < UNSAFE_componentWillMountUniqueNames.size) {
            var sortedNames = setToSortedString(
              UNSAFE_componentWillMountUniqueNames
            );
            console.error(
              "Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s",
              sortedNames
            );
          }
          0 < UNSAFE_componentWillReceivePropsUniqueNames.size && (sortedNames = setToSortedString(
            UNSAFE_componentWillReceivePropsUniqueNames
          ), console.error(
            "Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n\nPlease update the following components: %s",
            sortedNames
          ));
          0 < UNSAFE_componentWillUpdateUniqueNames.size && (sortedNames = setToSortedString(
            UNSAFE_componentWillUpdateUniqueNames
          ), console.error(
            "Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s",
            sortedNames
          ));
          0 < componentWillMountUniqueNames.size && (sortedNames = setToSortedString(componentWillMountUniqueNames), console.warn(
            "componentWillMount has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
            sortedNames
          ));
          0 < componentWillReceivePropsUniqueNames.size && (sortedNames = setToSortedString(
            componentWillReceivePropsUniqueNames
          ), console.warn(
            "componentWillReceiveProps has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
            sortedNames
          ));
          0 < componentWillUpdateUniqueNames.size && (sortedNames = setToSortedString(componentWillUpdateUniqueNames), console.warn(
            "componentWillUpdate has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
            sortedNames
          ));
        };
        var pendingLegacyContextWarning = /* @__PURE__ */ new Map(), didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
        ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
          var strictRoot = null;
          for (var node = fiber; null !== node; )
            node.mode & StrictLegacyMode && (strictRoot = node), node = node.return;
          null === strictRoot ? console.error(
            "Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue."
          ) : !didWarnAboutLegacyContext.has(fiber.type) && (node = pendingLegacyContextWarning.get(strictRoot), null != fiber.type.contextTypes || null != fiber.type.childContextTypes || null !== instance && "function" === typeof instance.getChildContext) && (void 0 === node && (node = [], pendingLegacyContextWarning.set(strictRoot, node)), node.push(fiber));
        };
        ReactStrictModeWarnings.flushLegacyContextWarning = function() {
          pendingLegacyContextWarning.forEach(function(fiberArray) {
            if (0 !== fiberArray.length) {
              var firstFiber = fiberArray[0], uniqueNames = /* @__PURE__ */ new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              runWithFiberInDEV(firstFiber, function() {
                console.error(
                  "Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://react.dev/link/legacy-context",
                  sortedNames
                );
              });
            }
          });
        };
        ReactStrictModeWarnings.discardPendingWarnings = function() {
          pendingComponentWillMountWarnings = [];
          pendingUNSAFE_ComponentWillMountWarnings = [];
          pendingComponentWillReceivePropsWarnings = [];
          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          pendingComponentWillUpdateWarnings = [];
          pendingUNSAFE_ComponentWillUpdateWarnings = [];
          pendingLegacyContextWarning = /* @__PURE__ */ new Map();
        };
        var SuspenseException = Error(
          "Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`."
        ), SuspenseyCommitException = Error(
          "Suspense Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."
        ), SuspenseActionException = Error(
          "Suspense Exception: This is not a real error! It's an implementation detail of `useActionState` to interrupt the current render. You must either rethrow it immediately, or move the `useActionState` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary."
        ), noopSuspenseyCommitThenable = {
          then: function() {
            console.error(
              'Internal React error: A listener was unexpectedly attached to a "noop" thenable. This is a bug in React. Please file an issue.'
            );
          }
        }, suspendedThenable = null, needsToResetSuspendedThenableDEV = false, NoFlags = 0, HasEffect = 1, Insertion = 2, Layout = 4, Passive = 8, UpdateState = 0, ReplaceState = 1, ForceUpdate = 2, CaptureUpdate = 3, hasForceUpdate = false;
        var didWarnUpdateInsideUpdate = false;
        var currentlyProcessingQueue = null;
        var didReadFromEntangledAsyncAction = false, currentTreeHiddenStackCursor = createCursor(null), prevEntangledRenderLanesCursor = createCursor(0), didWarnUncachedGetSnapshot;
        var didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
        var didWarnAboutUseWrappedInTryCatch = /* @__PURE__ */ new Set();
        var didWarnAboutAsyncClientComponent = /* @__PURE__ */ new Set();
        var didWarnAboutUseFormState = /* @__PURE__ */ new Set();
        var renderLanes = 0, currentlyRenderingFiber = null, currentHook = null, workInProgressHook = null, didScheduleRenderPhaseUpdate = false, didScheduleRenderPhaseUpdateDuringThisPass = false, shouldDoubleInvokeUserFnsInHooksDEV = false, localIdCounter = 0, thenableIndexCounter$1 = 0, thenableState$1 = null, globalClientIdCounter = 0, RE_RENDER_LIMIT = 25, currentHookNameInDev = null, hookTypesDev = null, hookTypesUpdateIndexDev = -1, ignorePreviousDependencies = false, ContextOnlyDispatcher = {
          readContext,
          use,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useInsertionEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useSyncExternalStore: throwInvalidHookError,
          useId: throwInvalidHookError,
          useHostTransitionStatus: throwInvalidHookError,
          useFormState: throwInvalidHookError,
          useActionState: throwInvalidHookError,
          useOptimistic: throwInvalidHookError,
          useMemoCache: throwInvalidHookError,
          useCacheRefresh: throwInvalidHookError
        }, HooksDispatcherOnMountInDEV = null, HooksDispatcherOnMountWithHookTypesInDEV = null, HooksDispatcherOnUpdateInDEV = null, HooksDispatcherOnRerenderInDEV = null, InvalidNestedHooksDispatcherOnMountInDEV = null, InvalidNestedHooksDispatcherOnUpdateInDEV = null, InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        HooksDispatcherOnMountInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          use,
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            mountHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create2, createDeps) {
            currentHookNameInDev = "useEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(createDeps);
            return mountEffect(create2, createDeps);
          },
          useImperativeHandle: function(ref, create2, deps) {
            currentHookNameInDev = "useImperativeHandle";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create2, deps);
          },
          useInsertionEffect: function(create2, deps) {
            currentHookNameInDev = "useInsertionEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            mountEffectImpl(4, Insertion, create2, deps);
          },
          useLayoutEffect: function(create2, deps) {
            currentHookNameInDev = "useLayoutEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create2, deps);
          },
          useMemo: function(create2, deps) {
            currentHookNameInDev = "useMemo";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create2, deps);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            mountHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            mountHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useDebugValue: function() {
            currentHookNameInDev = "useDebugValue";
            mountHookTypesDev();
          },
          useDeferredValue: function(value, initialValue) {
            currentHookNameInDev = "useDeferredValue";
            mountHookTypesDev();
            return mountDeferredValue(value, initialValue);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            mountHookTypesDev();
            return mountTransition();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            mountHookTypesDev();
            return mountSyncExternalStore(
              subscribe,
              getSnapshot,
              getServerSnapshot
            );
          },
          useId: function() {
            currentHookNameInDev = "useId";
            mountHookTypesDev();
            return mountId();
          },
          useFormState: function(action, initialState) {
            currentHookNameInDev = "useFormState";
            mountHookTypesDev();
            warnOnUseFormStateInDev();
            return mountActionState(action, initialState);
          },
          useActionState: function(action, initialState) {
            currentHookNameInDev = "useActionState";
            mountHookTypesDev();
            return mountActionState(action, initialState);
          },
          useOptimistic: function(passthrough) {
            currentHookNameInDev = "useOptimistic";
            mountHookTypesDev();
            return mountOptimistic(passthrough);
          },
          useHostTransitionStatus,
          useMemoCache,
          useCacheRefresh: function() {
            currentHookNameInDev = "useCacheRefresh";
            mountHookTypesDev();
            return mountRefresh();
          }
        };
        HooksDispatcherOnMountWithHookTypesInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          use,
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create2, createDeps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return mountEffect(create2, createDeps);
          },
          useImperativeHandle: function(ref, create2, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return mountImperativeHandle(ref, create2, deps);
          },
          useInsertionEffect: function(create2, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            mountEffectImpl(4, Insertion, create2, deps);
          },
          useLayoutEffect: function(create2, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return mountLayoutEffect(create2, deps);
          },
          useMemo: function(create2, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create2, deps);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useDebugValue: function() {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
          },
          useDeferredValue: function(value, initialValue) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return mountDeferredValue(value, initialValue);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return mountTransition();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return mountSyncExternalStore(
              subscribe,
              getSnapshot,
              getServerSnapshot
            );
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return mountId();
          },
          useActionState: function(action, initialState) {
            currentHookNameInDev = "useActionState";
            updateHookTypesDev();
            return mountActionState(action, initialState);
          },
          useFormState: function(action, initialState) {
            currentHookNameInDev = "useFormState";
            updateHookTypesDev();
            warnOnUseFormStateInDev();
            return mountActionState(action, initialState);
          },
          useOptimistic: function(passthrough) {
            currentHookNameInDev = "useOptimistic";
            updateHookTypesDev();
            return mountOptimistic(passthrough);
          },
          useHostTransitionStatus,
          useMemoCache,
          useCacheRefresh: function() {
            currentHookNameInDev = "useCacheRefresh";
            updateHookTypesDev();
            return mountRefresh();
          }
        };
        HooksDispatcherOnUpdateInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          use,
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create2, createDeps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            updateEffectImpl(2048, Passive, create2, createDeps);
          },
          useImperativeHandle: function(ref, create2, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create2, deps);
          },
          useInsertionEffect: function(create2, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateEffectImpl(4, Insertion, create2, deps);
          },
          useLayoutEffect: function(create2, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateEffectImpl(4, Layout, create2, deps);
          },
          useMemo: function(create2, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create2, deps);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useRef: function() {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          },
          useState: function() {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(basicStateReducer);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useDebugValue: function() {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
          },
          useDeferredValue: function(value, initialValue) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return updateDeferredValue(value, initialValue);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return updateTransition();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(
              subscribe,
              getSnapshot,
              getServerSnapshot
            );
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          },
          useFormState: function(action) {
            currentHookNameInDev = "useFormState";
            updateHookTypesDev();
            warnOnUseFormStateInDev();
            return updateActionState(action);
          },
          useActionState: function(action) {
            currentHookNameInDev = "useActionState";
            updateHookTypesDev();
            return updateActionState(action);
          },
          useOptimistic: function(passthrough, reducer) {
            currentHookNameInDev = "useOptimistic";
            updateHookTypesDev();
            return updateOptimistic(passthrough, reducer);
          },
          useHostTransitionStatus,
          useMemoCache,
          useCacheRefresh: function() {
            currentHookNameInDev = "useCacheRefresh";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          }
        };
        HooksDispatcherOnRerenderInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          use,
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create2, createDeps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            updateEffectImpl(2048, Passive, create2, createDeps);
          },
          useImperativeHandle: function(ref, create2, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create2, deps);
          },
          useInsertionEffect: function(create2, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateEffectImpl(4, Insertion, create2, deps);
          },
          useLayoutEffect: function(create2, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateEffectImpl(4, Layout, create2, deps);
          },
          useMemo: function(create2, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return updateMemo(create2, deps);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useRef: function() {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          },
          useState: function() {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderReducer(basicStateReducer);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useDebugValue: function() {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
          },
          useDeferredValue: function(value, initialValue) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return rerenderDeferredValue(value, initialValue);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return rerenderTransition();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(
              subscribe,
              getSnapshot,
              getServerSnapshot
            );
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          },
          useFormState: function(action) {
            currentHookNameInDev = "useFormState";
            updateHookTypesDev();
            warnOnUseFormStateInDev();
            return rerenderActionState(action);
          },
          useActionState: function(action) {
            currentHookNameInDev = "useActionState";
            updateHookTypesDev();
            return rerenderActionState(action);
          },
          useOptimistic: function(passthrough, reducer) {
            currentHookNameInDev = "useOptimistic";
            updateHookTypesDev();
            return rerenderOptimistic(passthrough, reducer);
          },
          useHostTransitionStatus,
          useMemoCache,
          useCacheRefresh: function() {
            currentHookNameInDev = "useCacheRefresh";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          }
        };
        InvalidNestedHooksDispatcherOnMountInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          use: function(usable) {
            warnInvalidHookAccess();
            return use(usable);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create2, createDeps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create2, createDeps);
          },
          useImperativeHandle: function(ref, create2, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create2, deps);
          },
          useInsertionEffect: function(create2, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            mountEffectImpl(4, Insertion, create2, deps);
          },
          useLayoutEffect: function(create2, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create2, deps);
          },
          useMemo: function(create2, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create2, deps);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useDebugValue: function() {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
          },
          useDeferredValue: function(value, initialValue) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value, initialValue);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountSyncExternalStore(
              subscribe,
              getSnapshot,
              getServerSnapshot
            );
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountId();
          },
          useFormState: function(action, initialState) {
            currentHookNameInDev = "useFormState";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountActionState(action, initialState);
          },
          useActionState: function(action, initialState) {
            currentHookNameInDev = "useActionState";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountActionState(action, initialState);
          },
          useOptimistic: function(passthrough) {
            currentHookNameInDev = "useOptimistic";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountOptimistic(passthrough);
          },
          useMemoCache: function(size) {
            warnInvalidHookAccess();
            return useMemoCache(size);
          },
          useHostTransitionStatus,
          useCacheRefresh: function() {
            currentHookNameInDev = "useCacheRefresh";
            mountHookTypesDev();
            return mountRefresh();
          }
        };
        InvalidNestedHooksDispatcherOnUpdateInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          use: function(usable) {
            warnInvalidHookAccess();
            return use(usable);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create2, createDeps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            updateEffectImpl(2048, Passive, create2, createDeps);
          },
          useImperativeHandle: function(ref, create2, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create2, deps);
          },
          useInsertionEffect: function(create2, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffectImpl(4, Insertion, create2, deps);
          },
          useLayoutEffect: function(create2, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffectImpl(4, Layout, create2, deps);
          },
          useMemo: function(create2, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create2, deps);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useRef: function() {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          },
          useState: function() {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(basicStateReducer);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useDebugValue: function() {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
          },
          useDeferredValue: function(value, initialValue) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value, initialValue);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(
              subscribe,
              getSnapshot,
              getServerSnapshot
            );
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          },
          useFormState: function(action) {
            currentHookNameInDev = "useFormState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateActionState(action);
          },
          useActionState: function(action) {
            currentHookNameInDev = "useActionState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateActionState(action);
          },
          useOptimistic: function(passthrough, reducer) {
            currentHookNameInDev = "useOptimistic";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateOptimistic(passthrough, reducer);
          },
          useMemoCache: function(size) {
            warnInvalidHookAccess();
            return useMemoCache(size);
          },
          useHostTransitionStatus,
          useCacheRefresh: function() {
            currentHookNameInDev = "useCacheRefresh";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          }
        };
        InvalidNestedHooksDispatcherOnRerenderInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          use: function(usable) {
            warnInvalidHookAccess();
            return use(usable);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create2, createDeps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            updateEffectImpl(2048, Passive, create2, createDeps);
          },
          useImperativeHandle: function(ref, create2, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create2, deps);
          },
          useInsertionEffect: function(create2, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffectImpl(4, Insertion, create2, deps);
          },
          useLayoutEffect: function(create2, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffectImpl(4, Layout, create2, deps);
          },
          useMemo: function(create2, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create2, deps);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useRef: function() {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          },
          useState: function() {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderReducer(basicStateReducer);
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          },
          useDebugValue: function() {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
          },
          useDeferredValue: function(value, initialValue) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value, initialValue);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(
              subscribe,
              getSnapshot,
              getServerSnapshot
            );
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          },
          useFormState: function(action) {
            currentHookNameInDev = "useFormState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderActionState(action);
          },
          useActionState: function(action) {
            currentHookNameInDev = "useActionState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderActionState(action);
          },
          useOptimistic: function(passthrough, reducer) {
            currentHookNameInDev = "useOptimistic";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderOptimistic(passthrough, reducer);
          },
          useMemoCache: function(size) {
            warnInvalidHookAccess();
            return useMemoCache(size);
          },
          useHostTransitionStatus,
          useCacheRefresh: function() {
            currentHookNameInDev = "useCacheRefresh";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
          }
        };
        var callComponent = {
          "react-stack-bottom-frame": function(Component, props, secondArg) {
            var wasRendering = isRendering;
            isRendering = true;
            try {
              return Component(props, secondArg);
            } finally {
              isRendering = wasRendering;
            }
          }
        }, callComponentInDEV = callComponent["react-stack-bottom-frame"].bind(callComponent), callRender = {
          "react-stack-bottom-frame": function(instance) {
            var wasRendering = isRendering;
            isRendering = true;
            try {
              return instance.render();
            } finally {
              isRendering = wasRendering;
            }
          }
        }, callRenderInDEV = callRender["react-stack-bottom-frame"].bind(callRender), callComponentDidMount = {
          "react-stack-bottom-frame": function(finishedWork, instance) {
            try {
              instance.componentDidMount();
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
        }, callComponentDidMountInDEV = callComponentDidMount["react-stack-bottom-frame"].bind(callComponentDidMount), callComponentDidUpdate = {
          "react-stack-bottom-frame": function(finishedWork, instance, prevProps, prevState, snapshot) {
            try {
              instance.componentDidUpdate(prevProps, prevState, snapshot);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
        }, callComponentDidUpdateInDEV = callComponentDidUpdate["react-stack-bottom-frame"].bind(callComponentDidUpdate), callComponentDidCatch = {
          "react-stack-bottom-frame": function(instance, errorInfo) {
            var stack = errorInfo.stack;
            instance.componentDidCatch(errorInfo.value, {
              componentStack: null !== stack ? stack : ""
            });
          }
        }, callComponentDidCatchInDEV = callComponentDidCatch["react-stack-bottom-frame"].bind(callComponentDidCatch), callComponentWillUnmount = {
          "react-stack-bottom-frame": function(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentWillUnmount();
            } catch (error) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error);
            }
          }
        }, callComponentWillUnmountInDEV = callComponentWillUnmount["react-stack-bottom-frame"].bind(callComponentWillUnmount), callCreate = {
          "react-stack-bottom-frame": function(effect) {
            null != effect.resourceKind && console.error(
              "Expected only SimpleEffects when enableUseEffectCRUDOverload is disabled, got %s",
              effect.resourceKind
            );
            var create2 = effect.create;
            effect = effect.inst;
            create2 = create2();
            return effect.destroy = create2;
          }
        }, callCreateInDEV = callCreate["react-stack-bottom-frame"].bind(callCreate), callDestroy = {
          "react-stack-bottom-frame": function(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error);
            }
          }
        }, callDestroyInDEV = callDestroy["react-stack-bottom-frame"].bind(callDestroy), callLazyInit = {
          "react-stack-bottom-frame": function(lazy) {
            var init = lazy._init;
            return init(lazy._payload);
          }
        }, callLazyInitInDEV = callLazyInit["react-stack-bottom-frame"].bind(callLazyInit), thenableState = null, thenableIndexCounter = 0, currentDebugInfo = null, didWarnAboutMaps;
        var didWarnAboutGenerators = didWarnAboutMaps = false;
        var ownerHasKeyUseWarning = {};
        var ownerHasFunctionTypeWarning = {};
        var ownerHasSymbolTypeWarning = {};
        warnForMissingKey = function(returnFiber, workInProgress2, child) {
          if (null !== child && "object" === typeof child && child._store && (!child._store.validated && null == child.key || 2 === child._store.validated)) {
            if ("object" !== typeof child._store)
              throw Error(
                "React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue."
              );
            child._store.validated = 1;
            var componentName2 = getComponentNameFromFiber(returnFiber), componentKey = componentName2 || "null";
            if (!ownerHasKeyUseWarning[componentKey]) {
              ownerHasKeyUseWarning[componentKey] = true;
              child = child._owner;
              returnFiber = returnFiber._debugOwner;
              var currentComponentErrorInfo = "";
              returnFiber && "number" === typeof returnFiber.tag && (componentKey = getComponentNameFromFiber(returnFiber)) && (currentComponentErrorInfo = "\n\nCheck the render method of `" + componentKey + "`.");
              currentComponentErrorInfo || componentName2 && (currentComponentErrorInfo = "\n\nCheck the top-level render call using <" + componentName2 + ">.");
              var childOwnerAppendix = "";
              null != child && returnFiber !== child && (componentName2 = null, "number" === typeof child.tag ? componentName2 = getComponentNameFromFiber(child) : "string" === typeof child.name && (componentName2 = child.name), componentName2 && (childOwnerAppendix = " It was passed a child from " + componentName2 + "."));
              runWithFiberInDEV(workInProgress2, function() {
                console.error(
                  'Each child in a list should have a unique "key" prop.%s%s See https://react.dev/link/warning-keys for more information.',
                  currentComponentErrorInfo,
                  childOwnerAppendix
                );
              });
            }
          }
        };
        var reconcileChildFibers = createChildReconciler(true), mountChildFibers = createChildReconciler(false), suspenseHandlerStackCursor = createCursor(null), shellBoundary = null, SubtreeSuspenseContextMask = 1, ForceSuspenseFallback = 2, suspenseStackCursor = createCursor(0), fakeInternalInstance = {};
        var didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
        var didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
        var didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
        var didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
        var didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
        var didWarnAboutContextTypes$1 = /* @__PURE__ */ new Set();
        var didWarnAboutChildContextTypes = /* @__PURE__ */ new Set();
        var didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
        var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
        Object.freeze(fakeInternalInstance);
        var classComponentUpdater = {
          enqueueSetState: function(inst, payload, callback) {
            inst = inst._reactInternals;
            var lane = requestUpdateLane(inst), update = createUpdate(lane);
            update.payload = payload;
            void 0 !== callback && null !== callback && (warnOnInvalidCallback(callback), update.callback = callback);
            payload = enqueueUpdate(inst, update, lane);
            null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
            markStateUpdateScheduled(inst, lane);
          },
          enqueueReplaceState: function(inst, payload, callback) {
            inst = inst._reactInternals;
            var lane = requestUpdateLane(inst), update = createUpdate(lane);
            update.tag = ReplaceState;
            update.payload = payload;
            void 0 !== callback && null !== callback && (warnOnInvalidCallback(callback), update.callback = callback);
            payload = enqueueUpdate(inst, update, lane);
            null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
            markStateUpdateScheduled(inst, lane);
          },
          enqueueForceUpdate: function(inst, callback) {
            inst = inst._reactInternals;
            var lane = requestUpdateLane(inst), update = createUpdate(lane);
            update.tag = ForceUpdate;
            void 0 !== callback && null !== callback && (warnOnInvalidCallback(callback), update.callback = callback);
            callback = enqueueUpdate(inst, update, lane);
            null !== callback && (scheduleUpdateOnFiber(callback, inst, lane), entangleTransitions(callback, inst, lane));
            null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markForceUpdateScheduled && injectedProfilingHooks.markForceUpdateScheduled(inst, lane);
          }
        }, reportGlobalError = "function" === typeof reportError ? reportError : function(error) {
          if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
            var event = new window.ErrorEvent("error", {
              bubbles: true,
              cancelable: true,
              message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
              error
            });
            if (!window.dispatchEvent(event)) return;
          } else if ("object" === typeof process && "function" === typeof process.emit) {
            process.emit("uncaughtException", error);
            return;
          }
          console.error(error);
        }, componentName = null, errorBoundaryName = null, SelectiveHydrationException = Error(
          "This is not a real error. It's an implementation detail of React's selective hydration feature. If this leaks into userspace, it's a bug in React. Please file an issue."
        ), didReceiveUpdate = false;
        var didWarnAboutBadClass = {};
        var didWarnAboutContextTypeOnFunctionComponent = {};
        var didWarnAboutContextTypes = {};
        var didWarnAboutGetDerivedStateOnFunctionComponent = {};
        var didWarnAboutReassigningProps = false;
        var didWarnAboutRevealOrder = {};
        var didWarnAboutTailOptions = {};
        var SUSPENDED_MARKER = {
          dehydrated: null,
          treeContext: null,
          retryLane: 0,
          hydrationErrors: null
        }, hasWarnedAboutUsingNoValuePropOnContextProvider = false, didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
        var offscreenSubtreeIsHidden = false, offscreenSubtreeWasHidden = false, needsFormReset = false, PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set, nextEffect = null, inProgressLanes = null, inProgressRoot = null, hostParent = null, hostParentIsContainer = false, currentHoistableRoot = null, suspenseyCommitFlag = 8192, DefaultAsyncDispatcher = {
          getCacheForType: function(resourceType) {
            var cache = readContext(CacheContext), cacheForType = cache.data.get(resourceType);
            void 0 === cacheForType && (cacheForType = resourceType(), cache.data.set(resourceType, cacheForType));
            return cacheForType;
          },
          getOwner: function() {
            return current;
          }
        };
        if ("function" === typeof Symbol && Symbol.for) {
          var symbolFor = Symbol.for;
          symbolFor("selector.component");
          symbolFor("selector.has_pseudo_class");
          symbolFor("selector.role");
          symbolFor("selector.test_id");
          symbolFor("selector.text");
        }
        var commitHooks = [], PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map, NoContext = 0, RenderContext = 2, CommitContext = 4, RootInProgress = 0, RootFatalErrored = 1, RootErrored = 2, RootSuspended = 3, RootSuspendedWithDelay = 4, RootSuspendedAtTheShell = 6, RootCompleted = 5, executionContext = NoContext, workInProgressRoot = null, workInProgress = null, workInProgressRootRenderLanes = 0, NotSuspended = 0, SuspendedOnError = 1, SuspendedOnData = 2, SuspendedOnImmediate = 3, SuspendedOnInstance = 4, SuspendedOnInstanceAndReadyToContinue = 5, SuspendedOnDeprecatedThrowPromise = 6, SuspendedAndReadyToContinue = 7, SuspendedOnHydration = 8, SuspendedOnAction = 9, workInProgressSuspendedReason = NotSuspended, workInProgressThrownValue = null, workInProgressRootDidSkipSuspendedSiblings = false, workInProgressRootIsPrerendering = false, workInProgressRootDidAttachPingListener = false, entangledRenderLanes = 0, workInProgressRootExitStatus = RootInProgress, workInProgressRootSkippedLanes = 0, workInProgressRootInterleavedUpdatedLanes = 0, workInProgressRootPingedLanes = 0, workInProgressDeferredLane = 0, workInProgressSuspendedRetryLanes = 0, workInProgressRootConcurrentErrors = null, workInProgressRootRecoverableErrors = null, workInProgressRootDidIncludeRecursiveRenderUpdate = false, globalMostRecentFallbackTime = 0, FALLBACK_THROTTLE_MS = 300, workInProgressRootRenderTargetTime = Infinity, RENDER_TIMEOUT_MS = 500, workInProgressTransitions = null, legacyErrorBoundariesThatAlreadyFailed = null, IMMEDIATE_COMMIT = 0, SUSPENDED_COMMIT = 1, THROTTLED_COMMIT = 2, NO_PENDING_EFFECTS = 0, PENDING_MUTATION_PHASE = 1, PENDING_LAYOUT_PHASE = 2, PENDING_AFTER_MUTATION_PHASE = 3, PENDING_SPAWNED_WORK = 4, PENDING_PASSIVE_PHASE = 5, pendingEffectsStatus = 0, pendingEffectsRoot = null, pendingFinishedWork = null, pendingEffectsLanes = 0, pendingEffectsRemainingLanes = 0, pendingPassiveTransitions = null, pendingRecoverableErrors = null, NESTED_UPDATE_LIMIT = 50, nestedUpdateCount = 0, rootWithNestedUpdates = null, isFlushingPassiveEffects = false, didScheduleUpdateDuringPassiveEffects = false, NESTED_PASSIVE_UPDATE_LIMIT = 50, nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null, isRunningInsertionEffect = false, didWarnStateUpdateForNotYetMountedComponent = null, didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
        var fakeActCallbackNode$1 = {}, firstScheduledRoot = null, lastScheduledRoot = null, didScheduleMicrotask = false, didScheduleMicrotask_act = false, mightHavePendingSyncWork = false, isFlushingWork = false, currentEventTransitionLane = 0, fakeActCallbackNode = {};
        (function() {
          for (var i = 0; i < simpleEventPluginEvents.length; i++) {
            var eventName = simpleEventPluginEvents[i], domEventName = eventName.toLowerCase();
            eventName = eventName[0].toUpperCase() + eventName.slice(1);
            registerSimpleEvent(domEventName, "on" + eventName);
          }
          registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
          registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
          registerSimpleEvent(ANIMATION_START, "onAnimationStart");
          registerSimpleEvent("dblclick", "onDoubleClick");
          registerSimpleEvent("focusin", "onFocus");
          registerSimpleEvent("focusout", "onBlur");
          registerSimpleEvent(TRANSITION_RUN, "onTransitionRun");
          registerSimpleEvent(TRANSITION_START, "onTransitionStart");
          registerSimpleEvent(TRANSITION_CANCEL, "onTransitionCancel");
          registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
        })();
        registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
        registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
        registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
        registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
        registerTwoPhaseEvent(
          "onChange",
          "change click focusin focusout input keydown keyup selectionchange".split(
            " "
          )
        );
        registerTwoPhaseEvent(
          "onSelect",
          "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(
            " "
          )
        );
        registerTwoPhaseEvent("onBeforeInput", [
          "compositionend",
          "keypress",
          "textInput",
          "paste"
        ]);
        registerTwoPhaseEvent(
          "onCompositionEnd",
          "compositionend focusout keydown keypress keyup mousedown".split(" ")
        );
        registerTwoPhaseEvent(
          "onCompositionStart",
          "compositionstart focusout keydown keypress keyup mousedown".split(" ")
        );
        registerTwoPhaseEvent(
          "onCompositionUpdate",
          "compositionupdate focusout keydown keypress keyup mousedown".split(" ")
        );
        var mediaEventTypes = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(
          " "
        ), nonDelegatedEvents = new Set(
          "beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(mediaEventTypes)
        ), listeningMarker = "_reactListening" + Math.random().toString(36).slice(2), didWarnControlledToUncontrolled = false, didWarnUncontrolledToControlled = false, didWarnFormActionType = false, didWarnFormActionName = false, didWarnFormActionTarget = false, didWarnFormActionMethod = false, didWarnPopoverTargetObject = false;
        var didWarnForNewBooleanPropsWithEmptyValue = {};
        var NORMALIZE_NEWLINES_REGEX = /\r\n?/g, NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g, xlinkNamespace = "http://www.w3.org/1999/xlink", xmlNamespace = "http://www.w3.org/XML/1998/namespace", EXPECTED_FORM_ACTION_URL = "javascript:throw new Error('React form unexpectedly submitted.')", SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning", SUSPENSE_START_DATA = "$", SUSPENSE_END_DATA = "/$", SUSPENSE_PENDING_START_DATA = "$?", SUSPENSE_FALLBACK_START_DATA = "$!", PREAMBLE_CONTRIBUTION_HTML = 1, PREAMBLE_CONTRIBUTION_BODY = 2, PREAMBLE_CONTRIBUTION_HEAD = 4, FORM_STATE_IS_MATCHING = "F!", FORM_STATE_IS_NOT_MATCHING = "F", DOCUMENT_READY_STATE_COMPLETE = "complete", STYLE = "style", HostContextNamespaceNone = 0, HostContextNamespaceSvg = 1, HostContextNamespaceMath = 2, eventsEnabled = null, selectionInformation = null, warnedUnknownTags = { dialog: true, webview: true }, currentPopstateTransitionEvent = null, scheduleTimeout = "function" === typeof setTimeout ? setTimeout : void 0, cancelTimeout = "function" === typeof clearTimeout ? clearTimeout : void 0, noTimeout = -1, localPromise = "function" === typeof Promise ? Promise : void 0, scheduleMicrotask = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof localPromise ? function(callback) {
          return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
        } : scheduleTimeout, previousHydratableOnEnteringScopedSingleton = null, NotLoaded = 0, Loaded = 1, Errored = 2, Settled = 3, Inserted = 4, preloadPropsMap = /* @__PURE__ */ new Map(), preconnectsSet = /* @__PURE__ */ new Set(), previousDispatcher = ReactDOMSharedInternals.d;
        ReactDOMSharedInternals.d = {
          f: function() {
            var previousWasRendering = previousDispatcher.f(), wasRendering = flushSyncWork$1();
            return previousWasRendering || wasRendering;
          },
          r: function(form) {
            var formInst = getInstanceFromNode(form);
            null !== formInst && 5 === formInst.tag && "form" === formInst.type ? requestFormReset$1(formInst) : previousDispatcher.r(form);
          },
          D: function(href) {
            previousDispatcher.D(href);
            preconnectAs("dns-prefetch", href, null);
          },
          C: function(href, crossOrigin) {
            previousDispatcher.C(href, crossOrigin);
            preconnectAs("preconnect", href, crossOrigin);
          },
          L: function(href, as, options) {
            previousDispatcher.L(href, as, options);
            var ownerDocument = globalDocument;
            if (ownerDocument && href && as) {
              var preloadSelector = 'link[rel="preload"][as="' + escapeSelectorAttributeValueInsideDoubleQuotes(as) + '"]';
              "image" === as ? options && options.imageSrcSet ? (preloadSelector += '[imagesrcset="' + escapeSelectorAttributeValueInsideDoubleQuotes(
                options.imageSrcSet
              ) + '"]', "string" === typeof options.imageSizes && (preloadSelector += '[imagesizes="' + escapeSelectorAttributeValueInsideDoubleQuotes(
                options.imageSizes
              ) + '"]')) : preloadSelector += '[href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]' : preloadSelector += '[href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]';
              var key = preloadSelector;
              switch (as) {
                case "style":
                  key = getStyleKey(href);
                  break;
                case "script":
                  key = getScriptKey(href);
              }
              preloadPropsMap.has(key) || (href = assign(
                {
                  rel: "preload",
                  href: "image" === as && options && options.imageSrcSet ? void 0 : href,
                  as
                },
                options
              ), preloadPropsMap.set(key, href), null !== ownerDocument.querySelector(preloadSelector) || "style" === as && ownerDocument.querySelector(
                getStylesheetSelectorFromKey(key)
              ) || "script" === as && ownerDocument.querySelector(getScriptSelectorFromKey(key)) || (as = ownerDocument.createElement("link"), setInitialProperties(as, "link", href), markNodeAsHoistable(as), ownerDocument.head.appendChild(as)));
            }
          },
          m: function(href, options) {
            previousDispatcher.m(href, options);
            var ownerDocument = globalDocument;
            if (ownerDocument && href) {
              var as = options && "string" === typeof options.as ? options.as : "script", preloadSelector = 'link[rel="modulepreload"][as="' + escapeSelectorAttributeValueInsideDoubleQuotes(as) + '"][href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]', key = preloadSelector;
              switch (as) {
                case "audioworklet":
                case "paintworklet":
                case "serviceworker":
                case "sharedworker":
                case "worker":
                case "script":
                  key = getScriptKey(href);
              }
              if (!preloadPropsMap.has(key) && (href = assign({ rel: "modulepreload", href }, options), preloadPropsMap.set(key, href), null === ownerDocument.querySelector(preloadSelector))) {
                switch (as) {
                  case "audioworklet":
                  case "paintworklet":
                  case "serviceworker":
                  case "sharedworker":
                  case "worker":
                  case "script":
                    if (ownerDocument.querySelector(getScriptSelectorFromKey(key)))
                      return;
                }
                as = ownerDocument.createElement("link");
                setInitialProperties(as, "link", href);
                markNodeAsHoistable(as);
                ownerDocument.head.appendChild(as);
              }
            }
          },
          X: function(src2, options) {
            previousDispatcher.X(src2, options);
            var ownerDocument = globalDocument;
            if (ownerDocument && src2) {
              var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts, key = getScriptKey(src2), resource = scripts.get(key);
              resource || (resource = ownerDocument.querySelector(
                getScriptSelectorFromKey(key)
              ), resource || (src2 = assign({ src: src2, async: true }, options), (options = preloadPropsMap.get(key)) && adoptPreloadPropsForScript(src2, options), resource = ownerDocument.createElement("script"), markNodeAsHoistable(resource), setInitialProperties(resource, "link", src2), ownerDocument.head.appendChild(resource)), resource = {
                type: "script",
                instance: resource,
                count: 1,
                state: null
              }, scripts.set(key, resource));
            }
          },
          S: function(href, precedence, options) {
            previousDispatcher.S(href, precedence, options);
            var ownerDocument = globalDocument;
            if (ownerDocument && href) {
              var styles = getResourcesFromRoot(ownerDocument).hoistableStyles, key = getStyleKey(href);
              precedence = precedence || "default";
              var resource = styles.get(key);
              if (!resource) {
                var state = { loading: NotLoaded, preload: null };
                if (resource = ownerDocument.querySelector(
                  getStylesheetSelectorFromKey(key)
                ))
                  state.loading = Loaded | Inserted;
                else {
                  href = assign(
                    {
                      rel: "stylesheet",
                      href,
                      "data-precedence": precedence
                    },
                    options
                  );
                  (options = preloadPropsMap.get(key)) && adoptPreloadPropsForStylesheet(href, options);
                  var link = resource = ownerDocument.createElement("link");
                  markNodeAsHoistable(link);
                  setInitialProperties(link, "link", href);
                  link._p = new Promise(function(resolve, reject) {
                    link.onload = resolve;
                    link.onerror = reject;
                  });
                  link.addEventListener("load", function() {
                    state.loading |= Loaded;
                  });
                  link.addEventListener("error", function() {
                    state.loading |= Errored;
                  });
                  state.loading |= Inserted;
                  insertStylesheet(resource, precedence, ownerDocument);
                }
                resource = {
                  type: "stylesheet",
                  instance: resource,
                  count: 1,
                  state
                };
                styles.set(key, resource);
              }
            }
          },
          M: function(src2, options) {
            previousDispatcher.M(src2, options);
            var ownerDocument = globalDocument;
            if (ownerDocument && src2) {
              var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts, key = getScriptKey(src2), resource = scripts.get(key);
              resource || (resource = ownerDocument.querySelector(
                getScriptSelectorFromKey(key)
              ), resource || (src2 = assign({ src: src2, async: true, type: "module" }, options), (options = preloadPropsMap.get(key)) && adoptPreloadPropsForScript(src2, options), resource = ownerDocument.createElement("script"), markNodeAsHoistable(resource), setInitialProperties(resource, "link", src2), ownerDocument.head.appendChild(resource)), resource = {
                type: "script",
                instance: resource,
                count: 1,
                state: null
              }, scripts.set(key, resource));
            }
          }
        };
        var globalDocument = "undefined" === typeof document ? null : document, tagCaches = null, suspendedState = null, LAST_PRECEDENCE = null, precedencesByRoot = null, NotPendingTransition = NotPending, HostTransitionContext = {
          $$typeof: REACT_CONTEXT_TYPE,
          Provider: null,
          Consumer: null,
          _currentValue: NotPendingTransition,
          _currentValue2: NotPendingTransition,
          _threadCount: 0
        }, badgeFormat = "%c%s%c ", badgeStyle = "background: #e6e6e6;background: light-dark(rgba(0,0,0,0.1), rgba(255,255,255,0.25));color: #000000;color: light-dark(#000000, #ffffff);border-radius: 2px", resetStyle = "", pad = " ", bind = Function.prototype.bind;
        var didWarnAboutNestedUpdates = false;
        var overrideHookState = null, overrideHookStateDeletePath = null, overrideHookStateRenamePath = null, overrideProps = null, overridePropsDeletePath = null, overridePropsRenamePath = null, scheduleUpdate = null, setErrorHandler = null, setSuspenseHandler = null;
        overrideHookState = function(fiber, id, path, value) {
          id = findHook(fiber, id);
          null !== id && (path = copyWithSetImpl(id.memoizedState, path, 0, value), id.memoizedState = path, id.baseState = path, fiber.memoizedProps = assign({}, fiber.memoizedProps), path = enqueueConcurrentRenderForLane(fiber, 2), null !== path && scheduleUpdateOnFiber(path, fiber, 2));
        };
        overrideHookStateDeletePath = function(fiber, id, path) {
          id = findHook(fiber, id);
          null !== id && (path = copyWithDeleteImpl(id.memoizedState, path, 0), id.memoizedState = path, id.baseState = path, fiber.memoizedProps = assign({}, fiber.memoizedProps), path = enqueueConcurrentRenderForLane(fiber, 2), null !== path && scheduleUpdateOnFiber(path, fiber, 2));
        };
        overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
          id = findHook(fiber, id);
          null !== id && (oldPath = copyWithRename(id.memoizedState, oldPath, newPath), id.memoizedState = oldPath, id.baseState = oldPath, fiber.memoizedProps = assign({}, fiber.memoizedProps), oldPath = enqueueConcurrentRenderForLane(fiber, 2), null !== oldPath && scheduleUpdateOnFiber(oldPath, fiber, 2));
        };
        overrideProps = function(fiber, path, value) {
          fiber.pendingProps = copyWithSetImpl(fiber.memoizedProps, path, 0, value);
          fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
          path = enqueueConcurrentRenderForLane(fiber, 2);
          null !== path && scheduleUpdateOnFiber(path, fiber, 2);
        };
        overridePropsDeletePath = function(fiber, path) {
          fiber.pendingProps = copyWithDeleteImpl(fiber.memoizedProps, path, 0);
          fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
          path = enqueueConcurrentRenderForLane(fiber, 2);
          null !== path && scheduleUpdateOnFiber(path, fiber, 2);
        };
        overridePropsRenamePath = function(fiber, oldPath, newPath) {
          fiber.pendingProps = copyWithRename(
            fiber.memoizedProps,
            oldPath,
            newPath
          );
          fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
          oldPath = enqueueConcurrentRenderForLane(fiber, 2);
          null !== oldPath && scheduleUpdateOnFiber(oldPath, fiber, 2);
        };
        scheduleUpdate = function(fiber) {
          var root3 = enqueueConcurrentRenderForLane(fiber, 2);
          null !== root3 && scheduleUpdateOnFiber(root3, fiber, 2);
        };
        setErrorHandler = function(newShouldErrorImpl) {
          shouldErrorImpl = newShouldErrorImpl;
        };
        setSuspenseHandler = function(newShouldSuspendImpl) {
          shouldSuspendImpl = newShouldSuspendImpl;
        };
        var _enabled = true, return_targetInst = null, hasScheduledReplayAttempt = false, queuedFocus = null, queuedDrag = null, queuedMouse = null, queuedPointers = /* @__PURE__ */ new Map(), queuedPointerCaptures = /* @__PURE__ */ new Map(), queuedExplicitHydrationTargets = [], discreteReplayableEvents = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(
          " "
        ), lastScheduledReplayQueue = null;
        ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
          var root3 = this._internalRoot;
          if (null === root3) throw Error("Cannot update an unmounted root.");
          var args = arguments;
          "function" === typeof args[1] ? console.error(
            "does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect()."
          ) : isValidContainer(args[1]) ? console.error(
            "You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root."
          ) : "undefined" !== typeof args[1] && console.error(
            "You passed a second argument to root.render(...) but it only accepts one argument."
          );
          args = children;
          var current2 = root3.current, lane = requestUpdateLane(current2);
          updateContainerImpl(current2, lane, args, root3, null, null);
        };
        ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
          var args = arguments;
          "function" === typeof args[0] && console.error(
            "does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect()."
          );
          args = this._internalRoot;
          if (null !== args) {
            this._internalRoot = null;
            var container = args.containerInfo;
            (executionContext & (RenderContext | CommitContext)) !== NoContext && console.error(
              "Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition."
            );
            updateContainerImpl(args.current, 2, null, args, null, null);
            flushSyncWork$1();
            container[internalContainerInstanceKey] = null;
          }
        };
        ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function(target) {
          if (target) {
            var updatePriority = resolveUpdatePriority();
            target = { blockedOn: null, target, priority: updatePriority };
            for (var i = 0; i < queuedExplicitHydrationTargets.length && 0 !== updatePriority && updatePriority < queuedExplicitHydrationTargets[i].priority; i++) ;
            queuedExplicitHydrationTargets.splice(i, 0, target);
            0 === i && attemptExplicitHydrationTarget(target);
          }
        };
        (function() {
          var isomorphicReactPackageVersion = React2.version;
          if ("19.1.0" !== isomorphicReactPackageVersion)
            throw Error(
              'Incompatible React versions: The "react" and "react-dom" packages must have the exact same version. Instead got:\n  - react:      ' + (isomorphicReactPackageVersion + "\n  - react-dom:  19.1.0\nLearn more: https://react.dev/warnings/version-mismatch")
            );
        })();
        "function" === typeof Map && null != Map.prototype && "function" === typeof Map.prototype.forEach && "function" === typeof Set && null != Set.prototype && "function" === typeof Set.prototype.clear && "function" === typeof Set.prototype.forEach || console.error(
          "React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://react.dev/link/react-polyfills"
        );
        ReactDOMSharedInternals.findDOMNode = function(componentOrElement) {
          var fiber = componentOrElement._reactInternals;
          if (void 0 === fiber) {
            if ("function" === typeof componentOrElement.render)
              throw Error("Unable to find node on an unmounted component.");
            componentOrElement = Object.keys(componentOrElement).join(",");
            throw Error(
              "Argument appears to not be a ReactComponent. Keys: " + componentOrElement
            );
          }
          componentOrElement = findCurrentFiberUsingSlowPath(fiber);
          componentOrElement = null !== componentOrElement ? findCurrentHostFiberImpl(componentOrElement) : null;
          componentOrElement = null === componentOrElement ? null : componentOrElement.stateNode;
          return componentOrElement;
        };
        if (!function() {
          var internals = {
            bundleType: 1,
            version: "19.1.0",
            rendererPackageName: "react-dom",
            currentDispatcherRef: ReactSharedInternals,
            reconcilerVersion: "19.1.0"
          };
          internals.overrideHookState = overrideHookState;
          internals.overrideHookStateDeletePath = overrideHookStateDeletePath;
          internals.overrideHookStateRenamePath = overrideHookStateRenamePath;
          internals.overrideProps = overrideProps;
          internals.overridePropsDeletePath = overridePropsDeletePath;
          internals.overridePropsRenamePath = overridePropsRenamePath;
          internals.scheduleUpdate = scheduleUpdate;
          internals.setErrorHandler = setErrorHandler;
          internals.setSuspenseHandler = setSuspenseHandler;
          internals.scheduleRefresh = scheduleRefresh;
          internals.scheduleRoot = scheduleRoot;
          internals.setRefreshHandler = setRefreshHandler;
          internals.getCurrentFiber = getCurrentFiberForDevTools;
          internals.getLaneLabelMap = getLaneLabelMap;
          internals.injectProfilingHooks = injectProfilingHooks;
          return injectInternals(internals);
        }() && canUseDOM && window.top === window.self && (-1 < navigator.userAgent.indexOf("Chrome") && -1 === navigator.userAgent.indexOf("Edge") || -1 < navigator.userAgent.indexOf("Firefox"))) {
          var protocol = window.location.protocol;
          /^(https?|file):$/.test(protocol) && console.info(
            "%cDownload the React DevTools for a better development experience: https://react.dev/link/react-devtools" + ("file:" === protocol ? "\nYou might need to use a local HTTP server (instead of file://): https://react.dev/link/react-devtools-faq" : ""),
            "font-weight:bold"
          );
        }
        exports.createRoot = function(container, options) {
          if (!isValidContainer(container))
            throw Error("Target container is not a DOM element.");
          warnIfReactDOMContainerInDEV(container);
          var isStrictMode = false, identifierPrefix = "", onUncaughtError = defaultOnUncaughtError, onCaughtError = defaultOnCaughtError, onRecoverableError = defaultOnRecoverableError, transitionCallbacks = null;
          null !== options && void 0 !== options && (options.hydrate ? console.warn(
            "hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead."
          ) : "object" === typeof options && null !== options && options.$$typeof === REACT_ELEMENT_TYPE && console.error(
            "You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);"
          ), true === options.unstable_strictMode && (isStrictMode = true), void 0 !== options.identifierPrefix && (identifierPrefix = options.identifierPrefix), void 0 !== options.onUncaughtError && (onUncaughtError = options.onUncaughtError), void 0 !== options.onCaughtError && (onCaughtError = options.onCaughtError), void 0 !== options.onRecoverableError && (onRecoverableError = options.onRecoverableError), void 0 !== options.unstable_transitionCallbacks && (transitionCallbacks = options.unstable_transitionCallbacks));
          options = createFiberRoot(
            container,
            1,
            false,
            null,
            null,
            isStrictMode,
            identifierPrefix,
            onUncaughtError,
            onCaughtError,
            onRecoverableError,
            transitionCallbacks,
            null
          );
          container[internalContainerInstanceKey] = options.current;
          listenToAllSupportedEvents(container);
          return new ReactDOMRoot(options);
        };
        exports.hydrateRoot = function(container, initialChildren, options) {
          if (!isValidContainer(container))
            throw Error("Target container is not a DOM element.");
          warnIfReactDOMContainerInDEV(container);
          void 0 === initialChildren && console.error(
            "Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)"
          );
          var isStrictMode = false, identifierPrefix = "", onUncaughtError = defaultOnUncaughtError, onCaughtError = defaultOnCaughtError, onRecoverableError = defaultOnRecoverableError, transitionCallbacks = null, formState = null;
          null !== options && void 0 !== options && (true === options.unstable_strictMode && (isStrictMode = true), void 0 !== options.identifierPrefix && (identifierPrefix = options.identifierPrefix), void 0 !== options.onUncaughtError && (onUncaughtError = options.onUncaughtError), void 0 !== options.onCaughtError && (onCaughtError = options.onCaughtError), void 0 !== options.onRecoverableError && (onRecoverableError = options.onRecoverableError), void 0 !== options.unstable_transitionCallbacks && (transitionCallbacks = options.unstable_transitionCallbacks), void 0 !== options.formState && (formState = options.formState));
          initialChildren = createFiberRoot(
            container,
            1,
            true,
            initialChildren,
            null != options ? options : null,
            isStrictMode,
            identifierPrefix,
            onUncaughtError,
            onCaughtError,
            onRecoverableError,
            transitionCallbacks,
            formState
          );
          initialChildren.context = getContextForSubtree(null);
          options = initialChildren.current;
          isStrictMode = requestUpdateLane(options);
          isStrictMode = getBumpedLaneForHydrationByLane(isStrictMode);
          identifierPrefix = createUpdate(isStrictMode);
          identifierPrefix.callback = null;
          enqueueUpdate(options, identifierPrefix, isStrictMode);
          options = isStrictMode;
          initialChildren.current.lanes = options;
          markRootUpdated$1(initialChildren, options);
          ensureRootIsScheduled(initialChildren);
          container[internalContainerInstanceKey] = initialChildren.current;
          listenToAllSupportedEvents(container);
          return new ReactDOMHydrationRoot(initialChildren);
        };
        exports.version = "19.1.0";
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
      })();
    }
  });

  // node_modules/.pnpm/react-dom@19.1.0_react@19.1.0/node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/.pnpm/react-dom@19.1.0_react@19.1.0/node_modules/react-dom/client.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_client_development();
      }
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client-browser@0.3.17/node_modules/@atproto/oauth-client-browser/dist/disposable-polyfill/index.js
  var require_disposable_polyfill = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client-browser@0.3.17/node_modules/@atproto/oauth-client-browser/dist/disposable-polyfill/index.js"() {
      "use strict";
      Symbol.dispose ?? (Symbol.dispose = Symbol("@@dispose"));
      Symbol.asyncDispose ?? (Symbol.asyncDispose = Symbol("@@asyncDispose"));
    }
  });

  // node_modules/.pnpm/zod@3.25.20/node_modules/zod/dist/cjs/v3/helpers/util.js
  var require_util = __commonJS({
    "node_modules/.pnpm/zod@3.25.20/node_modules/zod/dist/cjs/v3/helpers/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getParsedType = exports.ZodParsedType = exports.objectUtil = exports.util = void 0;
      var util;
      (function(util2) {
        util2.assertEqual = (_) => {
        };
        function assertIs(_arg) {
        }
        util2.assertIs = assertIs;
        function assertNever(_x) {
          throw new Error();
        }
        util2.assertNever = assertNever;
        util2.arrayToEnum = (items) => {
          const obj = {};
          for (const item of items) {
            obj[item] = item;
          }
          return obj;
        };
        util2.getValidEnumValues = (obj) => {
          const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
          const filtered = {};
          for (const k of validKeys) {
            filtered[k] = obj[k];
          }
          return util2.objectValues(filtered);
        };
        util2.objectValues = (obj) => {
          return util2.objectKeys(obj).map(function(e) {
            return obj[e];
          });
        };
        util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
          const keys = [];
          for (const key in object) {
            if (Object.prototype.hasOwnProperty.call(object, key)) {
              keys.push(key);
            }
          }
          return keys;
        };
        util2.find = (arr, checker) => {
          for (const item of arr) {
            if (checker(item))
              return item;
          }
          return void 0;
        };
        util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && Number.isFinite(val) && Math.floor(val) === val;
        function joinValues(array, separator = " | ") {
          return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
        }
        util2.joinValues = joinValues;
        util2.jsonStringifyReplacer = (_, value) => {
          if (typeof value === "bigint") {
            return value.toString();
          }
          return value;
        };
      })(util || (exports.util = util = {}));
      var objectUtil;
      (function(objectUtil2) {
        objectUtil2.mergeShapes = (first, second) => {
          return {
            ...first,
            ...second
            // second overwrites first
          };
        };
      })(objectUtil || (exports.objectUtil = objectUtil = {}));
      exports.ZodParsedType = util.arrayToEnum([
        "string",
        "nan",
        "number",
        "integer",
        "float",
        "boolean",
        "date",
        "bigint",
        "symbol",
        "function",
        "undefined",
        "null",
        "array",
        "object",
        "unknown",
        "promise",
        "void",
        "never",
        "map",
        "set"
      ]);
      var getParsedType = (data) => {
        const t = typeof data;
        switch (t) {
          case "undefined":
            return exports.ZodParsedType.undefined;
          case "string":
            return exports.ZodParsedType.string;
          case "number":
            return Number.isNaN(data) ? exports.ZodParsedType.nan : exports.ZodParsedType.number;
          case "boolean":
            return exports.ZodParsedType.boolean;
          case "function":
            return exports.ZodParsedType.function;
          case "bigint":
            return exports.ZodParsedType.bigint;
          case "symbol":
            return exports.ZodParsedType.symbol;
          case "object":
            if (Array.isArray(data)) {
              return exports.ZodParsedType.array;
            }
            if (data === null) {
              return exports.ZodParsedType.null;
            }
            if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
              return exports.ZodParsedType.promise;
            }
            if (typeof Map !== "undefined" && data instanceof Map) {
              return exports.ZodParsedType.map;
            }
            if (typeof Set !== "undefined" && data instanceof Set) {
              return exports.ZodParsedType.set;
            }
            if (typeof Date !== "undefined" && data instanceof Date) {
              return exports.ZodParsedType.date;
            }
            return exports.ZodParsedType.object;
          default:
            return exports.ZodParsedType.unknown;
        }
      };
      exports.getParsedType = getParsedType;
    }
  });

  // node_modules/.pnpm/zod@3.25.20/node_modules/zod/dist/cjs/v3/ZodError.js
  var require_ZodError = __commonJS({
    "node_modules/.pnpm/zod@3.25.20/node_modules/zod/dist/cjs/v3/ZodError.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ZodError = exports.quotelessJson = exports.ZodIssueCode = void 0;
      var util_js_1 = require_util();
      exports.ZodIssueCode = util_js_1.util.arrayToEnum([
        "invalid_type",
        "invalid_literal",
        "custom",
        "invalid_union",
        "invalid_union_discriminator",
        "invalid_enum_value",
        "unrecognized_keys",
        "invalid_arguments",
        "invalid_return_type",
        "invalid_date",
        "invalid_string",
        "too_small",
        "too_big",
        "invalid_intersection_types",
        "not_multiple_of",
        "not_finite"
      ]);
      var quotelessJson = (obj) => {
        const json = JSON.stringify(obj, null, 2);
        return json.replace(/"([^"]+)":/g, "$1:");
      };
      exports.quotelessJson = quotelessJson;
      var ZodError = class _ZodError extends Error {
        get errors() {
          return this.issues;
        }
        constructor(issues) {
          super();
          this.issues = [];
          this.addIssue = (sub) => {
            this.issues = [...this.issues, sub];
          };
          this.addIssues = (subs = []) => {
            this.issues = [...this.issues, ...subs];
          };
          const actualProto = new.target.prototype;
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(this, actualProto);
          } else {
            this.__proto__ = actualProto;
          }
          this.name = "ZodError";
          this.issues = issues;
        }
        format(_mapper) {
          const mapper = _mapper || function(issue) {
            return issue.message;
          };
          const fieldErrors = { _errors: [] };
          const processError = (error) => {
            for (const issue of error.issues) {
              if (issue.code === "invalid_union") {
                issue.unionErrors.map(processError);
              } else if (issue.code === "invalid_return_type") {
                processError(issue.returnTypeError);
              } else if (issue.code === "invalid_arguments") {
                processError(issue.argumentsError);
              } else if (issue.path.length === 0) {
                fieldErrors._errors.push(mapper(issue));
              } else {
                let curr = fieldErrors;
                let i = 0;
                while (i < issue.path.length) {
                  const el = issue.path[i];
                  const terminal = i === issue.path.length - 1;
                  if (!terminal) {
                    curr[el] = curr[el] || { _errors: [] };
                  } else {
                    curr[el] = curr[el] || { _errors: [] };
                    curr[el]._errors.push(mapper(issue));
                  }
                  curr = curr[el];
                  i++;
                }
              }
            }
          };
          processError(this);
          return fieldErrors;
        }
        static assert(value) {
          if (!(value instanceof _ZodError)) {
            throw new Error(`Not a ZodError: ${value}`);
          }
        }
        toString() {
          return this.message;
        }
        get message() {
          return JSON.stringify(this.issues, util_js_1.util.jsonStringifyReplacer, 2);
        }
        get isEmpty() {
          return this.issues.length === 0;
        }
        flatten(mapper = (issue) => issue.message) {
          const fieldErrors = {};
          const formErrors = [];
          for (const sub of this.issues) {
            if (sub.path.length > 0) {
              fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
              fieldErrors[sub.path[0]].push(mapper(sub));
            } else {
              formErrors.push(mapper(sub));
            }
          }
          return { formErrors, fieldErrors };
        }
        get formErrors() {
          return this.flatten();
        }
      };
      exports.ZodError = ZodError;
      ZodError.create = (issues) => {
        const error = new ZodError(issues);
        return error;
      };
    }
  });

  // node_modules/.pnpm/zod@3.25.20/node_modules/zod/dist/cjs/v3/locales/en.js
  var require_en = __commonJS({
    "node_modules/.pnpm/zod@3.25.20/node_modules/zod/dist/cjs/v3/locales/en.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var ZodError_js_1 = require_ZodError();
      var util_js_1 = require_util();
      var errorMap = (issue, _ctx) => {
        let message2;
        switch (issue.code) {
          case ZodError_js_1.ZodIssueCode.invalid_type:
            if (issue.received === util_js_1.ZodParsedType.undefined) {
              message2 = "Required";
            } else {
              message2 = `Expected ${issue.expected}, received ${issue.received}`;
            }
            break;
          case ZodError_js_1.ZodIssueCode.invalid_literal:
            message2 = `Invalid literal value, expected ${JSON.stringify(issue.expected, util_js_1.util.jsonStringifyReplacer)}`;
            break;
          case ZodError_js_1.ZodIssueCode.unrecognized_keys:
            message2 = `Unrecognized key(s) in object: ${util_js_1.util.joinValues(issue.keys, ", ")}`;
            break;
          case ZodError_js_1.ZodIssueCode.invalid_union:
            message2 = `Invalid input`;
            break;
          case ZodError_js_1.ZodIssueCode.invalid_union_discriminator:
            message2 = `Invalid discriminator value. Expected ${util_js_1.util.joinValues(issue.options)}`;
            break;
          case ZodError_js_1.ZodIssueCode.invalid_enum_value:
            message2 = `Invalid enum value. Expected ${util_js_1.util.joinValues(issue.options)}, received '${issue.received}'`;
            break;
          case ZodError_js_1.ZodIssueCode.invalid_arguments:
            message2 = `Invalid function arguments`;
            break;
          case ZodError_js_1.ZodIssueCode.invalid_return_type:
            message2 = `Invalid function return type`;
            break;
          case ZodError_js_1.ZodIssueCode.invalid_date:
            message2 = `Invalid date`;
            break;
          case ZodError_js_1.ZodIssueCode.invalid_string:
            if (typeof issue.validation === "object") {
              if ("includes" in issue.validation) {
                message2 = `Invalid input: must include "${issue.validation.includes}"`;
                if (typeof issue.validation.position === "number") {
                  message2 = `${message2} at one or more positions greater than or equal to ${issue.validation.position}`;
                }
              } else if ("startsWith" in issue.validation) {
                message2 = `Invalid input: must start with "${issue.validation.startsWith}"`;
              } else if ("endsWith" in issue.validation) {
                message2 = `Invalid input: must end with "${issue.validation.endsWith}"`;
              } else {
                util_js_1.util.assertNever(issue.validation);
              }
            } else if (issue.validation !== "regex") {
              message2 = `Invalid ${issue.validation}`;
            } else {
              message2 = "Invalid";
            }
            break;
          case ZodError_js_1.ZodIssueCode.too_small:
            if (issue.type === "array")
              message2 = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
            else if (issue.type === "string")
              message2 = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
            else if (issue.type === "number")
              message2 = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
            else if (issue.type === "date")
              message2 = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
            else
              message2 = "Invalid input";
            break;
          case ZodError_js_1.ZodIssueCode.too_big:
            if (issue.type === "array")
              message2 = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
            else if (issue.type === "string")
              message2 = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
            else if (issue.type === "number")
              message2 = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
            else if (issue.type === "bigint")
              message2 = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
            else if (issue.type === "date")
              message2 = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
            else
              message2 = "Invalid input";
            break;
          case ZodError_js_1.ZodIssueCode.custom:
            message2 = `Invalid input`;
            break;
          case ZodError_js_1.ZodIssueCode.invalid_intersection_types:
            message2 = `Intersection results could not be merged`;
            break;
          case ZodError_js_1.ZodIssueCode.not_multiple_of:
            message2 = `Number must be a multiple of ${issue.multipleOf}`;
            break;
          case ZodError_js_1.ZodIssueCode.not_finite:
            message2 = "Number must be finite";
            break;
          default:
            message2 = _ctx.defaultError;
            util_js_1.util.assertNever(issue);
        }
        return { message: message2 };
      };
      exports.default = errorMap;
    }
  });

  // node_modules/.pnpm/zod@3.25.20/node_modules/zod/dist/cjs/v3/errors.js
  var require_errors = __commonJS({
    "node_modules/.pnpm/zod@3.25.20/node_modules/zod/dist/cjs/v3/errors.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.defaultErrorMap = void 0;
      exports.setErrorMap = setErrorMap;
      exports.getErrorMap = getErrorMap;
      var en_js_1 = __importDefault(require_en());
      exports.defaultErrorMap = en_js_1.default;
      var overrideErrorMap = en_js_1.default;
      function setErrorMap(map) {
        overrideErrorMap = map;
      }
      function getErrorMap() {
        return overrideErrorMap;
      }
    }
  });

  // node_modules/.pnpm/zod@3.25.20/node_modules/zod/dist/cjs/v3/helpers/parseUtil.js
  var require_parseUtil = __commonJS({
    "node_modules/.pnpm/zod@3.25.20/node_modules/zod/dist/cjs/v3/helpers/parseUtil.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isAsync = exports.isValid = exports.isDirty = exports.isAborted = exports.OK = exports.DIRTY = exports.INVALID = exports.ParseStatus = exports.EMPTY_PATH = exports.makeIssue = void 0;
      exports.addIssueToContext = addIssueToContext;
      var errors_js_1 = require_errors();
      var en_js_1 = __importDefault(require_en());
      var makeIssue = (params) => {
        const { data, path, errorMaps, issueData } = params;
        const fullPath = [...path, ...issueData.path || []];
        const fullIssue = {
          ...issueData,
          path: fullPath
        };
        if (issueData.message !== void 0) {
          return {
            ...issueData,
            path: fullPath,
            message: issueData.message
          };
        }
        let errorMessage = "";
        const maps = errorMaps.filter((m) => !!m).slice().reverse();
        for (const map of maps) {
          errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
        }
        return {
          ...issueData,
          path: fullPath,
          message: errorMessage
        };
      };
      exports.makeIssue = makeIssue;
      exports.EMPTY_PATH = [];
      function addIssueToContext(ctx, issueData) {
        const overrideMap = (0, errors_js_1.getErrorMap)();
        const issue = (0, exports.makeIssue)({
          issueData,
          data: ctx.data,
          path: ctx.path,
          errorMaps: [
            ctx.common.contextualErrorMap,
            // contextual error map is first priority
            ctx.schemaErrorMap,
            // then schema-bound map if available
            overrideMap,
            // then global override map
            overrideMap === en_js_1.default ? void 0 : en_js_1.default
            // then global default map
          ].filter((x) => !!x)
        });
        ctx.common.issues.push(issue);
      }
      var ParseStatus = class _ParseStatus {
        constructor() {
          this.value = "valid";
        }
        dirty() {
          if (this.value === "valid")
            this.value = "dirty";
        }
        abort() {
          if (this.value !== "aborted")
            this.value = "aborted";
        }
        static mergeArray(status, results) {
          const arrayValue = [];
          for (const s of results) {
            if (s.status === "aborted")
              return exports.INVALID;
            if (s.status === "dirty")
              status.dirty();
            arrayValue.push(s.value);
          }
          return { status: status.value, value: arrayValue };
        }
        static async mergeObjectAsync(status, pairs) {
          const syncPairs = [];
          for (const pair of pairs) {
            const key = await pair.key;
            const value = await pair.value;
            syncPairs.push({
              key,
              value
            });
          }
          return _ParseStatus.mergeObjectSync(status, syncPairs);
        }
        static mergeObjectSync(status, pairs) {
          const finalObject = {};
          for (const pair of pairs) {
            const { key, value } = pair;
            if (key.status === "aborted")
              return exports.INVALID;
            if (value.status === "aborted")
              return exports.INVALID;
            if (key.status === "dirty")
              status.dirty();
            if (value.status === "dirty")
              status.dirty();
            if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
              finalObject[key.value] = value.value;
            }
          }
          return { status: status.value, value: finalObject };
        }
      };
      exports.ParseStatus = ParseStatus;
      exports.INVALID = Object.freeze({
        status: "aborted"
      });
      var DIRTY = (value) => ({ status: "dirty", value });
      exports.DIRTY = DIRTY;
      var OK = (value) => ({ status: "valid", value });
      exports.OK = OK;
      var isAborted = (x) => x.status === "aborted";
      exports.isAborted = isAborted;
      var isDirty = (x) => x.status === "dirty";
      exports.isDirty = isDirty;
      var isValid = (x) => x.status === "valid";
      exports.isValid = isValid;
      var isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;
      exports.isAsync = isAsync;
    }
  });

  // node_modules/.pnpm/zod@3.25.20/node_modules/zod/dist/cjs/v3/helpers/typeAliases.js
  var require_typeAliases = __commonJS({
    "node_modules/.pnpm/zod@3.25.20/node_modules/zod/dist/cjs/v3/helpers/typeAliases.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/.pnpm/zod@3.25.20/node_modules/zod/dist/cjs/v3/helpers/errorUtil.js
  var require_errorUtil = __commonJS({
    "node_modules/.pnpm/zod@3.25.20/node_modules/zod/dist/cjs/v3/helpers/errorUtil.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.errorUtil = void 0;
      var errorUtil;
      (function(errorUtil2) {
        errorUtil2.errToObj = (message2) => typeof message2 === "string" ? { message: message2 } : message2 || {};
        errorUtil2.toString = (message2) => typeof message2 === "string" ? message2 : message2?.message;
      })(errorUtil || (exports.errorUtil = errorUtil = {}));
    }
  });

  // node_modules/.pnpm/zod@3.25.20/node_modules/zod/dist/cjs/v3/types.js
  var require_types = __commonJS({
    "node_modules/.pnpm/zod@3.25.20/node_modules/zod/dist/cjs/v3/types.js"(exports) {
      "use strict";
      var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      var _ZodEnum_cache;
      var _ZodNativeEnum_cache;
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.discriminatedUnion = exports.date = exports.boolean = exports.bigint = exports.array = exports.any = exports.coerce = exports.ZodFirstPartyTypeKind = exports.late = exports.ZodSchema = exports.Schema = exports.ZodReadonly = exports.ZodPipeline = exports.ZodBranded = exports.BRAND = exports.ZodNaN = exports.ZodCatch = exports.ZodDefault = exports.ZodNullable = exports.ZodOptional = exports.ZodTransformer = exports.ZodEffects = exports.ZodPromise = exports.ZodNativeEnum = exports.ZodEnum = exports.ZodLiteral = exports.ZodLazy = exports.ZodFunction = exports.ZodSet = exports.ZodMap = exports.ZodRecord = exports.ZodTuple = exports.ZodIntersection = exports.ZodDiscriminatedUnion = exports.ZodUnion = exports.ZodObject = exports.ZodArray = exports.ZodVoid = exports.ZodNever = exports.ZodUnknown = exports.ZodAny = exports.ZodNull = exports.ZodUndefined = exports.ZodSymbol = exports.ZodDate = exports.ZodBoolean = exports.ZodBigInt = exports.ZodNumber = exports.ZodString = exports.ZodType = void 0;
      exports.NEVER = exports.void = exports.unknown = exports.union = exports.undefined = exports.tuple = exports.transformer = exports.symbol = exports.string = exports.strictObject = exports.set = exports.record = exports.promise = exports.preprocess = exports.pipeline = exports.ostring = exports.optional = exports.onumber = exports.oboolean = exports.object = exports.number = exports.nullable = exports.null = exports.never = exports.nativeEnum = exports.nan = exports.map = exports.literal = exports.lazy = exports.intersection = exports.instanceof = exports.function = exports.enum = exports.effect = void 0;
      exports.datetimeRegex = datetimeRegex;
      exports.custom = custom;
      var ZodError_js_1 = require_ZodError();
      var errors_js_1 = require_errors();
      var errorUtil_js_1 = require_errorUtil();
      var parseUtil_js_1 = require_parseUtil();
      var util_js_1 = require_util();
      var ParseInputLazyPath = class {
        constructor(parent, value, path, key) {
          this._cachedPath = [];
          this.parent = parent;
          this.data = value;
          this._path = path;
          this._key = key;
        }
        get path() {
          if (!this._cachedPath.length) {
            if (Array.isArray(this._key)) {
              this._cachedPath.push(...this._path, ...this._key);
            } else {
              this._cachedPath.push(...this._path, this._key);
            }
          }
          return this._cachedPath;
        }
      };
      var handleResult = (ctx, result) => {
        if ((0, parseUtil_js_1.isValid)(result)) {
          return { success: true, data: result.value };
        } else {
          if (!ctx.common.issues.length) {
            throw new Error("Validation failed but no issues detected.");
          }
          return {
            success: false,
            get error() {
              if (this._error)
                return this._error;
              const error = new ZodError_js_1.ZodError(ctx.common.issues);
              this._error = error;
              return this._error;
            }
          };
        }
      };
      function processCreateParams(params) {
        if (!params)
          return {};
        const { errorMap, invalid_type_error, required_error, description } = params;
        if (errorMap && (invalid_type_error || required_error)) {
          throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
        }
        if (errorMap)
          return { errorMap, description };
        const customMap = (iss, ctx) => {
          const { message: message2 } = params;
          if (iss.code === "invalid_enum_value") {
            return { message: message2 ?? ctx.defaultError };
          }
          if (typeof ctx.data === "undefined") {
            return { message: message2 ?? required_error ?? ctx.defaultError };
          }
          if (iss.code !== "invalid_type")
            return { message: ctx.defaultError };
          return { message: message2 ?? invalid_type_error ?? ctx.defaultError };
        };
        return { errorMap: customMap, description };
      }
      var ZodType = class {
        get description() {
          return this._def.description;
        }
        _getType(input) {
          return (0, util_js_1.getParsedType)(input.data);
        }
        _getOrReturnCtx(input, ctx) {
          return ctx || {
            common: input.parent.common,
            data: input.data,
            parsedType: (0, util_js_1.getParsedType)(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent
          };
        }
        _processInputParams(input) {
          return {
            status: new parseUtil_js_1.ParseStatus(),
            ctx: {
              common: input.parent.common,
              data: input.data,
              parsedType: (0, util_js_1.getParsedType)(input.data),
              schemaErrorMap: this._def.errorMap,
              path: input.path,
              parent: input.parent
            }
          };
        }
        _parseSync(input) {
          const result = this._parse(input);
          if ((0, parseUtil_js_1.isAsync)(result)) {
            throw new Error("Synchronous parse encountered promise.");
          }
          return result;
        }
        _parseAsync(input) {
          const result = this._parse(input);
          return Promise.resolve(result);
        }
        parse(data, params) {
          const result = this.safeParse(data, params);
          if (result.success)
            return result.data;
          throw result.error;
        }
        safeParse(data, params) {
          const ctx = {
            common: {
              issues: [],
              async: params?.async ?? false,
              contextualErrorMap: params?.errorMap
            },
            path: params?.path || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: (0, util_js_1.getParsedType)(data)
          };
          const result = this._parseSync({ data, path: ctx.path, parent: ctx });
          return handleResult(ctx, result);
        }
        "~validate"(data) {
          const ctx = {
            common: {
              issues: [],
              async: !!this["~standard"].async
            },
            path: [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: (0, util_js_1.getParsedType)(data)
          };
          if (!this["~standard"].async) {
            try {
              const result = this._parseSync({ data, path: [], parent: ctx });
              return (0, parseUtil_js_1.isValid)(result) ? {
                value: result.value
              } : {
                issues: ctx.common.issues
              };
            } catch (err) {
              if (err?.message?.toLowerCase()?.includes("encountered")) {
                this["~standard"].async = true;
              }
              ctx.common = {
                issues: [],
                async: true
              };
            }
          }
          return this._parseAsync({ data, path: [], parent: ctx }).then((result) => (0, parseUtil_js_1.isValid)(result) ? {
            value: result.value
          } : {
            issues: ctx.common.issues
          });
        }
        async parseAsync(data, params) {
          const result = await this.safeParseAsync(data, params);
          if (result.success)
            return result.data;
          throw result.error;
        }
        async safeParseAsync(data, params) {
          const ctx = {
            common: {
              issues: [],
              contextualErrorMap: params?.errorMap,
              async: true
            },
            path: params?.path || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: (0, util_js_1.getParsedType)(data)
          };
          const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
          const result = await ((0, parseUtil_js_1.isAsync)(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
          return handleResult(ctx, result);
        }
        refine(check2, message2) {
          const getIssueProperties = (val) => {
            if (typeof message2 === "string" || typeof message2 === "undefined") {
              return { message: message2 };
            } else if (typeof message2 === "function") {
              return message2(val);
            } else {
              return message2;
            }
          };
          return this._refinement((val, ctx) => {
            const result = check2(val);
            const setError = () => ctx.addIssue({
              code: ZodError_js_1.ZodIssueCode.custom,
              ...getIssueProperties(val)
            });
            if (typeof Promise !== "undefined" && result instanceof Promise) {
              return result.then((data) => {
                if (!data) {
                  setError();
                  return false;
                } else {
                  return true;
                }
              });
            }
            if (!result) {
              setError();
              return false;
            } else {
              return true;
            }
          });
        }
        refinement(check2, refinementData) {
          return this._refinement((val, ctx) => {
            if (!check2(val)) {
              ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
              return false;
            } else {
              return true;
            }
          });
        }
        _refinement(refinement) {
          return new ZodEffects({
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: { type: "refinement", refinement }
          });
        }
        superRefine(refinement) {
          return this._refinement(refinement);
        }
        constructor(def) {
          this.spa = this.safeParseAsync;
          this._def = def;
          this.parse = this.parse.bind(this);
          this.safeParse = this.safeParse.bind(this);
          this.parseAsync = this.parseAsync.bind(this);
          this.safeParseAsync = this.safeParseAsync.bind(this);
          this.spa = this.spa.bind(this);
          this.refine = this.refine.bind(this);
          this.refinement = this.refinement.bind(this);
          this.superRefine = this.superRefine.bind(this);
          this.optional = this.optional.bind(this);
          this.nullable = this.nullable.bind(this);
          this.nullish = this.nullish.bind(this);
          this.array = this.array.bind(this);
          this.promise = this.promise.bind(this);
          this.or = this.or.bind(this);
          this.and = this.and.bind(this);
          this.transform = this.transform.bind(this);
          this.brand = this.brand.bind(this);
          this.default = this.default.bind(this);
          this.catch = this.catch.bind(this);
          this.describe = this.describe.bind(this);
          this.pipe = this.pipe.bind(this);
          this.readonly = this.readonly.bind(this);
          this.isNullable = this.isNullable.bind(this);
          this.isOptional = this.isOptional.bind(this);
          this["~standard"] = {
            version: 1,
            vendor: "zod",
            validate: (data) => this["~validate"](data)
          };
        }
        optional() {
          return ZodOptional.create(this, this._def);
        }
        nullable() {
          return ZodNullable.create(this, this._def);
        }
        nullish() {
          return this.nullable().optional();
        }
        array() {
          return ZodArray.create(this);
        }
        promise() {
          return ZodPromise.create(this, this._def);
        }
        or(option) {
          return ZodUnion.create([this, option], this._def);
        }
        and(incoming) {
          return ZodIntersection.create(this, incoming, this._def);
        }
        transform(transform) {
          return new ZodEffects({
            ...processCreateParams(this._def),
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: { type: "transform", transform }
          });
        }
        default(def) {
          const defaultValueFunc = typeof def === "function" ? def : () => def;
          return new ZodDefault({
            ...processCreateParams(this._def),
            innerType: this,
            defaultValue: defaultValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodDefault
          });
        }
        brand() {
          return new ZodBranded({
            typeName: ZodFirstPartyTypeKind.ZodBranded,
            type: this,
            ...processCreateParams(this._def)
          });
        }
        catch(def) {
          const catchValueFunc = typeof def === "function" ? def : () => def;
          return new ZodCatch({
            ...processCreateParams(this._def),
            innerType: this,
            catchValue: catchValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodCatch
          });
        }
        describe(description) {
          const This = this.constructor;
          return new This({
            ...this._def,
            description
          });
        }
        pipe(target) {
          return ZodPipeline.create(this, target);
        }
        readonly() {
          return ZodReadonly.create(this);
        }
        isOptional() {
          return this.safeParse(void 0).success;
        }
        isNullable() {
          return this.safeParse(null).success;
        }
      };
      exports.ZodType = ZodType;
      exports.Schema = ZodType;
      exports.ZodSchema = ZodType;
      var cuidRegex = /^c[^\s-]{8,}$/i;
      var cuid2Regex = /^[0-9a-z]+$/;
      var ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
      var uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
      var nanoidRegex = /^[a-z0-9_-]{21}$/i;
      var jwtRegex = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
      var durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
      var emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
      var _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
      var emojiRegex;
      var ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
      var ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;
      var ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
      var ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
      var base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
      var base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
      var dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
      var dateRegex = new RegExp(`^${dateRegexSource}$`);
      function timeRegexSource(args) {
        let secondsRegexSource = `[0-5]\\d`;
        if (args.precision) {
          secondsRegexSource = `${secondsRegexSource}\\.\\d{${args.precision}}`;
        } else if (args.precision == null) {
          secondsRegexSource = `${secondsRegexSource}(\\.\\d+)?`;
        }
        const secondsQuantifier = args.precision ? "+" : "?";
        return `([01]\\d|2[0-3]):[0-5]\\d(:${secondsRegexSource})${secondsQuantifier}`;
      }
      function timeRegex(args) {
        return new RegExp(`^${timeRegexSource(args)}$`);
      }
      function datetimeRegex(args) {
        let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
        const opts = [];
        opts.push(args.local ? `Z?` : `Z`);
        if (args.offset)
          opts.push(`([+-]\\d{2}:?\\d{2})`);
        regex = `${regex}(${opts.join("|")})`;
        return new RegExp(`^${regex}$`);
      }
      function isValidIP(ip, version2) {
        if ((version2 === "v4" || !version2) && ipv4Regex.test(ip)) {
          return true;
        }
        if ((version2 === "v6" || !version2) && ipv6Regex.test(ip)) {
          return true;
        }
        return false;
      }
      function isValidJWT(jwt, alg) {
        if (!jwtRegex.test(jwt))
          return false;
        try {
          const [header] = jwt.split(".");
          const base642 = header.replace(/-/g, "+").replace(/_/g, "/").padEnd(header.length + (4 - header.length % 4) % 4, "=");
          const decoded = JSON.parse(atob(base642));
          if (typeof decoded !== "object" || decoded === null)
            return false;
          if ("typ" in decoded && decoded?.typ !== "JWT")
            return false;
          if (!decoded.alg)
            return false;
          if (alg && decoded.alg !== alg)
            return false;
          return true;
        } catch {
          return false;
        }
      }
      function isValidCidr(ip, version2) {
        if ((version2 === "v4" || !version2) && ipv4CidrRegex.test(ip)) {
          return true;
        }
        if ((version2 === "v6" || !version2) && ipv6CidrRegex.test(ip)) {
          return true;
        }
        return false;
      }
      var ZodString = class _ZodString extends ZodType {
        _parse(input) {
          if (this._def.coerce) {
            input.data = String(input.data);
          }
          const parsedType = this._getType(input);
          if (parsedType !== util_js_1.ZodParsedType.string) {
            const ctx2 = this._getOrReturnCtx(input);
            (0, parseUtil_js_1.addIssueToContext)(ctx2, {
              code: ZodError_js_1.ZodIssueCode.invalid_type,
              expected: util_js_1.ZodParsedType.string,
              received: ctx2.parsedType
            });
            return parseUtil_js_1.INVALID;
          }
          const status = new parseUtil_js_1.ParseStatus();
          let ctx = void 0;
          for (const check2 of this._def.checks) {
            if (check2.kind === "min") {
              if (input.data.length < check2.value) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  code: ZodError_js_1.ZodIssueCode.too_small,
                  minimum: check2.value,
                  type: "string",
                  inclusive: true,
                  exact: false,
                  message: check2.message
                });
                status.dirty();
              }
            } else if (check2.kind === "max") {
              if (input.data.length > check2.value) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  code: ZodError_js_1.ZodIssueCode.too_big,
                  maximum: check2.value,
                  type: "string",
                  inclusive: true,
                  exact: false,
                  message: check2.message
                });
                status.dirty();
              }
            } else if (check2.kind === "length") {
              const tooBig = input.data.length > check2.value;
              const tooSmall = input.data.length < check2.value;
              if (tooBig || tooSmall) {
                ctx = this._getOrReturnCtx(input, ctx);
                if (tooBig) {
                  (0, parseUtil_js_1.addIssueToContext)(ctx, {
                    code: ZodError_js_1.ZodIssueCode.too_big,
                    maximum: check2.value,
                    type: "string",
                    inclusive: true,
                    exact: true,
                    message: check2.message
                  });
                } else if (tooSmall) {
                  (0, parseUtil_js_1.addIssueToContext)(ctx, {
                    code: ZodError_js_1.ZodIssueCode.too_small,
                    minimum: check2.value,
                    type: "string",
                    inclusive: true,
                    exact: true,
                    message: check2.message
                  });
                }
                status.dirty();
              }
            } else if (check2.kind === "email") {
              if (!emailRegex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  validation: "email",
                  code: ZodError_js_1.ZodIssueCode.invalid_string,
                  message: check2.message
                });
                status.dirty();
              }
            } else if (check2.kind === "emoji") {
              if (!emojiRegex) {
                emojiRegex = new RegExp(_emojiRegex, "u");
              }
              if (!emojiRegex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  validation: "emoji",
                  code: ZodError_js_1.ZodIssueCode.invalid_string,
                  message: check2.message
                });
                status.dirty();
              }
            } else if (check2.kind === "uuid") {
              if (!uuidRegex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  validation: "uuid",
                  code: ZodError_js_1.ZodIssueCode.invalid_string,
                  message: check2.message
                });
                status.dirty();
              }
            } else if (check2.kind === "nanoid") {
              if (!nanoidRegex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  validation: "nanoid",
                  code: ZodError_js_1.ZodIssueCode.invalid_string,
                  message: check2.message
                });
                status.dirty();
              }
            } else if (check2.kind === "cuid") {
              if (!cuidRegex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  validation: "cuid",
                  code: ZodError_js_1.ZodIssueCode.invalid_string,
                  message: check2.message
                });
                status.dirty();
              }
            } else if (check2.kind === "cuid2") {
              if (!cuid2Regex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  validation: "cuid2",
                  code: ZodError_js_1.ZodIssueCode.invalid_string,
                  message: check2.message
                });
                status.dirty();
              }
            } else if (check2.kind === "ulid") {
              if (!ulidRegex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  validation: "ulid",
                  code: ZodError_js_1.ZodIssueCode.invalid_string,
                  message: check2.message
                });
                status.dirty();
              }
            } else if (check2.kind === "url") {
              try {
                new URL(input.data);
              } catch {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  validation: "url",
                  code: ZodError_js_1.ZodIssueCode.invalid_string,
                  message: check2.message
                });
                status.dirty();
              }
            } else if (check2.kind === "regex") {
              check2.regex.lastIndex = 0;
              const testResult = check2.regex.test(input.data);
              if (!testResult) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  validation: "regex",
                  code: ZodError_js_1.ZodIssueCode.invalid_string,
                  message: check2.message
                });
                status.dirty();
              }
            } else if (check2.kind === "trim") {
              input.data = input.data.trim();
            } else if (check2.kind === "includes") {
              if (!input.data.includes(check2.value, check2.position)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  code: ZodError_js_1.ZodIssueCode.invalid_string,
                  validation: { includes: check2.value, position: check2.position },
                  message: check2.message
                });
                status.dirty();
              }
            } else if (check2.kind === "toLowerCase") {
              input.data = input.data.toLowerCase();
            } else if (check2.kind === "toUpperCase") {
              input.data = input.data.toUpperCase();
            } else if (check2.kind === "startsWith") {
              if (!input.data.startsWith(check2.value)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  code: ZodError_js_1.ZodIssueCode.invalid_string,
                  validation: { startsWith: check2.value },
                  message: check2.message
                });
                status.dirty();
              }
            } else if (check2.kind === "endsWith") {
              if (!input.data.endsWith(check2.value)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  code: ZodError_js_1.ZodIssueCode.invalid_string,
                  validation: { endsWith: check2.value },
                  message: check2.message
                });
                status.dirty();
              }
            } else if (check2.kind === "datetime") {
              const regex = datetimeRegex(check2);
              if (!regex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  code: ZodError_js_1.ZodIssueCode.invalid_string,
                  validation: "datetime",
                  message: check2.message
                });
                status.dirty();
              }
            } else if (check2.kind === "date") {
              const regex = dateRegex;
              if (!regex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  code: ZodError_js_1.ZodIssueCode.invalid_string,
                  validation: "date",
                  message: check2.message
                });
                status.dirty();
              }
            } else if (check2.kind === "time") {
              const regex = timeRegex(check2);
              if (!regex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  code: ZodError_js_1.ZodIssueCode.invalid_string,
                  validation: "time",
                  message: check2.message
                });
                status.dirty();
              }
            } else if (check2.kind === "duration") {
              if (!durationRegex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  validation: "duration",
                  code: ZodError_js_1.ZodIssueCode.invalid_string,
                  message: check2.message
                });
                status.dirty();
              }
            } else if (check2.kind === "ip") {
              if (!isValidIP(input.data, check2.version)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  validation: "ip",
                  code: ZodError_js_1.ZodIssueCode.invalid_string,
                  message: check2.message
                });
                status.dirty();
              }
            } else if (check2.kind === "jwt") {
              if (!isValidJWT(input.data, check2.alg)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  validation: "jwt",
                  code: ZodError_js_1.ZodIssueCode.invalid_string,
                  message: check2.message
                });
                status.dirty();
              }
            } else if (check2.kind === "cidr") {
              if (!isValidCidr(input.data, check2.version)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  validation: "cidr",
                  code: ZodError_js_1.ZodIssueCode.invalid_string,
                  message: check2.message
                });
                status.dirty();
              }
            } else if (check2.kind === "base64") {
              if (!base64Regex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  validation: "base64",
                  code: ZodError_js_1.ZodIssueCode.invalid_string,
                  message: check2.message
                });
                status.dirty();
              }
            } else if (check2.kind === "base64url") {
              if (!base64urlRegex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  validation: "base64url",
                  code: ZodError_js_1.ZodIssueCode.invalid_string,
                  message: check2.message
                });
                status.dirty();
              }
            } else {
              util_js_1.util.assertNever(check2);
            }
          }
          return { status: status.value, value: input.data };
        }
        _regex(regex, validation, message2) {
          return this.refinement((data) => regex.test(data), {
            validation,
            code: ZodError_js_1.ZodIssueCode.invalid_string,
            ...errorUtil_js_1.errorUtil.errToObj(message2)
          });
        }
        _addCheck(check2) {
          return new _ZodString({
            ...this._def,
            checks: [...this._def.checks, check2]
          });
        }
        email(message2) {
          return this._addCheck({ kind: "email", ...errorUtil_js_1.errorUtil.errToObj(message2) });
        }
        url(message2) {
          return this._addCheck({ kind: "url", ...errorUtil_js_1.errorUtil.errToObj(message2) });
        }
        emoji(message2) {
          return this._addCheck({ kind: "emoji", ...errorUtil_js_1.errorUtil.errToObj(message2) });
        }
        uuid(message2) {
          return this._addCheck({ kind: "uuid", ...errorUtil_js_1.errorUtil.errToObj(message2) });
        }
        nanoid(message2) {
          return this._addCheck({ kind: "nanoid", ...errorUtil_js_1.errorUtil.errToObj(message2) });
        }
        cuid(message2) {
          return this._addCheck({ kind: "cuid", ...errorUtil_js_1.errorUtil.errToObj(message2) });
        }
        cuid2(message2) {
          return this._addCheck({ kind: "cuid2", ...errorUtil_js_1.errorUtil.errToObj(message2) });
        }
        ulid(message2) {
          return this._addCheck({ kind: "ulid", ...errorUtil_js_1.errorUtil.errToObj(message2) });
        }
        base64(message2) {
          return this._addCheck({ kind: "base64", ...errorUtil_js_1.errorUtil.errToObj(message2) });
        }
        base64url(message2) {
          return this._addCheck({
            kind: "base64url",
            ...errorUtil_js_1.errorUtil.errToObj(message2)
          });
        }
        jwt(options) {
          return this._addCheck({ kind: "jwt", ...errorUtil_js_1.errorUtil.errToObj(options) });
        }
        ip(options) {
          return this._addCheck({ kind: "ip", ...errorUtil_js_1.errorUtil.errToObj(options) });
        }
        cidr(options) {
          return this._addCheck({ kind: "cidr", ...errorUtil_js_1.errorUtil.errToObj(options) });
        }
        datetime(options) {
          if (typeof options === "string") {
            return this._addCheck({
              kind: "datetime",
              precision: null,
              offset: false,
              local: false,
              message: options
            });
          }
          return this._addCheck({
            kind: "datetime",
            precision: typeof options?.precision === "undefined" ? null : options?.precision,
            offset: options?.offset ?? false,
            local: options?.local ?? false,
            ...errorUtil_js_1.errorUtil.errToObj(options?.message)
          });
        }
        date(message2) {
          return this._addCheck({ kind: "date", message: message2 });
        }
        time(options) {
          if (typeof options === "string") {
            return this._addCheck({
              kind: "time",
              precision: null,
              message: options
            });
          }
          return this._addCheck({
            kind: "time",
            precision: typeof options?.precision === "undefined" ? null : options?.precision,
            ...errorUtil_js_1.errorUtil.errToObj(options?.message)
          });
        }
        duration(message2) {
          return this._addCheck({ kind: "duration", ...errorUtil_js_1.errorUtil.errToObj(message2) });
        }
        regex(regex, message2) {
          return this._addCheck({
            kind: "regex",
            regex,
            ...errorUtil_js_1.errorUtil.errToObj(message2)
          });
        }
        includes(value, options) {
          return this._addCheck({
            kind: "includes",
            value,
            position: options?.position,
            ...errorUtil_js_1.errorUtil.errToObj(options?.message)
          });
        }
        startsWith(value, message2) {
          return this._addCheck({
            kind: "startsWith",
            value,
            ...errorUtil_js_1.errorUtil.errToObj(message2)
          });
        }
        endsWith(value, message2) {
          return this._addCheck({
            kind: "endsWith",
            value,
            ...errorUtil_js_1.errorUtil.errToObj(message2)
          });
        }
        min(minLength, message2) {
          return this._addCheck({
            kind: "min",
            value: minLength,
            ...errorUtil_js_1.errorUtil.errToObj(message2)
          });
        }
        max(maxLength, message2) {
          return this._addCheck({
            kind: "max",
            value: maxLength,
            ...errorUtil_js_1.errorUtil.errToObj(message2)
          });
        }
        length(len, message2) {
          return this._addCheck({
            kind: "length",
            value: len,
            ...errorUtil_js_1.errorUtil.errToObj(message2)
          });
        }
        /**
         * Equivalent to `.min(1)`
         */
        nonempty(message2) {
          return this.min(1, errorUtil_js_1.errorUtil.errToObj(message2));
        }
        trim() {
          return new _ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: "trim" }]
          });
        }
        toLowerCase() {
          return new _ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: "toLowerCase" }]
          });
        }
        toUpperCase() {
          return new _ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: "toUpperCase" }]
          });
        }
        get isDatetime() {
          return !!this._def.checks.find((ch) => ch.kind === "datetime");
        }
        get isDate() {
          return !!this._def.checks.find((ch) => ch.kind === "date");
        }
        get isTime() {
          return !!this._def.checks.find((ch) => ch.kind === "time");
        }
        get isDuration() {
          return !!this._def.checks.find((ch) => ch.kind === "duration");
        }
        get isEmail() {
          return !!this._def.checks.find((ch) => ch.kind === "email");
        }
        get isURL() {
          return !!this._def.checks.find((ch) => ch.kind === "url");
        }
        get isEmoji() {
          return !!this._def.checks.find((ch) => ch.kind === "emoji");
        }
        get isUUID() {
          return !!this._def.checks.find((ch) => ch.kind === "uuid");
        }
        get isNANOID() {
          return !!this._def.checks.find((ch) => ch.kind === "nanoid");
        }
        get isCUID() {
          return !!this._def.checks.find((ch) => ch.kind === "cuid");
        }
        get isCUID2() {
          return !!this._def.checks.find((ch) => ch.kind === "cuid2");
        }
        get isULID() {
          return !!this._def.checks.find((ch) => ch.kind === "ulid");
        }
        get isIP() {
          return !!this._def.checks.find((ch) => ch.kind === "ip");
        }
        get isCIDR() {
          return !!this._def.checks.find((ch) => ch.kind === "cidr");
        }
        get isBase64() {
          return !!this._def.checks.find((ch) => ch.kind === "base64");
        }
        get isBase64url() {
          return !!this._def.checks.find((ch) => ch.kind === "base64url");
        }
        get minLength() {
          let min = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "min") {
              if (min === null || ch.value > min)
                min = ch.value;
            }
          }
          return min;
        }
        get maxLength() {
          let max = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "max") {
              if (max === null || ch.value < max)
                max = ch.value;
            }
          }
          return max;
        }
      };
      exports.ZodString = ZodString;
      ZodString.create = (params) => {
        return new ZodString({
          checks: [],
          typeName: ZodFirstPartyTypeKind.ZodString,
          coerce: params?.coerce ?? false,
          ...processCreateParams(params)
        });
      };
      function floatSafeRemainder(val, step) {
        const valDecCount = (val.toString().split(".")[1] || "").length;
        const stepDecCount = (step.toString().split(".")[1] || "").length;
        const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
        const valInt = Number.parseInt(val.toFixed(decCount).replace(".", ""));
        const stepInt = Number.parseInt(step.toFixed(decCount).replace(".", ""));
        return valInt % stepInt / 10 ** decCount;
      }
      var ZodNumber = class _ZodNumber extends ZodType {
        constructor() {
          super(...arguments);
          this.min = this.gte;
          this.max = this.lte;
          this.step = this.multipleOf;
        }
        _parse(input) {
          if (this._def.coerce) {
            input.data = Number(input.data);
          }
          const parsedType = this._getType(input);
          if (parsedType !== util_js_1.ZodParsedType.number) {
            const ctx2 = this._getOrReturnCtx(input);
            (0, parseUtil_js_1.addIssueToContext)(ctx2, {
              code: ZodError_js_1.ZodIssueCode.invalid_type,
              expected: util_js_1.ZodParsedType.number,
              received: ctx2.parsedType
            });
            return parseUtil_js_1.INVALID;
          }
          let ctx = void 0;
          const status = new parseUtil_js_1.ParseStatus();
          for (const check2 of this._def.checks) {
            if (check2.kind === "int") {
              if (!util_js_1.util.isInteger(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  code: ZodError_js_1.ZodIssueCode.invalid_type,
                  expected: "integer",
                  received: "float",
                  message: check2.message
                });
                status.dirty();
              }
            } else if (check2.kind === "min") {
              const tooSmall = check2.inclusive ? input.data < check2.value : input.data <= check2.value;
              if (tooSmall) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  code: ZodError_js_1.ZodIssueCode.too_small,
                  minimum: check2.value,
                  type: "number",
                  inclusive: check2.inclusive,
                  exact: false,
                  message: check2.message
                });
                status.dirty();
              }
            } else if (check2.kind === "max") {
              const tooBig = check2.inclusive ? input.data > check2.value : input.data >= check2.value;
              if (tooBig) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  code: ZodError_js_1.ZodIssueCode.too_big,
                  maximum: check2.value,
                  type: "number",
                  inclusive: check2.inclusive,
                  exact: false,
                  message: check2.message
                });
                status.dirty();
              }
            } else if (check2.kind === "multipleOf") {
              if (floatSafeRemainder(input.data, check2.value) !== 0) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  code: ZodError_js_1.ZodIssueCode.not_multiple_of,
                  multipleOf: check2.value,
                  message: check2.message
                });
                status.dirty();
              }
            } else if (check2.kind === "finite") {
              if (!Number.isFinite(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  code: ZodError_js_1.ZodIssueCode.not_finite,
                  message: check2.message
                });
                status.dirty();
              }
            } else {
              util_js_1.util.assertNever(check2);
            }
          }
          return { status: status.value, value: input.data };
        }
        gte(value, message2) {
          return this.setLimit("min", value, true, errorUtil_js_1.errorUtil.toString(message2));
        }
        gt(value, message2) {
          return this.setLimit("min", value, false, errorUtil_js_1.errorUtil.toString(message2));
        }
        lte(value, message2) {
          return this.setLimit("max", value, true, errorUtil_js_1.errorUtil.toString(message2));
        }
        lt(value, message2) {
          return this.setLimit("max", value, false, errorUtil_js_1.errorUtil.toString(message2));
        }
        setLimit(kind, value, inclusive, message2) {
          return new _ZodNumber({
            ...this._def,
            checks: [
              ...this._def.checks,
              {
                kind,
                value,
                inclusive,
                message: errorUtil_js_1.errorUtil.toString(message2)
              }
            ]
          });
        }
        _addCheck(check2) {
          return new _ZodNumber({
            ...this._def,
            checks: [...this._def.checks, check2]
          });
        }
        int(message2) {
          return this._addCheck({
            kind: "int",
            message: errorUtil_js_1.errorUtil.toString(message2)
          });
        }
        positive(message2) {
          return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: false,
            message: errorUtil_js_1.errorUtil.toString(message2)
          });
        }
        negative(message2) {
          return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: false,
            message: errorUtil_js_1.errorUtil.toString(message2)
          });
        }
        nonpositive(message2) {
          return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: true,
            message: errorUtil_js_1.errorUtil.toString(message2)
          });
        }
        nonnegative(message2) {
          return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: true,
            message: errorUtil_js_1.errorUtil.toString(message2)
          });
        }
        multipleOf(value, message2) {
          return this._addCheck({
            kind: "multipleOf",
            value,
            message: errorUtil_js_1.errorUtil.toString(message2)
          });
        }
        finite(message2) {
          return this._addCheck({
            kind: "finite",
            message: errorUtil_js_1.errorUtil.toString(message2)
          });
        }
        safe(message2) {
          return this._addCheck({
            kind: "min",
            inclusive: true,
            value: Number.MIN_SAFE_INTEGER,
            message: errorUtil_js_1.errorUtil.toString(message2)
          })._addCheck({
            kind: "max",
            inclusive: true,
            value: Number.MAX_SAFE_INTEGER,
            message: errorUtil_js_1.errorUtil.toString(message2)
          });
        }
        get minValue() {
          let min = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "min") {
              if (min === null || ch.value > min)
                min = ch.value;
            }
          }
          return min;
        }
        get maxValue() {
          let max = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "max") {
              if (max === null || ch.value < max)
                max = ch.value;
            }
          }
          return max;
        }
        get isInt() {
          return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util_js_1.util.isInteger(ch.value));
        }
        get isFinite() {
          let max = null;
          let min = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
              return true;
            } else if (ch.kind === "min") {
              if (min === null || ch.value > min)
                min = ch.value;
            } else if (ch.kind === "max") {
              if (max === null || ch.value < max)
                max = ch.value;
            }
          }
          return Number.isFinite(min) && Number.isFinite(max);
        }
      };
      exports.ZodNumber = ZodNumber;
      ZodNumber.create = (params) => {
        return new ZodNumber({
          checks: [],
          typeName: ZodFirstPartyTypeKind.ZodNumber,
          coerce: params?.coerce || false,
          ...processCreateParams(params)
        });
      };
      var ZodBigInt = class _ZodBigInt extends ZodType {
        constructor() {
          super(...arguments);
          this.min = this.gte;
          this.max = this.lte;
        }
        _parse(input) {
          if (this._def.coerce) {
            try {
              input.data = BigInt(input.data);
            } catch {
              return this._getInvalidInput(input);
            }
          }
          const parsedType = this._getType(input);
          if (parsedType !== util_js_1.ZodParsedType.bigint) {
            return this._getInvalidInput(input);
          }
          let ctx = void 0;
          const status = new parseUtil_js_1.ParseStatus();
          for (const check2 of this._def.checks) {
            if (check2.kind === "min") {
              const tooSmall = check2.inclusive ? input.data < check2.value : input.data <= check2.value;
              if (tooSmall) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  code: ZodError_js_1.ZodIssueCode.too_small,
                  type: "bigint",
                  minimum: check2.value,
                  inclusive: check2.inclusive,
                  message: check2.message
                });
                status.dirty();
              }
            } else if (check2.kind === "max") {
              const tooBig = check2.inclusive ? input.data > check2.value : input.data >= check2.value;
              if (tooBig) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  code: ZodError_js_1.ZodIssueCode.too_big,
                  type: "bigint",
                  maximum: check2.value,
                  inclusive: check2.inclusive,
                  message: check2.message
                });
                status.dirty();
              }
            } else if (check2.kind === "multipleOf") {
              if (input.data % check2.value !== BigInt(0)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  code: ZodError_js_1.ZodIssueCode.not_multiple_of,
                  multipleOf: check2.value,
                  message: check2.message
                });
                status.dirty();
              }
            } else {
              util_js_1.util.assertNever(check2);
            }
          }
          return { status: status.value, value: input.data };
        }
        _getInvalidInput(input) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_js_1.addIssueToContext)(ctx, {
            code: ZodError_js_1.ZodIssueCode.invalid_type,
            expected: util_js_1.ZodParsedType.bigint,
            received: ctx.parsedType
          });
          return parseUtil_js_1.INVALID;
        }
        gte(value, message2) {
          return this.setLimit("min", value, true, errorUtil_js_1.errorUtil.toString(message2));
        }
        gt(value, message2) {
          return this.setLimit("min", value, false, errorUtil_js_1.errorUtil.toString(message2));
        }
        lte(value, message2) {
          return this.setLimit("max", value, true, errorUtil_js_1.errorUtil.toString(message2));
        }
        lt(value, message2) {
          return this.setLimit("max", value, false, errorUtil_js_1.errorUtil.toString(message2));
        }
        setLimit(kind, value, inclusive, message2) {
          return new _ZodBigInt({
            ...this._def,
            checks: [
              ...this._def.checks,
              {
                kind,
                value,
                inclusive,
                message: errorUtil_js_1.errorUtil.toString(message2)
              }
            ]
          });
        }
        _addCheck(check2) {
          return new _ZodBigInt({
            ...this._def,
            checks: [...this._def.checks, check2]
          });
        }
        positive(message2) {
          return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: false,
            message: errorUtil_js_1.errorUtil.toString(message2)
          });
        }
        negative(message2) {
          return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: false,
            message: errorUtil_js_1.errorUtil.toString(message2)
          });
        }
        nonpositive(message2) {
          return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: true,
            message: errorUtil_js_1.errorUtil.toString(message2)
          });
        }
        nonnegative(message2) {
          return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: true,
            message: errorUtil_js_1.errorUtil.toString(message2)
          });
        }
        multipleOf(value, message2) {
          return this._addCheck({
            kind: "multipleOf",
            value,
            message: errorUtil_js_1.errorUtil.toString(message2)
          });
        }
        get minValue() {
          let min = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "min") {
              if (min === null || ch.value > min)
                min = ch.value;
            }
          }
          return min;
        }
        get maxValue() {
          let max = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "max") {
              if (max === null || ch.value < max)
                max = ch.value;
            }
          }
          return max;
        }
      };
      exports.ZodBigInt = ZodBigInt;
      ZodBigInt.create = (params) => {
        return new ZodBigInt({
          checks: [],
          typeName: ZodFirstPartyTypeKind.ZodBigInt,
          coerce: params?.coerce ?? false,
          ...processCreateParams(params)
        });
      };
      var ZodBoolean = class extends ZodType {
        _parse(input) {
          if (this._def.coerce) {
            input.data = Boolean(input.data);
          }
          const parsedType = this._getType(input);
          if (parsedType !== util_js_1.ZodParsedType.boolean) {
            const ctx = this._getOrReturnCtx(input);
            (0, parseUtil_js_1.addIssueToContext)(ctx, {
              code: ZodError_js_1.ZodIssueCode.invalid_type,
              expected: util_js_1.ZodParsedType.boolean,
              received: ctx.parsedType
            });
            return parseUtil_js_1.INVALID;
          }
          return (0, parseUtil_js_1.OK)(input.data);
        }
      };
      exports.ZodBoolean = ZodBoolean;
      ZodBoolean.create = (params) => {
        return new ZodBoolean({
          typeName: ZodFirstPartyTypeKind.ZodBoolean,
          coerce: params?.coerce || false,
          ...processCreateParams(params)
        });
      };
      var ZodDate = class _ZodDate extends ZodType {
        _parse(input) {
          if (this._def.coerce) {
            input.data = new Date(input.data);
          }
          const parsedType = this._getType(input);
          if (parsedType !== util_js_1.ZodParsedType.date) {
            const ctx2 = this._getOrReturnCtx(input);
            (0, parseUtil_js_1.addIssueToContext)(ctx2, {
              code: ZodError_js_1.ZodIssueCode.invalid_type,
              expected: util_js_1.ZodParsedType.date,
              received: ctx2.parsedType
            });
            return parseUtil_js_1.INVALID;
          }
          if (Number.isNaN(input.data.getTime())) {
            const ctx2 = this._getOrReturnCtx(input);
            (0, parseUtil_js_1.addIssueToContext)(ctx2, {
              code: ZodError_js_1.ZodIssueCode.invalid_date
            });
            return parseUtil_js_1.INVALID;
          }
          const status = new parseUtil_js_1.ParseStatus();
          let ctx = void 0;
          for (const check2 of this._def.checks) {
            if (check2.kind === "min") {
              if (input.data.getTime() < check2.value) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  code: ZodError_js_1.ZodIssueCode.too_small,
                  message: check2.message,
                  inclusive: true,
                  exact: false,
                  minimum: check2.value,
                  type: "date"
                });
                status.dirty();
              }
            } else if (check2.kind === "max") {
              if (input.data.getTime() > check2.value) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  code: ZodError_js_1.ZodIssueCode.too_big,
                  message: check2.message,
                  inclusive: true,
                  exact: false,
                  maximum: check2.value,
                  type: "date"
                });
                status.dirty();
              }
            } else {
              util_js_1.util.assertNever(check2);
            }
          }
          return {
            status: status.value,
            value: new Date(input.data.getTime())
          };
        }
        _addCheck(check2) {
          return new _ZodDate({
            ...this._def,
            checks: [...this._def.checks, check2]
          });
        }
        min(minDate, message2) {
          return this._addCheck({
            kind: "min",
            value: minDate.getTime(),
            message: errorUtil_js_1.errorUtil.toString(message2)
          });
        }
        max(maxDate, message2) {
          return this._addCheck({
            kind: "max",
            value: maxDate.getTime(),
            message: errorUtil_js_1.errorUtil.toString(message2)
          });
        }
        get minDate() {
          let min = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "min") {
              if (min === null || ch.value > min)
                min = ch.value;
            }
          }
          return min != null ? new Date(min) : null;
        }
        get maxDate() {
          let max = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "max") {
              if (max === null || ch.value < max)
                max = ch.value;
            }
          }
          return max != null ? new Date(max) : null;
        }
      };
      exports.ZodDate = ZodDate;
      ZodDate.create = (params) => {
        return new ZodDate({
          checks: [],
          coerce: params?.coerce || false,
          typeName: ZodFirstPartyTypeKind.ZodDate,
          ...processCreateParams(params)
        });
      };
      var ZodSymbol = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== util_js_1.ZodParsedType.symbol) {
            const ctx = this._getOrReturnCtx(input);
            (0, parseUtil_js_1.addIssueToContext)(ctx, {
              code: ZodError_js_1.ZodIssueCode.invalid_type,
              expected: util_js_1.ZodParsedType.symbol,
              received: ctx.parsedType
            });
            return parseUtil_js_1.INVALID;
          }
          return (0, parseUtil_js_1.OK)(input.data);
        }
      };
      exports.ZodSymbol = ZodSymbol;
      ZodSymbol.create = (params) => {
        return new ZodSymbol({
          typeName: ZodFirstPartyTypeKind.ZodSymbol,
          ...processCreateParams(params)
        });
      };
      var ZodUndefined = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== util_js_1.ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            (0, parseUtil_js_1.addIssueToContext)(ctx, {
              code: ZodError_js_1.ZodIssueCode.invalid_type,
              expected: util_js_1.ZodParsedType.undefined,
              received: ctx.parsedType
            });
            return parseUtil_js_1.INVALID;
          }
          return (0, parseUtil_js_1.OK)(input.data);
        }
      };
      exports.ZodUndefined = ZodUndefined;
      ZodUndefined.create = (params) => {
        return new ZodUndefined({
          typeName: ZodFirstPartyTypeKind.ZodUndefined,
          ...processCreateParams(params)
        });
      };
      var ZodNull = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== util_js_1.ZodParsedType.null) {
            const ctx = this._getOrReturnCtx(input);
            (0, parseUtil_js_1.addIssueToContext)(ctx, {
              code: ZodError_js_1.ZodIssueCode.invalid_type,
              expected: util_js_1.ZodParsedType.null,
              received: ctx.parsedType
            });
            return parseUtil_js_1.INVALID;
          }
          return (0, parseUtil_js_1.OK)(input.data);
        }
      };
      exports.ZodNull = ZodNull;
      ZodNull.create = (params) => {
        return new ZodNull({
          typeName: ZodFirstPartyTypeKind.ZodNull,
          ...processCreateParams(params)
        });
      };
      var ZodAny = class extends ZodType {
        constructor() {
          super(...arguments);
          this._any = true;
        }
        _parse(input) {
          return (0, parseUtil_js_1.OK)(input.data);
        }
      };
      exports.ZodAny = ZodAny;
      ZodAny.create = (params) => {
        return new ZodAny({
          typeName: ZodFirstPartyTypeKind.ZodAny,
          ...processCreateParams(params)
        });
      };
      var ZodUnknown = class extends ZodType {
        constructor() {
          super(...arguments);
          this._unknown = true;
        }
        _parse(input) {
          return (0, parseUtil_js_1.OK)(input.data);
        }
      };
      exports.ZodUnknown = ZodUnknown;
      ZodUnknown.create = (params) => {
        return new ZodUnknown({
          typeName: ZodFirstPartyTypeKind.ZodUnknown,
          ...processCreateParams(params)
        });
      };
      var ZodNever = class extends ZodType {
        _parse(input) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_js_1.addIssueToContext)(ctx, {
            code: ZodError_js_1.ZodIssueCode.invalid_type,
            expected: util_js_1.ZodParsedType.never,
            received: ctx.parsedType
          });
          return parseUtil_js_1.INVALID;
        }
      };
      exports.ZodNever = ZodNever;
      ZodNever.create = (params) => {
        return new ZodNever({
          typeName: ZodFirstPartyTypeKind.ZodNever,
          ...processCreateParams(params)
        });
      };
      var ZodVoid = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== util_js_1.ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            (0, parseUtil_js_1.addIssueToContext)(ctx, {
              code: ZodError_js_1.ZodIssueCode.invalid_type,
              expected: util_js_1.ZodParsedType.void,
              received: ctx.parsedType
            });
            return parseUtil_js_1.INVALID;
          }
          return (0, parseUtil_js_1.OK)(input.data);
        }
      };
      exports.ZodVoid = ZodVoid;
      ZodVoid.create = (params) => {
        return new ZodVoid({
          typeName: ZodFirstPartyTypeKind.ZodVoid,
          ...processCreateParams(params)
        });
      };
      var ZodArray = class _ZodArray extends ZodType {
        _parse(input) {
          const { ctx, status } = this._processInputParams(input);
          const def = this._def;
          if (ctx.parsedType !== util_js_1.ZodParsedType.array) {
            (0, parseUtil_js_1.addIssueToContext)(ctx, {
              code: ZodError_js_1.ZodIssueCode.invalid_type,
              expected: util_js_1.ZodParsedType.array,
              received: ctx.parsedType
            });
            return parseUtil_js_1.INVALID;
          }
          if (def.exactLength !== null) {
            const tooBig = ctx.data.length > def.exactLength.value;
            const tooSmall = ctx.data.length < def.exactLength.value;
            if (tooBig || tooSmall) {
              (0, parseUtil_js_1.addIssueToContext)(ctx, {
                code: tooBig ? ZodError_js_1.ZodIssueCode.too_big : ZodError_js_1.ZodIssueCode.too_small,
                minimum: tooSmall ? def.exactLength.value : void 0,
                maximum: tooBig ? def.exactLength.value : void 0,
                type: "array",
                inclusive: true,
                exact: true,
                message: def.exactLength.message
              });
              status.dirty();
            }
          }
          if (def.minLength !== null) {
            if (ctx.data.length < def.minLength.value) {
              (0, parseUtil_js_1.addIssueToContext)(ctx, {
                code: ZodError_js_1.ZodIssueCode.too_small,
                minimum: def.minLength.value,
                type: "array",
                inclusive: true,
                exact: false,
                message: def.minLength.message
              });
              status.dirty();
            }
          }
          if (def.maxLength !== null) {
            if (ctx.data.length > def.maxLength.value) {
              (0, parseUtil_js_1.addIssueToContext)(ctx, {
                code: ZodError_js_1.ZodIssueCode.too_big,
                maximum: def.maxLength.value,
                type: "array",
                inclusive: true,
                exact: false,
                message: def.maxLength.message
              });
              status.dirty();
            }
          }
          if (ctx.common.async) {
            return Promise.all([...ctx.data].map((item, i) => {
              return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
            })).then((result2) => {
              return parseUtil_js_1.ParseStatus.mergeArray(status, result2);
            });
          }
          const result = [...ctx.data].map((item, i) => {
            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
          });
          return parseUtil_js_1.ParseStatus.mergeArray(status, result);
        }
        get element() {
          return this._def.type;
        }
        min(minLength, message2) {
          return new _ZodArray({
            ...this._def,
            minLength: { value: minLength, message: errorUtil_js_1.errorUtil.toString(message2) }
          });
        }
        max(maxLength, message2) {
          return new _ZodArray({
            ...this._def,
            maxLength: { value: maxLength, message: errorUtil_js_1.errorUtil.toString(message2) }
          });
        }
        length(len, message2) {
          return new _ZodArray({
            ...this._def,
            exactLength: { value: len, message: errorUtil_js_1.errorUtil.toString(message2) }
          });
        }
        nonempty(message2) {
          return this.min(1, message2);
        }
      };
      exports.ZodArray = ZodArray;
      ZodArray.create = (schema, params) => {
        return new ZodArray({
          type: schema,
          minLength: null,
          maxLength: null,
          exactLength: null,
          typeName: ZodFirstPartyTypeKind.ZodArray,
          ...processCreateParams(params)
        });
      };
      function deepPartialify(schema) {
        if (schema instanceof ZodObject) {
          const newShape = {};
          for (const key in schema.shape) {
            const fieldSchema = schema.shape[key];
            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
          }
          return new ZodObject({
            ...schema._def,
            shape: () => newShape
          });
        } else if (schema instanceof ZodArray) {
          return new ZodArray({
            ...schema._def,
            type: deepPartialify(schema.element)
          });
        } else if (schema instanceof ZodOptional) {
          return ZodOptional.create(deepPartialify(schema.unwrap()));
        } else if (schema instanceof ZodNullable) {
          return ZodNullable.create(deepPartialify(schema.unwrap()));
        } else if (schema instanceof ZodTuple) {
          return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
        } else {
          return schema;
        }
      }
      var ZodObject = class _ZodObject extends ZodType {
        constructor() {
          super(...arguments);
          this._cached = null;
          this.nonstrict = this.passthrough;
          this.augment = this.extend;
        }
        _getCached() {
          if (this._cached !== null)
            return this._cached;
          const shape = this._def.shape();
          const keys = util_js_1.util.objectKeys(shape);
          this._cached = { shape, keys };
          return this._cached;
        }
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== util_js_1.ZodParsedType.object) {
            const ctx2 = this._getOrReturnCtx(input);
            (0, parseUtil_js_1.addIssueToContext)(ctx2, {
              code: ZodError_js_1.ZodIssueCode.invalid_type,
              expected: util_js_1.ZodParsedType.object,
              received: ctx2.parsedType
            });
            return parseUtil_js_1.INVALID;
          }
          const { status, ctx } = this._processInputParams(input);
          const { shape, keys: shapeKeys } = this._getCached();
          const extraKeys = [];
          if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
            for (const key in ctx.data) {
              if (!shapeKeys.includes(key)) {
                extraKeys.push(key);
              }
            }
          }
          const pairs = [];
          for (const key of shapeKeys) {
            const keyValidator = shape[key];
            const value = ctx.data[key];
            pairs.push({
              key: { status: "valid", value: key },
              value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
              alwaysSet: key in ctx.data
            });
          }
          if (this._def.catchall instanceof ZodNever) {
            const unknownKeys = this._def.unknownKeys;
            if (unknownKeys === "passthrough") {
              for (const key of extraKeys) {
                pairs.push({
                  key: { status: "valid", value: key },
                  value: { status: "valid", value: ctx.data[key] }
                });
              }
            } else if (unknownKeys === "strict") {
              if (extraKeys.length > 0) {
                (0, parseUtil_js_1.addIssueToContext)(ctx, {
                  code: ZodError_js_1.ZodIssueCode.unrecognized_keys,
                  keys: extraKeys
                });
                status.dirty();
              }
            } else if (unknownKeys === "strip") {
            } else {
              throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
            }
          } else {
            const catchall = this._def.catchall;
            for (const key of extraKeys) {
              const value = ctx.data[key];
              pairs.push({
                key: { status: "valid", value: key },
                value: catchall._parse(
                  new ParseInputLazyPath(ctx, value, ctx.path, key)
                  //, ctx.child(key), value, getParsedType(value)
                ),
                alwaysSet: key in ctx.data
              });
            }
          }
          if (ctx.common.async) {
            return Promise.resolve().then(async () => {
              const syncPairs = [];
              for (const pair of pairs) {
                const key = await pair.key;
                const value = await pair.value;
                syncPairs.push({
                  key,
                  value,
                  alwaysSet: pair.alwaysSet
                });
              }
              return syncPairs;
            }).then((syncPairs) => {
              return parseUtil_js_1.ParseStatus.mergeObjectSync(status, syncPairs);
            });
          } else {
            return parseUtil_js_1.ParseStatus.mergeObjectSync(status, pairs);
          }
        }
        get shape() {
          return this._def.shape();
        }
        strict(message2) {
          errorUtil_js_1.errorUtil.errToObj;
          return new _ZodObject({
            ...this._def,
            unknownKeys: "strict",
            ...message2 !== void 0 ? {
              errorMap: (issue, ctx) => {
                const defaultError = this._def.errorMap?.(issue, ctx).message ?? ctx.defaultError;
                if (issue.code === "unrecognized_keys")
                  return {
                    message: errorUtil_js_1.errorUtil.errToObj(message2).message ?? defaultError
                  };
                return {
                  message: defaultError
                };
              }
            } : {}
          });
        }
        strip() {
          return new _ZodObject({
            ...this._def,
            unknownKeys: "strip"
          });
        }
        passthrough() {
          return new _ZodObject({
            ...this._def,
            unknownKeys: "passthrough"
          });
        }
        // const AugmentFactory =
        //   <Def extends ZodObjectDef>(def: Def) =>
        //   <Augmentation extends ZodRawShape>(
        //     augmentation: Augmentation
        //   ): ZodObject<
        //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
        //     Def["unknownKeys"],
        //     Def["catchall"]
        //   > => {
        //     return new ZodObject({
        //       ...def,
        //       shape: () => ({
        //         ...def.shape(),
        //         ...augmentation,
        //       }),
        //     }) as any;
        //   };
        extend(augmentation) {
          return new _ZodObject({
            ...this._def,
            shape: () => ({
              ...this._def.shape(),
              ...augmentation
            })
          });
        }
        /**
         * Prior to zod@1.0.12 there was a bug in the
         * inferred type of merged objects. Please
         * upgrade if you are experiencing issues.
         */
        merge(merging) {
          const merged = new _ZodObject({
            unknownKeys: merging._def.unknownKeys,
            catchall: merging._def.catchall,
            shape: () => ({
              ...this._def.shape(),
              ...merging._def.shape()
            }),
            typeName: ZodFirstPartyTypeKind.ZodObject
          });
          return merged;
        }
        // merge<
        //   Incoming extends AnyZodObject,
        //   Augmentation extends Incoming["shape"],
        //   NewOutput extends {
        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
        //       ? Augmentation[k]["_output"]
        //       : k extends keyof Output
        //       ? Output[k]
        //       : never;
        //   },
        //   NewInput extends {
        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
        //       ? Augmentation[k]["_input"]
        //       : k extends keyof Input
        //       ? Input[k]
        //       : never;
        //   }
        // >(
        //   merging: Incoming
        // ): ZodObject<
        //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
        //   Incoming["_def"]["unknownKeys"],
        //   Incoming["_def"]["catchall"],
        //   NewOutput,
        //   NewInput
        // > {
        //   const merged: any = new ZodObject({
        //     unknownKeys: merging._def.unknownKeys,
        //     catchall: merging._def.catchall,
        //     shape: () =>
        //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
        //     typeName: ZodFirstPartyTypeKind.ZodObject,
        //   }) as any;
        //   return merged;
        // }
        setKey(key, schema) {
          return this.augment({ [key]: schema });
        }
        // merge<Incoming extends AnyZodObject>(
        //   merging: Incoming
        // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
        // ZodObject<
        //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
        //   Incoming["_def"]["unknownKeys"],
        //   Incoming["_def"]["catchall"]
        // > {
        //   // const mergedShape = objectUtil.mergeShapes(
        //   //   this._def.shape(),
        //   //   merging._def.shape()
        //   // );
        //   const merged: any = new ZodObject({
        //     unknownKeys: merging._def.unknownKeys,
        //     catchall: merging._def.catchall,
        //     shape: () =>
        //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
        //     typeName: ZodFirstPartyTypeKind.ZodObject,
        //   }) as any;
        //   return merged;
        // }
        catchall(index) {
          return new _ZodObject({
            ...this._def,
            catchall: index
          });
        }
        pick(mask) {
          const shape = {};
          for (const key of util_js_1.util.objectKeys(mask)) {
            if (mask[key] && this.shape[key]) {
              shape[key] = this.shape[key];
            }
          }
          return new _ZodObject({
            ...this._def,
            shape: () => shape
          });
        }
        omit(mask) {
          const shape = {};
          for (const key of util_js_1.util.objectKeys(this.shape)) {
            if (!mask[key]) {
              shape[key] = this.shape[key];
            }
          }
          return new _ZodObject({
            ...this._def,
            shape: () => shape
          });
        }
        /**
         * @deprecated
         */
        deepPartial() {
          return deepPartialify(this);
        }
        partial(mask) {
          const newShape = {};
          for (const key of util_js_1.util.objectKeys(this.shape)) {
            const fieldSchema = this.shape[key];
            if (mask && !mask[key]) {
              newShape[key] = fieldSchema;
            } else {
              newShape[key] = fieldSchema.optional();
            }
          }
          return new _ZodObject({
            ...this._def,
            shape: () => newShape
          });
        }
        required(mask) {
          const newShape = {};
          for (const key of util_js_1.util.objectKeys(this.shape)) {
            if (mask && !mask[key]) {
              newShape[key] = this.shape[key];
            } else {
              const fieldSchema = this.shape[key];
              let newField = fieldSchema;
              while (newField instanceof ZodOptional) {
                newField = newField._def.innerType;
              }
              newShape[key] = newField;
            }
          }
          return new _ZodObject({
            ...this._def,
            shape: () => newShape
          });
        }
        keyof() {
          return createZodEnum(util_js_1.util.objectKeys(this.shape));
        }
      };
      exports.ZodObject = ZodObject;
      ZodObject.create = (shape, params) => {
        return new ZodObject({
          shape: () => shape,
          unknownKeys: "strip",
          catchall: ZodNever.create(),
          typeName: ZodFirstPartyTypeKind.ZodObject,
          ...processCreateParams(params)
        });
      };
      ZodObject.strictCreate = (shape, params) => {
        return new ZodObject({
          shape: () => shape,
          unknownKeys: "strict",
          catchall: ZodNever.create(),
          typeName: ZodFirstPartyTypeKind.ZodObject,
          ...processCreateParams(params)
        });
      };
      ZodObject.lazycreate = (shape, params) => {
        return new ZodObject({
          shape,
          unknownKeys: "strip",
          catchall: ZodNever.create(),
          typeName: ZodFirstPartyTypeKind.ZodObject,
          ...processCreateParams(params)
        });
      };
      var ZodUnion = class extends ZodType {
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          const options = this._def.options;
          function handleResults(results) {
            for (const result of results) {
              if (result.result.status === "valid") {
                return result.result;
              }
            }
            for (const result of results) {
              if (result.result.status === "dirty") {
                ctx.common.issues.push(...result.ctx.common.issues);
                return result.result;
              }
            }
            const unionErrors = results.map((result) => new ZodError_js_1.ZodError(result.ctx.common.issues));
            (0, parseUtil_js_1.addIssueToContext)(ctx, {
              code: ZodError_js_1.ZodIssueCode.invalid_union,
              unionErrors
            });
            return parseUtil_js_1.INVALID;
          }
          if (ctx.common.async) {
            return Promise.all(options.map(async (option) => {
              const childCtx = {
                ...ctx,
                common: {
                  ...ctx.common,
                  issues: []
                },
                parent: null
              };
              return {
                result: await option._parseAsync({
                  data: ctx.data,
                  path: ctx.path,
                  parent: childCtx
                }),
                ctx: childCtx
              };
            })).then(handleResults);
          } else {
            let dirty = void 0;
            const issues = [];
            for (const option of options) {
              const childCtx = {
                ...ctx,
                common: {
                  ...ctx.common,
                  issues: []
                },
                parent: null
              };
              const result = option._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: childCtx
              });
              if (result.status === "valid") {
                return result;
              } else if (result.status === "dirty" && !dirty) {
                dirty = { result, ctx: childCtx };
              }
              if (childCtx.common.issues.length) {
                issues.push(childCtx.common.issues);
              }
            }
            if (dirty) {
              ctx.common.issues.push(...dirty.ctx.common.issues);
              return dirty.result;
            }
            const unionErrors = issues.map((issues2) => new ZodError_js_1.ZodError(issues2));
            (0, parseUtil_js_1.addIssueToContext)(ctx, {
              code: ZodError_js_1.ZodIssueCode.invalid_union,
              unionErrors
            });
            return parseUtil_js_1.INVALID;
          }
        }
        get options() {
          return this._def.options;
        }
      };
      exports.ZodUnion = ZodUnion;
      ZodUnion.create = (types2, params) => {
        return new ZodUnion({
          options: types2,
          typeName: ZodFirstPartyTypeKind.ZodUnion,
          ...processCreateParams(params)
        });
      };
      var getDiscriminator = (type) => {
        if (type instanceof ZodLazy) {
          return getDiscriminator(type.schema);
        } else if (type instanceof ZodEffects) {
          return getDiscriminator(type.innerType());
        } else if (type instanceof ZodLiteral) {
          return [type.value];
        } else if (type instanceof ZodEnum) {
          return type.options;
        } else if (type instanceof ZodNativeEnum) {
          return util_js_1.util.objectValues(type.enum);
        } else if (type instanceof ZodDefault) {
          return getDiscriminator(type._def.innerType);
        } else if (type instanceof ZodUndefined) {
          return [void 0];
        } else if (type instanceof ZodNull) {
          return [null];
        } else if (type instanceof ZodOptional) {
          return [void 0, ...getDiscriminator(type.unwrap())];
        } else if (type instanceof ZodNullable) {
          return [null, ...getDiscriminator(type.unwrap())];
        } else if (type instanceof ZodBranded) {
          return getDiscriminator(type.unwrap());
        } else if (type instanceof ZodReadonly) {
          return getDiscriminator(type.unwrap());
        } else if (type instanceof ZodCatch) {
          return getDiscriminator(type._def.innerType);
        } else {
          return [];
        }
      };
      var ZodDiscriminatedUnion = class _ZodDiscriminatedUnion extends ZodType {
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          if (ctx.parsedType !== util_js_1.ZodParsedType.object) {
            (0, parseUtil_js_1.addIssueToContext)(ctx, {
              code: ZodError_js_1.ZodIssueCode.invalid_type,
              expected: util_js_1.ZodParsedType.object,
              received: ctx.parsedType
            });
            return parseUtil_js_1.INVALID;
          }
          const discriminator = this.discriminator;
          const discriminatorValue = ctx.data[discriminator];
          const option = this.optionsMap.get(discriminatorValue);
          if (!option) {
            (0, parseUtil_js_1.addIssueToContext)(ctx, {
              code: ZodError_js_1.ZodIssueCode.invalid_union_discriminator,
              options: Array.from(this.optionsMap.keys()),
              path: [discriminator]
            });
            return parseUtil_js_1.INVALID;
          }
          if (ctx.common.async) {
            return option._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
          } else {
            return option._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
          }
        }
        get discriminator() {
          return this._def.discriminator;
        }
        get options() {
          return this._def.options;
        }
        get optionsMap() {
          return this._def.optionsMap;
        }
        /**
         * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
         * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
         * have a different value for each object in the union.
         * @param discriminator the name of the discriminator property
         * @param types an array of object schemas
         * @param params
         */
        static create(discriminator, options, params) {
          const optionsMap = /* @__PURE__ */ new Map();
          for (const type of options) {
            const discriminatorValues = getDiscriminator(type.shape[discriminator]);
            if (!discriminatorValues.length) {
              throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
            }
            for (const value of discriminatorValues) {
              if (optionsMap.has(value)) {
                throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
              }
              optionsMap.set(value, type);
            }
          }
          return new _ZodDiscriminatedUnion({
            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
            discriminator,
            options,
            optionsMap,
            ...processCreateParams(params)
          });
        }
      };
      exports.ZodDiscriminatedUnion = ZodDiscriminatedUnion;
      function mergeValues(a, b) {
        const aType = (0, util_js_1.getParsedType)(a);
        const bType = (0, util_js_1.getParsedType)(b);
        if (a === b) {
          return { valid: true, data: a };
        } else if (aType === util_js_1.ZodParsedType.object && bType === util_js_1.ZodParsedType.object) {
          const bKeys = util_js_1.util.objectKeys(b);
          const sharedKeys = util_js_1.util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
          const newObj = { ...a, ...b };
          for (const key of sharedKeys) {
            const sharedValue = mergeValues(a[key], b[key]);
            if (!sharedValue.valid) {
              return { valid: false };
            }
            newObj[key] = sharedValue.data;
          }
          return { valid: true, data: newObj };
        } else if (aType === util_js_1.ZodParsedType.array && bType === util_js_1.ZodParsedType.array) {
          if (a.length !== b.length) {
            return { valid: false };
          }
          const newArray = [];
          for (let index = 0; index < a.length; index++) {
            const itemA = a[index];
            const itemB = b[index];
            const sharedValue = mergeValues(itemA, itemB);
            if (!sharedValue.valid) {
              return { valid: false };
            }
            newArray.push(sharedValue.data);
          }
          return { valid: true, data: newArray };
        } else if (aType === util_js_1.ZodParsedType.date && bType === util_js_1.ZodParsedType.date && +a === +b) {
          return { valid: true, data: a };
        } else {
          return { valid: false };
        }
      }
      var ZodIntersection = class extends ZodType {
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          const handleParsed = (parsedLeft, parsedRight) => {
            if ((0, parseUtil_js_1.isAborted)(parsedLeft) || (0, parseUtil_js_1.isAborted)(parsedRight)) {
              return parseUtil_js_1.INVALID;
            }
            const merged = mergeValues(parsedLeft.value, parsedRight.value);
            if (!merged.valid) {
              (0, parseUtil_js_1.addIssueToContext)(ctx, {
                code: ZodError_js_1.ZodIssueCode.invalid_intersection_types
              });
              return parseUtil_js_1.INVALID;
            }
            if ((0, parseUtil_js_1.isDirty)(parsedLeft) || (0, parseUtil_js_1.isDirty)(parsedRight)) {
              status.dirty();
            }
            return { status: status.value, value: merged.data };
          };
          if (ctx.common.async) {
            return Promise.all([
              this._def.left._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
              }),
              this._def.right._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
              })
            ]).then(([left, right]) => handleParsed(left, right));
          } else {
            return handleParsed(this._def.left._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            }), this._def.right._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            }));
          }
        }
      };
      exports.ZodIntersection = ZodIntersection;
      ZodIntersection.create = (left, right, params) => {
        return new ZodIntersection({
          left,
          right,
          typeName: ZodFirstPartyTypeKind.ZodIntersection,
          ...processCreateParams(params)
        });
      };
      var ZodTuple = class _ZodTuple extends ZodType {
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.parsedType !== util_js_1.ZodParsedType.array) {
            (0, parseUtil_js_1.addIssueToContext)(ctx, {
              code: ZodError_js_1.ZodIssueCode.invalid_type,
              expected: util_js_1.ZodParsedType.array,
              received: ctx.parsedType
            });
            return parseUtil_js_1.INVALID;
          }
          if (ctx.data.length < this._def.items.length) {
            (0, parseUtil_js_1.addIssueToContext)(ctx, {
              code: ZodError_js_1.ZodIssueCode.too_small,
              minimum: this._def.items.length,
              inclusive: true,
              exact: false,
              type: "array"
            });
            return parseUtil_js_1.INVALID;
          }
          const rest = this._def.rest;
          if (!rest && ctx.data.length > this._def.items.length) {
            (0, parseUtil_js_1.addIssueToContext)(ctx, {
              code: ZodError_js_1.ZodIssueCode.too_big,
              maximum: this._def.items.length,
              inclusive: true,
              exact: false,
              type: "array"
            });
            status.dirty();
          }
          const items = [...ctx.data].map((item, itemIndex) => {
            const schema = this._def.items[itemIndex] || this._def.rest;
            if (!schema)
              return null;
            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
          }).filter((x) => !!x);
          if (ctx.common.async) {
            return Promise.all(items).then((results) => {
              return parseUtil_js_1.ParseStatus.mergeArray(status, results);
            });
          } else {
            return parseUtil_js_1.ParseStatus.mergeArray(status, items);
          }
        }
        get items() {
          return this._def.items;
        }
        rest(rest) {
          return new _ZodTuple({
            ...this._def,
            rest
          });
        }
      };
      exports.ZodTuple = ZodTuple;
      ZodTuple.create = (schemas, params) => {
        if (!Array.isArray(schemas)) {
          throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
        }
        return new ZodTuple({
          items: schemas,
          typeName: ZodFirstPartyTypeKind.ZodTuple,
          rest: null,
          ...processCreateParams(params)
        });
      };
      var ZodRecord = class _ZodRecord extends ZodType {
        get keySchema() {
          return this._def.keyType;
        }
        get valueSchema() {
          return this._def.valueType;
        }
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.parsedType !== util_js_1.ZodParsedType.object) {
            (0, parseUtil_js_1.addIssueToContext)(ctx, {
              code: ZodError_js_1.ZodIssueCode.invalid_type,
              expected: util_js_1.ZodParsedType.object,
              received: ctx.parsedType
            });
            return parseUtil_js_1.INVALID;
          }
          const pairs = [];
          const keyType = this._def.keyType;
          const valueType = this._def.valueType;
          for (const key in ctx.data) {
            pairs.push({
              key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
              value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
              alwaysSet: key in ctx.data
            });
          }
          if (ctx.common.async) {
            return parseUtil_js_1.ParseStatus.mergeObjectAsync(status, pairs);
          } else {
            return parseUtil_js_1.ParseStatus.mergeObjectSync(status, pairs);
          }
        }
        get element() {
          return this._def.valueType;
        }
        static create(first, second, third) {
          if (second instanceof ZodType) {
            return new _ZodRecord({
              keyType: first,
              valueType: second,
              typeName: ZodFirstPartyTypeKind.ZodRecord,
              ...processCreateParams(third)
            });
          }
          return new _ZodRecord({
            keyType: ZodString.create(),
            valueType: first,
            typeName: ZodFirstPartyTypeKind.ZodRecord,
            ...processCreateParams(second)
          });
        }
      };
      exports.ZodRecord = ZodRecord;
      var ZodMap = class extends ZodType {
        get keySchema() {
          return this._def.keyType;
        }
        get valueSchema() {
          return this._def.valueType;
        }
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.parsedType !== util_js_1.ZodParsedType.map) {
            (0, parseUtil_js_1.addIssueToContext)(ctx, {
              code: ZodError_js_1.ZodIssueCode.invalid_type,
              expected: util_js_1.ZodParsedType.map,
              received: ctx.parsedType
            });
            return parseUtil_js_1.INVALID;
          }
          const keyType = this._def.keyType;
          const valueType = this._def.valueType;
          const pairs = [...ctx.data.entries()].map(([key, value], index) => {
            return {
              key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
              value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
            };
          });
          if (ctx.common.async) {
            const finalMap = /* @__PURE__ */ new Map();
            return Promise.resolve().then(async () => {
              for (const pair of pairs) {
                const key = await pair.key;
                const value = await pair.value;
                if (key.status === "aborted" || value.status === "aborted") {
                  return parseUtil_js_1.INVALID;
                }
                if (key.status === "dirty" || value.status === "dirty") {
                  status.dirty();
                }
                finalMap.set(key.value, value.value);
              }
              return { status: status.value, value: finalMap };
            });
          } else {
            const finalMap = /* @__PURE__ */ new Map();
            for (const pair of pairs) {
              const key = pair.key;
              const value = pair.value;
              if (key.status === "aborted" || value.status === "aborted") {
                return parseUtil_js_1.INVALID;
              }
              if (key.status === "dirty" || value.status === "dirty") {
                status.dirty();
              }
              finalMap.set(key.value, value.value);
            }
            return { status: status.value, value: finalMap };
          }
        }
      };
      exports.ZodMap = ZodMap;
      ZodMap.create = (keyType, valueType, params) => {
        return new ZodMap({
          valueType,
          keyType,
          typeName: ZodFirstPartyTypeKind.ZodMap,
          ...processCreateParams(params)
        });
      };
      var ZodSet = class _ZodSet extends ZodType {
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.parsedType !== util_js_1.ZodParsedType.set) {
            (0, parseUtil_js_1.addIssueToContext)(ctx, {
              code: ZodError_js_1.ZodIssueCode.invalid_type,
              expected: util_js_1.ZodParsedType.set,
              received: ctx.parsedType
            });
            return parseUtil_js_1.INVALID;
          }
          const def = this._def;
          if (def.minSize !== null) {
            if (ctx.data.size < def.minSize.value) {
              (0, parseUtil_js_1.addIssueToContext)(ctx, {
                code: ZodError_js_1.ZodIssueCode.too_small,
                minimum: def.minSize.value,
                type: "set",
                inclusive: true,
                exact: false,
                message: def.minSize.message
              });
              status.dirty();
            }
          }
          if (def.maxSize !== null) {
            if (ctx.data.size > def.maxSize.value) {
              (0, parseUtil_js_1.addIssueToContext)(ctx, {
                code: ZodError_js_1.ZodIssueCode.too_big,
                maximum: def.maxSize.value,
                type: "set",
                inclusive: true,
                exact: false,
                message: def.maxSize.message
              });
              status.dirty();
            }
          }
          const valueType = this._def.valueType;
          function finalizeSet(elements2) {
            const parsedSet = /* @__PURE__ */ new Set();
            for (const element of elements2) {
              if (element.status === "aborted")
                return parseUtil_js_1.INVALID;
              if (element.status === "dirty")
                status.dirty();
              parsedSet.add(element.value);
            }
            return { status: status.value, value: parsedSet };
          }
          const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
          if (ctx.common.async) {
            return Promise.all(elements).then((elements2) => finalizeSet(elements2));
          } else {
            return finalizeSet(elements);
          }
        }
        min(minSize, message2) {
          return new _ZodSet({
            ...this._def,
            minSize: { value: minSize, message: errorUtil_js_1.errorUtil.toString(message2) }
          });
        }
        max(maxSize, message2) {
          return new _ZodSet({
            ...this._def,
            maxSize: { value: maxSize, message: errorUtil_js_1.errorUtil.toString(message2) }
          });
        }
        size(size, message2) {
          return this.min(size, message2).max(size, message2);
        }
        nonempty(message2) {
          return this.min(1, message2);
        }
      };
      exports.ZodSet = ZodSet;
      ZodSet.create = (valueType, params) => {
        return new ZodSet({
          valueType,
          minSize: null,
          maxSize: null,
          typeName: ZodFirstPartyTypeKind.ZodSet,
          ...processCreateParams(params)
        });
      };
      var ZodFunction = class _ZodFunction extends ZodType {
        constructor() {
          super(...arguments);
          this.validate = this.implement;
        }
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          if (ctx.parsedType !== util_js_1.ZodParsedType.function) {
            (0, parseUtil_js_1.addIssueToContext)(ctx, {
              code: ZodError_js_1.ZodIssueCode.invalid_type,
              expected: util_js_1.ZodParsedType.function,
              received: ctx.parsedType
            });
            return parseUtil_js_1.INVALID;
          }
          function makeArgsIssue(args, error) {
            return (0, parseUtil_js_1.makeIssue)({
              data: args,
              path: ctx.path,
              errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, (0, errors_js_1.getErrorMap)(), errors_js_1.defaultErrorMap].filter((x) => !!x),
              issueData: {
                code: ZodError_js_1.ZodIssueCode.invalid_arguments,
                argumentsError: error
              }
            });
          }
          function makeReturnsIssue(returns, error) {
            return (0, parseUtil_js_1.makeIssue)({
              data: returns,
              path: ctx.path,
              errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, (0, errors_js_1.getErrorMap)(), errors_js_1.defaultErrorMap].filter((x) => !!x),
              issueData: {
                code: ZodError_js_1.ZodIssueCode.invalid_return_type,
                returnTypeError: error
              }
            });
          }
          const params = { errorMap: ctx.common.contextualErrorMap };
          const fn = ctx.data;
          if (this._def.returns instanceof ZodPromise) {
            const me = this;
            return (0, parseUtil_js_1.OK)(async function(...args) {
              const error = new ZodError_js_1.ZodError([]);
              const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {
                error.addIssue(makeArgsIssue(args, e));
                throw error;
              });
              const result = await Reflect.apply(fn, this, parsedArgs);
              const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e) => {
                error.addIssue(makeReturnsIssue(result, e));
                throw error;
              });
              return parsedReturns;
            });
          } else {
            const me = this;
            return (0, parseUtil_js_1.OK)(function(...args) {
              const parsedArgs = me._def.args.safeParse(args, params);
              if (!parsedArgs.success) {
                throw new ZodError_js_1.ZodError([makeArgsIssue(args, parsedArgs.error)]);
              }
              const result = Reflect.apply(fn, this, parsedArgs.data);
              const parsedReturns = me._def.returns.safeParse(result, params);
              if (!parsedReturns.success) {
                throw new ZodError_js_1.ZodError([makeReturnsIssue(result, parsedReturns.error)]);
              }
              return parsedReturns.data;
            });
          }
        }
        parameters() {
          return this._def.args;
        }
        returnType() {
          return this._def.returns;
        }
        args(...items) {
          return new _ZodFunction({
            ...this._def,
            args: ZodTuple.create(items).rest(ZodUnknown.create())
          });
        }
        returns(returnType) {
          return new _ZodFunction({
            ...this._def,
            returns: returnType
          });
        }
        implement(func) {
          const validatedFunc = this.parse(func);
          return validatedFunc;
        }
        strictImplement(func) {
          const validatedFunc = this.parse(func);
          return validatedFunc;
        }
        static create(args, returns, params) {
          return new _ZodFunction({
            args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
            returns: returns || ZodUnknown.create(),
            typeName: ZodFirstPartyTypeKind.ZodFunction,
            ...processCreateParams(params)
          });
        }
      };
      exports.ZodFunction = ZodFunction;
      var ZodLazy = class extends ZodType {
        get schema() {
          return this._def.getter();
        }
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          const lazySchema = this._def.getter();
          return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
        }
      };
      exports.ZodLazy = ZodLazy;
      ZodLazy.create = (getter, params) => {
        return new ZodLazy({
          getter,
          typeName: ZodFirstPartyTypeKind.ZodLazy,
          ...processCreateParams(params)
        });
      };
      var ZodLiteral = class extends ZodType {
        _parse(input) {
          if (input.data !== this._def.value) {
            const ctx = this._getOrReturnCtx(input);
            (0, parseUtil_js_1.addIssueToContext)(ctx, {
              received: ctx.data,
              code: ZodError_js_1.ZodIssueCode.invalid_literal,
              expected: this._def.value
            });
            return parseUtil_js_1.INVALID;
          }
          return { status: "valid", value: input.data };
        }
        get value() {
          return this._def.value;
        }
      };
      exports.ZodLiteral = ZodLiteral;
      ZodLiteral.create = (value, params) => {
        return new ZodLiteral({
          value,
          typeName: ZodFirstPartyTypeKind.ZodLiteral,
          ...processCreateParams(params)
        });
      };
      function createZodEnum(values, params) {
        return new ZodEnum({
          values,
          typeName: ZodFirstPartyTypeKind.ZodEnum,
          ...processCreateParams(params)
        });
      }
      var ZodEnum = class _ZodEnum extends ZodType {
        constructor() {
          super(...arguments);
          _ZodEnum_cache.set(this, void 0);
        }
        _parse(input) {
          if (typeof input.data !== "string") {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            (0, parseUtil_js_1.addIssueToContext)(ctx, {
              expected: util_js_1.util.joinValues(expectedValues),
              received: ctx.parsedType,
              code: ZodError_js_1.ZodIssueCode.invalid_type
            });
            return parseUtil_js_1.INVALID;
          }
          if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f")) {
            __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), "f");
          }
          if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f").has(input.data)) {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            (0, parseUtil_js_1.addIssueToContext)(ctx, {
              received: ctx.data,
              code: ZodError_js_1.ZodIssueCode.invalid_enum_value,
              options: expectedValues
            });
            return parseUtil_js_1.INVALID;
          }
          return (0, parseUtil_js_1.OK)(input.data);
        }
        get options() {
          return this._def.values;
        }
        get enum() {
          const enumValues = {};
          for (const val of this._def.values) {
            enumValues[val] = val;
          }
          return enumValues;
        }
        get Values() {
          const enumValues = {};
          for (const val of this._def.values) {
            enumValues[val] = val;
          }
          return enumValues;
        }
        get Enum() {
          const enumValues = {};
          for (const val of this._def.values) {
            enumValues[val] = val;
          }
          return enumValues;
        }
        extract(values, newDef = this._def) {
          return _ZodEnum.create(values, {
            ...this._def,
            ...newDef
          });
        }
        exclude(values, newDef = this._def) {
          return _ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
            ...this._def,
            ...newDef
          });
        }
      };
      exports.ZodEnum = ZodEnum;
      _ZodEnum_cache = /* @__PURE__ */ new WeakMap();
      ZodEnum.create = createZodEnum;
      var ZodNativeEnum = class extends ZodType {
        constructor() {
          super(...arguments);
          _ZodNativeEnum_cache.set(this, void 0);
        }
        _parse(input) {
          const nativeEnumValues = util_js_1.util.getValidEnumValues(this._def.values);
          const ctx = this._getOrReturnCtx(input);
          if (ctx.parsedType !== util_js_1.ZodParsedType.string && ctx.parsedType !== util_js_1.ZodParsedType.number) {
            const expectedValues = util_js_1.util.objectValues(nativeEnumValues);
            (0, parseUtil_js_1.addIssueToContext)(ctx, {
              expected: util_js_1.util.joinValues(expectedValues),
              received: ctx.parsedType,
              code: ZodError_js_1.ZodIssueCode.invalid_type
            });
            return parseUtil_js_1.INVALID;
          }
          if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f")) {
            __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util_js_1.util.getValidEnumValues(this._def.values)), "f");
          }
          if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f").has(input.data)) {
            const expectedValues = util_js_1.util.objectValues(nativeEnumValues);
            (0, parseUtil_js_1.addIssueToContext)(ctx, {
              received: ctx.data,
              code: ZodError_js_1.ZodIssueCode.invalid_enum_value,
              options: expectedValues
            });
            return parseUtil_js_1.INVALID;
          }
          return (0, parseUtil_js_1.OK)(input.data);
        }
        get enum() {
          return this._def.values;
        }
      };
      exports.ZodNativeEnum = ZodNativeEnum;
      _ZodNativeEnum_cache = /* @__PURE__ */ new WeakMap();
      ZodNativeEnum.create = (values, params) => {
        return new ZodNativeEnum({
          values,
          typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
          ...processCreateParams(params)
        });
      };
      var ZodPromise = class extends ZodType {
        unwrap() {
          return this._def.type;
        }
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          if (ctx.parsedType !== util_js_1.ZodParsedType.promise && ctx.common.async === false) {
            (0, parseUtil_js_1.addIssueToContext)(ctx, {
              code: ZodError_js_1.ZodIssueCode.invalid_type,
              expected: util_js_1.ZodParsedType.promise,
              received: ctx.parsedType
            });
            return parseUtil_js_1.INVALID;
          }
          const promisified = ctx.parsedType === util_js_1.ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
          return (0, parseUtil_js_1.OK)(promisified.then((data) => {
            return this._def.type.parseAsync(data, {
              path: ctx.path,
              errorMap: ctx.common.contextualErrorMap
            });
          }));
        }
      };
      exports.ZodPromise = ZodPromise;
      ZodPromise.create = (schema, params) => {
        return new ZodPromise({
          type: schema,
          typeName: ZodFirstPartyTypeKind.ZodPromise,
          ...processCreateParams(params)
        });
      };
      var ZodEffects = class extends ZodType {
        innerType() {
          return this._def.schema;
        }
        sourceType() {
          return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
        }
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          const effect = this._def.effect || null;
          const checkCtx = {
            addIssue: (arg) => {
              (0, parseUtil_js_1.addIssueToContext)(ctx, arg);
              if (arg.fatal) {
                status.abort();
              } else {
                status.dirty();
              }
            },
            get path() {
              return ctx.path;
            }
          };
          checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
          if (effect.type === "preprocess") {
            const processed = effect.transform(ctx.data, checkCtx);
            if (ctx.common.async) {
              return Promise.resolve(processed).then(async (processed2) => {
                if (status.value === "aborted")
                  return parseUtil_js_1.INVALID;
                const result = await this._def.schema._parseAsync({
                  data: processed2,
                  path: ctx.path,
                  parent: ctx
                });
                if (result.status === "aborted")
                  return parseUtil_js_1.INVALID;
                if (result.status === "dirty")
                  return (0, parseUtil_js_1.DIRTY)(result.value);
                if (status.value === "dirty")
                  return (0, parseUtil_js_1.DIRTY)(result.value);
                return result;
              });
            } else {
              if (status.value === "aborted")
                return parseUtil_js_1.INVALID;
              const result = this._def.schema._parseSync({
                data: processed,
                path: ctx.path,
                parent: ctx
              });
              if (result.status === "aborted")
                return parseUtil_js_1.INVALID;
              if (result.status === "dirty")
                return (0, parseUtil_js_1.DIRTY)(result.value);
              if (status.value === "dirty")
                return (0, parseUtil_js_1.DIRTY)(result.value);
              return result;
            }
          }
          if (effect.type === "refinement") {
            const executeRefinement = (acc) => {
              const result = effect.refinement(acc, checkCtx);
              if (ctx.common.async) {
                return Promise.resolve(result);
              }
              if (result instanceof Promise) {
                throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
              }
              return acc;
            };
            if (ctx.common.async === false) {
              const inner = this._def.schema._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
              });
              if (inner.status === "aborted")
                return parseUtil_js_1.INVALID;
              if (inner.status === "dirty")
                status.dirty();
              executeRefinement(inner.value);
              return { status: status.value, value: inner.value };
            } else {
              return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
                if (inner.status === "aborted")
                  return parseUtil_js_1.INVALID;
                if (inner.status === "dirty")
                  status.dirty();
                return executeRefinement(inner.value).then(() => {
                  return { status: status.value, value: inner.value };
                });
              });
            }
          }
          if (effect.type === "transform") {
            if (ctx.common.async === false) {
              const base3 = this._def.schema._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
              });
              if (!(0, parseUtil_js_1.isValid)(base3))
                return base3;
              const result = effect.transform(base3.value, checkCtx);
              if (result instanceof Promise) {
                throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
              }
              return { status: status.value, value: result };
            } else {
              return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base3) => {
                if (!(0, parseUtil_js_1.isValid)(base3))
                  return base3;
                return Promise.resolve(effect.transform(base3.value, checkCtx)).then((result) => ({
                  status: status.value,
                  value: result
                }));
              });
            }
          }
          util_js_1.util.assertNever(effect);
        }
      };
      exports.ZodEffects = ZodEffects;
      exports.ZodTransformer = ZodEffects;
      ZodEffects.create = (schema, effect, params) => {
        return new ZodEffects({
          schema,
          typeName: ZodFirstPartyTypeKind.ZodEffects,
          effect,
          ...processCreateParams(params)
        });
      };
      ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
        return new ZodEffects({
          schema,
          effect: { type: "preprocess", transform: preprocess },
          typeName: ZodFirstPartyTypeKind.ZodEffects,
          ...processCreateParams(params)
        });
      };
      var ZodOptional = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType === util_js_1.ZodParsedType.undefined) {
            return (0, parseUtil_js_1.OK)(void 0);
          }
          return this._def.innerType._parse(input);
        }
        unwrap() {
          return this._def.innerType;
        }
      };
      exports.ZodOptional = ZodOptional;
      ZodOptional.create = (type, params) => {
        return new ZodOptional({
          innerType: type,
          typeName: ZodFirstPartyTypeKind.ZodOptional,
          ...processCreateParams(params)
        });
      };
      var ZodNullable = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType === util_js_1.ZodParsedType.null) {
            return (0, parseUtil_js_1.OK)(null);
          }
          return this._def.innerType._parse(input);
        }
        unwrap() {
          return this._def.innerType;
        }
      };
      exports.ZodNullable = ZodNullable;
      ZodNullable.create = (type, params) => {
        return new ZodNullable({
          innerType: type,
          typeName: ZodFirstPartyTypeKind.ZodNullable,
          ...processCreateParams(params)
        });
      };
      var ZodDefault = class extends ZodType {
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          let data = ctx.data;
          if (ctx.parsedType === util_js_1.ZodParsedType.undefined) {
            data = this._def.defaultValue();
          }
          return this._def.innerType._parse({
            data,
            path: ctx.path,
            parent: ctx
          });
        }
        removeDefault() {
          return this._def.innerType;
        }
      };
      exports.ZodDefault = ZodDefault;
      ZodDefault.create = (type, params) => {
        return new ZodDefault({
          innerType: type,
          typeName: ZodFirstPartyTypeKind.ZodDefault,
          defaultValue: typeof params.default === "function" ? params.default : () => params.default,
          ...processCreateParams(params)
        });
      };
      var ZodCatch = class extends ZodType {
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          const newCtx = {
            ...ctx,
            common: {
              ...ctx.common,
              issues: []
            }
          };
          const result = this._def.innerType._parse({
            data: newCtx.data,
            path: newCtx.path,
            parent: {
              ...newCtx
            }
          });
          if ((0, parseUtil_js_1.isAsync)(result)) {
            return result.then((result2) => {
              return {
                status: "valid",
                value: result2.status === "valid" ? result2.value : this._def.catchValue({
                  get error() {
                    return new ZodError_js_1.ZodError(newCtx.common.issues);
                  },
                  input: newCtx.data
                })
              };
            });
          } else {
            return {
              status: "valid",
              value: result.status === "valid" ? result.value : this._def.catchValue({
                get error() {
                  return new ZodError_js_1.ZodError(newCtx.common.issues);
                },
                input: newCtx.data
              })
            };
          }
        }
        removeCatch() {
          return this._def.innerType;
        }
      };
      exports.ZodCatch = ZodCatch;
      ZodCatch.create = (type, params) => {
        return new ZodCatch({
          innerType: type,
          typeName: ZodFirstPartyTypeKind.ZodCatch,
          catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
          ...processCreateParams(params)
        });
      };
      var ZodNaN = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== util_js_1.ZodParsedType.nan) {
            const ctx = this._getOrReturnCtx(input);
            (0, parseUtil_js_1.addIssueToContext)(ctx, {
              code: ZodError_js_1.ZodIssueCode.invalid_type,
              expected: util_js_1.ZodParsedType.nan,
              received: ctx.parsedType
            });
            return parseUtil_js_1.INVALID;
          }
          return { status: "valid", value: input.data };
        }
      };
      exports.ZodNaN = ZodNaN;
      ZodNaN.create = (params) => {
        return new ZodNaN({
          typeName: ZodFirstPartyTypeKind.ZodNaN,
          ...processCreateParams(params)
        });
      };
      exports.BRAND = Symbol("zod_brand");
      var ZodBranded = class extends ZodType {
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          const data = ctx.data;
          return this._def.type._parse({
            data,
            path: ctx.path,
            parent: ctx
          });
        }
        unwrap() {
          return this._def.type;
        }
      };
      exports.ZodBranded = ZodBranded;
      var ZodPipeline = class _ZodPipeline extends ZodType {
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.common.async) {
            const handleAsync = async () => {
              const inResult = await this._def.in._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
              });
              if (inResult.status === "aborted")
                return parseUtil_js_1.INVALID;
              if (inResult.status === "dirty") {
                status.dirty();
                return (0, parseUtil_js_1.DIRTY)(inResult.value);
              } else {
                return this._def.out._parseAsync({
                  data: inResult.value,
                  path: ctx.path,
                  parent: ctx
                });
              }
            };
            return handleAsync();
          } else {
            const inResult = this._def.in._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (inResult.status === "aborted")
              return parseUtil_js_1.INVALID;
            if (inResult.status === "dirty") {
              status.dirty();
              return {
                status: "dirty",
                value: inResult.value
              };
            } else {
              return this._def.out._parseSync({
                data: inResult.value,
                path: ctx.path,
                parent: ctx
              });
            }
          }
        }
        static create(a, b) {
          return new _ZodPipeline({
            in: a,
            out: b,
            typeName: ZodFirstPartyTypeKind.ZodPipeline
          });
        }
      };
      exports.ZodPipeline = ZodPipeline;
      var ZodReadonly = class extends ZodType {
        _parse(input) {
          const result = this._def.innerType._parse(input);
          const freeze = (data) => {
            if ((0, parseUtil_js_1.isValid)(data)) {
              data.value = Object.freeze(data.value);
            }
            return data;
          };
          return (0, parseUtil_js_1.isAsync)(result) ? result.then((data) => freeze(data)) : freeze(result);
        }
        unwrap() {
          return this._def.innerType;
        }
      };
      exports.ZodReadonly = ZodReadonly;
      ZodReadonly.create = (type, params) => {
        return new ZodReadonly({
          innerType: type,
          typeName: ZodFirstPartyTypeKind.ZodReadonly,
          ...processCreateParams(params)
        });
      };
      function cleanParams(params, data) {
        const p = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
        const p2 = typeof p === "string" ? { message: p } : p;
        return p2;
      }
      function custom(check2, _params = {}, fatal) {
        if (check2)
          return ZodAny.create().superRefine((data, ctx) => {
            const r = check2(data);
            if (r instanceof Promise) {
              return r.then((r2) => {
                if (!r2) {
                  const params = cleanParams(_params, data);
                  const _fatal = params.fatal ?? fatal ?? true;
                  ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
                }
              });
            }
            if (!r) {
              const params = cleanParams(_params, data);
              const _fatal = params.fatal ?? fatal ?? true;
              ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
            }
            return;
          });
        return ZodAny.create();
      }
      exports.late = {
        object: ZodObject.lazycreate
      };
      var ZodFirstPartyTypeKind;
      (function(ZodFirstPartyTypeKind2) {
        ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
        ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
        ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
        ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
        ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
        ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
        ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
        ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
        ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
        ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
        ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
        ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
        ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
        ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
        ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
        ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
        ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
        ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
        ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
        ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
        ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
        ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
        ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
        ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
        ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
        ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
        ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
        ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
        ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
        ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
        ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
        ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
        ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
        ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
        ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
        ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
      })(ZodFirstPartyTypeKind || (exports.ZodFirstPartyTypeKind = ZodFirstPartyTypeKind = {}));
      var instanceOfType = (cls, params = {
        message: `Input not instance of ${cls.name}`
      }) => custom((data) => data instanceof cls, params);
      exports.instanceof = instanceOfType;
      var stringType = ZodString.create;
      exports.string = stringType;
      var numberType = ZodNumber.create;
      exports.number = numberType;
      var nanType = ZodNaN.create;
      exports.nan = nanType;
      var bigIntType = ZodBigInt.create;
      exports.bigint = bigIntType;
      var booleanType = ZodBoolean.create;
      exports.boolean = booleanType;
      var dateType = ZodDate.create;
      exports.date = dateType;
      var symbolType = ZodSymbol.create;
      exports.symbol = symbolType;
      var undefinedType = ZodUndefined.create;
      exports.undefined = undefinedType;
      var nullType = ZodNull.create;
      exports.null = nullType;
      var anyType = ZodAny.create;
      exports.any = anyType;
      var unknownType = ZodUnknown.create;
      exports.unknown = unknownType;
      var neverType = ZodNever.create;
      exports.never = neverType;
      var voidType = ZodVoid.create;
      exports.void = voidType;
      var arrayType = ZodArray.create;
      exports.array = arrayType;
      var objectType = ZodObject.create;
      exports.object = objectType;
      var strictObjectType = ZodObject.strictCreate;
      exports.strictObject = strictObjectType;
      var unionType = ZodUnion.create;
      exports.union = unionType;
      var discriminatedUnionType = ZodDiscriminatedUnion.create;
      exports.discriminatedUnion = discriminatedUnionType;
      var intersectionType = ZodIntersection.create;
      exports.intersection = intersectionType;
      var tupleType = ZodTuple.create;
      exports.tuple = tupleType;
      var recordType = ZodRecord.create;
      exports.record = recordType;
      var mapType = ZodMap.create;
      exports.map = mapType;
      var setType = ZodSet.create;
      exports.set = setType;
      var functionType = ZodFunction.create;
      exports.function = functionType;
      var lazyType = ZodLazy.create;
      exports.lazy = lazyType;
      var literalType = ZodLiteral.create;
      exports.literal = literalType;
      var enumType = ZodEnum.create;
      exports.enum = enumType;
      var nativeEnumType = ZodNativeEnum.create;
      exports.nativeEnum = nativeEnumType;
      var promiseType = ZodPromise.create;
      exports.promise = promiseType;
      var effectsType = ZodEffects.create;
      exports.effect = effectsType;
      exports.transformer = effectsType;
      var optionalType = ZodOptional.create;
      exports.optional = optionalType;
      var nullableType = ZodNullable.create;
      exports.nullable = nullableType;
      var preprocessType = ZodEffects.createWithPreprocess;
      exports.preprocess = preprocessType;
      var pipelineType = ZodPipeline.create;
      exports.pipeline = pipelineType;
      var ostring = () => stringType().optional();
      exports.ostring = ostring;
      var onumber = () => numberType().optional();
      exports.onumber = onumber;
      var oboolean = () => booleanType().optional();
      exports.oboolean = oboolean;
      exports.coerce = {
        string: (arg) => ZodString.create({ ...arg, coerce: true }),
        number: (arg) => ZodNumber.create({ ...arg, coerce: true }),
        boolean: (arg) => ZodBoolean.create({
          ...arg,
          coerce: true
        }),
        bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),
        date: (arg) => ZodDate.create({ ...arg, coerce: true })
      };
      exports.NEVER = parseUtil_js_1.INVALID;
    }
  });

  // node_modules/.pnpm/zod@3.25.20/node_modules/zod/dist/cjs/v3/external.js
  var require_external = __commonJS({
    "node_modules/.pnpm/zod@3.25.20/node_modules/zod/dist/cjs/v3/external.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_errors(), exports);
      __exportStar(require_parseUtil(), exports);
      __exportStar(require_typeAliases(), exports);
      __exportStar(require_util(), exports);
      __exportStar(require_types(), exports);
      __exportStar(require_ZodError(), exports);
    }
  });

  // node_modules/.pnpm/zod@3.25.20/node_modules/zod/dist/cjs/v3/index.js
  var require_v3 = __commonJS({
    "node_modules/.pnpm/zod@3.25.20/node_modules/zod/dist/cjs/v3/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.z = void 0;
      var z = __importStar(require_external());
      exports.z = z;
      __exportStar(require_external(), exports);
      exports.default = z;
    }
  });

  // node_modules/.pnpm/zod@3.25.20/node_modules/zod/dist/cjs/index.js
  var require_cjs = __commonJS({
    "node_modules/.pnpm/zod@3.25.20/node_modules/zod/dist/cjs/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
      };
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var index_js_1 = __importDefault(require_v3());
      __exportStar(require_v3(), exports);
      exports.default = index_js_1.default;
    }
  });

  // node_modules/.pnpm/@atproto+jwk@0.1.5/node_modules/@atproto/jwk/dist/errors.js
  var require_errors2 = __commonJS({
    "node_modules/.pnpm/@atproto+jwk@0.1.5/node_modules/@atproto/jwk/dist/errors.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.JwtVerifyError = exports.JwtCreateError = exports.JwkError = exports.ERR_JWT_VERIFY = exports.ERR_JWT_CREATE = exports.ERR_JWT_INVALID = exports.ERR_JWK_NOT_FOUND = exports.ERR_JWK_INVALID = exports.ERR_JWKS_NO_MATCHING_KEY = void 0;
      exports.ERR_JWKS_NO_MATCHING_KEY = "ERR_JWKS_NO_MATCHING_KEY";
      exports.ERR_JWK_INVALID = "ERR_JWK_INVALID";
      exports.ERR_JWK_NOT_FOUND = "ERR_JWK_NOT_FOUND";
      exports.ERR_JWT_INVALID = "ERR_JWT_INVALID";
      exports.ERR_JWT_CREATE = "ERR_JWT_CREATE";
      exports.ERR_JWT_VERIFY = "ERR_JWT_VERIFY";
      var JwkError = class extends TypeError {
        constructor(message2 = "JWK error", code2 = exports.ERR_JWK_INVALID, options) {
          super(message2, options);
          Object.defineProperty(this, "code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: code2
          });
        }
      };
      exports.JwkError = JwkError;
      var JwtCreateError = class _JwtCreateError extends Error {
        constructor(message2 = "Unable to create JWT", code2 = exports.ERR_JWT_CREATE, options) {
          super(message2, options);
          Object.defineProperty(this, "code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: code2
          });
        }
        static from(cause, code2, message2) {
          if (cause instanceof _JwtCreateError)
            return cause;
          if (cause instanceof JwkError) {
            return new _JwtCreateError(message2, cause.code, { cause });
          }
          return new _JwtCreateError(message2, code2, { cause });
        }
      };
      exports.JwtCreateError = JwtCreateError;
      var JwtVerifyError = class _JwtVerifyError extends Error {
        constructor(message2 = "Invalid JWT", code2 = exports.ERR_JWT_VERIFY, options) {
          super(message2, options);
          Object.defineProperty(this, "code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: code2
          });
        }
        static from(cause, code2, message2) {
          if (cause instanceof _JwtVerifyError)
            return cause;
          if (cause instanceof JwkError) {
            return new _JwtVerifyError(message2, cause.code, { cause });
          }
          return new _JwtVerifyError(message2, code2, { cause });
        }
      };
      exports.JwtVerifyError = JwtVerifyError;
    }
  });

  // node_modules/.pnpm/@atproto+jwk@0.1.5/node_modules/@atproto/jwk/dist/alg.js
  var require_alg = __commonJS({
    "node_modules/.pnpm/@atproto+jwk@0.1.5/node_modules/@atproto/jwk/dist/alg.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.jwkAlgorithms = jwkAlgorithms;
      var errors_js_1 = require_errors2();
      var { process: process2 } = globalThis;
      var IS_NODE_RUNTIME = typeof process2 !== "undefined" && typeof process2?.versions?.node === "string";
      function* jwkAlgorithms(jwk) {
        if (jwk.alg) {
          yield jwk.alg;
          return;
        }
        switch (jwk.kty) {
          case "EC": {
            if (jwk.use === "enc" || jwk.use === void 0) {
              yield "ECDH-ES";
              yield "ECDH-ES+A128KW";
              yield "ECDH-ES+A192KW";
              yield "ECDH-ES+A256KW";
            }
            if (jwk.use === "sig" || jwk.use === void 0) {
              const crv = "crv" in jwk ? jwk.crv : void 0;
              switch (crv) {
                case "P-256":
                case "P-384":
                  yield `ES${crv.slice(-3)}`;
                  break;
                case "P-521":
                  yield "ES512";
                  break;
                case "secp256k1":
                  if (IS_NODE_RUNTIME)
                    yield "ES256K";
                  break;
                default:
                  throw new errors_js_1.JwkError(`Unsupported crv "${crv}"`);
              }
            }
            return;
          }
          case "OKP": {
            if (!jwk.use)
              throw new errors_js_1.JwkError('Missing "use" Parameter value');
            yield "ECDH-ES";
            yield "ECDH-ES+A128KW";
            yield "ECDH-ES+A192KW";
            yield "ECDH-ES+A256KW";
            return;
          }
          case "RSA": {
            if (jwk.use === "enc" || jwk.use === void 0) {
              yield "RSA-OAEP";
              yield "RSA-OAEP-256";
              yield "RSA-OAEP-384";
              yield "RSA-OAEP-512";
              if (IS_NODE_RUNTIME)
                yield "RSA1_5";
            }
            if (jwk.use === "sig" || jwk.use === void 0) {
              yield "PS256";
              yield "PS384";
              yield "PS512";
              yield "RS256";
              yield "RS384";
              yield "RS512";
            }
            return;
          }
          case "oct": {
            if (jwk.use === "enc" || jwk.use === void 0) {
              yield "A128GCMKW";
              yield "A192GCMKW";
              yield "A256GCMKW";
              yield "A128KW";
              yield "A192KW";
              yield "A256KW";
            }
            if (jwk.use === "sig" || jwk.use === void 0) {
              yield "HS256";
              yield "HS384";
              yield "HS512";
            }
            return;
          }
          default:
            throw new errors_js_1.JwkError(`Unsupported kty "${jwk.kty}"`);
        }
      }
    }
  });

  // node_modules/.pnpm/@atproto+jwk@0.1.5/node_modules/@atproto/jwk/dist/jwk.js
  var require_jwk = __commonJS({
    "node_modules/.pnpm/@atproto+jwk@0.1.5/node_modules/@atproto/jwk/dist/jwk.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.jwkPubSchema = exports.jwkValidator = exports.jwkSchema = exports.jwkUnknownKeySchema = exports.jwkSymKeySchema = exports.jwkOkpKeySchema = exports.jwkEcSecp256k1KeySchema = exports.jwkEcKeySchema = exports.jwkRsaKeySchema = exports.jwkBaseSchema = exports.keyUsageSchema = void 0;
      var zod_1 = require_cjs();
      exports.keyUsageSchema = zod_1.z.enum([
        "sign",
        "verify",
        "encrypt",
        "decrypt",
        "wrapKey",
        "unwrapKey",
        "deriveKey",
        "deriveBits"
      ]);
      exports.jwkBaseSchema = zod_1.z.object({
        kty: zod_1.z.string().min(1),
        alg: zod_1.z.string().min(1).optional(),
        kid: zod_1.z.string().min(1).optional(),
        ext: zod_1.z.boolean().optional(),
        use: zod_1.z.enum(["sig", "enc"]).optional(),
        key_ops: zod_1.z.array(exports.keyUsageSchema).optional(),
        x5c: zod_1.z.array(zod_1.z.string()).optional(),
        // X.509 Certificate Chain
        x5t: zod_1.z.string().min(1).optional(),
        // X.509 Certificate SHA-1 Thumbprint
        "x5t#S256": zod_1.z.string().min(1).optional(),
        // X.509 Certificate SHA-256 Thumbprint
        x5u: zod_1.z.string().url().optional()
        // X.509 URL
      });
      exports.jwkRsaKeySchema = exports.jwkBaseSchema.extend({
        kty: zod_1.z.literal("RSA"),
        alg: zod_1.z.enum(["RS256", "RS384", "RS512", "PS256", "PS384", "PS512"]).optional(),
        n: zod_1.z.string().min(1),
        // Modulus
        e: zod_1.z.string().min(1),
        // Exponent
        d: zod_1.z.string().min(1).optional(),
        // Private Exponent
        p: zod_1.z.string().min(1).optional(),
        // First Prime Factor
        q: zod_1.z.string().min(1).optional(),
        // Second Prime Factor
        dp: zod_1.z.string().min(1).optional(),
        // First Factor CRT Exponent
        dq: zod_1.z.string().min(1).optional(),
        // Second Factor CRT Exponent
        qi: zod_1.z.string().min(1).optional(),
        // First CRT Coefficient
        oth: zod_1.z.array(zod_1.z.object({
          r: zod_1.z.string().optional(),
          d: zod_1.z.string().optional(),
          t: zod_1.z.string().optional()
        })).nonempty().optional()
        // Other Primes Info
      });
      exports.jwkEcKeySchema = exports.jwkBaseSchema.extend({
        kty: zod_1.z.literal("EC"),
        alg: zod_1.z.enum(["ES256", "ES384", "ES512"]).optional(),
        crv: zod_1.z.enum(["P-256", "P-384", "P-521"]),
        x: zod_1.z.string().min(1),
        y: zod_1.z.string().min(1),
        d: zod_1.z.string().min(1).optional()
        // ECC Private Key
      });
      exports.jwkEcSecp256k1KeySchema = exports.jwkBaseSchema.extend({
        kty: zod_1.z.literal("EC"),
        alg: zod_1.z.enum(["ES256K"]).optional(),
        crv: zod_1.z.enum(["secp256k1"]),
        x: zod_1.z.string().min(1),
        y: zod_1.z.string().min(1),
        d: zod_1.z.string().min(1).optional()
        // ECC Private Key
      });
      exports.jwkOkpKeySchema = exports.jwkBaseSchema.extend({
        kty: zod_1.z.literal("OKP"),
        alg: zod_1.z.enum(["EdDSA"]).optional(),
        crv: zod_1.z.enum(["Ed25519", "Ed448"]),
        x: zod_1.z.string().min(1),
        d: zod_1.z.string().min(1).optional()
        // ECC Private Key
      });
      exports.jwkSymKeySchema = exports.jwkBaseSchema.extend({
        kty: zod_1.z.literal("oct"),
        // Octet Sequence (used to represent symmetric keys)
        alg: zod_1.z.enum(["HS256", "HS384", "HS512"]).optional(),
        k: zod_1.z.string()
        // Key Value (base64url encoded)
      });
      exports.jwkUnknownKeySchema = exports.jwkBaseSchema.extend({
        kty: zod_1.z.string().refine((v) => v !== "RSA" && v !== "EC" && v !== "OKP" && v !== "oct")
      });
      exports.jwkSchema = zod_1.z.union([
        exports.jwkUnknownKeySchema,
        exports.jwkRsaKeySchema,
        exports.jwkEcKeySchema,
        exports.jwkEcSecp256k1KeySchema,
        exports.jwkOkpKeySchema,
        exports.jwkSymKeySchema
      ]);
      exports.jwkValidator = exports.jwkSchema.refine((k) => k.use != null || k.key_ops != null, "use or key_ops required").refine((k) => !k.use || !k.key_ops || k.key_ops.every((o) => k.use === "sig" ? o === "sign" || o === "verify" : o === "encrypt" || o === "decrypt"), "use and key_ops must be consistent");
      exports.jwkPubSchema = exports.jwkValidator.refine((k) => k.kid != null, "kid is required").refine((k) => !("k" in k) && !("d" in k), "private key not allowed");
    }
  });

  // node_modules/.pnpm/@atproto+jwk@0.1.5/node_modules/@atproto/jwk/dist/jwks.js
  var require_jwks = __commonJS({
    "node_modules/.pnpm/@atproto+jwk@0.1.5/node_modules/@atproto/jwk/dist/jwks.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.jwksPubSchema = exports.jwksSchema = void 0;
      var zod_1 = require_cjs();
      var jwk_js_1 = require_jwk();
      exports.jwksSchema = zod_1.z.object({
        keys: zod_1.z.array(jwk_js_1.jwkSchema)
      });
      exports.jwksPubSchema = zod_1.z.object({
        keys: zod_1.z.array(jwk_js_1.jwkPubSchema)
      });
    }
  });

  // node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/vendor/base-x.js
  function base(ALPHABET, name2) {
    if (ALPHABET.length >= 255) {
      throw new TypeError("Alphabet too long");
    }
    var BASE_MAP = new Uint8Array(256);
    for (var j = 0; j < BASE_MAP.length; j++) {
      BASE_MAP[j] = 255;
    }
    for (var i = 0; i < ALPHABET.length; i++) {
      var x = ALPHABET.charAt(i);
      var xc = x.charCodeAt(0);
      if (BASE_MAP[xc] !== 255) {
        throw new TypeError(x + " is ambiguous");
      }
      BASE_MAP[xc] = i;
    }
    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256);
    var iFACTOR = Math.log(256) / Math.log(BASE);
    function encode7(source) {
      if (source instanceof Uint8Array) ;
      else if (ArrayBuffer.isView(source)) {
        source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
      } else if (Array.isArray(source)) {
        source = Uint8Array.from(source);
      }
      if (!(source instanceof Uint8Array)) {
        throw new TypeError("Expected Uint8Array");
      }
      if (source.length === 0) {
        return "";
      }
      var zeroes = 0;
      var length2 = 0;
      var pbegin = 0;
      var pend = source.length;
      while (pbegin !== pend && source[pbegin] === 0) {
        pbegin++;
        zeroes++;
      }
      var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
      var b58 = new Uint8Array(size);
      while (pbegin !== pend) {
        var carry = source[pbegin];
        var i2 = 0;
        for (var it1 = size - 1; (carry !== 0 || i2 < length2) && it1 !== -1; it1--, i2++) {
          carry += 256 * b58[it1] >>> 0;
          b58[it1] = carry % BASE >>> 0;
          carry = carry / BASE >>> 0;
        }
        if (carry !== 0) {
          throw new Error("Non-zero carry");
        }
        length2 = i2;
        pbegin++;
      }
      var it2 = size - length2;
      while (it2 !== size && b58[it2] === 0) {
        it2++;
      }
      var str = LEADER.repeat(zeroes);
      for (; it2 < size; ++it2) {
        str += ALPHABET.charAt(b58[it2]);
      }
      return str;
    }
    function decodeUnsafe(source) {
      if (typeof source !== "string") {
        throw new TypeError("Expected String");
      }
      if (source.length === 0) {
        return new Uint8Array();
      }
      var psz = 0;
      if (source[psz] === " ") {
        return;
      }
      var zeroes = 0;
      var length2 = 0;
      while (source[psz] === LEADER) {
        zeroes++;
        psz++;
      }
      var size = (source.length - psz) * FACTOR + 1 >>> 0;
      var b256 = new Uint8Array(size);
      while (source[psz]) {
        var carry = BASE_MAP[source.charCodeAt(psz)];
        if (carry === 255) {
          return;
        }
        var i2 = 0;
        for (var it3 = size - 1; (carry !== 0 || i2 < length2) && it3 !== -1; it3--, i2++) {
          carry += BASE * b256[it3] >>> 0;
          b256[it3] = carry % 256 >>> 0;
          carry = carry / 256 >>> 0;
        }
        if (carry !== 0) {
          throw new Error("Non-zero carry");
        }
        length2 = i2;
        psz++;
      }
      if (source[psz] === " ") {
        return;
      }
      var it4 = size - length2;
      while (it4 !== size && b256[it4] === 0) {
        it4++;
      }
      var vch = new Uint8Array(zeroes + (size - it4));
      var j2 = zeroes;
      while (it4 !== size) {
        vch[j2++] = b256[it4++];
      }
      return vch;
    }
    function decode8(string2) {
      var buffer = decodeUnsafe(string2);
      if (buffer) {
        return buffer;
      }
      throw new Error(`Non-${name2} character`);
    }
    return {
      encode: encode7,
      decodeUnsafe,
      decode: decode8
    };
  }
  var src, _brrp__multiformats_scope_baseX, base_x_default;
  var init_base_x = __esm({
    "node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/vendor/base-x.js"() {
      src = base;
      _brrp__multiformats_scope_baseX = src;
      base_x_default = _brrp__multiformats_scope_baseX;
    }
  });

  // node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bytes.js
  var empty, equals, coerce, fromString, toString;
  var init_bytes = __esm({
    "node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bytes.js"() {
      empty = new Uint8Array(0);
      equals = (aa, bb) => {
        if (aa === bb)
          return true;
        if (aa.byteLength !== bb.byteLength) {
          return false;
        }
        for (let ii = 0; ii < aa.byteLength; ii++) {
          if (aa[ii] !== bb[ii]) {
            return false;
          }
        }
        return true;
      };
      coerce = (o) => {
        if (o instanceof Uint8Array && o.constructor.name === "Uint8Array")
          return o;
        if (o instanceof ArrayBuffer)
          return new Uint8Array(o);
        if (ArrayBuffer.isView(o)) {
          return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
        }
        throw new Error("Unknown type, must be binary type");
      };
      fromString = (str) => new TextEncoder().encode(str);
      toString = (b) => new TextDecoder().decode(b);
    }
  });

  // node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base.js
  var Encoder, Decoder, ComposedDecoder, or, Codec, from, baseX, decode, encode, rfc4648;
  var init_base = __esm({
    "node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base.js"() {
      init_base_x();
      init_bytes();
      Encoder = class {
        constructor(name2, prefix, baseEncode) {
          this.name = name2;
          this.prefix = prefix;
          this.baseEncode = baseEncode;
        }
        encode(bytes) {
          if (bytes instanceof Uint8Array) {
            return `${this.prefix}${this.baseEncode(bytes)}`;
          } else {
            throw Error("Unknown type, must be binary type");
          }
        }
      };
      Decoder = class {
        constructor(name2, prefix, baseDecode) {
          this.name = name2;
          this.prefix = prefix;
          if (prefix.codePointAt(0) === void 0) {
            throw new Error("Invalid prefix character");
          }
          this.prefixCodePoint = prefix.codePointAt(0);
          this.baseDecode = baseDecode;
        }
        decode(text) {
          if (typeof text === "string") {
            if (text.codePointAt(0) !== this.prefixCodePoint) {
              throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
            }
            return this.baseDecode(text.slice(this.prefix.length));
          } else {
            throw Error("Can only multibase decode strings");
          }
        }
        or(decoder2) {
          return or(this, decoder2);
        }
      };
      ComposedDecoder = class {
        constructor(decoders) {
          this.decoders = decoders;
        }
        or(decoder2) {
          return or(this, decoder2);
        }
        decode(input) {
          const prefix = input[0];
          const decoder2 = this.decoders[prefix];
          if (decoder2) {
            return decoder2.decode(input);
          } else {
            throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
          }
        }
      };
      or = (left, right) => new ComposedDecoder({
        ...left.decoders || { [left.prefix]: left },
        ...right.decoders || { [right.prefix]: right }
      });
      Codec = class {
        constructor(name2, prefix, baseEncode, baseDecode) {
          this.name = name2;
          this.prefix = prefix;
          this.baseEncode = baseEncode;
          this.baseDecode = baseDecode;
          this.encoder = new Encoder(name2, prefix, baseEncode);
          this.decoder = new Decoder(name2, prefix, baseDecode);
        }
        encode(input) {
          return this.encoder.encode(input);
        }
        decode(input) {
          return this.decoder.decode(input);
        }
      };
      from = ({ name: name2, prefix, encode: encode7, decode: decode8 }) => new Codec(name2, prefix, encode7, decode8);
      baseX = ({ prefix, name: name2, alphabet: alphabet2 }) => {
        const { encode: encode7, decode: decode8 } = base_x_default(alphabet2, name2);
        return from({
          prefix,
          name: name2,
          encode: encode7,
          decode: (text) => coerce(decode8(text))
        });
      };
      decode = (string2, alphabet2, bitsPerChar, name2) => {
        const codes = {};
        for (let i = 0; i < alphabet2.length; ++i) {
          codes[alphabet2[i]] = i;
        }
        let end = string2.length;
        while (string2[end - 1] === "=") {
          --end;
        }
        const out = new Uint8Array(end * bitsPerChar / 8 | 0);
        let bits = 0;
        let buffer = 0;
        let written = 0;
        for (let i = 0; i < end; ++i) {
          const value = codes[string2[i]];
          if (value === void 0) {
            throw new SyntaxError(`Non-${name2} character`);
          }
          buffer = buffer << bitsPerChar | value;
          bits += bitsPerChar;
          if (bits >= 8) {
            bits -= 8;
            out[written++] = 255 & buffer >> bits;
          }
        }
        if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {
          throw new SyntaxError("Unexpected end of data");
        }
        return out;
      };
      encode = (data, alphabet2, bitsPerChar) => {
        const pad = alphabet2[alphabet2.length - 1] === "=";
        const mask = (1 << bitsPerChar) - 1;
        let out = "";
        let bits = 0;
        let buffer = 0;
        for (let i = 0; i < data.length; ++i) {
          buffer = buffer << 8 | data[i];
          bits += 8;
          while (bits > bitsPerChar) {
            bits -= bitsPerChar;
            out += alphabet2[mask & buffer >> bits];
          }
        }
        if (bits) {
          out += alphabet2[mask & buffer << bitsPerChar - bits];
        }
        if (pad) {
          while (out.length * bitsPerChar & 7) {
            out += "=";
          }
        }
        return out;
      };
      rfc4648 = ({ name: name2, prefix, bitsPerChar, alphabet: alphabet2 }) => {
        return from({
          prefix,
          name: name2,
          encode(input) {
            return encode(input, alphabet2, bitsPerChar);
          },
          decode(input) {
            return decode(input, alphabet2, bitsPerChar, name2);
          }
        });
      };
    }
  });

  // node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base64.js
  var base64_exports = {};
  __export(base64_exports, {
    base64: () => base64,
    base64pad: () => base64pad,
    base64url: () => base64url,
    base64urlpad: () => base64urlpad
  });
  var base64, base64pad, base64url, base64urlpad;
  var init_base64 = __esm({
    "node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base64.js"() {
      init_base();
      base64 = rfc4648({
        prefix: "m",
        name: "base64",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        bitsPerChar: 6
      });
      base64pad = rfc4648({
        prefix: "M",
        name: "base64pad",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
        bitsPerChar: 6
      });
      base64url = rfc4648({
        prefix: "u",
        name: "base64url",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
        bitsPerChar: 6
      });
      base64urlpad = rfc4648({
        prefix: "U",
        name: "base64urlpad",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
        bitsPerChar: 6
      });
    }
  });

  // node_modules/.pnpm/@atproto+jwk@0.1.5/node_modules/@atproto/jwk/dist/util.js
  var require_util2 = __commonJS({
    "node_modules/.pnpm/@atproto+jwk@0.1.5/node_modules/@atproto/jwk/dist/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.segmentedStringRefinementFactory = exports.jwtCharsRefinement = exports.cachedGetter = exports.preferredOrderCmp = exports.isDefined = void 0;
      exports.matchesAny = matchesAny;
      exports.parseB64uJson = parseB64uJson;
      var base64_1 = (init_base64(), __toCommonJS(base64_exports));
      var zod_1 = require_cjs();
      var isDefined = (i) => i !== void 0;
      exports.isDefined = isDefined;
      var preferredOrderCmp = (order) => (a, b) => {
        const aIdx = order.indexOf(a);
        const bIdx = order.indexOf(b);
        if (aIdx === bIdx)
          return 0;
        if (aIdx === -1)
          return 1;
        if (bIdx === -1)
          return -1;
        return aIdx - bIdx;
      };
      exports.preferredOrderCmp = preferredOrderCmp;
      function matchesAny(value) {
        return value == null ? (v) => true : Array.isArray(value) ? (v) => value.includes(v) : (v) => v === value;
      }
      var cachedGetter = (target, _context) => {
        return function() {
          const value = target.call(this);
          Object.defineProperty(this, target.name, {
            get: () => value,
            enumerable: true,
            configurable: true
          });
          return value;
        };
      };
      exports.cachedGetter = cachedGetter;
      var decoder2 = new TextDecoder();
      function parseB64uJson(input) {
        const inputBytes = base64_1.base64url.baseDecode(input);
        const json = decoder2.decode(inputBytes);
        return JSON.parse(json);
      }
      var jwtCharsRefinement = (data, ctx) => {
        let char;
        for (let i = 0; i < data.length; i++) {
          char = data.charCodeAt(i);
          if (
            // Base64 URL encoding (most frequent)
            65 <= char && char <= 90 || // A-Z
            97 <= char && char <= 122 || // a-z
            48 <= char && char <= 57 || // 0-9
            char === 45 || // -
            char === 95 || // _
            // Boundary (least frequent, check last)
            char === 46
          ) {
          } else {
            const invalidChar = String.fromCodePoint(data.codePointAt(i));
            return ctx.addIssue({
              code: zod_1.ZodIssueCode.custom,
              message: `Invalid character "${invalidChar}" in JWT at position ${i}`
            });
          }
        }
      };
      exports.jwtCharsRefinement = jwtCharsRefinement;
      var segmentedStringRefinementFactory = (count, minPartLength = 2) => {
        if (!Number.isFinite(count) || count < 1 || (count | 0) !== count) {
          throw new TypeError(`Count must be a natural number (got ${count})`);
        }
        const minTotalLength = count * minPartLength + (count - 1);
        const errorPrefix = `Invalid JWT format`;
        return (data, ctx) => {
          if (data.length < minTotalLength) {
            ctx.addIssue({
              code: zod_1.ZodIssueCode.custom,
              message: `${errorPrefix}: too short`
            });
            return false;
          }
          let currentStart = 0;
          for (let i = 0; i < count - 1; i++) {
            const nextDot = data.indexOf(".", currentStart);
            if (nextDot === -1) {
              ctx.addIssue({
                code: zod_1.ZodIssueCode.custom,
                message: `${errorPrefix}: expected ${count} segments, got ${i + 1}`
              });
              return false;
            }
            if (nextDot - currentStart < minPartLength) {
              ctx.addIssue({
                code: zod_1.ZodIssueCode.custom,
                message: `${errorPrefix}: segment ${i + 1} is too short`
              });
              return false;
            }
            currentStart = nextDot + 1;
          }
          if (data.indexOf(".", currentStart) !== -1) {
            ctx.addIssue({
              code: zod_1.ZodIssueCode.custom,
              message: `${errorPrefix}: too many segments`
            });
            return false;
          }
          if (data.length - currentStart < minPartLength) {
            ctx.addIssue({
              code: zod_1.ZodIssueCode.custom,
              message: `${errorPrefix}: last segment is too short`
            });
            return false;
          }
          return true;
        };
      };
      exports.segmentedStringRefinementFactory = segmentedStringRefinementFactory;
    }
  });

  // node_modules/.pnpm/@atproto+jwk@0.1.5/node_modules/@atproto/jwk/dist/jwt.js
  var require_jwt = __commonJS({
    "node_modules/.pnpm/@atproto+jwk@0.1.5/node_modules/@atproto/jwk/dist/jwt.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.jwtPayloadSchema = exports.jwtHeaderSchema = exports.isUnsignedJwt = exports.unsignedJwtSchema = exports.isSignedJwt = exports.signedJwtSchema = void 0;
      var zod_1 = require_cjs();
      var jwk_js_1 = require_jwk();
      var util_js_1 = require_util2();
      exports.signedJwtSchema = zod_1.z.string().superRefine(util_js_1.jwtCharsRefinement).superRefine((0, util_js_1.segmentedStringRefinementFactory)(3));
      var isSignedJwt = (data) => exports.signedJwtSchema.safeParse(data).success;
      exports.isSignedJwt = isSignedJwt;
      exports.unsignedJwtSchema = zod_1.z.string().superRefine(util_js_1.jwtCharsRefinement).superRefine((0, util_js_1.segmentedStringRefinementFactory)(2));
      var isUnsignedJwt = (data) => exports.unsignedJwtSchema.safeParse(data).success;
      exports.isUnsignedJwt = isUnsignedJwt;
      exports.jwtHeaderSchema = zod_1.z.object({
        /** "alg" (Algorithm) Header Parameter */
        alg: zod_1.z.string(),
        /** "jku" (JWK Set URL) Header Parameter */
        jku: zod_1.z.string().url().optional(),
        /** "jwk" (JSON Web Key) Header Parameter */
        jwk: zod_1.z.object({
          kty: zod_1.z.string(),
          crv: zod_1.z.string().optional(),
          x: zod_1.z.string().optional(),
          y: zod_1.z.string().optional(),
          e: zod_1.z.string().optional(),
          n: zod_1.z.string().optional()
        }).optional(),
        /** "kid" (Key ID) Header Parameter */
        kid: zod_1.z.string().optional(),
        /** "x5u" (X.509 URL) Header Parameter */
        x5u: zod_1.z.string().optional(),
        /** "x5c" (X.509 Certificate Chain) Header Parameter */
        x5c: zod_1.z.array(zod_1.z.string()).optional(),
        /** "x5t" (X.509 Certificate SHA-1 Thumbprint) Header Parameter */
        x5t: zod_1.z.string().optional(),
        /** "x5t#S256" (X.509 Certificate SHA-256 Thumbprint) Header Parameter */
        "x5t#S256": zod_1.z.string().optional(),
        /** "typ" (Type) Header Parameter */
        typ: zod_1.z.string().optional(),
        /** "cty" (Content Type) Header Parameter */
        cty: zod_1.z.string().optional(),
        /** "crit" (Critical) Header Parameter */
        crit: zod_1.z.array(zod_1.z.string()).optional()
      }).passthrough();
      exports.jwtPayloadSchema = zod_1.z.object({
        iss: zod_1.z.string().optional(),
        aud: zod_1.z.union([zod_1.z.string(), zod_1.z.array(zod_1.z.string()).nonempty()]).optional(),
        sub: zod_1.z.string().optional(),
        exp: zod_1.z.number().int().optional(),
        nbf: zod_1.z.number().int().optional(),
        iat: zod_1.z.number().int().optional(),
        jti: zod_1.z.string().optional(),
        htm: zod_1.z.string().optional(),
        htu: zod_1.z.string().optional(),
        ath: zod_1.z.string().optional(),
        acr: zod_1.z.string().optional(),
        azp: zod_1.z.string().optional(),
        amr: zod_1.z.array(zod_1.z.string()).optional(),
        // https://datatracker.ietf.org/doc/html/rfc7800
        cnf: zod_1.z.object({
          kid: zod_1.z.string().optional(),
          // Key ID
          jwk: jwk_js_1.jwkPubSchema.optional(),
          // JWK
          jwe: zod_1.z.string().optional(),
          // Encrypted key
          jku: zod_1.z.string().url().optional(),
          // JWK Set URI ("kid" should also be provided)
          // https://datatracker.ietf.org/doc/html/rfc9449#section-6.1
          jkt: zod_1.z.string().optional(),
          // https://datatracker.ietf.org/doc/html/rfc8705
          "x5t#S256": zod_1.z.string().optional(),
          // X.509 Certificate SHA-256 Thumbprint
          // https://datatracker.ietf.org/doc/html/rfc9203
          osc: zod_1.z.string().optional()
          // OSCORE_Input_Material carrying the parameters for using OSCORE per-message security with implicit key confirmation
        }).optional(),
        client_id: zod_1.z.string().optional(),
        scope: zod_1.z.string().optional(),
        nonce: zod_1.z.string().optional(),
        at_hash: zod_1.z.string().optional(),
        c_hash: zod_1.z.string().optional(),
        s_hash: zod_1.z.string().optional(),
        auth_time: zod_1.z.number().int().optional(),
        // https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims
        // OpenID: "profile" scope
        name: zod_1.z.string().optional(),
        family_name: zod_1.z.string().optional(),
        given_name: zod_1.z.string().optional(),
        middle_name: zod_1.z.string().optional(),
        nickname: zod_1.z.string().optional(),
        preferred_username: zod_1.z.string().optional(),
        gender: zod_1.z.string().optional(),
        // OpenID only defines "male" and "female" without forbidding other values
        picture: zod_1.z.string().url().optional(),
        profile: zod_1.z.string().url().optional(),
        website: zod_1.z.string().url().optional(),
        birthdate: zod_1.z.string().regex(/\d{4}-\d{2}-\d{2}/).optional(),
        zoneinfo: zod_1.z.string().regex(/^[A-Za-z0-9_/]+$/).optional(),
        locale: zod_1.z.string().regex(/^[a-z]{2,3}(-[A-Z]{2})?$/).optional(),
        updated_at: zod_1.z.number().int().optional(),
        // OpenID: "email" scope
        email: zod_1.z.string().optional(),
        email_verified: zod_1.z.boolean().optional(),
        // OpenID: "phone" scope
        phone_number: zod_1.z.string().optional(),
        phone_number_verified: zod_1.z.boolean().optional(),
        // OpenID: "address" scope
        // https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim
        address: zod_1.z.object({
          formatted: zod_1.z.string().optional(),
          street_address: zod_1.z.string().optional(),
          locality: zod_1.z.string().optional(),
          region: zod_1.z.string().optional(),
          postal_code: zod_1.z.string().optional(),
          country: zod_1.z.string().optional()
        }).optional(),
        // https://datatracker.ietf.org/doc/html/rfc9396#section-14.2
        authorization_details: zod_1.z.array(zod_1.z.object({
          type: zod_1.z.string(),
          // https://datatracker.ietf.org/doc/html/rfc9396#section-2.2
          locations: zod_1.z.array(zod_1.z.string()).optional(),
          actions: zod_1.z.array(zod_1.z.string()).optional(),
          datatypes: zod_1.z.array(zod_1.z.string()).optional(),
          identifier: zod_1.z.string().optional(),
          privileges: zod_1.z.array(zod_1.z.string()).optional()
        }).passthrough()).optional()
      }).passthrough();
    }
  });

  // node_modules/.pnpm/@atproto+jwk@0.1.5/node_modules/@atproto/jwk/dist/jwt-decode.js
  var require_jwt_decode = __commonJS({
    "node_modules/.pnpm/@atproto+jwk@0.1.5/node_modules/@atproto/jwk/dist/jwt-decode.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.unsafeDecodeJwt = unsafeDecodeJwt;
      var errors_js_1 = require_errors2();
      var jwt_js_1 = require_jwt();
      var util_js_1 = require_util2();
      function unsafeDecodeJwt(jwt) {
        const { 0: headerEnc, 1: payloadEnc, length: length2 } = jwt.split(".");
        if (length2 > 3 || length2 < 2) {
          throw new errors_js_1.JwtVerifyError(void 0, errors_js_1.ERR_JWT_INVALID);
        }
        const header = jwt_js_1.jwtHeaderSchema.parse((0, util_js_1.parseB64uJson)(headerEnc));
        if (length2 === 2 && header?.alg !== "none") {
          throw new errors_js_1.JwtVerifyError(void 0, errors_js_1.ERR_JWT_INVALID);
        }
        const payload = jwt_js_1.jwtPayloadSchema.parse((0, util_js_1.parseB64uJson)(payloadEnc));
        return { header, payload };
      }
    }
  });

  // node_modules/.pnpm/@atproto+jwk@0.1.5/node_modules/@atproto/jwk/dist/jwt-verify.js
  var require_jwt_verify = __commonJS({
    "node_modules/.pnpm/@atproto+jwk@0.1.5/node_modules/@atproto/jwk/dist/jwt-verify.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/.pnpm/@atproto+jwk@0.1.5/node_modules/@atproto/jwk/dist/key.js
  var require_key = __commonJS({
    "node_modules/.pnpm/@atproto+jwk@0.1.5/node_modules/@atproto/jwk/dist/key.js"(exports) {
      "use strict";
      var __runInitializers = exports && exports.__runInitializers || function(thisArg, initializers, value) {
        var useValue = arguments.length > 2;
        for (var i = 0; i < initializers.length; i++) {
          value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
        }
        return useValue ? value : void 0;
      };
      var __esDecorate = exports && exports.__esDecorate || function(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
        function accept(f) {
          if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
          return f;
        }
        var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
        var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
        var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
        var _, done = false;
        for (var i = decorators.length - 1; i >= 0; i--) {
          var context = {};
          for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
          for (var p in contextIn.access) context.access[p] = contextIn.access[p];
          context.addInitializer = function(f) {
            if (done) throw new TypeError("Cannot add initializers after decoration has completed");
            extraInitializers.push(accept(f || null));
          };
          var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
          if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
          } else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
          }
        }
        if (target) Object.defineProperty(target, contextIn.name, descriptor);
        done = true;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Key = void 0;
      var alg_js_1 = require_alg();
      var errors_js_1 = require_errors2();
      var jwk_js_1 = require_jwk();
      var util_js_1 = require_util2();
      var jwkSchemaReadonly = jwk_js_1.jwkSchema.readonly();
      var Key = (() => {
        var _a;
        let _instanceExtraInitializers = [];
        let _get_publicJwk_decorators;
        let _get_bareJwk_decorators;
        let _get_algorithms_decorators;
        return _a = class Key {
          constructor(jwk) {
            Object.defineProperty(this, "jwk", {
              enumerable: true,
              configurable: true,
              writable: true,
              value: (__runInitializers(this, _instanceExtraInitializers), jwk)
            });
            if (!jwk.use)
              throw new errors_js_1.JwkError('Missing "use" Parameter value');
          }
          get isPrivate() {
            const { jwk } = this;
            if ("d" in jwk && jwk.d !== void 0)
              return true;
            if ("k" in jwk && jwk.k !== void 0)
              return true;
            return false;
          }
          get isSymetric() {
            const { jwk } = this;
            if ("k" in jwk && jwk.k !== void 0)
              return true;
            return false;
          }
          get privateJwk() {
            return this.isPrivate ? this.jwk : void 0;
          }
          get publicJwk() {
            if (this.isSymetric)
              return void 0;
            return jwkSchemaReadonly.parse({
              ...this.jwk,
              d: void 0,
              k: void 0
            });
          }
          get bareJwk() {
            if (this.isSymetric)
              return void 0;
            const { kty, crv, e, n, x, y } = this.jwk;
            return jwkSchemaReadonly.parse({ crv, e, kty, n, x, y });
          }
          get use() {
            return this.jwk.use;
          }
          /**
           * The (forced) algorithm to use. If not provided, the key will be usable with
           * any of the algorithms in {@link algorithms}.
           *
           * @see {@link https://datatracker.ietf.org/doc/html/rfc7518#section-3.1 | "alg" (Algorithm) Header Parameter Values for JWS}
           */
          get alg() {
            return this.jwk.alg;
          }
          get kid() {
            return this.jwk.kid;
          }
          get crv() {
            return this.jwk.crv;
          }
          /**
           * All the algorithms that this key can be used with. If `alg` is provided,
           * this set will only contain that algorithm.
           */
          get algorithms() {
            return Object.freeze(Array.from((0, alg_js_1.jwkAlgorithms)(this.jwk)));
          }
        }, (() => {
          const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
          _get_publicJwk_decorators = [util_js_1.cachedGetter];
          _get_bareJwk_decorators = [util_js_1.cachedGetter];
          _get_algorithms_decorators = [util_js_1.cachedGetter];
          __esDecorate(_a, null, _get_publicJwk_decorators, { kind: "getter", name: "publicJwk", static: false, private: false, access: { has: (obj) => "publicJwk" in obj, get: (obj) => obj.publicJwk }, metadata: _metadata }, null, _instanceExtraInitializers);
          __esDecorate(_a, null, _get_bareJwk_decorators, { kind: "getter", name: "bareJwk", static: false, private: false, access: { has: (obj) => "bareJwk" in obj, get: (obj) => obj.bareJwk }, metadata: _metadata }, null, _instanceExtraInitializers);
          __esDecorate(_a, null, _get_algorithms_decorators, { kind: "getter", name: "algorithms", static: false, private: false, access: { has: (obj) => "algorithms" in obj, get: (obj) => obj.algorithms }, metadata: _metadata }, null, _instanceExtraInitializers);
          if (_metadata) Object.defineProperty(_a, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        })(), _a;
      })();
      exports.Key = Key;
    }
  });

  // node_modules/.pnpm/@atproto+jwk@0.1.5/node_modules/@atproto/jwk/dist/keyset.js
  var require_keyset = __commonJS({
    "node_modules/.pnpm/@atproto+jwk@0.1.5/node_modules/@atproto/jwk/dist/keyset.js"(exports) {
      "use strict";
      var __runInitializers = exports && exports.__runInitializers || function(thisArg, initializers, value) {
        var useValue = arguments.length > 2;
        for (var i = 0; i < initializers.length; i++) {
          value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
        }
        return useValue ? value : void 0;
      };
      var __esDecorate = exports && exports.__esDecorate || function(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
        function accept(f) {
          if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
          return f;
        }
        var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
        var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
        var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
        var _, done = false;
        for (var i = decorators.length - 1; i >= 0; i--) {
          var context = {};
          for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
          for (var p in contextIn.access) context.access[p] = contextIn.access[p];
          context.addInitializer = function(f) {
            if (done) throw new TypeError("Cannot add initializers after decoration has completed");
            extraInitializers.push(accept(f || null));
          };
          var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
          if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
          } else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
          }
        }
        if (target) Object.defineProperty(target, contextIn.name, descriptor);
        done = true;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Keyset = void 0;
      var errors_js_1 = require_errors2();
      var jwt_decode_js_1 = require_jwt_decode();
      var util_js_1 = require_util2();
      var extractPrivateJwk = (key) => key.privateJwk;
      var extractPublicJwk = (key) => key.publicJwk;
      var Keyset = (() => {
        var _a;
        let _instanceExtraInitializers = [];
        let _get_signAlgorithms_decorators;
        let _get_publicJwks_decorators;
        let _get_privateJwks_decorators;
        return _a = class Keyset {
          constructor(iterable, preferredSigningAlgorithms = iterable instanceof _a ? [...iterable.preferredSigningAlgorithms] : [
            // Prefer elliptic curve algorithms
            "EdDSA",
            "ES256K",
            "ES256",
            // https://datatracker.ietf.org/doc/html/rfc7518#section-3.5
            "PS256",
            "PS384",
            "PS512",
            "HS256",
            "HS384",
            "HS512"
          ]) {
            Object.defineProperty(this, "preferredSigningAlgorithms", {
              enumerable: true,
              configurable: true,
              writable: true,
              value: (__runInitializers(this, _instanceExtraInitializers), preferredSigningAlgorithms)
            });
            Object.defineProperty(this, "keys", {
              enumerable: true,
              configurable: true,
              writable: true,
              value: void 0
            });
            const keys = [];
            const kids = /* @__PURE__ */ new Set();
            for (const key of iterable) {
              if (!key)
                continue;
              keys.push(key);
              if (key.kid) {
                if (kids.has(key.kid))
                  throw new errors_js_1.JwkError(`Duplicate key: ${key.kid}`);
                else
                  kids.add(key.kid);
              }
            }
            this.keys = Object.freeze(keys);
          }
          get size() {
            return this.keys.length;
          }
          get signAlgorithms() {
            const algorithms = /* @__PURE__ */ new Set();
            for (const key of this) {
              if (key.use !== "sig")
                continue;
              for (const alg of key.algorithms) {
                algorithms.add(alg);
              }
            }
            return Object.freeze([...algorithms].sort((0, util_js_1.preferredOrderCmp)(this.preferredSigningAlgorithms)));
          }
          get publicJwks() {
            return {
              keys: Array.from(this, extractPublicJwk).filter(util_js_1.isDefined)
            };
          }
          get privateJwks() {
            return {
              keys: Array.from(this, extractPrivateJwk).filter(util_js_1.isDefined)
            };
          }
          has(kid) {
            return this.keys.some((key) => key.kid === kid);
          }
          get(search) {
            for (const key of this.list(search)) {
              return key;
            }
            throw new errors_js_1.JwkError(`Key not found ${search.kid || search.alg || "<unknown>"}`, errors_js_1.ERR_JWK_NOT_FOUND);
          }
          *list(search) {
            if (search.kid?.length === 0)
              return;
            if (search.alg?.length === 0)
              return;
            for (const key of this) {
              if (search.use && key.use !== search.use)
                continue;
              if (Array.isArray(search.kid)) {
                if (!key.kid || !search.kid.includes(key.kid))
                  continue;
              } else if (search.kid) {
                if (key.kid !== search.kid)
                  continue;
              }
              if (Array.isArray(search.alg)) {
                if (!search.alg.some((a) => key.algorithms.includes(a)))
                  continue;
              } else if (typeof search.alg === "string") {
                if (!key.algorithms.includes(search.alg))
                  continue;
              }
              yield key;
            }
          }
          findKey({ kid, alg, use }) {
            const matchingKeys = [];
            for (const key of this.list({ kid, alg, use })) {
              if (!key.isPrivate)
                continue;
              if (typeof alg === "string")
                return [key, alg];
              matchingKeys.push(key);
            }
            const isAllowedAlg = (0, util_js_1.matchesAny)(alg);
            const candidates = matchingKeys.map((key) => [key, key.algorithms.filter(isAllowedAlg)]);
            for (const prefAlg of this.preferredSigningAlgorithms) {
              for (const [matchingKey, matchingAlgs] of candidates) {
                if (matchingAlgs.includes(prefAlg))
                  return [matchingKey, prefAlg];
              }
            }
            for (const [matchingKey, matchingAlgs] of candidates) {
              for (const alg2 of matchingAlgs) {
                return [matchingKey, alg2];
              }
            }
            throw new errors_js_1.JwkError(`No signing key found for ${kid || alg || use || "<unknown>"}`, errors_js_1.ERR_JWK_NOT_FOUND);
          }
          [(_get_signAlgorithms_decorators = [util_js_1.cachedGetter], _get_publicJwks_decorators = [util_js_1.cachedGetter], _get_privateJwks_decorators = [util_js_1.cachedGetter], Symbol.iterator)]() {
            return this.keys.values();
          }
          async createJwt({ alg: sAlg, kid: sKid, ...header }, payload) {
            try {
              const [key, alg] = this.findKey({ alg: sAlg, kid: sKid, use: "sig" });
              const protectedHeader = { ...header, alg, kid: key.kid };
              if (typeof payload === "function") {
                payload = await payload(protectedHeader, key);
              }
              return await key.createJwt(protectedHeader, payload);
            } catch (err) {
              throw errors_js_1.JwtCreateError.from(err);
            }
          }
          async verifyJwt(token, options) {
            const { header } = (0, jwt_decode_js_1.unsafeDecodeJwt)(token);
            const { kid, alg } = header;
            const errors = [];
            for (const key of this.list({ kid, alg })) {
              try {
                const result = await key.verifyJwt(token, options);
                return { ...result, key };
              } catch (err) {
                errors.push(err);
              }
            }
            switch (errors.length) {
              case 0:
                throw new errors_js_1.JwtVerifyError("No key matched", errors_js_1.ERR_JWKS_NO_MATCHING_KEY);
              case 1:
                throw errors_js_1.JwtVerifyError.from(errors[0], errors_js_1.ERR_JWT_INVALID);
              default:
                throw errors_js_1.JwtVerifyError.from(errors, errors_js_1.ERR_JWT_INVALID);
            }
          }
          toJSON() {
            return structuredClone(this.publicJwks);
          }
        }, (() => {
          const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
          __esDecorate(_a, null, _get_signAlgorithms_decorators, { kind: "getter", name: "signAlgorithms", static: false, private: false, access: { has: (obj) => "signAlgorithms" in obj, get: (obj) => obj.signAlgorithms }, metadata: _metadata }, null, _instanceExtraInitializers);
          __esDecorate(_a, null, _get_publicJwks_decorators, { kind: "getter", name: "publicJwks", static: false, private: false, access: { has: (obj) => "publicJwks" in obj, get: (obj) => obj.publicJwks }, metadata: _metadata }, null, _instanceExtraInitializers);
          __esDecorate(_a, null, _get_privateJwks_decorators, { kind: "getter", name: "privateJwks", static: false, private: false, access: { has: (obj) => "privateJwks" in obj, get: (obj) => obj.privateJwks }, metadata: _metadata }, null, _instanceExtraInitializers);
          if (_metadata) Object.defineProperty(_a, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        })(), _a;
      })();
      exports.Keyset = Keyset;
    }
  });

  // node_modules/.pnpm/@atproto+jwk@0.1.5/node_modules/@atproto/jwk/dist/index.js
  var require_dist = __commonJS({
    "node_modules/.pnpm/@atproto+jwk@0.1.5/node_modules/@atproto/jwk/dist/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ValidationError = void 0;
      var zod_1 = require_cjs();
      Object.defineProperty(exports, "ValidationError", { enumerable: true, get: function() {
        return zod_1.ZodError;
      } });
      __exportStar(require_alg(), exports);
      __exportStar(require_errors2(), exports);
      __exportStar(require_jwk(), exports);
      __exportStar(require_jwks(), exports);
      __exportStar(require_jwt_decode(), exports);
      __exportStar(require_jwt_verify(), exports);
      __exportStar(require_jwt(), exports);
      __exportStar(require_key(), exports);
      __exportStar(require_keyset(), exports);
      __exportStar(require_util2(), exports);
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/webcrypto.js
  var webcrypto_default, isCryptoKey;
  var init_webcrypto = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/webcrypto.js"() {
      webcrypto_default = crypto;
      isCryptoKey = (key) => key instanceof CryptoKey;
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/digest.js
  var digest, digest_default;
  var init_digest = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/digest.js"() {
      init_webcrypto();
      digest = async (algorithm, data) => {
        const subtleDigest = `SHA-${algorithm.slice(-3)}`;
        return new Uint8Array(await webcrypto_default.subtle.digest(subtleDigest, data));
      };
      digest_default = digest;
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/buffer_utils.js
  function concat(...buffers) {
    const size = buffers.reduce((acc, { length: length2 }) => acc + length2, 0);
    const buf = new Uint8Array(size);
    let i = 0;
    for (const buffer of buffers) {
      buf.set(buffer, i);
      i += buffer.length;
    }
    return buf;
  }
  function p2s(alg, p2sInput) {
    return concat(encoder.encode(alg), new Uint8Array([0]), p2sInput);
  }
  function writeUInt32BE(buf, value, offset) {
    if (value < 0 || value >= MAX_INT32) {
      throw new RangeError(`value must be >= 0 and <= ${MAX_INT32 - 1}. Received ${value}`);
    }
    buf.set([value >>> 24, value >>> 16, value >>> 8, value & 255], offset);
  }
  function uint64be(value) {
    const high = Math.floor(value / MAX_INT32);
    const low = value % MAX_INT32;
    const buf = new Uint8Array(8);
    writeUInt32BE(buf, high, 0);
    writeUInt32BE(buf, low, 4);
    return buf;
  }
  function uint32be(value) {
    const buf = new Uint8Array(4);
    writeUInt32BE(buf, value);
    return buf;
  }
  function lengthAndInput(input) {
    return concat(uint32be(input.length), input);
  }
  async function concatKdf(secret, bits, value) {
    const iterations = Math.ceil((bits >> 3) / 32);
    const res = new Uint8Array(iterations * 32);
    for (let iter = 0; iter < iterations; iter++) {
      const buf = new Uint8Array(4 + secret.length + value.length);
      buf.set(uint32be(iter + 1));
      buf.set(secret, 4);
      buf.set(value, 4 + secret.length);
      res.set(await digest_default("sha256", buf), iter * 32);
    }
    return res.slice(0, bits >> 3);
  }
  var encoder, decoder, MAX_INT32;
  var init_buffer_utils = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/buffer_utils.js"() {
      init_digest();
      encoder = new TextEncoder();
      decoder = new TextDecoder();
      MAX_INT32 = 2 ** 32;
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/base64url.js
  var encodeBase64, encode2, decodeBase64, decode2;
  var init_base64url = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/base64url.js"() {
      init_buffer_utils();
      encodeBase64 = (input) => {
        let unencoded = input;
        if (typeof unencoded === "string") {
          unencoded = encoder.encode(unencoded);
        }
        const CHUNK_SIZE = 32768;
        const arr = [];
        for (let i = 0; i < unencoded.length; i += CHUNK_SIZE) {
          arr.push(String.fromCharCode.apply(null, unencoded.subarray(i, i + CHUNK_SIZE)));
        }
        return btoa(arr.join(""));
      };
      encode2 = (input) => {
        return encodeBase64(input).replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
      };
      decodeBase64 = (encoded) => {
        const binary = atob(encoded);
        const bytes = new Uint8Array(binary.length);
        for (let i = 0; i < binary.length; i++) {
          bytes[i] = binary.charCodeAt(i);
        }
        return bytes;
      };
      decode2 = (input) => {
        let encoded = input;
        if (encoded instanceof Uint8Array) {
          encoded = decoder.decode(encoded);
        }
        encoded = encoded.replace(/-/g, "+").replace(/_/g, "/").replace(/\s/g, "");
        try {
          return decodeBase64(encoded);
        } catch {
          throw new TypeError("The input to be decoded is not correctly encoded.");
        }
      };
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/util/errors.js
  var errors_exports = {};
  __export(errors_exports, {
    JOSEAlgNotAllowed: () => JOSEAlgNotAllowed,
    JOSEError: () => JOSEError,
    JOSENotSupported: () => JOSENotSupported,
    JWEDecryptionFailed: () => JWEDecryptionFailed,
    JWEInvalid: () => JWEInvalid,
    JWKInvalid: () => JWKInvalid,
    JWKSInvalid: () => JWKSInvalid,
    JWKSMultipleMatchingKeys: () => JWKSMultipleMatchingKeys,
    JWKSNoMatchingKey: () => JWKSNoMatchingKey,
    JWKSTimeout: () => JWKSTimeout,
    JWSInvalid: () => JWSInvalid,
    JWSSignatureVerificationFailed: () => JWSSignatureVerificationFailed,
    JWTClaimValidationFailed: () => JWTClaimValidationFailed,
    JWTExpired: () => JWTExpired,
    JWTInvalid: () => JWTInvalid
  });
  var JOSEError, JWTClaimValidationFailed, JWTExpired, JOSEAlgNotAllowed, JOSENotSupported, JWEDecryptionFailed, JWEInvalid, JWSInvalid, JWTInvalid, JWKInvalid, JWKSInvalid, JWKSNoMatchingKey, JWKSMultipleMatchingKeys, JWKSTimeout, JWSSignatureVerificationFailed;
  var init_errors = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/util/errors.js"() {
      JOSEError = class extends Error {
        constructor(message2, options) {
          super(message2, options);
          this.code = "ERR_JOSE_GENERIC";
          this.name = this.constructor.name;
          Error.captureStackTrace?.(this, this.constructor);
        }
      };
      JOSEError.code = "ERR_JOSE_GENERIC";
      JWTClaimValidationFailed = class extends JOSEError {
        constructor(message2, payload, claim = "unspecified", reason = "unspecified") {
          super(message2, { cause: { claim, reason, payload } });
          this.code = "ERR_JWT_CLAIM_VALIDATION_FAILED";
          this.claim = claim;
          this.reason = reason;
          this.payload = payload;
        }
      };
      JWTClaimValidationFailed.code = "ERR_JWT_CLAIM_VALIDATION_FAILED";
      JWTExpired = class extends JOSEError {
        constructor(message2, payload, claim = "unspecified", reason = "unspecified") {
          super(message2, { cause: { claim, reason, payload } });
          this.code = "ERR_JWT_EXPIRED";
          this.claim = claim;
          this.reason = reason;
          this.payload = payload;
        }
      };
      JWTExpired.code = "ERR_JWT_EXPIRED";
      JOSEAlgNotAllowed = class extends JOSEError {
        constructor() {
          super(...arguments);
          this.code = "ERR_JOSE_ALG_NOT_ALLOWED";
        }
      };
      JOSEAlgNotAllowed.code = "ERR_JOSE_ALG_NOT_ALLOWED";
      JOSENotSupported = class extends JOSEError {
        constructor() {
          super(...arguments);
          this.code = "ERR_JOSE_NOT_SUPPORTED";
        }
      };
      JOSENotSupported.code = "ERR_JOSE_NOT_SUPPORTED";
      JWEDecryptionFailed = class extends JOSEError {
        constructor(message2 = "decryption operation failed", options) {
          super(message2, options);
          this.code = "ERR_JWE_DECRYPTION_FAILED";
        }
      };
      JWEDecryptionFailed.code = "ERR_JWE_DECRYPTION_FAILED";
      JWEInvalid = class extends JOSEError {
        constructor() {
          super(...arguments);
          this.code = "ERR_JWE_INVALID";
        }
      };
      JWEInvalid.code = "ERR_JWE_INVALID";
      JWSInvalid = class extends JOSEError {
        constructor() {
          super(...arguments);
          this.code = "ERR_JWS_INVALID";
        }
      };
      JWSInvalid.code = "ERR_JWS_INVALID";
      JWTInvalid = class extends JOSEError {
        constructor() {
          super(...arguments);
          this.code = "ERR_JWT_INVALID";
        }
      };
      JWTInvalid.code = "ERR_JWT_INVALID";
      JWKInvalid = class extends JOSEError {
        constructor() {
          super(...arguments);
          this.code = "ERR_JWK_INVALID";
        }
      };
      JWKInvalid.code = "ERR_JWK_INVALID";
      JWKSInvalid = class extends JOSEError {
        constructor() {
          super(...arguments);
          this.code = "ERR_JWKS_INVALID";
        }
      };
      JWKSInvalid.code = "ERR_JWKS_INVALID";
      JWKSNoMatchingKey = class extends JOSEError {
        constructor(message2 = "no applicable key found in the JSON Web Key Set", options) {
          super(message2, options);
          this.code = "ERR_JWKS_NO_MATCHING_KEY";
        }
      };
      JWKSNoMatchingKey.code = "ERR_JWKS_NO_MATCHING_KEY";
      JWKSMultipleMatchingKeys = class extends JOSEError {
        constructor(message2 = "multiple matching keys found in the JSON Web Key Set", options) {
          super(message2, options);
          this.code = "ERR_JWKS_MULTIPLE_MATCHING_KEYS";
        }
      };
      JWKSMultipleMatchingKeys.code = "ERR_JWKS_MULTIPLE_MATCHING_KEYS";
      JWKSTimeout = class extends JOSEError {
        constructor(message2 = "request timed out", options) {
          super(message2, options);
          this.code = "ERR_JWKS_TIMEOUT";
        }
      };
      JWKSTimeout.code = "ERR_JWKS_TIMEOUT";
      JWSSignatureVerificationFailed = class extends JOSEError {
        constructor(message2 = "signature verification failed", options) {
          super(message2, options);
          this.code = "ERR_JWS_SIGNATURE_VERIFICATION_FAILED";
        }
      };
      JWSSignatureVerificationFailed.code = "ERR_JWS_SIGNATURE_VERIFICATION_FAILED";
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/random.js
  var random_default;
  var init_random = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/random.js"() {
      init_webcrypto();
      random_default = webcrypto_default.getRandomValues.bind(webcrypto_default);
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/iv.js
  function bitLength(alg) {
    switch (alg) {
      case "A128GCM":
      case "A128GCMKW":
      case "A192GCM":
      case "A192GCMKW":
      case "A256GCM":
      case "A256GCMKW":
        return 96;
      case "A128CBC-HS256":
      case "A192CBC-HS384":
      case "A256CBC-HS512":
        return 128;
      default:
        throw new JOSENotSupported(`Unsupported JWE Algorithm: ${alg}`);
    }
  }
  var iv_default;
  var init_iv = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/iv.js"() {
      init_errors();
      init_random();
      iv_default = (alg) => random_default(new Uint8Array(bitLength(alg) >> 3));
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/check_iv_length.js
  var checkIvLength, check_iv_length_default;
  var init_check_iv_length = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/check_iv_length.js"() {
      init_errors();
      init_iv();
      checkIvLength = (enc, iv) => {
        if (iv.length << 3 !== bitLength(enc)) {
          throw new JWEInvalid("Invalid Initialization Vector length");
        }
      };
      check_iv_length_default = checkIvLength;
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/check_cek_length.js
  var checkCekLength, check_cek_length_default;
  var init_check_cek_length = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/check_cek_length.js"() {
      init_errors();
      checkCekLength = (cek, expected) => {
        const actual = cek.byteLength << 3;
        if (actual !== expected) {
          throw new JWEInvalid(`Invalid Content Encryption Key length. Expected ${expected} bits, got ${actual} bits`);
        }
      };
      check_cek_length_default = checkCekLength;
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/timing_safe_equal.js
  var timingSafeEqual, timing_safe_equal_default;
  var init_timing_safe_equal = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/timing_safe_equal.js"() {
      timingSafeEqual = (a, b) => {
        if (!(a instanceof Uint8Array)) {
          throw new TypeError("First argument must be a buffer");
        }
        if (!(b instanceof Uint8Array)) {
          throw new TypeError("Second argument must be a buffer");
        }
        if (a.length !== b.length) {
          throw new TypeError("Input buffers must have the same length");
        }
        const len = a.length;
        let out = 0;
        let i = -1;
        while (++i < len) {
          out |= a[i] ^ b[i];
        }
        return out === 0;
      };
      timing_safe_equal_default = timingSafeEqual;
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/crypto_key.js
  function unusable(name2, prop = "algorithm.name") {
    return new TypeError(`CryptoKey does not support this operation, its ${prop} must be ${name2}`);
  }
  function isAlgorithm(algorithm, name2) {
    return algorithm.name === name2;
  }
  function getHashLength(hash) {
    return parseInt(hash.name.slice(4), 10);
  }
  function getNamedCurve(alg) {
    switch (alg) {
      case "ES256":
        return "P-256";
      case "ES384":
        return "P-384";
      case "ES512":
        return "P-521";
      default:
        throw new Error("unreachable");
    }
  }
  function checkUsage(key, usages) {
    if (usages.length && !usages.some((expected) => key.usages.includes(expected))) {
      let msg = "CryptoKey does not support this operation, its usages must include ";
      if (usages.length > 2) {
        const last = usages.pop();
        msg += `one of ${usages.join(", ")}, or ${last}.`;
      } else if (usages.length === 2) {
        msg += `one of ${usages[0]} or ${usages[1]}.`;
      } else {
        msg += `${usages[0]}.`;
      }
      throw new TypeError(msg);
    }
  }
  function checkSigCryptoKey(key, alg, ...usages) {
    switch (alg) {
      case "HS256":
      case "HS384":
      case "HS512": {
        if (!isAlgorithm(key.algorithm, "HMAC"))
          throw unusable("HMAC");
        const expected = parseInt(alg.slice(2), 10);
        const actual = getHashLength(key.algorithm.hash);
        if (actual !== expected)
          throw unusable(`SHA-${expected}`, "algorithm.hash");
        break;
      }
      case "RS256":
      case "RS384":
      case "RS512": {
        if (!isAlgorithm(key.algorithm, "RSASSA-PKCS1-v1_5"))
          throw unusable("RSASSA-PKCS1-v1_5");
        const expected = parseInt(alg.slice(2), 10);
        const actual = getHashLength(key.algorithm.hash);
        if (actual !== expected)
          throw unusable(`SHA-${expected}`, "algorithm.hash");
        break;
      }
      case "PS256":
      case "PS384":
      case "PS512": {
        if (!isAlgorithm(key.algorithm, "RSA-PSS"))
          throw unusable("RSA-PSS");
        const expected = parseInt(alg.slice(2), 10);
        const actual = getHashLength(key.algorithm.hash);
        if (actual !== expected)
          throw unusable(`SHA-${expected}`, "algorithm.hash");
        break;
      }
      case "EdDSA": {
        if (key.algorithm.name !== "Ed25519" && key.algorithm.name !== "Ed448") {
          throw unusable("Ed25519 or Ed448");
        }
        break;
      }
      case "Ed25519": {
        if (!isAlgorithm(key.algorithm, "Ed25519"))
          throw unusable("Ed25519");
        break;
      }
      case "ES256":
      case "ES384":
      case "ES512": {
        if (!isAlgorithm(key.algorithm, "ECDSA"))
          throw unusable("ECDSA");
        const expected = getNamedCurve(alg);
        const actual = key.algorithm.namedCurve;
        if (actual !== expected)
          throw unusable(expected, "algorithm.namedCurve");
        break;
      }
      default:
        throw new TypeError("CryptoKey does not support this operation");
    }
    checkUsage(key, usages);
  }
  function checkEncCryptoKey(key, alg, ...usages) {
    switch (alg) {
      case "A128GCM":
      case "A192GCM":
      case "A256GCM": {
        if (!isAlgorithm(key.algorithm, "AES-GCM"))
          throw unusable("AES-GCM");
        const expected = parseInt(alg.slice(1, 4), 10);
        const actual = key.algorithm.length;
        if (actual !== expected)
          throw unusable(expected, "algorithm.length");
        break;
      }
      case "A128KW":
      case "A192KW":
      case "A256KW": {
        if (!isAlgorithm(key.algorithm, "AES-KW"))
          throw unusable("AES-KW");
        const expected = parseInt(alg.slice(1, 4), 10);
        const actual = key.algorithm.length;
        if (actual !== expected)
          throw unusable(expected, "algorithm.length");
        break;
      }
      case "ECDH": {
        switch (key.algorithm.name) {
          case "ECDH":
          case "X25519":
          case "X448":
            break;
          default:
            throw unusable("ECDH, X25519, or X448");
        }
        break;
      }
      case "PBES2-HS256+A128KW":
      case "PBES2-HS384+A192KW":
      case "PBES2-HS512+A256KW":
        if (!isAlgorithm(key.algorithm, "PBKDF2"))
          throw unusable("PBKDF2");
        break;
      case "RSA-OAEP":
      case "RSA-OAEP-256":
      case "RSA-OAEP-384":
      case "RSA-OAEP-512": {
        if (!isAlgorithm(key.algorithm, "RSA-OAEP"))
          throw unusable("RSA-OAEP");
        const expected = parseInt(alg.slice(9), 10) || 1;
        const actual = getHashLength(key.algorithm.hash);
        if (actual !== expected)
          throw unusable(`SHA-${expected}`, "algorithm.hash");
        break;
      }
      default:
        throw new TypeError("CryptoKey does not support this operation");
    }
    checkUsage(key, usages);
  }
  var init_crypto_key = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/crypto_key.js"() {
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/invalid_key_input.js
  function message(msg, actual, ...types2) {
    types2 = types2.filter(Boolean);
    if (types2.length > 2) {
      const last = types2.pop();
      msg += `one of type ${types2.join(", ")}, or ${last}.`;
    } else if (types2.length === 2) {
      msg += `one of type ${types2[0]} or ${types2[1]}.`;
    } else {
      msg += `of type ${types2[0]}.`;
    }
    if (actual == null) {
      msg += ` Received ${actual}`;
    } else if (typeof actual === "function" && actual.name) {
      msg += ` Received function ${actual.name}`;
    } else if (typeof actual === "object" && actual != null) {
      if (actual.constructor?.name) {
        msg += ` Received an instance of ${actual.constructor.name}`;
      }
    }
    return msg;
  }
  function withAlg(alg, actual, ...types2) {
    return message(`Key for the ${alg} algorithm must be `, actual, ...types2);
  }
  var invalid_key_input_default;
  var init_invalid_key_input = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/invalid_key_input.js"() {
      invalid_key_input_default = (actual, ...types2) => {
        return message("Key must be ", actual, ...types2);
      };
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/is_key_like.js
  var is_key_like_default, types;
  var init_is_key_like = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/is_key_like.js"() {
      init_webcrypto();
      is_key_like_default = (key) => {
        if (isCryptoKey(key)) {
          return true;
        }
        return key?.[Symbol.toStringTag] === "KeyObject";
      };
      types = ["CryptoKey"];
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/decrypt.js
  async function cbcDecrypt(enc, cek, ciphertext, iv, tag2, aad) {
    if (!(cek instanceof Uint8Array)) {
      throw new TypeError(invalid_key_input_default(cek, "Uint8Array"));
    }
    const keySize = parseInt(enc.slice(1, 4), 10);
    const encKey = await webcrypto_default.subtle.importKey("raw", cek.subarray(keySize >> 3), "AES-CBC", false, ["decrypt"]);
    const macKey = await webcrypto_default.subtle.importKey("raw", cek.subarray(0, keySize >> 3), {
      hash: `SHA-${keySize << 1}`,
      name: "HMAC"
    }, false, ["sign"]);
    const macData = concat(aad, iv, ciphertext, uint64be(aad.length << 3));
    const expectedTag = new Uint8Array((await webcrypto_default.subtle.sign("HMAC", macKey, macData)).slice(0, keySize >> 3));
    let macCheckPassed;
    try {
      macCheckPassed = timing_safe_equal_default(tag2, expectedTag);
    } catch {
    }
    if (!macCheckPassed) {
      throw new JWEDecryptionFailed();
    }
    let plaintext;
    try {
      plaintext = new Uint8Array(await webcrypto_default.subtle.decrypt({ iv, name: "AES-CBC" }, encKey, ciphertext));
    } catch {
    }
    if (!plaintext) {
      throw new JWEDecryptionFailed();
    }
    return plaintext;
  }
  async function gcmDecrypt(enc, cek, ciphertext, iv, tag2, aad) {
    let encKey;
    if (cek instanceof Uint8Array) {
      encKey = await webcrypto_default.subtle.importKey("raw", cek, "AES-GCM", false, ["decrypt"]);
    } else {
      checkEncCryptoKey(cek, enc, "decrypt");
      encKey = cek;
    }
    try {
      return new Uint8Array(await webcrypto_default.subtle.decrypt({
        additionalData: aad,
        iv,
        name: "AES-GCM",
        tagLength: 128
      }, encKey, concat(ciphertext, tag2)));
    } catch {
      throw new JWEDecryptionFailed();
    }
  }
  var decrypt, decrypt_default;
  var init_decrypt = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/decrypt.js"() {
      init_buffer_utils();
      init_check_iv_length();
      init_check_cek_length();
      init_timing_safe_equal();
      init_errors();
      init_webcrypto();
      init_crypto_key();
      init_invalid_key_input();
      init_is_key_like();
      decrypt = async (enc, cek, ciphertext, iv, tag2, aad) => {
        if (!isCryptoKey(cek) && !(cek instanceof Uint8Array)) {
          throw new TypeError(invalid_key_input_default(cek, ...types, "Uint8Array"));
        }
        if (!iv) {
          throw new JWEInvalid("JWE Initialization Vector missing");
        }
        if (!tag2) {
          throw new JWEInvalid("JWE Authentication Tag missing");
        }
        check_iv_length_default(enc, iv);
        switch (enc) {
          case "A128CBC-HS256":
          case "A192CBC-HS384":
          case "A256CBC-HS512":
            if (cek instanceof Uint8Array)
              check_cek_length_default(cek, parseInt(enc.slice(-3), 10));
            return cbcDecrypt(enc, cek, ciphertext, iv, tag2, aad);
          case "A128GCM":
          case "A192GCM":
          case "A256GCM":
            if (cek instanceof Uint8Array)
              check_cek_length_default(cek, parseInt(enc.slice(1, 4), 10));
            return gcmDecrypt(enc, cek, ciphertext, iv, tag2, aad);
          default:
            throw new JOSENotSupported("Unsupported JWE Content Encryption Algorithm");
        }
      };
      decrypt_default = decrypt;
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/is_disjoint.js
  var isDisjoint, is_disjoint_default;
  var init_is_disjoint = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/is_disjoint.js"() {
      isDisjoint = (...headers) => {
        const sources = headers.filter(Boolean);
        if (sources.length === 0 || sources.length === 1) {
          return true;
        }
        let acc;
        for (const header of sources) {
          const parameters = Object.keys(header);
          if (!acc || acc.size === 0) {
            acc = new Set(parameters);
            continue;
          }
          for (const parameter of parameters) {
            if (acc.has(parameter)) {
              return false;
            }
            acc.add(parameter);
          }
        }
        return true;
      };
      is_disjoint_default = isDisjoint;
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/is_object.js
  function isObjectLike(value) {
    return typeof value === "object" && value !== null;
  }
  function isObject(input) {
    if (!isObjectLike(input) || Object.prototype.toString.call(input) !== "[object Object]") {
      return false;
    }
    if (Object.getPrototypeOf(input) === null) {
      return true;
    }
    let proto = input;
    while (Object.getPrototypeOf(proto) !== null) {
      proto = Object.getPrototypeOf(proto);
    }
    return Object.getPrototypeOf(input) === proto;
  }
  var init_is_object = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/is_object.js"() {
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/bogus.js
  var bogusWebCrypto, bogus_default;
  var init_bogus = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/bogus.js"() {
      bogusWebCrypto = [
        { hash: "SHA-256", name: "HMAC" },
        true,
        ["sign"]
      ];
      bogus_default = bogusWebCrypto;
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/aeskw.js
  function checkKeySize(key, alg) {
    if (key.algorithm.length !== parseInt(alg.slice(1, 4), 10)) {
      throw new TypeError(`Invalid key size for alg: ${alg}`);
    }
  }
  function getCryptoKey(key, alg, usage) {
    if (isCryptoKey(key)) {
      checkEncCryptoKey(key, alg, usage);
      return key;
    }
    if (key instanceof Uint8Array) {
      return webcrypto_default.subtle.importKey("raw", key, "AES-KW", true, [usage]);
    }
    throw new TypeError(invalid_key_input_default(key, ...types, "Uint8Array"));
  }
  var wrap, unwrap;
  var init_aeskw = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/aeskw.js"() {
      init_bogus();
      init_webcrypto();
      init_crypto_key();
      init_invalid_key_input();
      init_is_key_like();
      wrap = async (alg, key, cek) => {
        const cryptoKey = await getCryptoKey(key, alg, "wrapKey");
        checkKeySize(cryptoKey, alg);
        const cryptoKeyCek = await webcrypto_default.subtle.importKey("raw", cek, ...bogus_default);
        return new Uint8Array(await webcrypto_default.subtle.wrapKey("raw", cryptoKeyCek, cryptoKey, "AES-KW"));
      };
      unwrap = async (alg, key, encryptedKey) => {
        const cryptoKey = await getCryptoKey(key, alg, "unwrapKey");
        checkKeySize(cryptoKey, alg);
        const cryptoKeyCek = await webcrypto_default.subtle.unwrapKey("raw", encryptedKey, cryptoKey, "AES-KW", ...bogus_default);
        return new Uint8Array(await webcrypto_default.subtle.exportKey("raw", cryptoKeyCek));
      };
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/ecdhes.js
  async function deriveKey(publicKey, privateKey, algorithm, keyLength, apu = new Uint8Array(0), apv = new Uint8Array(0)) {
    if (!isCryptoKey(publicKey)) {
      throw new TypeError(invalid_key_input_default(publicKey, ...types));
    }
    checkEncCryptoKey(publicKey, "ECDH");
    if (!isCryptoKey(privateKey)) {
      throw new TypeError(invalid_key_input_default(privateKey, ...types));
    }
    checkEncCryptoKey(privateKey, "ECDH", "deriveBits");
    const value = concat(lengthAndInput(encoder.encode(algorithm)), lengthAndInput(apu), lengthAndInput(apv), uint32be(keyLength));
    let length2;
    if (publicKey.algorithm.name === "X25519") {
      length2 = 256;
    } else if (publicKey.algorithm.name === "X448") {
      length2 = 448;
    } else {
      length2 = Math.ceil(parseInt(publicKey.algorithm.namedCurve.substr(-3), 10) / 8) << 3;
    }
    const sharedSecret = new Uint8Array(await webcrypto_default.subtle.deriveBits({
      name: publicKey.algorithm.name,
      public: publicKey
    }, privateKey, length2));
    return concatKdf(sharedSecret, keyLength, value);
  }
  async function generateEpk(key) {
    if (!isCryptoKey(key)) {
      throw new TypeError(invalid_key_input_default(key, ...types));
    }
    return webcrypto_default.subtle.generateKey(key.algorithm, true, ["deriveBits"]);
  }
  function ecdhAllowed(key) {
    if (!isCryptoKey(key)) {
      throw new TypeError(invalid_key_input_default(key, ...types));
    }
    return ["P-256", "P-384", "P-521"].includes(key.algorithm.namedCurve) || key.algorithm.name === "X25519" || key.algorithm.name === "X448";
  }
  var init_ecdhes = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/ecdhes.js"() {
      init_buffer_utils();
      init_webcrypto();
      init_crypto_key();
      init_invalid_key_input();
      init_is_key_like();
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/check_p2s.js
  function checkP2s(p2s2) {
    if (!(p2s2 instanceof Uint8Array) || p2s2.length < 8) {
      throw new JWEInvalid("PBES2 Salt Input must be 8 or more octets");
    }
  }
  var init_check_p2s = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/check_p2s.js"() {
      init_errors();
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/pbes2kw.js
  function getCryptoKey2(key, alg) {
    if (key instanceof Uint8Array) {
      return webcrypto_default.subtle.importKey("raw", key, "PBKDF2", false, ["deriveBits"]);
    }
    if (isCryptoKey(key)) {
      checkEncCryptoKey(key, alg, "deriveBits", "deriveKey");
      return key;
    }
    throw new TypeError(invalid_key_input_default(key, ...types, "Uint8Array"));
  }
  async function deriveKey2(p2s2, alg, p2c, key) {
    checkP2s(p2s2);
    const salt = p2s(alg, p2s2);
    const keylen = parseInt(alg.slice(13, 16), 10);
    const subtleAlg = {
      hash: `SHA-${alg.slice(8, 11)}`,
      iterations: p2c,
      name: "PBKDF2",
      salt
    };
    const wrapAlg = {
      length: keylen,
      name: "AES-KW"
    };
    const cryptoKey = await getCryptoKey2(key, alg);
    if (cryptoKey.usages.includes("deriveBits")) {
      return new Uint8Array(await webcrypto_default.subtle.deriveBits(subtleAlg, cryptoKey, keylen));
    }
    if (cryptoKey.usages.includes("deriveKey")) {
      return webcrypto_default.subtle.deriveKey(subtleAlg, cryptoKey, wrapAlg, false, ["wrapKey", "unwrapKey"]);
    }
    throw new TypeError('PBKDF2 key "usages" must include "deriveBits" or "deriveKey"');
  }
  var encrypt, decrypt2;
  var init_pbes2kw = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/pbes2kw.js"() {
      init_random();
      init_buffer_utils();
      init_base64url();
      init_aeskw();
      init_check_p2s();
      init_webcrypto();
      init_crypto_key();
      init_invalid_key_input();
      init_is_key_like();
      encrypt = async (alg, key, cek, p2c = 2048, p2s2 = random_default(new Uint8Array(16))) => {
        const derived = await deriveKey2(p2s2, alg, p2c, key);
        const encryptedKey = await wrap(alg.slice(-6), derived, cek);
        return { encryptedKey, p2c, p2s: encode2(p2s2) };
      };
      decrypt2 = async (alg, key, encryptedKey, p2c, p2s2) => {
        const derived = await deriveKey2(p2s2, alg, p2c, key);
        return unwrap(alg.slice(-6), derived, encryptedKey);
      };
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/subtle_rsaes.js
  function subtleRsaEs(alg) {
    switch (alg) {
      case "RSA-OAEP":
      case "RSA-OAEP-256":
      case "RSA-OAEP-384":
      case "RSA-OAEP-512":
        return "RSA-OAEP";
      default:
        throw new JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);
    }
  }
  var init_subtle_rsaes = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/subtle_rsaes.js"() {
      init_errors();
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/check_key_length.js
  var check_key_length_default;
  var init_check_key_length = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/check_key_length.js"() {
      check_key_length_default = (alg, key) => {
        if (alg.startsWith("RS") || alg.startsWith("PS")) {
          const { modulusLength } = key.algorithm;
          if (typeof modulusLength !== "number" || modulusLength < 2048) {
            throw new TypeError(`${alg} requires key modulusLength to be 2048 bits or larger`);
          }
        }
      };
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/rsaes.js
  var encrypt2, decrypt3;
  var init_rsaes = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/rsaes.js"() {
      init_subtle_rsaes();
      init_bogus();
      init_webcrypto();
      init_crypto_key();
      init_check_key_length();
      init_invalid_key_input();
      init_is_key_like();
      encrypt2 = async (alg, key, cek) => {
        if (!isCryptoKey(key)) {
          throw new TypeError(invalid_key_input_default(key, ...types));
        }
        checkEncCryptoKey(key, alg, "encrypt", "wrapKey");
        check_key_length_default(alg, key);
        if (key.usages.includes("encrypt")) {
          return new Uint8Array(await webcrypto_default.subtle.encrypt(subtleRsaEs(alg), key, cek));
        }
        if (key.usages.includes("wrapKey")) {
          const cryptoKeyCek = await webcrypto_default.subtle.importKey("raw", cek, ...bogus_default);
          return new Uint8Array(await webcrypto_default.subtle.wrapKey("raw", cryptoKeyCek, key, subtleRsaEs(alg)));
        }
        throw new TypeError('RSA-OAEP key "usages" must include "encrypt" or "wrapKey" for this operation');
      };
      decrypt3 = async (alg, key, encryptedKey) => {
        if (!isCryptoKey(key)) {
          throw new TypeError(invalid_key_input_default(key, ...types));
        }
        checkEncCryptoKey(key, alg, "decrypt", "unwrapKey");
        check_key_length_default(alg, key);
        if (key.usages.includes("decrypt")) {
          return new Uint8Array(await webcrypto_default.subtle.decrypt(subtleRsaEs(alg), key, encryptedKey));
        }
        if (key.usages.includes("unwrapKey")) {
          const cryptoKeyCek = await webcrypto_default.subtle.unwrapKey("raw", encryptedKey, key, subtleRsaEs(alg), ...bogus_default);
          return new Uint8Array(await webcrypto_default.subtle.exportKey("raw", cryptoKeyCek));
        }
        throw new TypeError('RSA-OAEP key "usages" must include "decrypt" or "unwrapKey" for this operation');
      };
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/is_jwk.js
  function isJWK(key) {
    return isObject(key) && typeof key.kty === "string";
  }
  function isPrivateJWK(key) {
    return key.kty !== "oct" && typeof key.d === "string";
  }
  function isPublicJWK(key) {
    return key.kty !== "oct" && typeof key.d === "undefined";
  }
  function isSecretJWK(key) {
    return isJWK(key) && key.kty === "oct" && typeof key.k === "string";
  }
  var init_is_jwk = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/is_jwk.js"() {
      init_is_object();
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/jwk_to_key.js
  function subtleMapping(jwk) {
    let algorithm;
    let keyUsages;
    switch (jwk.kty) {
      case "RSA": {
        switch (jwk.alg) {
          case "PS256":
          case "PS384":
          case "PS512":
            algorithm = { name: "RSA-PSS", hash: `SHA-${jwk.alg.slice(-3)}` };
            keyUsages = jwk.d ? ["sign"] : ["verify"];
            break;
          case "RS256":
          case "RS384":
          case "RS512":
            algorithm = { name: "RSASSA-PKCS1-v1_5", hash: `SHA-${jwk.alg.slice(-3)}` };
            keyUsages = jwk.d ? ["sign"] : ["verify"];
            break;
          case "RSA-OAEP":
          case "RSA-OAEP-256":
          case "RSA-OAEP-384":
          case "RSA-OAEP-512":
            algorithm = {
              name: "RSA-OAEP",
              hash: `SHA-${parseInt(jwk.alg.slice(-3), 10) || 1}`
            };
            keyUsages = jwk.d ? ["decrypt", "unwrapKey"] : ["encrypt", "wrapKey"];
            break;
          default:
            throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
        }
        break;
      }
      case "EC": {
        switch (jwk.alg) {
          case "ES256":
            algorithm = { name: "ECDSA", namedCurve: "P-256" };
            keyUsages = jwk.d ? ["sign"] : ["verify"];
            break;
          case "ES384":
            algorithm = { name: "ECDSA", namedCurve: "P-384" };
            keyUsages = jwk.d ? ["sign"] : ["verify"];
            break;
          case "ES512":
            algorithm = { name: "ECDSA", namedCurve: "P-521" };
            keyUsages = jwk.d ? ["sign"] : ["verify"];
            break;
          case "ECDH-ES":
          case "ECDH-ES+A128KW":
          case "ECDH-ES+A192KW":
          case "ECDH-ES+A256KW":
            algorithm = { name: "ECDH", namedCurve: jwk.crv };
            keyUsages = jwk.d ? ["deriveBits"] : [];
            break;
          default:
            throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
        }
        break;
      }
      case "OKP": {
        switch (jwk.alg) {
          case "Ed25519":
            algorithm = { name: "Ed25519" };
            keyUsages = jwk.d ? ["sign"] : ["verify"];
            break;
          case "EdDSA":
            algorithm = { name: jwk.crv };
            keyUsages = jwk.d ? ["sign"] : ["verify"];
            break;
          case "ECDH-ES":
          case "ECDH-ES+A128KW":
          case "ECDH-ES+A192KW":
          case "ECDH-ES+A256KW":
            algorithm = { name: jwk.crv };
            keyUsages = jwk.d ? ["deriveBits"] : [];
            break;
          default:
            throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
        }
        break;
      }
      default:
        throw new JOSENotSupported('Invalid or unsupported JWK "kty" (Key Type) Parameter value');
    }
    return { algorithm, keyUsages };
  }
  var parse, jwk_to_key_default;
  var init_jwk_to_key = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/jwk_to_key.js"() {
      init_webcrypto();
      init_errors();
      parse = async (jwk) => {
        if (!jwk.alg) {
          throw new TypeError('"alg" argument is required when "jwk.alg" is not present');
        }
        const { algorithm, keyUsages } = subtleMapping(jwk);
        const rest = [
          algorithm,
          jwk.ext ?? false,
          jwk.key_ops ?? keyUsages
        ];
        const keyData = { ...jwk };
        delete keyData.alg;
        delete keyData.use;
        return webcrypto_default.subtle.importKey("jwk", keyData, ...rest);
      };
      jwk_to_key_default = parse;
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/normalize_key.js
  var exportKeyValue, privCache, pubCache, isKeyObject, importAndCache, normalizePublicKey, normalizePrivateKey, normalize_key_default;
  var init_normalize_key = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/normalize_key.js"() {
      init_is_jwk();
      init_base64url();
      init_jwk_to_key();
      exportKeyValue = (k) => decode2(k);
      isKeyObject = (key) => {
        return key?.[Symbol.toStringTag] === "KeyObject";
      };
      importAndCache = async (cache, key, jwk, alg, freeze = false) => {
        let cached = cache.get(key);
        if (cached?.[alg]) {
          return cached[alg];
        }
        const cryptoKey = await jwk_to_key_default({ ...jwk, alg });
        if (freeze)
          Object.freeze(key);
        if (!cached) {
          cache.set(key, { [alg]: cryptoKey });
        } else {
          cached[alg] = cryptoKey;
        }
        return cryptoKey;
      };
      normalizePublicKey = (key, alg) => {
        if (isKeyObject(key)) {
          let jwk = key.export({ format: "jwk" });
          delete jwk.d;
          delete jwk.dp;
          delete jwk.dq;
          delete jwk.p;
          delete jwk.q;
          delete jwk.qi;
          if (jwk.k) {
            return exportKeyValue(jwk.k);
          }
          pubCache || (pubCache = /* @__PURE__ */ new WeakMap());
          return importAndCache(pubCache, key, jwk, alg);
        }
        if (isJWK(key)) {
          if (key.k)
            return decode2(key.k);
          pubCache || (pubCache = /* @__PURE__ */ new WeakMap());
          const cryptoKey = importAndCache(pubCache, key, key, alg, true);
          return cryptoKey;
        }
        return key;
      };
      normalizePrivateKey = (key, alg) => {
        if (isKeyObject(key)) {
          let jwk = key.export({ format: "jwk" });
          if (jwk.k) {
            return exportKeyValue(jwk.k);
          }
          privCache || (privCache = /* @__PURE__ */ new WeakMap());
          return importAndCache(privCache, key, jwk, alg);
        }
        if (isJWK(key)) {
          if (key.k)
            return decode2(key.k);
          privCache || (privCache = /* @__PURE__ */ new WeakMap());
          const cryptoKey = importAndCache(privCache, key, key, alg, true);
          return cryptoKey;
        }
        return key;
      };
      normalize_key_default = { normalizePublicKey, normalizePrivateKey };
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/cek.js
  function bitLength2(alg) {
    switch (alg) {
      case "A128GCM":
        return 128;
      case "A192GCM":
        return 192;
      case "A256GCM":
      case "A128CBC-HS256":
        return 256;
      case "A192CBC-HS384":
        return 384;
      case "A256CBC-HS512":
        return 512;
      default:
        throw new JOSENotSupported(`Unsupported JWE Algorithm: ${alg}`);
    }
  }
  var cek_default;
  var init_cek = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/cek.js"() {
      init_errors();
      init_random();
      cek_default = (alg) => random_default(new Uint8Array(bitLength2(alg) >> 3));
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/format_pem.js
  var format_pem_default;
  var init_format_pem = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/format_pem.js"() {
      format_pem_default = (b64, descriptor) => {
        const newlined = (b64.match(/.{1,64}/g) || []).join("\n");
        return `-----BEGIN ${descriptor}-----
${newlined}
-----END ${descriptor}-----`;
      };
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/asn1.js
  function getElement(seq) {
    const result = [];
    let next = 0;
    while (next < seq.length) {
      const nextPart = parseElement(seq.subarray(next));
      result.push(nextPart);
      next += nextPart.byteLength;
    }
    return result;
  }
  function parseElement(bytes) {
    let position = 0;
    let tag2 = bytes[0] & 31;
    position++;
    if (tag2 === 31) {
      tag2 = 0;
      while (bytes[position] >= 128) {
        tag2 = tag2 * 128 + bytes[position] - 128;
        position++;
      }
      tag2 = tag2 * 128 + bytes[position] - 128;
      position++;
    }
    let length2 = 0;
    if (bytes[position] < 128) {
      length2 = bytes[position];
      position++;
    } else if (length2 === 128) {
      length2 = 0;
      while (bytes[position + length2] !== 0 || bytes[position + length2 + 1] !== 0) {
        if (length2 > bytes.byteLength) {
          throw new TypeError("invalid indefinite form length");
        }
        length2++;
      }
      const byteLength2 = position + length2 + 2;
      return {
        byteLength: byteLength2,
        contents: bytes.subarray(position, position + length2),
        raw: bytes.subarray(0, byteLength2)
      };
    } else {
      const numberOfDigits = bytes[position] & 127;
      position++;
      length2 = 0;
      for (let i = 0; i < numberOfDigits; i++) {
        length2 = length2 * 256 + bytes[position];
        position++;
      }
    }
    const byteLength = position + length2;
    return {
      byteLength,
      contents: bytes.subarray(position, byteLength),
      raw: bytes.subarray(0, byteLength)
    };
  }
  function spkiFromX509(buf) {
    const tbsCertificate = getElement(getElement(parseElement(buf).contents)[0].contents);
    return encodeBase64(tbsCertificate[tbsCertificate[0].raw[0] === 160 ? 6 : 5].raw);
  }
  function getSPKI(x509) {
    const pem = x509.replace(/(?:-----(?:BEGIN|END) CERTIFICATE-----|\s)/g, "");
    const raw = decodeBase64(pem);
    return format_pem_default(spkiFromX509(raw), "PUBLIC KEY");
  }
  var genericExport, toSPKI, toPKCS8, findOid, getNamedCurve2, genericImport, fromPKCS8, fromSPKI, fromX509;
  var init_asn1 = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/asn1.js"() {
      init_webcrypto();
      init_invalid_key_input();
      init_base64url();
      init_format_pem();
      init_errors();
      init_is_key_like();
      genericExport = async (keyType, keyFormat, key) => {
        if (!isCryptoKey(key)) {
          throw new TypeError(invalid_key_input_default(key, ...types));
        }
        if (!key.extractable) {
          throw new TypeError("CryptoKey is not extractable");
        }
        if (key.type !== keyType) {
          throw new TypeError(`key is not a ${keyType} key`);
        }
        return format_pem_default(encodeBase64(new Uint8Array(await webcrypto_default.subtle.exportKey(keyFormat, key))), `${keyType.toUpperCase()} KEY`);
      };
      toSPKI = (key) => {
        return genericExport("public", "spki", key);
      };
      toPKCS8 = (key) => {
        return genericExport("private", "pkcs8", key);
      };
      findOid = (keyData, oid, from3 = 0) => {
        if (from3 === 0) {
          oid.unshift(oid.length);
          oid.unshift(6);
        }
        const i = keyData.indexOf(oid[0], from3);
        if (i === -1)
          return false;
        const sub = keyData.subarray(i, i + oid.length);
        if (sub.length !== oid.length)
          return false;
        return sub.every((value, index) => value === oid[index]) || findOid(keyData, oid, i + 1);
      };
      getNamedCurve2 = (keyData) => {
        switch (true) {
          case findOid(keyData, [42, 134, 72, 206, 61, 3, 1, 7]):
            return "P-256";
          case findOid(keyData, [43, 129, 4, 0, 34]):
            return "P-384";
          case findOid(keyData, [43, 129, 4, 0, 35]):
            return "P-521";
          case findOid(keyData, [43, 101, 110]):
            return "X25519";
          case findOid(keyData, [43, 101, 111]):
            return "X448";
          case findOid(keyData, [43, 101, 112]):
            return "Ed25519";
          case findOid(keyData, [43, 101, 113]):
            return "Ed448";
          default:
            throw new JOSENotSupported("Invalid or unsupported EC Key Curve or OKP Key Sub Type");
        }
      };
      genericImport = async (replace, keyFormat, pem, alg, options) => {
        let algorithm;
        let keyUsages;
        const keyData = new Uint8Array(atob(pem.replace(replace, "")).split("").map((c) => c.charCodeAt(0)));
        const isPublic = keyFormat === "spki";
        switch (alg) {
          case "PS256":
          case "PS384":
          case "PS512":
            algorithm = { name: "RSA-PSS", hash: `SHA-${alg.slice(-3)}` };
            keyUsages = isPublic ? ["verify"] : ["sign"];
            break;
          case "RS256":
          case "RS384":
          case "RS512":
            algorithm = { name: "RSASSA-PKCS1-v1_5", hash: `SHA-${alg.slice(-3)}` };
            keyUsages = isPublic ? ["verify"] : ["sign"];
            break;
          case "RSA-OAEP":
          case "RSA-OAEP-256":
          case "RSA-OAEP-384":
          case "RSA-OAEP-512":
            algorithm = {
              name: "RSA-OAEP",
              hash: `SHA-${parseInt(alg.slice(-3), 10) || 1}`
            };
            keyUsages = isPublic ? ["encrypt", "wrapKey"] : ["decrypt", "unwrapKey"];
            break;
          case "ES256":
            algorithm = { name: "ECDSA", namedCurve: "P-256" };
            keyUsages = isPublic ? ["verify"] : ["sign"];
            break;
          case "ES384":
            algorithm = { name: "ECDSA", namedCurve: "P-384" };
            keyUsages = isPublic ? ["verify"] : ["sign"];
            break;
          case "ES512":
            algorithm = { name: "ECDSA", namedCurve: "P-521" };
            keyUsages = isPublic ? ["verify"] : ["sign"];
            break;
          case "ECDH-ES":
          case "ECDH-ES+A128KW":
          case "ECDH-ES+A192KW":
          case "ECDH-ES+A256KW": {
            const namedCurve = getNamedCurve2(keyData);
            algorithm = namedCurve.startsWith("P-") ? { name: "ECDH", namedCurve } : { name: namedCurve };
            keyUsages = isPublic ? [] : ["deriveBits"];
            break;
          }
          case "Ed25519":
            algorithm = { name: "Ed25519" };
            keyUsages = isPublic ? ["verify"] : ["sign"];
            break;
          case "EdDSA":
            algorithm = { name: getNamedCurve2(keyData) };
            keyUsages = isPublic ? ["verify"] : ["sign"];
            break;
          default:
            throw new JOSENotSupported('Invalid or unsupported "alg" (Algorithm) value');
        }
        return webcrypto_default.subtle.importKey(keyFormat, keyData, algorithm, options?.extractable ?? false, keyUsages);
      };
      fromPKCS8 = (pem, alg, options) => {
        return genericImport(/(?:-----(?:BEGIN|END) PRIVATE KEY-----|\s)/g, "pkcs8", pem, alg, options);
      };
      fromSPKI = (pem, alg, options) => {
        return genericImport(/(?:-----(?:BEGIN|END) PUBLIC KEY-----|\s)/g, "spki", pem, alg, options);
      };
      fromX509 = (pem, alg, options) => {
        let spki;
        try {
          spki = getSPKI(pem);
        } catch (cause) {
          throw new TypeError("Failed to parse the X.509 certificate", { cause });
        }
        return fromSPKI(spki, alg, options);
      };
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/key/import.js
  async function importSPKI(spki, alg, options) {
    if (typeof spki !== "string" || spki.indexOf("-----BEGIN PUBLIC KEY-----") !== 0) {
      throw new TypeError('"spki" must be SPKI formatted string');
    }
    return fromSPKI(spki, alg, options);
  }
  async function importX509(x509, alg, options) {
    if (typeof x509 !== "string" || x509.indexOf("-----BEGIN CERTIFICATE-----") !== 0) {
      throw new TypeError('"x509" must be X.509 formatted string');
    }
    return fromX509(x509, alg, options);
  }
  async function importPKCS8(pkcs8, alg, options) {
    if (typeof pkcs8 !== "string" || pkcs8.indexOf("-----BEGIN PRIVATE KEY-----") !== 0) {
      throw new TypeError('"pkcs8" must be PKCS#8 formatted string');
    }
    return fromPKCS8(pkcs8, alg, options);
  }
  async function importJWK(jwk, alg) {
    if (!isObject(jwk)) {
      throw new TypeError("JWK must be an object");
    }
    alg || (alg = jwk.alg);
    switch (jwk.kty) {
      case "oct":
        if (typeof jwk.k !== "string" || !jwk.k) {
          throw new TypeError('missing "k" (Key Value) Parameter value');
        }
        return decode2(jwk.k);
      case "RSA":
        if ("oth" in jwk && jwk.oth !== void 0) {
          throw new JOSENotSupported('RSA JWK "oth" (Other Primes Info) Parameter value is not supported');
        }
      case "EC":
      case "OKP":
        return jwk_to_key_default({ ...jwk, alg });
      default:
        throw new JOSENotSupported('Unsupported "kty" (Key Type) Parameter value');
    }
  }
  var init_import = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/key/import.js"() {
      init_base64url();
      init_asn1();
      init_jwk_to_key();
      init_errors();
      init_is_object();
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/check_key_type.js
  function checkKeyType(allowJwk, alg, key, usage) {
    const symmetric = alg.startsWith("HS") || alg === "dir" || alg.startsWith("PBES2") || /^A\d{3}(?:GCM)?KW$/.test(alg);
    if (symmetric) {
      symmetricTypeCheck(alg, key, usage, allowJwk);
    } else {
      asymmetricTypeCheck(alg, key, usage, allowJwk);
    }
  }
  var tag, jwkMatchesOp, symmetricTypeCheck, asymmetricTypeCheck, check_key_type_default, checkKeyTypeWithJwk;
  var init_check_key_type = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/check_key_type.js"() {
      init_invalid_key_input();
      init_is_key_like();
      init_is_jwk();
      tag = (key) => key?.[Symbol.toStringTag];
      jwkMatchesOp = (alg, key, usage) => {
        if (key.use !== void 0 && key.use !== "sig") {
          throw new TypeError("Invalid key for this operation, when present its use must be sig");
        }
        if (key.key_ops !== void 0 && key.key_ops.includes?.(usage) !== true) {
          throw new TypeError(`Invalid key for this operation, when present its key_ops must include ${usage}`);
        }
        if (key.alg !== void 0 && key.alg !== alg) {
          throw new TypeError(`Invalid key for this operation, when present its alg must be ${alg}`);
        }
        return true;
      };
      symmetricTypeCheck = (alg, key, usage, allowJwk) => {
        if (key instanceof Uint8Array)
          return;
        if (allowJwk && isJWK(key)) {
          if (isSecretJWK(key) && jwkMatchesOp(alg, key, usage))
            return;
          throw new TypeError(`JSON Web Key for symmetric algorithms must have JWK "kty" (Key Type) equal to "oct" and the JWK "k" (Key Value) present`);
        }
        if (!is_key_like_default(key)) {
          throw new TypeError(withAlg(alg, key, ...types, "Uint8Array", allowJwk ? "JSON Web Key" : null));
        }
        if (key.type !== "secret") {
          throw new TypeError(`${tag(key)} instances for symmetric algorithms must be of type "secret"`);
        }
      };
      asymmetricTypeCheck = (alg, key, usage, allowJwk) => {
        if (allowJwk && isJWK(key)) {
          switch (usage) {
            case "sign":
              if (isPrivateJWK(key) && jwkMatchesOp(alg, key, usage))
                return;
              throw new TypeError(`JSON Web Key for this operation be a private JWK`);
            case "verify":
              if (isPublicJWK(key) && jwkMatchesOp(alg, key, usage))
                return;
              throw new TypeError(`JSON Web Key for this operation be a public JWK`);
          }
        }
        if (!is_key_like_default(key)) {
          throw new TypeError(withAlg(alg, key, ...types, allowJwk ? "JSON Web Key" : null));
        }
        if (key.type === "secret") {
          throw new TypeError(`${tag(key)} instances for asymmetric algorithms must not be of type "secret"`);
        }
        if (usage === "sign" && key.type === "public") {
          throw new TypeError(`${tag(key)} instances for asymmetric algorithm signing must be of type "private"`);
        }
        if (usage === "decrypt" && key.type === "public") {
          throw new TypeError(`${tag(key)} instances for asymmetric algorithm decryption must be of type "private"`);
        }
        if (key.algorithm && usage === "verify" && key.type === "private") {
          throw new TypeError(`${tag(key)} instances for asymmetric algorithm verifying must be of type "public"`);
        }
        if (key.algorithm && usage === "encrypt" && key.type === "private") {
          throw new TypeError(`${tag(key)} instances for asymmetric algorithm encryption must be of type "public"`);
        }
      };
      check_key_type_default = checkKeyType.bind(void 0, false);
      checkKeyTypeWithJwk = checkKeyType.bind(void 0, true);
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/encrypt.js
  async function cbcEncrypt(enc, plaintext, cek, iv, aad) {
    if (!(cek instanceof Uint8Array)) {
      throw new TypeError(invalid_key_input_default(cek, "Uint8Array"));
    }
    const keySize = parseInt(enc.slice(1, 4), 10);
    const encKey = await webcrypto_default.subtle.importKey("raw", cek.subarray(keySize >> 3), "AES-CBC", false, ["encrypt"]);
    const macKey = await webcrypto_default.subtle.importKey("raw", cek.subarray(0, keySize >> 3), {
      hash: `SHA-${keySize << 1}`,
      name: "HMAC"
    }, false, ["sign"]);
    const ciphertext = new Uint8Array(await webcrypto_default.subtle.encrypt({
      iv,
      name: "AES-CBC"
    }, encKey, plaintext));
    const macData = concat(aad, iv, ciphertext, uint64be(aad.length << 3));
    const tag2 = new Uint8Array((await webcrypto_default.subtle.sign("HMAC", macKey, macData)).slice(0, keySize >> 3));
    return { ciphertext, tag: tag2, iv };
  }
  async function gcmEncrypt(enc, plaintext, cek, iv, aad) {
    let encKey;
    if (cek instanceof Uint8Array) {
      encKey = await webcrypto_default.subtle.importKey("raw", cek, "AES-GCM", false, ["encrypt"]);
    } else {
      checkEncCryptoKey(cek, enc, "encrypt");
      encKey = cek;
    }
    const encrypted = new Uint8Array(await webcrypto_default.subtle.encrypt({
      additionalData: aad,
      iv,
      name: "AES-GCM",
      tagLength: 128
    }, encKey, plaintext));
    const tag2 = encrypted.slice(-16);
    const ciphertext = encrypted.slice(0, -16);
    return { ciphertext, tag: tag2, iv };
  }
  var encrypt3, encrypt_default;
  var init_encrypt = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/encrypt.js"() {
      init_buffer_utils();
      init_check_iv_length();
      init_check_cek_length();
      init_webcrypto();
      init_crypto_key();
      init_invalid_key_input();
      init_iv();
      init_errors();
      init_is_key_like();
      encrypt3 = async (enc, plaintext, cek, iv, aad) => {
        if (!isCryptoKey(cek) && !(cek instanceof Uint8Array)) {
          throw new TypeError(invalid_key_input_default(cek, ...types, "Uint8Array"));
        }
        if (iv) {
          check_iv_length_default(enc, iv);
        } else {
          iv = iv_default(enc);
        }
        switch (enc) {
          case "A128CBC-HS256":
          case "A192CBC-HS384":
          case "A256CBC-HS512":
            if (cek instanceof Uint8Array) {
              check_cek_length_default(cek, parseInt(enc.slice(-3), 10));
            }
            return cbcEncrypt(enc, plaintext, cek, iv, aad);
          case "A128GCM":
          case "A192GCM":
          case "A256GCM":
            if (cek instanceof Uint8Array) {
              check_cek_length_default(cek, parseInt(enc.slice(1, 4), 10));
            }
            return gcmEncrypt(enc, plaintext, cek, iv, aad);
          default:
            throw new JOSENotSupported("Unsupported JWE Content Encryption Algorithm");
        }
      };
      encrypt_default = encrypt3;
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/aesgcmkw.js
  async function wrap2(alg, key, cek, iv) {
    const jweAlgorithm = alg.slice(0, 7);
    const wrapped = await encrypt_default(jweAlgorithm, cek, key, iv, new Uint8Array(0));
    return {
      encryptedKey: wrapped.ciphertext,
      iv: encode2(wrapped.iv),
      tag: encode2(wrapped.tag)
    };
  }
  async function unwrap2(alg, key, encryptedKey, iv, tag2) {
    const jweAlgorithm = alg.slice(0, 7);
    return decrypt_default(jweAlgorithm, key, encryptedKey, iv, tag2, new Uint8Array(0));
  }
  var init_aesgcmkw = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/aesgcmkw.js"() {
      init_encrypt();
      init_decrypt();
      init_base64url();
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/decrypt_key_management.js
  async function decryptKeyManagement(alg, key, encryptedKey, joseHeader, options) {
    check_key_type_default(alg, key, "decrypt");
    key = await normalize_key_default.normalizePrivateKey?.(key, alg) || key;
    switch (alg) {
      case "dir": {
        if (encryptedKey !== void 0)
          throw new JWEInvalid("Encountered unexpected JWE Encrypted Key");
        return key;
      }
      case "ECDH-ES":
        if (encryptedKey !== void 0)
          throw new JWEInvalid("Encountered unexpected JWE Encrypted Key");
      case "ECDH-ES+A128KW":
      case "ECDH-ES+A192KW":
      case "ECDH-ES+A256KW": {
        if (!isObject(joseHeader.epk))
          throw new JWEInvalid(`JOSE Header "epk" (Ephemeral Public Key) missing or invalid`);
        if (!ecdhAllowed(key))
          throw new JOSENotSupported("ECDH with the provided key is not allowed or not supported by your javascript runtime");
        const epk = await importJWK(joseHeader.epk, alg);
        let partyUInfo;
        let partyVInfo;
        if (joseHeader.apu !== void 0) {
          if (typeof joseHeader.apu !== "string")
            throw new JWEInvalid(`JOSE Header "apu" (Agreement PartyUInfo) invalid`);
          try {
            partyUInfo = decode2(joseHeader.apu);
          } catch {
            throw new JWEInvalid("Failed to base64url decode the apu");
          }
        }
        if (joseHeader.apv !== void 0) {
          if (typeof joseHeader.apv !== "string")
            throw new JWEInvalid(`JOSE Header "apv" (Agreement PartyVInfo) invalid`);
          try {
            partyVInfo = decode2(joseHeader.apv);
          } catch {
            throw new JWEInvalid("Failed to base64url decode the apv");
          }
        }
        const sharedSecret = await deriveKey(epk, key, alg === "ECDH-ES" ? joseHeader.enc : alg, alg === "ECDH-ES" ? bitLength2(joseHeader.enc) : parseInt(alg.slice(-5, -2), 10), partyUInfo, partyVInfo);
        if (alg === "ECDH-ES")
          return sharedSecret;
        if (encryptedKey === void 0)
          throw new JWEInvalid("JWE Encrypted Key missing");
        return unwrap(alg.slice(-6), sharedSecret, encryptedKey);
      }
      case "RSA1_5":
      case "RSA-OAEP":
      case "RSA-OAEP-256":
      case "RSA-OAEP-384":
      case "RSA-OAEP-512": {
        if (encryptedKey === void 0)
          throw new JWEInvalid("JWE Encrypted Key missing");
        return decrypt3(alg, key, encryptedKey);
      }
      case "PBES2-HS256+A128KW":
      case "PBES2-HS384+A192KW":
      case "PBES2-HS512+A256KW": {
        if (encryptedKey === void 0)
          throw new JWEInvalid("JWE Encrypted Key missing");
        if (typeof joseHeader.p2c !== "number")
          throw new JWEInvalid(`JOSE Header "p2c" (PBES2 Count) missing or invalid`);
        const p2cLimit = options?.maxPBES2Count || 1e4;
        if (joseHeader.p2c > p2cLimit)
          throw new JWEInvalid(`JOSE Header "p2c" (PBES2 Count) out is of acceptable bounds`);
        if (typeof joseHeader.p2s !== "string")
          throw new JWEInvalid(`JOSE Header "p2s" (PBES2 Salt) missing or invalid`);
        let p2s2;
        try {
          p2s2 = decode2(joseHeader.p2s);
        } catch {
          throw new JWEInvalid("Failed to base64url decode the p2s");
        }
        return decrypt2(alg, key, encryptedKey, joseHeader.p2c, p2s2);
      }
      case "A128KW":
      case "A192KW":
      case "A256KW": {
        if (encryptedKey === void 0)
          throw new JWEInvalid("JWE Encrypted Key missing");
        return unwrap(alg, key, encryptedKey);
      }
      case "A128GCMKW":
      case "A192GCMKW":
      case "A256GCMKW": {
        if (encryptedKey === void 0)
          throw new JWEInvalid("JWE Encrypted Key missing");
        if (typeof joseHeader.iv !== "string")
          throw new JWEInvalid(`JOSE Header "iv" (Initialization Vector) missing or invalid`);
        if (typeof joseHeader.tag !== "string")
          throw new JWEInvalid(`JOSE Header "tag" (Authentication Tag) missing or invalid`);
        let iv;
        try {
          iv = decode2(joseHeader.iv);
        } catch {
          throw new JWEInvalid("Failed to base64url decode the iv");
        }
        let tag2;
        try {
          tag2 = decode2(joseHeader.tag);
        } catch {
          throw new JWEInvalid("Failed to base64url decode the tag");
        }
        return unwrap2(alg, key, encryptedKey, iv, tag2);
      }
      default: {
        throw new JOSENotSupported('Invalid or unsupported "alg" (JWE Algorithm) header value');
      }
    }
  }
  var decrypt_key_management_default;
  var init_decrypt_key_management = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/decrypt_key_management.js"() {
      init_aeskw();
      init_ecdhes();
      init_pbes2kw();
      init_rsaes();
      init_base64url();
      init_normalize_key();
      init_errors();
      init_cek();
      init_import();
      init_check_key_type();
      init_is_object();
      init_aesgcmkw();
      decrypt_key_management_default = decryptKeyManagement;
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/validate_crit.js
  function validateCrit(Err, recognizedDefault, recognizedOption, protectedHeader, joseHeader) {
    if (joseHeader.crit !== void 0 && protectedHeader?.crit === void 0) {
      throw new Err('"crit" (Critical) Header Parameter MUST be integrity protected');
    }
    if (!protectedHeader || protectedHeader.crit === void 0) {
      return /* @__PURE__ */ new Set();
    }
    if (!Array.isArray(protectedHeader.crit) || protectedHeader.crit.length === 0 || protectedHeader.crit.some((input) => typeof input !== "string" || input.length === 0)) {
      throw new Err('"crit" (Critical) Header Parameter MUST be an array of non-empty strings when present');
    }
    let recognized;
    if (recognizedOption !== void 0) {
      recognized = new Map([...Object.entries(recognizedOption), ...recognizedDefault.entries()]);
    } else {
      recognized = recognizedDefault;
    }
    for (const parameter of protectedHeader.crit) {
      if (!recognized.has(parameter)) {
        throw new JOSENotSupported(`Extension Header Parameter "${parameter}" is not recognized`);
      }
      if (joseHeader[parameter] === void 0) {
        throw new Err(`Extension Header Parameter "${parameter}" is missing`);
      }
      if (recognized.get(parameter) && protectedHeader[parameter] === void 0) {
        throw new Err(`Extension Header Parameter "${parameter}" MUST be integrity protected`);
      }
    }
    return new Set(protectedHeader.crit);
  }
  var validate_crit_default;
  var init_validate_crit = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/validate_crit.js"() {
      init_errors();
      validate_crit_default = validateCrit;
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/validate_algorithms.js
  var validateAlgorithms, validate_algorithms_default;
  var init_validate_algorithms = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/validate_algorithms.js"() {
      validateAlgorithms = (option, algorithms) => {
        if (algorithms !== void 0 && (!Array.isArray(algorithms) || algorithms.some((s) => typeof s !== "string"))) {
          throw new TypeError(`"${option}" option must be an array of strings`);
        }
        if (!algorithms) {
          return void 0;
        }
        return new Set(algorithms);
      };
      validate_algorithms_default = validateAlgorithms;
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwe/flattened/decrypt.js
  async function flattenedDecrypt(jwe, key, options) {
    if (!isObject(jwe)) {
      throw new JWEInvalid("Flattened JWE must be an object");
    }
    if (jwe.protected === void 0 && jwe.header === void 0 && jwe.unprotected === void 0) {
      throw new JWEInvalid("JOSE Header missing");
    }
    if (jwe.iv !== void 0 && typeof jwe.iv !== "string") {
      throw new JWEInvalid("JWE Initialization Vector incorrect type");
    }
    if (typeof jwe.ciphertext !== "string") {
      throw new JWEInvalid("JWE Ciphertext missing or incorrect type");
    }
    if (jwe.tag !== void 0 && typeof jwe.tag !== "string") {
      throw new JWEInvalid("JWE Authentication Tag incorrect type");
    }
    if (jwe.protected !== void 0 && typeof jwe.protected !== "string") {
      throw new JWEInvalid("JWE Protected Header incorrect type");
    }
    if (jwe.encrypted_key !== void 0 && typeof jwe.encrypted_key !== "string") {
      throw new JWEInvalid("JWE Encrypted Key incorrect type");
    }
    if (jwe.aad !== void 0 && typeof jwe.aad !== "string") {
      throw new JWEInvalid("JWE AAD incorrect type");
    }
    if (jwe.header !== void 0 && !isObject(jwe.header)) {
      throw new JWEInvalid("JWE Shared Unprotected Header incorrect type");
    }
    if (jwe.unprotected !== void 0 && !isObject(jwe.unprotected)) {
      throw new JWEInvalid("JWE Per-Recipient Unprotected Header incorrect type");
    }
    let parsedProt;
    if (jwe.protected) {
      try {
        const protectedHeader2 = decode2(jwe.protected);
        parsedProt = JSON.parse(decoder.decode(protectedHeader2));
      } catch {
        throw new JWEInvalid("JWE Protected Header is invalid");
      }
    }
    if (!is_disjoint_default(parsedProt, jwe.header, jwe.unprotected)) {
      throw new JWEInvalid("JWE Protected, JWE Unprotected Header, and JWE Per-Recipient Unprotected Header Parameter names must be disjoint");
    }
    const joseHeader = {
      ...parsedProt,
      ...jwe.header,
      ...jwe.unprotected
    };
    validate_crit_default(JWEInvalid, /* @__PURE__ */ new Map(), options?.crit, parsedProt, joseHeader);
    if (joseHeader.zip !== void 0) {
      throw new JOSENotSupported('JWE "zip" (Compression Algorithm) Header Parameter is not supported.');
    }
    const { alg, enc } = joseHeader;
    if (typeof alg !== "string" || !alg) {
      throw new JWEInvalid("missing JWE Algorithm (alg) in JWE Header");
    }
    if (typeof enc !== "string" || !enc) {
      throw new JWEInvalid("missing JWE Encryption Algorithm (enc) in JWE Header");
    }
    const keyManagementAlgorithms = options && validate_algorithms_default("keyManagementAlgorithms", options.keyManagementAlgorithms);
    const contentEncryptionAlgorithms = options && validate_algorithms_default("contentEncryptionAlgorithms", options.contentEncryptionAlgorithms);
    if (keyManagementAlgorithms && !keyManagementAlgorithms.has(alg) || !keyManagementAlgorithms && alg.startsWith("PBES2")) {
      throw new JOSEAlgNotAllowed('"alg" (Algorithm) Header Parameter value not allowed');
    }
    if (contentEncryptionAlgorithms && !contentEncryptionAlgorithms.has(enc)) {
      throw new JOSEAlgNotAllowed('"enc" (Encryption Algorithm) Header Parameter value not allowed');
    }
    let encryptedKey;
    if (jwe.encrypted_key !== void 0) {
      try {
        encryptedKey = decode2(jwe.encrypted_key);
      } catch {
        throw new JWEInvalid("Failed to base64url decode the encrypted_key");
      }
    }
    let resolvedKey = false;
    if (typeof key === "function") {
      key = await key(parsedProt, jwe);
      resolvedKey = true;
    }
    let cek;
    try {
      cek = await decrypt_key_management_default(alg, key, encryptedKey, joseHeader, options);
    } catch (err) {
      if (err instanceof TypeError || err instanceof JWEInvalid || err instanceof JOSENotSupported) {
        throw err;
      }
      cek = cek_default(enc);
    }
    let iv;
    let tag2;
    if (jwe.iv !== void 0) {
      try {
        iv = decode2(jwe.iv);
      } catch {
        throw new JWEInvalid("Failed to base64url decode the iv");
      }
    }
    if (jwe.tag !== void 0) {
      try {
        tag2 = decode2(jwe.tag);
      } catch {
        throw new JWEInvalid("Failed to base64url decode the tag");
      }
    }
    const protectedHeader = encoder.encode(jwe.protected ?? "");
    let additionalData;
    if (jwe.aad !== void 0) {
      additionalData = concat(protectedHeader, encoder.encode("."), encoder.encode(jwe.aad));
    } else {
      additionalData = protectedHeader;
    }
    let ciphertext;
    try {
      ciphertext = decode2(jwe.ciphertext);
    } catch {
      throw new JWEInvalid("Failed to base64url decode the ciphertext");
    }
    const plaintext = await decrypt_default(enc, cek, ciphertext, iv, tag2, additionalData);
    const result = { plaintext };
    if (jwe.protected !== void 0) {
      result.protectedHeader = parsedProt;
    }
    if (jwe.aad !== void 0) {
      try {
        result.additionalAuthenticatedData = decode2(jwe.aad);
      } catch {
        throw new JWEInvalid("Failed to base64url decode the aad");
      }
    }
    if (jwe.unprotected !== void 0) {
      result.sharedUnprotectedHeader = jwe.unprotected;
    }
    if (jwe.header !== void 0) {
      result.unprotectedHeader = jwe.header;
    }
    if (resolvedKey) {
      return { ...result, key };
    }
    return result;
  }
  var init_decrypt2 = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwe/flattened/decrypt.js"() {
      init_base64url();
      init_decrypt();
      init_errors();
      init_is_disjoint();
      init_is_object();
      init_decrypt_key_management();
      init_buffer_utils();
      init_cek();
      init_validate_crit();
      init_validate_algorithms();
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwe/compact/decrypt.js
  async function compactDecrypt(jwe, key, options) {
    if (jwe instanceof Uint8Array) {
      jwe = decoder.decode(jwe);
    }
    if (typeof jwe !== "string") {
      throw new JWEInvalid("Compact JWE must be a string or Uint8Array");
    }
    const { 0: protectedHeader, 1: encryptedKey, 2: iv, 3: ciphertext, 4: tag2, length: length2 } = jwe.split(".");
    if (length2 !== 5) {
      throw new JWEInvalid("Invalid Compact JWE");
    }
    const decrypted = await flattenedDecrypt({
      ciphertext,
      iv: iv || void 0,
      protected: protectedHeader,
      tag: tag2 || void 0,
      encrypted_key: encryptedKey || void 0
    }, key, options);
    const result = { plaintext: decrypted.plaintext, protectedHeader: decrypted.protectedHeader };
    if (typeof key === "function") {
      return { ...result, key: decrypted.key };
    }
    return result;
  }
  var init_decrypt3 = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwe/compact/decrypt.js"() {
      init_decrypt2();
      init_errors();
      init_buffer_utils();
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwe/general/decrypt.js
  async function generalDecrypt(jwe, key, options) {
    if (!isObject(jwe)) {
      throw new JWEInvalid("General JWE must be an object");
    }
    if (!Array.isArray(jwe.recipients) || !jwe.recipients.every(isObject)) {
      throw new JWEInvalid("JWE Recipients missing or incorrect type");
    }
    if (!jwe.recipients.length) {
      throw new JWEInvalid("JWE Recipients has no members");
    }
    for (const recipient of jwe.recipients) {
      try {
        return await flattenedDecrypt({
          aad: jwe.aad,
          ciphertext: jwe.ciphertext,
          encrypted_key: recipient.encrypted_key,
          header: recipient.header,
          iv: jwe.iv,
          protected: jwe.protected,
          tag: jwe.tag,
          unprotected: jwe.unprotected
        }, key, options);
      } catch {
      }
    }
    throw new JWEDecryptionFailed();
  }
  var init_decrypt4 = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwe/general/decrypt.js"() {
      init_decrypt2();
      init_errors();
      init_is_object();
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/private_symbols.js
  var unprotected;
  var init_private_symbols = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/private_symbols.js"() {
      unprotected = Symbol();
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/key_to_jwk.js
  var keyToJWK, key_to_jwk_default;
  var init_key_to_jwk = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/key_to_jwk.js"() {
      init_webcrypto();
      init_invalid_key_input();
      init_base64url();
      init_is_key_like();
      keyToJWK = async (key) => {
        if (key instanceof Uint8Array) {
          return {
            kty: "oct",
            k: encode2(key)
          };
        }
        if (!isCryptoKey(key)) {
          throw new TypeError(invalid_key_input_default(key, ...types, "Uint8Array"));
        }
        if (!key.extractable) {
          throw new TypeError("non-extractable CryptoKey cannot be exported as a JWK");
        }
        const { ext, key_ops, alg, use, ...jwk } = await webcrypto_default.subtle.exportKey("jwk", key);
        return jwk;
      };
      key_to_jwk_default = keyToJWK;
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/key/export.js
  async function exportSPKI(key) {
    return toSPKI(key);
  }
  async function exportPKCS8(key) {
    return toPKCS8(key);
  }
  async function exportJWK(key) {
    return key_to_jwk_default(key);
  }
  var init_export = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/key/export.js"() {
      init_asn1();
      init_asn1();
      init_key_to_jwk();
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/encrypt_key_management.js
  async function encryptKeyManagement(alg, enc, key, providedCek, providedParameters = {}) {
    let encryptedKey;
    let parameters;
    let cek;
    check_key_type_default(alg, key, "encrypt");
    key = await normalize_key_default.normalizePublicKey?.(key, alg) || key;
    switch (alg) {
      case "dir": {
        cek = key;
        break;
      }
      case "ECDH-ES":
      case "ECDH-ES+A128KW":
      case "ECDH-ES+A192KW":
      case "ECDH-ES+A256KW": {
        if (!ecdhAllowed(key)) {
          throw new JOSENotSupported("ECDH with the provided key is not allowed or not supported by your javascript runtime");
        }
        const { apu, apv } = providedParameters;
        let { epk: ephemeralKey } = providedParameters;
        ephemeralKey || (ephemeralKey = (await generateEpk(key)).privateKey);
        const { x, y, crv, kty } = await exportJWK(ephemeralKey);
        const sharedSecret = await deriveKey(key, ephemeralKey, alg === "ECDH-ES" ? enc : alg, alg === "ECDH-ES" ? bitLength2(enc) : parseInt(alg.slice(-5, -2), 10), apu, apv);
        parameters = { epk: { x, crv, kty } };
        if (kty === "EC")
          parameters.epk.y = y;
        if (apu)
          parameters.apu = encode2(apu);
        if (apv)
          parameters.apv = encode2(apv);
        if (alg === "ECDH-ES") {
          cek = sharedSecret;
          break;
        }
        cek = providedCek || cek_default(enc);
        const kwAlg = alg.slice(-6);
        encryptedKey = await wrap(kwAlg, sharedSecret, cek);
        break;
      }
      case "RSA1_5":
      case "RSA-OAEP":
      case "RSA-OAEP-256":
      case "RSA-OAEP-384":
      case "RSA-OAEP-512": {
        cek = providedCek || cek_default(enc);
        encryptedKey = await encrypt2(alg, key, cek);
        break;
      }
      case "PBES2-HS256+A128KW":
      case "PBES2-HS384+A192KW":
      case "PBES2-HS512+A256KW": {
        cek = providedCek || cek_default(enc);
        const { p2c, p2s: p2s2 } = providedParameters;
        ({ encryptedKey, ...parameters } = await encrypt(alg, key, cek, p2c, p2s2));
        break;
      }
      case "A128KW":
      case "A192KW":
      case "A256KW": {
        cek = providedCek || cek_default(enc);
        encryptedKey = await wrap(alg, key, cek);
        break;
      }
      case "A128GCMKW":
      case "A192GCMKW":
      case "A256GCMKW": {
        cek = providedCek || cek_default(enc);
        const { iv } = providedParameters;
        ({ encryptedKey, ...parameters } = await wrap2(alg, key, cek, iv));
        break;
      }
      default: {
        throw new JOSENotSupported('Invalid or unsupported "alg" (JWE Algorithm) header value');
      }
    }
    return { cek, encryptedKey, parameters };
  }
  var encrypt_key_management_default;
  var init_encrypt_key_management = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/encrypt_key_management.js"() {
      init_aeskw();
      init_ecdhes();
      init_pbes2kw();
      init_rsaes();
      init_base64url();
      init_normalize_key();
      init_cek();
      init_errors();
      init_export();
      init_check_key_type();
      init_aesgcmkw();
      encrypt_key_management_default = encryptKeyManagement;
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwe/flattened/encrypt.js
  var FlattenedEncrypt;
  var init_encrypt2 = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwe/flattened/encrypt.js"() {
      init_base64url();
      init_private_symbols();
      init_encrypt();
      init_encrypt_key_management();
      init_errors();
      init_is_disjoint();
      init_buffer_utils();
      init_validate_crit();
      FlattenedEncrypt = class {
        constructor(plaintext) {
          if (!(plaintext instanceof Uint8Array)) {
            throw new TypeError("plaintext must be an instance of Uint8Array");
          }
          this._plaintext = plaintext;
        }
        setKeyManagementParameters(parameters) {
          if (this._keyManagementParameters) {
            throw new TypeError("setKeyManagementParameters can only be called once");
          }
          this._keyManagementParameters = parameters;
          return this;
        }
        setProtectedHeader(protectedHeader) {
          if (this._protectedHeader) {
            throw new TypeError("setProtectedHeader can only be called once");
          }
          this._protectedHeader = protectedHeader;
          return this;
        }
        setSharedUnprotectedHeader(sharedUnprotectedHeader) {
          if (this._sharedUnprotectedHeader) {
            throw new TypeError("setSharedUnprotectedHeader can only be called once");
          }
          this._sharedUnprotectedHeader = sharedUnprotectedHeader;
          return this;
        }
        setUnprotectedHeader(unprotectedHeader) {
          if (this._unprotectedHeader) {
            throw new TypeError("setUnprotectedHeader can only be called once");
          }
          this._unprotectedHeader = unprotectedHeader;
          return this;
        }
        setAdditionalAuthenticatedData(aad) {
          this._aad = aad;
          return this;
        }
        setContentEncryptionKey(cek) {
          if (this._cek) {
            throw new TypeError("setContentEncryptionKey can only be called once");
          }
          this._cek = cek;
          return this;
        }
        setInitializationVector(iv) {
          if (this._iv) {
            throw new TypeError("setInitializationVector can only be called once");
          }
          this._iv = iv;
          return this;
        }
        async encrypt(key, options) {
          if (!this._protectedHeader && !this._unprotectedHeader && !this._sharedUnprotectedHeader) {
            throw new JWEInvalid("either setProtectedHeader, setUnprotectedHeader, or sharedUnprotectedHeader must be called before #encrypt()");
          }
          if (!is_disjoint_default(this._protectedHeader, this._unprotectedHeader, this._sharedUnprotectedHeader)) {
            throw new JWEInvalid("JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint");
          }
          const joseHeader = {
            ...this._protectedHeader,
            ...this._unprotectedHeader,
            ...this._sharedUnprotectedHeader
          };
          validate_crit_default(JWEInvalid, /* @__PURE__ */ new Map(), options?.crit, this._protectedHeader, joseHeader);
          if (joseHeader.zip !== void 0) {
            throw new JOSENotSupported('JWE "zip" (Compression Algorithm) Header Parameter is not supported.');
          }
          const { alg, enc } = joseHeader;
          if (typeof alg !== "string" || !alg) {
            throw new JWEInvalid('JWE "alg" (Algorithm) Header Parameter missing or invalid');
          }
          if (typeof enc !== "string" || !enc) {
            throw new JWEInvalid('JWE "enc" (Encryption Algorithm) Header Parameter missing or invalid');
          }
          let encryptedKey;
          if (this._cek && (alg === "dir" || alg === "ECDH-ES")) {
            throw new TypeError(`setContentEncryptionKey cannot be called with JWE "alg" (Algorithm) Header ${alg}`);
          }
          let cek;
          {
            let parameters;
            ({ cek, encryptedKey, parameters } = await encrypt_key_management_default(alg, enc, key, this._cek, this._keyManagementParameters));
            if (parameters) {
              if (options && unprotected in options) {
                if (!this._unprotectedHeader) {
                  this.setUnprotectedHeader(parameters);
                } else {
                  this._unprotectedHeader = { ...this._unprotectedHeader, ...parameters };
                }
              } else if (!this._protectedHeader) {
                this.setProtectedHeader(parameters);
              } else {
                this._protectedHeader = { ...this._protectedHeader, ...parameters };
              }
            }
          }
          let additionalData;
          let protectedHeader;
          let aadMember;
          if (this._protectedHeader) {
            protectedHeader = encoder.encode(encode2(JSON.stringify(this._protectedHeader)));
          } else {
            protectedHeader = encoder.encode("");
          }
          if (this._aad) {
            aadMember = encode2(this._aad);
            additionalData = concat(protectedHeader, encoder.encode("."), encoder.encode(aadMember));
          } else {
            additionalData = protectedHeader;
          }
          const { ciphertext, tag: tag2, iv } = await encrypt_default(enc, this._plaintext, cek, this._iv, additionalData);
          const jwe = {
            ciphertext: encode2(ciphertext)
          };
          if (iv) {
            jwe.iv = encode2(iv);
          }
          if (tag2) {
            jwe.tag = encode2(tag2);
          }
          if (encryptedKey) {
            jwe.encrypted_key = encode2(encryptedKey);
          }
          if (aadMember) {
            jwe.aad = aadMember;
          }
          if (this._protectedHeader) {
            jwe.protected = decoder.decode(protectedHeader);
          }
          if (this._sharedUnprotectedHeader) {
            jwe.unprotected = this._sharedUnprotectedHeader;
          }
          if (this._unprotectedHeader) {
            jwe.header = this._unprotectedHeader;
          }
          return jwe;
        }
      };
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwe/general/encrypt.js
  var IndividualRecipient, GeneralEncrypt;
  var init_encrypt3 = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwe/general/encrypt.js"() {
      init_encrypt2();
      init_private_symbols();
      init_errors();
      init_cek();
      init_is_disjoint();
      init_encrypt_key_management();
      init_base64url();
      init_validate_crit();
      IndividualRecipient = class {
        constructor(enc, key, options) {
          this.parent = enc;
          this.key = key;
          this.options = options;
        }
        setUnprotectedHeader(unprotectedHeader) {
          if (this.unprotectedHeader) {
            throw new TypeError("setUnprotectedHeader can only be called once");
          }
          this.unprotectedHeader = unprotectedHeader;
          return this;
        }
        addRecipient(...args) {
          return this.parent.addRecipient(...args);
        }
        encrypt(...args) {
          return this.parent.encrypt(...args);
        }
        done() {
          return this.parent;
        }
      };
      GeneralEncrypt = class {
        constructor(plaintext) {
          this._recipients = [];
          this._plaintext = plaintext;
        }
        addRecipient(key, options) {
          const recipient = new IndividualRecipient(this, key, { crit: options?.crit });
          this._recipients.push(recipient);
          return recipient;
        }
        setProtectedHeader(protectedHeader) {
          if (this._protectedHeader) {
            throw new TypeError("setProtectedHeader can only be called once");
          }
          this._protectedHeader = protectedHeader;
          return this;
        }
        setSharedUnprotectedHeader(sharedUnprotectedHeader) {
          if (this._unprotectedHeader) {
            throw new TypeError("setSharedUnprotectedHeader can only be called once");
          }
          this._unprotectedHeader = sharedUnprotectedHeader;
          return this;
        }
        setAdditionalAuthenticatedData(aad) {
          this._aad = aad;
          return this;
        }
        async encrypt() {
          if (!this._recipients.length) {
            throw new JWEInvalid("at least one recipient must be added");
          }
          if (this._recipients.length === 1) {
            const [recipient] = this._recipients;
            const flattened = await new FlattenedEncrypt(this._plaintext).setAdditionalAuthenticatedData(this._aad).setProtectedHeader(this._protectedHeader).setSharedUnprotectedHeader(this._unprotectedHeader).setUnprotectedHeader(recipient.unprotectedHeader).encrypt(recipient.key, { ...recipient.options });
            const jwe2 = {
              ciphertext: flattened.ciphertext,
              iv: flattened.iv,
              recipients: [{}],
              tag: flattened.tag
            };
            if (flattened.aad)
              jwe2.aad = flattened.aad;
            if (flattened.protected)
              jwe2.protected = flattened.protected;
            if (flattened.unprotected)
              jwe2.unprotected = flattened.unprotected;
            if (flattened.encrypted_key)
              jwe2.recipients[0].encrypted_key = flattened.encrypted_key;
            if (flattened.header)
              jwe2.recipients[0].header = flattened.header;
            return jwe2;
          }
          let enc;
          for (let i = 0; i < this._recipients.length; i++) {
            const recipient = this._recipients[i];
            if (!is_disjoint_default(this._protectedHeader, this._unprotectedHeader, recipient.unprotectedHeader)) {
              throw new JWEInvalid("JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint");
            }
            const joseHeader = {
              ...this._protectedHeader,
              ...this._unprotectedHeader,
              ...recipient.unprotectedHeader
            };
            const { alg } = joseHeader;
            if (typeof alg !== "string" || !alg) {
              throw new JWEInvalid('JWE "alg" (Algorithm) Header Parameter missing or invalid');
            }
            if (alg === "dir" || alg === "ECDH-ES") {
              throw new JWEInvalid('"dir" and "ECDH-ES" alg may only be used with a single recipient');
            }
            if (typeof joseHeader.enc !== "string" || !joseHeader.enc) {
              throw new JWEInvalid('JWE "enc" (Encryption Algorithm) Header Parameter missing or invalid');
            }
            if (!enc) {
              enc = joseHeader.enc;
            } else if (enc !== joseHeader.enc) {
              throw new JWEInvalid('JWE "enc" (Encryption Algorithm) Header Parameter must be the same for all recipients');
            }
            validate_crit_default(JWEInvalid, /* @__PURE__ */ new Map(), recipient.options.crit, this._protectedHeader, joseHeader);
            if (joseHeader.zip !== void 0) {
              throw new JOSENotSupported('JWE "zip" (Compression Algorithm) Header Parameter is not supported.');
            }
          }
          const cek = cek_default(enc);
          const jwe = {
            ciphertext: "",
            iv: "",
            recipients: [],
            tag: ""
          };
          for (let i = 0; i < this._recipients.length; i++) {
            const recipient = this._recipients[i];
            const target = {};
            jwe.recipients.push(target);
            const joseHeader = {
              ...this._protectedHeader,
              ...this._unprotectedHeader,
              ...recipient.unprotectedHeader
            };
            const p2c = joseHeader.alg.startsWith("PBES2") ? 2048 + i : void 0;
            if (i === 0) {
              const flattened = await new FlattenedEncrypt(this._plaintext).setAdditionalAuthenticatedData(this._aad).setContentEncryptionKey(cek).setProtectedHeader(this._protectedHeader).setSharedUnprotectedHeader(this._unprotectedHeader).setUnprotectedHeader(recipient.unprotectedHeader).setKeyManagementParameters({ p2c }).encrypt(recipient.key, {
                ...recipient.options,
                [unprotected]: true
              });
              jwe.ciphertext = flattened.ciphertext;
              jwe.iv = flattened.iv;
              jwe.tag = flattened.tag;
              if (flattened.aad)
                jwe.aad = flattened.aad;
              if (flattened.protected)
                jwe.protected = flattened.protected;
              if (flattened.unprotected)
                jwe.unprotected = flattened.unprotected;
              target.encrypted_key = flattened.encrypted_key;
              if (flattened.header)
                target.header = flattened.header;
              continue;
            }
            const { encryptedKey, parameters } = await encrypt_key_management_default(recipient.unprotectedHeader?.alg || this._protectedHeader?.alg || this._unprotectedHeader?.alg, enc, recipient.key, cek, { p2c });
            target.encrypted_key = encode2(encryptedKey);
            if (recipient.unprotectedHeader || parameters)
              target.header = { ...recipient.unprotectedHeader, ...parameters };
          }
          return jwe;
        }
      };
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/subtle_dsa.js
  function subtleDsa(alg, algorithm) {
    const hash = `SHA-${alg.slice(-3)}`;
    switch (alg) {
      case "HS256":
      case "HS384":
      case "HS512":
        return { hash, name: "HMAC" };
      case "PS256":
      case "PS384":
      case "PS512":
        return { hash, name: "RSA-PSS", saltLength: alg.slice(-3) >> 3 };
      case "RS256":
      case "RS384":
      case "RS512":
        return { hash, name: "RSASSA-PKCS1-v1_5" };
      case "ES256":
      case "ES384":
      case "ES512":
        return { hash, name: "ECDSA", namedCurve: algorithm.namedCurve };
      case "Ed25519":
        return { name: "Ed25519" };
      case "EdDSA":
        return { name: algorithm.name };
      default:
        throw new JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);
    }
  }
  var init_subtle_dsa = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/subtle_dsa.js"() {
      init_errors();
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/get_sign_verify_key.js
  async function getCryptoKey3(alg, key, usage) {
    if (usage === "sign") {
      key = await normalize_key_default.normalizePrivateKey(key, alg);
    }
    if (usage === "verify") {
      key = await normalize_key_default.normalizePublicKey(key, alg);
    }
    if (isCryptoKey(key)) {
      checkSigCryptoKey(key, alg, usage);
      return key;
    }
    if (key instanceof Uint8Array) {
      if (!alg.startsWith("HS")) {
        throw new TypeError(invalid_key_input_default(key, ...types));
      }
      return webcrypto_default.subtle.importKey("raw", key, { hash: `SHA-${alg.slice(-3)}`, name: "HMAC" }, false, [usage]);
    }
    throw new TypeError(invalid_key_input_default(key, ...types, "Uint8Array", "JSON Web Key"));
  }
  var init_get_sign_verify_key = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/get_sign_verify_key.js"() {
      init_webcrypto();
      init_crypto_key();
      init_invalid_key_input();
      init_is_key_like();
      init_normalize_key();
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/verify.js
  var verify, verify_default;
  var init_verify = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/verify.js"() {
      init_subtle_dsa();
      init_webcrypto();
      init_check_key_length();
      init_get_sign_verify_key();
      verify = async (alg, key, signature, data) => {
        const cryptoKey = await getCryptoKey3(alg, key, "verify");
        check_key_length_default(alg, cryptoKey);
        const algorithm = subtleDsa(alg, cryptoKey.algorithm);
        try {
          return await webcrypto_default.subtle.verify(algorithm, cryptoKey, signature, data);
        } catch {
          return false;
        }
      };
      verify_default = verify;
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jws/flattened/verify.js
  async function flattenedVerify(jws, key, options) {
    if (!isObject(jws)) {
      throw new JWSInvalid("Flattened JWS must be an object");
    }
    if (jws.protected === void 0 && jws.header === void 0) {
      throw new JWSInvalid('Flattened JWS must have either of the "protected" or "header" members');
    }
    if (jws.protected !== void 0 && typeof jws.protected !== "string") {
      throw new JWSInvalid("JWS Protected Header incorrect type");
    }
    if (jws.payload === void 0) {
      throw new JWSInvalid("JWS Payload missing");
    }
    if (typeof jws.signature !== "string") {
      throw new JWSInvalid("JWS Signature missing or incorrect type");
    }
    if (jws.header !== void 0 && !isObject(jws.header)) {
      throw new JWSInvalid("JWS Unprotected Header incorrect type");
    }
    let parsedProt = {};
    if (jws.protected) {
      try {
        const protectedHeader = decode2(jws.protected);
        parsedProt = JSON.parse(decoder.decode(protectedHeader));
      } catch {
        throw new JWSInvalid("JWS Protected Header is invalid");
      }
    }
    if (!is_disjoint_default(parsedProt, jws.header)) {
      throw new JWSInvalid("JWS Protected and JWS Unprotected Header Parameter names must be disjoint");
    }
    const joseHeader = {
      ...parsedProt,
      ...jws.header
    };
    const extensions = validate_crit_default(JWSInvalid, /* @__PURE__ */ new Map([["b64", true]]), options?.crit, parsedProt, joseHeader);
    let b64 = true;
    if (extensions.has("b64")) {
      b64 = parsedProt.b64;
      if (typeof b64 !== "boolean") {
        throw new JWSInvalid('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
      }
    }
    const { alg } = joseHeader;
    if (typeof alg !== "string" || !alg) {
      throw new JWSInvalid('JWS "alg" (Algorithm) Header Parameter missing or invalid');
    }
    const algorithms = options && validate_algorithms_default("algorithms", options.algorithms);
    if (algorithms && !algorithms.has(alg)) {
      throw new JOSEAlgNotAllowed('"alg" (Algorithm) Header Parameter value not allowed');
    }
    if (b64) {
      if (typeof jws.payload !== "string") {
        throw new JWSInvalid("JWS Payload must be a string");
      }
    } else if (typeof jws.payload !== "string" && !(jws.payload instanceof Uint8Array)) {
      throw new JWSInvalid("JWS Payload must be a string or an Uint8Array instance");
    }
    let resolvedKey = false;
    if (typeof key === "function") {
      key = await key(parsedProt, jws);
      resolvedKey = true;
      checkKeyTypeWithJwk(alg, key, "verify");
      if (isJWK(key)) {
        key = await importJWK(key, alg);
      }
    } else {
      checkKeyTypeWithJwk(alg, key, "verify");
    }
    const data = concat(encoder.encode(jws.protected ?? ""), encoder.encode("."), typeof jws.payload === "string" ? encoder.encode(jws.payload) : jws.payload);
    let signature;
    try {
      signature = decode2(jws.signature);
    } catch {
      throw new JWSInvalid("Failed to base64url decode the signature");
    }
    const verified = await verify_default(alg, key, signature, data);
    if (!verified) {
      throw new JWSSignatureVerificationFailed();
    }
    let payload;
    if (b64) {
      try {
        payload = decode2(jws.payload);
      } catch {
        throw new JWSInvalid("Failed to base64url decode the payload");
      }
    } else if (typeof jws.payload === "string") {
      payload = encoder.encode(jws.payload);
    } else {
      payload = jws.payload;
    }
    const result = { payload };
    if (jws.protected !== void 0) {
      result.protectedHeader = parsedProt;
    }
    if (jws.header !== void 0) {
      result.unprotectedHeader = jws.header;
    }
    if (resolvedKey) {
      return { ...result, key };
    }
    return result;
  }
  var init_verify2 = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jws/flattened/verify.js"() {
      init_base64url();
      init_verify();
      init_errors();
      init_buffer_utils();
      init_is_disjoint();
      init_is_object();
      init_check_key_type();
      init_validate_crit();
      init_validate_algorithms();
      init_is_jwk();
      init_import();
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jws/compact/verify.js
  async function compactVerify(jws, key, options) {
    if (jws instanceof Uint8Array) {
      jws = decoder.decode(jws);
    }
    if (typeof jws !== "string") {
      throw new JWSInvalid("Compact JWS must be a string or Uint8Array");
    }
    const { 0: protectedHeader, 1: payload, 2: signature, length: length2 } = jws.split(".");
    if (length2 !== 3) {
      throw new JWSInvalid("Invalid Compact JWS");
    }
    const verified = await flattenedVerify({ payload, protected: protectedHeader, signature }, key, options);
    const result = { payload: verified.payload, protectedHeader: verified.protectedHeader };
    if (typeof key === "function") {
      return { ...result, key: verified.key };
    }
    return result;
  }
  var init_verify3 = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jws/compact/verify.js"() {
      init_verify2();
      init_errors();
      init_buffer_utils();
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jws/general/verify.js
  async function generalVerify(jws, key, options) {
    if (!isObject(jws)) {
      throw new JWSInvalid("General JWS must be an object");
    }
    if (!Array.isArray(jws.signatures) || !jws.signatures.every(isObject)) {
      throw new JWSInvalid("JWS Signatures missing or incorrect type");
    }
    for (const signature of jws.signatures) {
      try {
        return await flattenedVerify({
          header: signature.header,
          payload: jws.payload,
          protected: signature.protected,
          signature: signature.signature
        }, key, options);
      } catch {
      }
    }
    throw new JWSSignatureVerificationFailed();
  }
  var init_verify4 = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jws/general/verify.js"() {
      init_verify2();
      init_errors();
      init_is_object();
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/epoch.js
  var epoch_default;
  var init_epoch = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/epoch.js"() {
      epoch_default = (date) => Math.floor(date.getTime() / 1e3);
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/secs.js
  var minute, hour, day, week, year, REGEX, secs_default;
  var init_secs = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/secs.js"() {
      minute = 60;
      hour = minute * 60;
      day = hour * 24;
      week = day * 7;
      year = day * 365.25;
      REGEX = /^(\+|\-)? ?(\d+|\d+\.\d+) ?(seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)(?: (ago|from now))?$/i;
      secs_default = (str) => {
        const matched = REGEX.exec(str);
        if (!matched || matched[4] && matched[1]) {
          throw new TypeError("Invalid time period format");
        }
        const value = parseFloat(matched[2]);
        const unit = matched[3].toLowerCase();
        let numericDate;
        switch (unit) {
          case "sec":
          case "secs":
          case "second":
          case "seconds":
          case "s":
            numericDate = Math.round(value);
            break;
          case "minute":
          case "minutes":
          case "min":
          case "mins":
          case "m":
            numericDate = Math.round(value * minute);
            break;
          case "hour":
          case "hours":
          case "hr":
          case "hrs":
          case "h":
            numericDate = Math.round(value * hour);
            break;
          case "day":
          case "days":
          case "d":
            numericDate = Math.round(value * day);
            break;
          case "week":
          case "weeks":
          case "w":
            numericDate = Math.round(value * week);
            break;
          default:
            numericDate = Math.round(value * year);
            break;
        }
        if (matched[1] === "-" || matched[4] === "ago") {
          return -numericDate;
        }
        return numericDate;
      };
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/jwt_claims_set.js
  var normalizeTyp, checkAudiencePresence, jwt_claims_set_default;
  var init_jwt_claims_set = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/lib/jwt_claims_set.js"() {
      init_errors();
      init_buffer_utils();
      init_epoch();
      init_secs();
      init_is_object();
      normalizeTyp = (value) => value.toLowerCase().replace(/^application\//, "");
      checkAudiencePresence = (audPayload, audOption) => {
        if (typeof audPayload === "string") {
          return audOption.includes(audPayload);
        }
        if (Array.isArray(audPayload)) {
          return audOption.some(Set.prototype.has.bind(new Set(audPayload)));
        }
        return false;
      };
      jwt_claims_set_default = (protectedHeader, encodedPayload, options = {}) => {
        let payload;
        try {
          payload = JSON.parse(decoder.decode(encodedPayload));
        } catch {
        }
        if (!isObject(payload)) {
          throw new JWTInvalid("JWT Claims Set must be a top-level JSON object");
        }
        const { typ } = options;
        if (typ && (typeof protectedHeader.typ !== "string" || normalizeTyp(protectedHeader.typ) !== normalizeTyp(typ))) {
          throw new JWTClaimValidationFailed('unexpected "typ" JWT header value', payload, "typ", "check_failed");
        }
        const { requiredClaims = [], issuer, subject, audience, maxTokenAge } = options;
        const presenceCheck = [...requiredClaims];
        if (maxTokenAge !== void 0)
          presenceCheck.push("iat");
        if (audience !== void 0)
          presenceCheck.push("aud");
        if (subject !== void 0)
          presenceCheck.push("sub");
        if (issuer !== void 0)
          presenceCheck.push("iss");
        for (const claim of new Set(presenceCheck.reverse())) {
          if (!(claim in payload)) {
            throw new JWTClaimValidationFailed(`missing required "${claim}" claim`, payload, claim, "missing");
          }
        }
        if (issuer && !(Array.isArray(issuer) ? issuer : [issuer]).includes(payload.iss)) {
          throw new JWTClaimValidationFailed('unexpected "iss" claim value', payload, "iss", "check_failed");
        }
        if (subject && payload.sub !== subject) {
          throw new JWTClaimValidationFailed('unexpected "sub" claim value', payload, "sub", "check_failed");
        }
        if (audience && !checkAudiencePresence(payload.aud, typeof audience === "string" ? [audience] : audience)) {
          throw new JWTClaimValidationFailed('unexpected "aud" claim value', payload, "aud", "check_failed");
        }
        let tolerance;
        switch (typeof options.clockTolerance) {
          case "string":
            tolerance = secs_default(options.clockTolerance);
            break;
          case "number":
            tolerance = options.clockTolerance;
            break;
          case "undefined":
            tolerance = 0;
            break;
          default:
            throw new TypeError("Invalid clockTolerance option type");
        }
        const { currentDate } = options;
        const now = epoch_default(currentDate || /* @__PURE__ */ new Date());
        if ((payload.iat !== void 0 || maxTokenAge) && typeof payload.iat !== "number") {
          throw new JWTClaimValidationFailed('"iat" claim must be a number', payload, "iat", "invalid");
        }
        if (payload.nbf !== void 0) {
          if (typeof payload.nbf !== "number") {
            throw new JWTClaimValidationFailed('"nbf" claim must be a number', payload, "nbf", "invalid");
          }
          if (payload.nbf > now + tolerance) {
            throw new JWTClaimValidationFailed('"nbf" claim timestamp check failed', payload, "nbf", "check_failed");
          }
        }
        if (payload.exp !== void 0) {
          if (typeof payload.exp !== "number") {
            throw new JWTClaimValidationFailed('"exp" claim must be a number', payload, "exp", "invalid");
          }
          if (payload.exp <= now - tolerance) {
            throw new JWTExpired('"exp" claim timestamp check failed', payload, "exp", "check_failed");
          }
        }
        if (maxTokenAge) {
          const age = now - payload.iat;
          const max = typeof maxTokenAge === "number" ? maxTokenAge : secs_default(maxTokenAge);
          if (age - tolerance > max) {
            throw new JWTExpired('"iat" claim timestamp check failed (too far in the past)', payload, "iat", "check_failed");
          }
          if (age < 0 - tolerance) {
            throw new JWTClaimValidationFailed('"iat" claim timestamp check failed (it should be in the past)', payload, "iat", "check_failed");
          }
        }
        return payload;
      };
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwt/verify.js
  async function jwtVerify(jwt, key, options) {
    const verified = await compactVerify(jwt, key, options);
    if (verified.protectedHeader.crit?.includes("b64") && verified.protectedHeader.b64 === false) {
      throw new JWTInvalid("JWTs MUST NOT use unencoded payload");
    }
    const payload = jwt_claims_set_default(verified.protectedHeader, verified.payload, options);
    const result = { payload, protectedHeader: verified.protectedHeader };
    if (typeof key === "function") {
      return { ...result, key: verified.key };
    }
    return result;
  }
  var init_verify5 = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwt/verify.js"() {
      init_verify3();
      init_jwt_claims_set();
      init_errors();
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwt/decrypt.js
  async function jwtDecrypt(jwt, key, options) {
    const decrypted = await compactDecrypt(jwt, key, options);
    const payload = jwt_claims_set_default(decrypted.protectedHeader, decrypted.plaintext, options);
    const { protectedHeader } = decrypted;
    if (protectedHeader.iss !== void 0 && protectedHeader.iss !== payload.iss) {
      throw new JWTClaimValidationFailed('replicated "iss" claim header parameter mismatch', payload, "iss", "mismatch");
    }
    if (protectedHeader.sub !== void 0 && protectedHeader.sub !== payload.sub) {
      throw new JWTClaimValidationFailed('replicated "sub" claim header parameter mismatch', payload, "sub", "mismatch");
    }
    if (protectedHeader.aud !== void 0 && JSON.stringify(protectedHeader.aud) !== JSON.stringify(payload.aud)) {
      throw new JWTClaimValidationFailed('replicated "aud" claim header parameter mismatch', payload, "aud", "mismatch");
    }
    const result = { payload, protectedHeader };
    if (typeof key === "function") {
      return { ...result, key: decrypted.key };
    }
    return result;
  }
  var init_decrypt5 = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwt/decrypt.js"() {
      init_decrypt3();
      init_jwt_claims_set();
      init_errors();
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwe/compact/encrypt.js
  var CompactEncrypt;
  var init_encrypt4 = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwe/compact/encrypt.js"() {
      init_encrypt2();
      CompactEncrypt = class {
        constructor(plaintext) {
          this._flattened = new FlattenedEncrypt(plaintext);
        }
        setContentEncryptionKey(cek) {
          this._flattened.setContentEncryptionKey(cek);
          return this;
        }
        setInitializationVector(iv) {
          this._flattened.setInitializationVector(iv);
          return this;
        }
        setProtectedHeader(protectedHeader) {
          this._flattened.setProtectedHeader(protectedHeader);
          return this;
        }
        setKeyManagementParameters(parameters) {
          this._flattened.setKeyManagementParameters(parameters);
          return this;
        }
        async encrypt(key, options) {
          const jwe = await this._flattened.encrypt(key, options);
          return [jwe.protected, jwe.encrypted_key, jwe.iv, jwe.ciphertext, jwe.tag].join(".");
        }
      };
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/sign.js
  var sign, sign_default;
  var init_sign = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/sign.js"() {
      init_subtle_dsa();
      init_webcrypto();
      init_check_key_length();
      init_get_sign_verify_key();
      sign = async (alg, key, data) => {
        const cryptoKey = await getCryptoKey3(alg, key, "sign");
        check_key_length_default(alg, cryptoKey);
        const signature = await webcrypto_default.subtle.sign(subtleDsa(alg, cryptoKey.algorithm), cryptoKey, data);
        return new Uint8Array(signature);
      };
      sign_default = sign;
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jws/flattened/sign.js
  var FlattenedSign;
  var init_sign2 = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jws/flattened/sign.js"() {
      init_base64url();
      init_sign();
      init_is_disjoint();
      init_errors();
      init_buffer_utils();
      init_check_key_type();
      init_validate_crit();
      FlattenedSign = class {
        constructor(payload) {
          if (!(payload instanceof Uint8Array)) {
            throw new TypeError("payload must be an instance of Uint8Array");
          }
          this._payload = payload;
        }
        setProtectedHeader(protectedHeader) {
          if (this._protectedHeader) {
            throw new TypeError("setProtectedHeader can only be called once");
          }
          this._protectedHeader = protectedHeader;
          return this;
        }
        setUnprotectedHeader(unprotectedHeader) {
          if (this._unprotectedHeader) {
            throw new TypeError("setUnprotectedHeader can only be called once");
          }
          this._unprotectedHeader = unprotectedHeader;
          return this;
        }
        async sign(key, options) {
          if (!this._protectedHeader && !this._unprotectedHeader) {
            throw new JWSInvalid("either setProtectedHeader or setUnprotectedHeader must be called before #sign()");
          }
          if (!is_disjoint_default(this._protectedHeader, this._unprotectedHeader)) {
            throw new JWSInvalid("JWS Protected and JWS Unprotected Header Parameter names must be disjoint");
          }
          const joseHeader = {
            ...this._protectedHeader,
            ...this._unprotectedHeader
          };
          const extensions = validate_crit_default(JWSInvalid, /* @__PURE__ */ new Map([["b64", true]]), options?.crit, this._protectedHeader, joseHeader);
          let b64 = true;
          if (extensions.has("b64")) {
            b64 = this._protectedHeader.b64;
            if (typeof b64 !== "boolean") {
              throw new JWSInvalid('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
            }
          }
          const { alg } = joseHeader;
          if (typeof alg !== "string" || !alg) {
            throw new JWSInvalid('JWS "alg" (Algorithm) Header Parameter missing or invalid');
          }
          checkKeyTypeWithJwk(alg, key, "sign");
          let payload = this._payload;
          if (b64) {
            payload = encoder.encode(encode2(payload));
          }
          let protectedHeader;
          if (this._protectedHeader) {
            protectedHeader = encoder.encode(encode2(JSON.stringify(this._protectedHeader)));
          } else {
            protectedHeader = encoder.encode("");
          }
          const data = concat(protectedHeader, encoder.encode("."), payload);
          const signature = await sign_default(alg, key, data);
          const jws = {
            signature: encode2(signature),
            payload: ""
          };
          if (b64) {
            jws.payload = decoder.decode(payload);
          }
          if (this._unprotectedHeader) {
            jws.header = this._unprotectedHeader;
          }
          if (this._protectedHeader) {
            jws.protected = decoder.decode(protectedHeader);
          }
          return jws;
        }
      };
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jws/compact/sign.js
  var CompactSign;
  var init_sign3 = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jws/compact/sign.js"() {
      init_sign2();
      CompactSign = class {
        constructor(payload) {
          this._flattened = new FlattenedSign(payload);
        }
        setProtectedHeader(protectedHeader) {
          this._flattened.setProtectedHeader(protectedHeader);
          return this;
        }
        async sign(key, options) {
          const jws = await this._flattened.sign(key, options);
          if (jws.payload === void 0) {
            throw new TypeError("use the flattened module for creating JWS with b64: false");
          }
          return `${jws.protected}.${jws.payload}.${jws.signature}`;
        }
      };
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jws/general/sign.js
  var IndividualSignature, GeneralSign;
  var init_sign4 = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jws/general/sign.js"() {
      init_sign2();
      init_errors();
      IndividualSignature = class {
        constructor(sig, key, options) {
          this.parent = sig;
          this.key = key;
          this.options = options;
        }
        setProtectedHeader(protectedHeader) {
          if (this.protectedHeader) {
            throw new TypeError("setProtectedHeader can only be called once");
          }
          this.protectedHeader = protectedHeader;
          return this;
        }
        setUnprotectedHeader(unprotectedHeader) {
          if (this.unprotectedHeader) {
            throw new TypeError("setUnprotectedHeader can only be called once");
          }
          this.unprotectedHeader = unprotectedHeader;
          return this;
        }
        addSignature(...args) {
          return this.parent.addSignature(...args);
        }
        sign(...args) {
          return this.parent.sign(...args);
        }
        done() {
          return this.parent;
        }
      };
      GeneralSign = class {
        constructor(payload) {
          this._signatures = [];
          this._payload = payload;
        }
        addSignature(key, options) {
          const signature = new IndividualSignature(this, key, options);
          this._signatures.push(signature);
          return signature;
        }
        async sign() {
          if (!this._signatures.length) {
            throw new JWSInvalid("at least one signature must be added");
          }
          const jws = {
            signatures: [],
            payload: ""
          };
          for (let i = 0; i < this._signatures.length; i++) {
            const signature = this._signatures[i];
            const flattened = new FlattenedSign(this._payload);
            flattened.setProtectedHeader(signature.protectedHeader);
            flattened.setUnprotectedHeader(signature.unprotectedHeader);
            const { payload, ...rest } = await flattened.sign(signature.key, signature.options);
            if (i === 0) {
              jws.payload = payload;
            } else if (jws.payload !== payload) {
              throw new JWSInvalid("inconsistent use of JWS Unencoded Payload (RFC7797)");
            }
            jws.signatures.push(rest);
          }
          return jws;
        }
      };
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwt/produce.js
  function validateInput(label, input) {
    if (!Number.isFinite(input)) {
      throw new TypeError(`Invalid ${label} input`);
    }
    return input;
  }
  var ProduceJWT;
  var init_produce = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwt/produce.js"() {
      init_epoch();
      init_is_object();
      init_secs();
      ProduceJWT = class {
        constructor(payload = {}) {
          if (!isObject(payload)) {
            throw new TypeError("JWT Claims Set MUST be an object");
          }
          this._payload = payload;
        }
        setIssuer(issuer) {
          this._payload = { ...this._payload, iss: issuer };
          return this;
        }
        setSubject(subject) {
          this._payload = { ...this._payload, sub: subject };
          return this;
        }
        setAudience(audience) {
          this._payload = { ...this._payload, aud: audience };
          return this;
        }
        setJti(jwtId) {
          this._payload = { ...this._payload, jti: jwtId };
          return this;
        }
        setNotBefore(input) {
          if (typeof input === "number") {
            this._payload = { ...this._payload, nbf: validateInput("setNotBefore", input) };
          } else if (input instanceof Date) {
            this._payload = { ...this._payload, nbf: validateInput("setNotBefore", epoch_default(input)) };
          } else {
            this._payload = { ...this._payload, nbf: epoch_default(/* @__PURE__ */ new Date()) + secs_default(input) };
          }
          return this;
        }
        setExpirationTime(input) {
          if (typeof input === "number") {
            this._payload = { ...this._payload, exp: validateInput("setExpirationTime", input) };
          } else if (input instanceof Date) {
            this._payload = { ...this._payload, exp: validateInput("setExpirationTime", epoch_default(input)) };
          } else {
            this._payload = { ...this._payload, exp: epoch_default(/* @__PURE__ */ new Date()) + secs_default(input) };
          }
          return this;
        }
        setIssuedAt(input) {
          if (typeof input === "undefined") {
            this._payload = { ...this._payload, iat: epoch_default(/* @__PURE__ */ new Date()) };
          } else if (input instanceof Date) {
            this._payload = { ...this._payload, iat: validateInput("setIssuedAt", epoch_default(input)) };
          } else if (typeof input === "string") {
            this._payload = {
              ...this._payload,
              iat: validateInput("setIssuedAt", epoch_default(/* @__PURE__ */ new Date()) + secs_default(input))
            };
          } else {
            this._payload = { ...this._payload, iat: validateInput("setIssuedAt", input) };
          }
          return this;
        }
      };
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwt/sign.js
  var SignJWT;
  var init_sign5 = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwt/sign.js"() {
      init_sign3();
      init_errors();
      init_buffer_utils();
      init_produce();
      SignJWT = class extends ProduceJWT {
        setProtectedHeader(protectedHeader) {
          this._protectedHeader = protectedHeader;
          return this;
        }
        async sign(key, options) {
          const sig = new CompactSign(encoder.encode(JSON.stringify(this._payload)));
          sig.setProtectedHeader(this._protectedHeader);
          if (Array.isArray(this._protectedHeader?.crit) && this._protectedHeader.crit.includes("b64") && this._protectedHeader.b64 === false) {
            throw new JWTInvalid("JWTs MUST NOT use unencoded payload");
          }
          return sig.sign(key, options);
        }
      };
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwt/encrypt.js
  var EncryptJWT;
  var init_encrypt5 = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwt/encrypt.js"() {
      init_encrypt4();
      init_buffer_utils();
      init_produce();
      EncryptJWT = class extends ProduceJWT {
        setProtectedHeader(protectedHeader) {
          if (this._protectedHeader) {
            throw new TypeError("setProtectedHeader can only be called once");
          }
          this._protectedHeader = protectedHeader;
          return this;
        }
        setKeyManagementParameters(parameters) {
          if (this._keyManagementParameters) {
            throw new TypeError("setKeyManagementParameters can only be called once");
          }
          this._keyManagementParameters = parameters;
          return this;
        }
        setContentEncryptionKey(cek) {
          if (this._cek) {
            throw new TypeError("setContentEncryptionKey can only be called once");
          }
          this._cek = cek;
          return this;
        }
        setInitializationVector(iv) {
          if (this._iv) {
            throw new TypeError("setInitializationVector can only be called once");
          }
          this._iv = iv;
          return this;
        }
        replicateIssuerAsHeader() {
          this._replicateIssuerAsHeader = true;
          return this;
        }
        replicateSubjectAsHeader() {
          this._replicateSubjectAsHeader = true;
          return this;
        }
        replicateAudienceAsHeader() {
          this._replicateAudienceAsHeader = true;
          return this;
        }
        async encrypt(key, options) {
          const enc = new CompactEncrypt(encoder.encode(JSON.stringify(this._payload)));
          if (this._replicateIssuerAsHeader) {
            this._protectedHeader = { ...this._protectedHeader, iss: this._payload.iss };
          }
          if (this._replicateSubjectAsHeader) {
            this._protectedHeader = { ...this._protectedHeader, sub: this._payload.sub };
          }
          if (this._replicateAudienceAsHeader) {
            this._protectedHeader = { ...this._protectedHeader, aud: this._payload.aud };
          }
          enc.setProtectedHeader(this._protectedHeader);
          if (this._iv) {
            enc.setInitializationVector(this._iv);
          }
          if (this._cek) {
            enc.setContentEncryptionKey(this._cek);
          }
          if (this._keyManagementParameters) {
            enc.setKeyManagementParameters(this._keyManagementParameters);
          }
          return enc.encrypt(key, options);
        }
      };
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwk/thumbprint.js
  async function calculateJwkThumbprint(jwk, digestAlgorithm) {
    if (!isObject(jwk)) {
      throw new TypeError("JWK must be an object");
    }
    digestAlgorithm ?? (digestAlgorithm = "sha256");
    if (digestAlgorithm !== "sha256" && digestAlgorithm !== "sha384" && digestAlgorithm !== "sha512") {
      throw new TypeError('digestAlgorithm must one of "sha256", "sha384", or "sha512"');
    }
    let components;
    switch (jwk.kty) {
      case "EC":
        check(jwk.crv, '"crv" (Curve) Parameter');
        check(jwk.x, '"x" (X Coordinate) Parameter');
        check(jwk.y, '"y" (Y Coordinate) Parameter');
        components = { crv: jwk.crv, kty: jwk.kty, x: jwk.x, y: jwk.y };
        break;
      case "OKP":
        check(jwk.crv, '"crv" (Subtype of Key Pair) Parameter');
        check(jwk.x, '"x" (Public Key) Parameter');
        components = { crv: jwk.crv, kty: jwk.kty, x: jwk.x };
        break;
      case "RSA":
        check(jwk.e, '"e" (Exponent) Parameter');
        check(jwk.n, '"n" (Modulus) Parameter');
        components = { e: jwk.e, kty: jwk.kty, n: jwk.n };
        break;
      case "oct":
        check(jwk.k, '"k" (Key Value) Parameter');
        components = { k: jwk.k, kty: jwk.kty };
        break;
      default:
        throw new JOSENotSupported('"kty" (Key Type) Parameter missing or unsupported');
    }
    const data = encoder.encode(JSON.stringify(components));
    return encode2(await digest_default(digestAlgorithm, data));
  }
  async function calculateJwkThumbprintUri(jwk, digestAlgorithm) {
    digestAlgorithm ?? (digestAlgorithm = "sha256");
    const thumbprint = await calculateJwkThumbprint(jwk, digestAlgorithm);
    return `urn:ietf:params:oauth:jwk-thumbprint:sha-${digestAlgorithm.slice(-3)}:${thumbprint}`;
  }
  var check;
  var init_thumbprint = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwk/thumbprint.js"() {
      init_digest();
      init_base64url();
      init_errors();
      init_buffer_utils();
      init_is_object();
      check = (value, description) => {
        if (typeof value !== "string" || !value) {
          throw new JWKInvalid(`${description} missing or invalid`);
        }
      };
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwk/embedded.js
  async function EmbeddedJWK(protectedHeader, token) {
    const joseHeader = {
      ...protectedHeader,
      ...token?.header
    };
    if (!isObject(joseHeader.jwk)) {
      throw new JWSInvalid('"jwk" (JSON Web Key) Header Parameter must be a JSON object');
    }
    const key = await importJWK({ ...joseHeader.jwk, ext: true }, joseHeader.alg);
    if (key instanceof Uint8Array || key.type !== "public") {
      throw new JWSInvalid('"jwk" (JSON Web Key) Header Parameter must be a public key');
    }
    return key;
  }
  var init_embedded = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwk/embedded.js"() {
      init_import();
      init_is_object();
      init_errors();
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwks/local.js
  function getKtyFromAlg(alg) {
    switch (typeof alg === "string" && alg.slice(0, 2)) {
      case "RS":
      case "PS":
        return "RSA";
      case "ES":
        return "EC";
      case "Ed":
        return "OKP";
      default:
        throw new JOSENotSupported('Unsupported "alg" value for a JSON Web Key Set');
    }
  }
  function isJWKSLike(jwks) {
    return jwks && typeof jwks === "object" && Array.isArray(jwks.keys) && jwks.keys.every(isJWKLike);
  }
  function isJWKLike(key) {
    return isObject(key);
  }
  function clone(obj) {
    if (typeof structuredClone === "function") {
      return structuredClone(obj);
    }
    return JSON.parse(JSON.stringify(obj));
  }
  async function importWithAlgCache(cache, jwk, alg) {
    const cached = cache.get(jwk) || cache.set(jwk, {}).get(jwk);
    if (cached[alg] === void 0) {
      const key = await importJWK({ ...jwk, ext: true }, alg);
      if (key instanceof Uint8Array || key.type !== "public") {
        throw new JWKSInvalid("JSON Web Key Set members must be public keys");
      }
      cached[alg] = key;
    }
    return cached[alg];
  }
  function createLocalJWKSet(jwks) {
    const set = new LocalJWKSet(jwks);
    const localJWKSet = async (protectedHeader, token) => set.getKey(protectedHeader, token);
    Object.defineProperties(localJWKSet, {
      jwks: {
        value: () => clone(set._jwks),
        enumerable: true,
        configurable: false,
        writable: false
      }
    });
    return localJWKSet;
  }
  var LocalJWKSet;
  var init_local = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwks/local.js"() {
      init_import();
      init_errors();
      init_is_object();
      LocalJWKSet = class {
        constructor(jwks) {
          this._cached = /* @__PURE__ */ new WeakMap();
          if (!isJWKSLike(jwks)) {
            throw new JWKSInvalid("JSON Web Key Set malformed");
          }
          this._jwks = clone(jwks);
        }
        async getKey(protectedHeader, token) {
          const { alg, kid } = { ...protectedHeader, ...token?.header };
          const kty = getKtyFromAlg(alg);
          const candidates = this._jwks.keys.filter((jwk2) => {
            let candidate = kty === jwk2.kty;
            if (candidate && typeof kid === "string") {
              candidate = kid === jwk2.kid;
            }
            if (candidate && typeof jwk2.alg === "string") {
              candidate = alg === jwk2.alg;
            }
            if (candidate && typeof jwk2.use === "string") {
              candidate = jwk2.use === "sig";
            }
            if (candidate && Array.isArray(jwk2.key_ops)) {
              candidate = jwk2.key_ops.includes("verify");
            }
            if (candidate) {
              switch (alg) {
                case "ES256":
                  candidate = jwk2.crv === "P-256";
                  break;
                case "ES256K":
                  candidate = jwk2.crv === "secp256k1";
                  break;
                case "ES384":
                  candidate = jwk2.crv === "P-384";
                  break;
                case "ES512":
                  candidate = jwk2.crv === "P-521";
                  break;
                case "Ed25519":
                  candidate = jwk2.crv === "Ed25519";
                  break;
                case "EdDSA":
                  candidate = jwk2.crv === "Ed25519" || jwk2.crv === "Ed448";
                  break;
              }
            }
            return candidate;
          });
          const { 0: jwk, length: length2 } = candidates;
          if (length2 === 0) {
            throw new JWKSNoMatchingKey();
          }
          if (length2 !== 1) {
            const error = new JWKSMultipleMatchingKeys();
            const { _cached } = this;
            error[Symbol.asyncIterator] = async function* () {
              for (const jwk2 of candidates) {
                try {
                  yield await importWithAlgCache(_cached, jwk2, alg);
                } catch {
                }
              }
            };
            throw error;
          }
          return importWithAlgCache(this._cached, jwk, alg);
        }
      };
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/fetch_jwks.js
  var fetchJwks, fetch_jwks_default;
  var init_fetch_jwks = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/fetch_jwks.js"() {
      init_errors();
      fetchJwks = async (url, timeout, options) => {
        let controller;
        let id;
        let timedOut = false;
        if (typeof AbortController === "function") {
          controller = new AbortController();
          id = setTimeout(() => {
            timedOut = true;
            controller.abort();
          }, timeout);
        }
        const response = await fetch(url.href, {
          signal: controller ? controller.signal : void 0,
          redirect: "manual",
          headers: options.headers
        }).catch((err) => {
          if (timedOut)
            throw new JWKSTimeout();
          throw err;
        });
        if (id !== void 0)
          clearTimeout(id);
        if (response.status !== 200) {
          throw new JOSEError("Expected 200 OK from the JSON Web Key Set HTTP response");
        }
        try {
          return await response.json();
        } catch {
          throw new JOSEError("Failed to parse the JSON Web Key Set HTTP response as JSON");
        }
      };
      fetch_jwks_default = fetchJwks;
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwks/remote.js
  function isCloudflareWorkers() {
    return typeof WebSocketPair !== "undefined" || typeof navigator !== "undefined" && navigator.userAgent === "Cloudflare-Workers" || typeof EdgeRuntime !== "undefined" && EdgeRuntime === "vercel";
  }
  function isFreshJwksCache(input, cacheMaxAge) {
    if (typeof input !== "object" || input === null) {
      return false;
    }
    if (!("uat" in input) || typeof input.uat !== "number" || Date.now() - input.uat >= cacheMaxAge) {
      return false;
    }
    if (!("jwks" in input) || !isObject(input.jwks) || !Array.isArray(input.jwks.keys) || !Array.prototype.every.call(input.jwks.keys, isObject)) {
      return false;
    }
    return true;
  }
  function createRemoteJWKSet(url, options) {
    const set = new RemoteJWKSet(url, options);
    const remoteJWKSet = async (protectedHeader, token) => set.getKey(protectedHeader, token);
    Object.defineProperties(remoteJWKSet, {
      coolingDown: {
        get: () => set.coolingDown(),
        enumerable: true,
        configurable: false
      },
      fresh: {
        get: () => set.fresh(),
        enumerable: true,
        configurable: false
      },
      reload: {
        value: () => set.reload(),
        enumerable: true,
        configurable: false,
        writable: false
      },
      reloading: {
        get: () => !!set._pendingFetch,
        enumerable: true,
        configurable: false
      },
      jwks: {
        value: () => set._local?.jwks(),
        enumerable: true,
        configurable: false,
        writable: false
      }
    });
    return remoteJWKSet;
  }
  var USER_AGENT, jwksCache, RemoteJWKSet, experimental_jwksCache;
  var init_remote = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwks/remote.js"() {
      init_fetch_jwks();
      init_errors();
      init_local();
      init_is_object();
      if (typeof navigator === "undefined" || !navigator.userAgent?.startsWith?.("Mozilla/5.0 ")) {
        const NAME = "jose";
        const VERSION = "v5.10.0";
        USER_AGENT = `${NAME}/${VERSION}`;
      }
      jwksCache = Symbol();
      RemoteJWKSet = class {
        constructor(url, options) {
          if (!(url instanceof URL)) {
            throw new TypeError("url must be an instance of URL");
          }
          this._url = new URL(url.href);
          this._options = { agent: options?.agent, headers: options?.headers };
          this._timeoutDuration = typeof options?.timeoutDuration === "number" ? options?.timeoutDuration : 5e3;
          this._cooldownDuration = typeof options?.cooldownDuration === "number" ? options?.cooldownDuration : 3e4;
          this._cacheMaxAge = typeof options?.cacheMaxAge === "number" ? options?.cacheMaxAge : 6e5;
          if (options?.[jwksCache] !== void 0) {
            this._cache = options?.[jwksCache];
            if (isFreshJwksCache(options?.[jwksCache], this._cacheMaxAge)) {
              this._jwksTimestamp = this._cache.uat;
              this._local = createLocalJWKSet(this._cache.jwks);
            }
          }
        }
        coolingDown() {
          return typeof this._jwksTimestamp === "number" ? Date.now() < this._jwksTimestamp + this._cooldownDuration : false;
        }
        fresh() {
          return typeof this._jwksTimestamp === "number" ? Date.now() < this._jwksTimestamp + this._cacheMaxAge : false;
        }
        async getKey(protectedHeader, token) {
          if (!this._local || !this.fresh()) {
            await this.reload();
          }
          try {
            return await this._local(protectedHeader, token);
          } catch (err) {
            if (err instanceof JWKSNoMatchingKey) {
              if (this.coolingDown() === false) {
                await this.reload();
                return this._local(protectedHeader, token);
              }
            }
            throw err;
          }
        }
        async reload() {
          if (this._pendingFetch && isCloudflareWorkers()) {
            this._pendingFetch = void 0;
          }
          const headers = new Headers(this._options.headers);
          if (USER_AGENT && !headers.has("User-Agent")) {
            headers.set("User-Agent", USER_AGENT);
            this._options.headers = Object.fromEntries(headers.entries());
          }
          this._pendingFetch || (this._pendingFetch = fetch_jwks_default(this._url, this._timeoutDuration, this._options).then((json) => {
            this._local = createLocalJWKSet(json);
            if (this._cache) {
              this._cache.uat = Date.now();
              this._cache.jwks = json;
            }
            this._jwksTimestamp = Date.now();
            this._pendingFetch = void 0;
          }).catch((err) => {
            this._pendingFetch = void 0;
            throw err;
          }));
          await this._pendingFetch;
        }
      };
      experimental_jwksCache = jwksCache;
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwt/unsecured.js
  var UnsecuredJWT;
  var init_unsecured = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/jwt/unsecured.js"() {
      init_base64url();
      init_buffer_utils();
      init_errors();
      init_jwt_claims_set();
      init_produce();
      UnsecuredJWT = class extends ProduceJWT {
        encode() {
          const header = encode2(JSON.stringify({ alg: "none" }));
          const payload = encode2(JSON.stringify(this._payload));
          return `${header}.${payload}.`;
        }
        static decode(jwt, options) {
          if (typeof jwt !== "string") {
            throw new JWTInvalid("Unsecured JWT must be a string");
          }
          const { 0: encodedHeader, 1: encodedPayload, 2: signature, length: length2 } = jwt.split(".");
          if (length2 !== 3 || signature !== "") {
            throw new JWTInvalid("Invalid Unsecured JWT");
          }
          let header;
          try {
            header = JSON.parse(decoder.decode(decode2(encodedHeader)));
            if (header.alg !== "none")
              throw new Error();
          } catch {
            throw new JWTInvalid("Invalid Unsecured JWT");
          }
          const payload = jwt_claims_set_default(header, decode2(encodedPayload), options);
          return { payload, header };
        }
      };
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/util/base64url.js
  var base64url_exports2 = {};
  __export(base64url_exports2, {
    decode: () => decode3,
    encode: () => encode3
  });
  var encode3, decode3;
  var init_base64url2 = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/util/base64url.js"() {
      init_base64url();
      encode3 = encode2;
      decode3 = decode2;
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/util/decode_protected_header.js
  function decodeProtectedHeader(token) {
    let protectedB64u;
    if (typeof token === "string") {
      const parts = token.split(".");
      if (parts.length === 3 || parts.length === 5) {
        ;
        [protectedB64u] = parts;
      }
    } else if (typeof token === "object" && token) {
      if ("protected" in token) {
        protectedB64u = token.protected;
      } else {
        throw new TypeError("Token does not contain a Protected Header");
      }
    }
    try {
      if (typeof protectedB64u !== "string" || !protectedB64u) {
        throw new Error();
      }
      const result = JSON.parse(decoder.decode(decode3(protectedB64u)));
      if (!isObject(result)) {
        throw new Error();
      }
      return result;
    } catch {
      throw new TypeError("Invalid Token or Protected Header formatting");
    }
  }
  var init_decode_protected_header = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/util/decode_protected_header.js"() {
      init_base64url2();
      init_buffer_utils();
      init_is_object();
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/util/decode_jwt.js
  function decodeJwt(jwt) {
    if (typeof jwt !== "string")
      throw new JWTInvalid("JWTs must use Compact JWS serialization, JWT must be a string");
    const { 1: payload, length: length2 } = jwt.split(".");
    if (length2 === 5)
      throw new JWTInvalid("Only JWTs using Compact JWS serialization can be decoded");
    if (length2 !== 3)
      throw new JWTInvalid("Invalid JWT");
    if (!payload)
      throw new JWTInvalid("JWTs must contain a payload");
    let decoded;
    try {
      decoded = decode3(payload);
    } catch {
      throw new JWTInvalid("Failed to base64url decode the payload");
    }
    let result;
    try {
      result = JSON.parse(decoder.decode(decoded));
    } catch {
      throw new JWTInvalid("Failed to parse the decoded payload as JSON");
    }
    if (!isObject(result))
      throw new JWTInvalid("Invalid JWT Claims Set");
    return result;
  }
  var init_decode_jwt = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/util/decode_jwt.js"() {
      init_base64url2();
      init_buffer_utils();
      init_is_object();
      init_errors();
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/generate.js
  async function generateSecret(alg, options) {
    let length2;
    let algorithm;
    let keyUsages;
    switch (alg) {
      case "HS256":
      case "HS384":
      case "HS512":
        length2 = parseInt(alg.slice(-3), 10);
        algorithm = { name: "HMAC", hash: `SHA-${length2}`, length: length2 };
        keyUsages = ["sign", "verify"];
        break;
      case "A128CBC-HS256":
      case "A192CBC-HS384":
      case "A256CBC-HS512":
        length2 = parseInt(alg.slice(-3), 10);
        return random_default(new Uint8Array(length2 >> 3));
      case "A128KW":
      case "A192KW":
      case "A256KW":
        length2 = parseInt(alg.slice(1, 4), 10);
        algorithm = { name: "AES-KW", length: length2 };
        keyUsages = ["wrapKey", "unwrapKey"];
        break;
      case "A128GCMKW":
      case "A192GCMKW":
      case "A256GCMKW":
      case "A128GCM":
      case "A192GCM":
      case "A256GCM":
        length2 = parseInt(alg.slice(1, 4), 10);
        algorithm = { name: "AES-GCM", length: length2 };
        keyUsages = ["encrypt", "decrypt"];
        break;
      default:
        throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
    }
    return webcrypto_default.subtle.generateKey(algorithm, options?.extractable ?? false, keyUsages);
  }
  function getModulusLengthOption(options) {
    const modulusLength = options?.modulusLength ?? 2048;
    if (typeof modulusLength !== "number" || modulusLength < 2048) {
      throw new JOSENotSupported("Invalid or unsupported modulusLength option provided, 2048 bits or larger keys must be used");
    }
    return modulusLength;
  }
  async function generateKeyPair(alg, options) {
    let algorithm;
    let keyUsages;
    switch (alg) {
      case "PS256":
      case "PS384":
      case "PS512":
        algorithm = {
          name: "RSA-PSS",
          hash: `SHA-${alg.slice(-3)}`,
          publicExponent: new Uint8Array([1, 0, 1]),
          modulusLength: getModulusLengthOption(options)
        };
        keyUsages = ["sign", "verify"];
        break;
      case "RS256":
      case "RS384":
      case "RS512":
        algorithm = {
          name: "RSASSA-PKCS1-v1_5",
          hash: `SHA-${alg.slice(-3)}`,
          publicExponent: new Uint8Array([1, 0, 1]),
          modulusLength: getModulusLengthOption(options)
        };
        keyUsages = ["sign", "verify"];
        break;
      case "RSA-OAEP":
      case "RSA-OAEP-256":
      case "RSA-OAEP-384":
      case "RSA-OAEP-512":
        algorithm = {
          name: "RSA-OAEP",
          hash: `SHA-${parseInt(alg.slice(-3), 10) || 1}`,
          publicExponent: new Uint8Array([1, 0, 1]),
          modulusLength: getModulusLengthOption(options)
        };
        keyUsages = ["decrypt", "unwrapKey", "encrypt", "wrapKey"];
        break;
      case "ES256":
        algorithm = { name: "ECDSA", namedCurve: "P-256" };
        keyUsages = ["sign", "verify"];
        break;
      case "ES384":
        algorithm = { name: "ECDSA", namedCurve: "P-384" };
        keyUsages = ["sign", "verify"];
        break;
      case "ES512":
        algorithm = { name: "ECDSA", namedCurve: "P-521" };
        keyUsages = ["sign", "verify"];
        break;
      case "Ed25519":
        algorithm = { name: "Ed25519" };
        keyUsages = ["sign", "verify"];
        break;
      case "EdDSA": {
        keyUsages = ["sign", "verify"];
        const crv = options?.crv ?? "Ed25519";
        switch (crv) {
          case "Ed25519":
          case "Ed448":
            algorithm = { name: crv };
            break;
          default:
            throw new JOSENotSupported("Invalid or unsupported crv option provided");
        }
        break;
      }
      case "ECDH-ES":
      case "ECDH-ES+A128KW":
      case "ECDH-ES+A192KW":
      case "ECDH-ES+A256KW": {
        keyUsages = ["deriveKey", "deriveBits"];
        const crv = options?.crv ?? "P-256";
        switch (crv) {
          case "P-256":
          case "P-384":
          case "P-521": {
            algorithm = { name: "ECDH", namedCurve: crv };
            break;
          }
          case "X25519":
          case "X448":
            algorithm = { name: crv };
            break;
          default:
            throw new JOSENotSupported("Invalid or unsupported crv option provided, supported values are P-256, P-384, P-521, X25519, and X448");
        }
        break;
      }
      default:
        throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
    }
    return webcrypto_default.subtle.generateKey(algorithm, options?.extractable ?? false, keyUsages);
  }
  var init_generate = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/generate.js"() {
      init_webcrypto();
      init_errors();
      init_random();
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/key/generate_key_pair.js
  async function generateKeyPair2(alg, options) {
    return generateKeyPair(alg, options);
  }
  var init_generate_key_pair = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/key/generate_key_pair.js"() {
      init_generate();
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/key/generate_secret.js
  async function generateSecret2(alg, options) {
    return generateSecret(alg, options);
  }
  var init_generate_secret = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/key/generate_secret.js"() {
      init_generate();
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/runtime.js
  var runtime_default;
  var init_runtime = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/runtime/runtime.js"() {
      runtime_default = "WebCryptoAPI";
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/util/runtime.js
  var runtime_default2;
  var init_runtime2 = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/util/runtime.js"() {
      init_runtime();
      runtime_default2 = runtime_default;
    }
  });

  // node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/index.js
  var browser_exports = {};
  __export(browser_exports, {
    CompactEncrypt: () => CompactEncrypt,
    CompactSign: () => CompactSign,
    EmbeddedJWK: () => EmbeddedJWK,
    EncryptJWT: () => EncryptJWT,
    FlattenedEncrypt: () => FlattenedEncrypt,
    FlattenedSign: () => FlattenedSign,
    GeneralEncrypt: () => GeneralEncrypt,
    GeneralSign: () => GeneralSign,
    SignJWT: () => SignJWT,
    UnsecuredJWT: () => UnsecuredJWT,
    base64url: () => base64url_exports2,
    calculateJwkThumbprint: () => calculateJwkThumbprint,
    calculateJwkThumbprintUri: () => calculateJwkThumbprintUri,
    compactDecrypt: () => compactDecrypt,
    compactVerify: () => compactVerify,
    createLocalJWKSet: () => createLocalJWKSet,
    createRemoteJWKSet: () => createRemoteJWKSet,
    cryptoRuntime: () => runtime_default2,
    decodeJwt: () => decodeJwt,
    decodeProtectedHeader: () => decodeProtectedHeader,
    errors: () => errors_exports,
    experimental_jwksCache: () => experimental_jwksCache,
    exportJWK: () => exportJWK,
    exportPKCS8: () => exportPKCS8,
    exportSPKI: () => exportSPKI,
    flattenedDecrypt: () => flattenedDecrypt,
    flattenedVerify: () => flattenedVerify,
    generalDecrypt: () => generalDecrypt,
    generalVerify: () => generalVerify,
    generateKeyPair: () => generateKeyPair2,
    generateSecret: () => generateSecret2,
    importJWK: () => importJWK,
    importPKCS8: () => importPKCS8,
    importSPKI: () => importSPKI,
    importX509: () => importX509,
    jwksCache: () => jwksCache,
    jwtDecrypt: () => jwtDecrypt,
    jwtVerify: () => jwtVerify
  });
  var init_browser = __esm({
    "node_modules/.pnpm/jose@5.10.0/node_modules/jose/dist/browser/index.js"() {
      init_decrypt3();
      init_decrypt2();
      init_decrypt4();
      init_encrypt3();
      init_verify3();
      init_verify2();
      init_verify4();
      init_verify5();
      init_decrypt5();
      init_encrypt4();
      init_encrypt2();
      init_sign3();
      init_sign2();
      init_sign4();
      init_sign5();
      init_encrypt5();
      init_thumbprint();
      init_embedded();
      init_local();
      init_remote();
      init_unsecured();
      init_export();
      init_import();
      init_decode_protected_header();
      init_decode_jwt();
      init_errors();
      init_generate_key_pair();
      init_generate_secret();
      init_base64url2();
      init_runtime2();
    }
  });

  // node_modules/.pnpm/@atproto+jwk-jose@0.1.6/node_modules/@atproto/jwk-jose/dist/util.js
  var require_util3 = __commonJS({
    "node_modules/.pnpm/@atproto+jwk-jose@0.1.6/node_modules/@atproto/jwk-jose/dist/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.either = either;
      function either(a, b) {
        if (a != null && b != null && a !== b) {
          throw new TypeError(`Expected "${b}", got "${a}"`);
        }
        return a ?? b ?? void 0;
      }
    }
  });

  // node_modules/.pnpm/@atproto+jwk-jose@0.1.6/node_modules/@atproto/jwk-jose/dist/jose-key.js
  var require_jose_key = __commonJS({
    "node_modules/.pnpm/@atproto+jwk-jose@0.1.6/node_modules/@atproto/jwk-jose/dist/jose-key.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.JoseKey = void 0;
      var jose_1 = (init_browser(), __toCommonJS(browser_exports));
      var jwk_1 = require_dist();
      var util_1 = require_util3();
      var { JOSEError: JOSEError2 } = jose_1.errors;
      var JoseKey = class _JoseKey extends jwk_1.Key {
        /**
         * Some runtimes (e.g. Bun) require an `alg` second argument to be set when
         * invoking `importJWK`. In order to be compatible with these runtimes, we
         * provide the following method to ensure the `alg` is always set. We also
         * take the opportunity to ensure that the `alg` is compatible with this key.
         */
        async getKeyObj(alg) {
          if (!this.algorithms.includes(alg)) {
            throw new jwk_1.JwkError(`Key cannot be used with algorithm "${alg}"`);
          }
          try {
            return await (0, jose_1.importJWK)(this.jwk, alg);
          } catch (cause) {
            throw new jwk_1.JwkError("Failed to import JWK", void 0, { cause });
          }
        }
        async createJwt(header, payload) {
          try {
            const { kid } = header;
            if (kid && kid !== this.kid) {
              throw new jwk_1.JwtCreateError(`Invalid "kid" (${kid}) used to sign with key "${this.kid}"`);
            }
            const { alg } = header;
            if (!alg) {
              throw new jwk_1.JwtCreateError('Missing "alg" in JWT header');
            }
            const keyObj = await this.getKeyObj(alg);
            const jwtBuilder = new jose_1.SignJWT(payload).setProtectedHeader({
              ...header,
              alg,
              kid: this.kid
            });
            const signedJwt = await jwtBuilder.sign(keyObj);
            return signedJwt;
          } catch (cause) {
            if (cause instanceof JOSEError2) {
              throw new jwk_1.JwtCreateError(cause.message, cause.code, { cause });
            } else {
              throw jwk_1.JwtCreateError.from(cause);
            }
          }
        }
        async verifyJwt(token, options) {
          try {
            const result = await (0, jose_1.jwtVerify)(token, async ({ alg }) => this.getKeyObj(alg), { ...options, algorithms: this.algorithms });
            const headerParsed = jwk_1.jwtHeaderSchema.safeParse(result.protectedHeader);
            if (!headerParsed.success) {
              throw new jwk_1.JwtVerifyError("Invalid JWT header", void 0, {
                cause: headerParsed.error
              });
            }
            const payloadParsed = jwk_1.jwtPayloadSchema.safeParse(result.payload);
            if (!payloadParsed.success) {
              throw new jwk_1.JwtVerifyError("Invalid JWT payload", void 0, {
                cause: payloadParsed.error
              });
            }
            return {
              protectedHeader: headerParsed.data,
              // "requiredClaims" enforced by jwtVerify()
              payload: payloadParsed.data
            };
          } catch (cause) {
            if (cause instanceof JOSEError2) {
              throw new jwk_1.JwtVerifyError(cause.message, cause.code, { cause });
            } else {
              throw jwk_1.JwtVerifyError.from(cause);
            }
          }
        }
        static async generateKeyPair(allowedAlgos = ["ES256"], options) {
          if (!allowedAlgos.length) {
            throw new jwk_1.JwkError("No algorithms provided for key generation");
          }
          const errors = [];
          for (const alg of allowedAlgos) {
            try {
              return await (0, jose_1.generateKeyPair)(alg, options);
            } catch (err) {
              errors.push(err);
            }
          }
          throw new jwk_1.JwkError("Failed to generate key pair", void 0, {
            cause: new AggregateError(errors, "None of the algorithms worked")
          });
        }
        static async generate(allowedAlgos = ["ES256"], kid, options) {
          const kp = await this.generateKeyPair(allowedAlgos, {
            ...options,
            extractable: true
          });
          return this.fromImportable(kp.privateKey, kid);
        }
        static async fromImportable(input, kid) {
          if (typeof input === "string") {
            if (input.startsWith("-----")) {
              return this.fromPKCS8(input, "", kid);
            }
            if (input.startsWith("{")) {
              return this.fromJWK(input, kid);
            }
            throw new jwk_1.JwkError("Invalid input");
          }
          if (typeof input === "object") {
            if ("kty" in input || "alg" in input) {
              return this.fromJWK(input, kid);
            }
            return this.fromKeyLike(input, kid);
          }
          throw new jwk_1.JwkError("Invalid input");
        }
        /**
         * @see {@link exportJWK}
         */
        static async fromKeyLike(keyLike, kid, alg) {
          const jwk = await (0, jose_1.exportJWK)(keyLike);
          if (alg) {
            if (!jwk.alg)
              jwk.alg = alg;
            else if (jwk.alg !== alg)
              throw new jwk_1.JwkError('Invalid "alg" in JWK');
          }
          return this.fromJWK(jwk, kid);
        }
        /**
         * @see {@link importPKCS8}
         */
        static async fromPKCS8(pem, alg, kid) {
          const keyLike = await (0, jose_1.importPKCS8)(pem, alg, { extractable: true });
          return this.fromKeyLike(keyLike, kid);
        }
        static async fromJWK(input, inputKid) {
          const jwk = typeof input === "string" ? JSON.parse(input) : input;
          if (!jwk || typeof jwk !== "object")
            throw new jwk_1.JwkError("Invalid JWK");
          const kid = (0, util_1.either)(jwk.kid, inputKid);
          const use = jwk.use || "sig";
          return new _JoseKey(jwk_1.jwkValidator.parse({ ...jwk, kid, use }));
        }
      };
      exports.JoseKey = JoseKey;
    }
  });

  // node_modules/.pnpm/@atproto+jwk-jose@0.1.6/node_modules/@atproto/jwk-jose/dist/index.js
  var require_dist2 = __commonJS({
    "node_modules/.pnpm/@atproto+jwk-jose@0.1.6/node_modules/@atproto/jwk-jose/dist/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_jose_key(), exports);
    }
  });

  // node_modules/.pnpm/@atproto+jwk-webcrypto@0.1.6/node_modules/@atproto/jwk-webcrypto/dist/util.js
  var require_util4 = __commonJS({
    "node_modules/.pnpm/@atproto+jwk-webcrypto@0.1.6/node_modules/@atproto/jwk-webcrypto/dist/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toSubtleAlgorithm = toSubtleAlgorithm;
      exports.fromSubtleAlgorithm = fromSubtleAlgorithm;
      exports.isCryptoKeyPair = isCryptoKeyPair;
      function toSubtleAlgorithm(alg, crv, options) {
        switch (alg) {
          case "PS256":
          case "PS384":
          case "PS512":
            return {
              name: "RSA-PSS",
              hash: `SHA-${alg.slice(-3)}`,
              modulusLength: options?.modulusLength ?? 2048,
              publicExponent: new Uint8Array([1, 0, 1])
            };
          case "RS256":
          case "RS384":
          case "RS512":
            return {
              name: "RSASSA-PKCS1-v1_5",
              hash: `SHA-${alg.slice(-3)}`,
              modulusLength: options?.modulusLength ?? 2048,
              publicExponent: new Uint8Array([1, 0, 1])
            };
          case "ES256":
          case "ES384":
            return {
              name: "ECDSA",
              namedCurve: `P-${alg.slice(-3)}`
            };
          case "ES512":
            return {
              name: "ECDSA",
              namedCurve: "P-521"
            };
          default:
            throw new TypeError(`Unsupported alg "${alg}"`);
        }
      }
      function fromSubtleAlgorithm(algorithm) {
        switch (algorithm.name) {
          case "RSA-PSS":
          case "RSASSA-PKCS1-v1_5": {
            const hash = algorithm.hash.name;
            switch (hash) {
              case "SHA-256":
              case "SHA-384":
              case "SHA-512": {
                const prefix = algorithm.name === "RSA-PSS" ? "PS" : "RS";
                return `${prefix}${hash.slice(-3)}`;
              }
              default:
                throw new TypeError("unsupported RsaHashedKeyAlgorithm hash");
            }
          }
          case "ECDSA": {
            const namedCurve = algorithm.namedCurve;
            switch (namedCurve) {
              case "P-256":
              case "P-384":
              case "P-512":
                return `ES${namedCurve.slice(-3)}`;
              case "P-521":
                return "ES512";
              default:
                throw new TypeError("unsupported EcKeyAlgorithm namedCurve");
            }
          }
          case "Ed448":
          case "Ed25519":
            return "EdDSA";
          default:
            throw new TypeError(`Unexpected algorithm "${algorithm.name}"`);
        }
      }
      function isCryptoKeyPair(v, extractable) {
        return typeof v === "object" && v !== null && "privateKey" in v && v.privateKey instanceof CryptoKey && v.privateKey.type === "private" && (extractable == null || v.privateKey.extractable === extractable) && v.privateKey.usages.includes("sign") && "publicKey" in v && v.publicKey instanceof CryptoKey && v.publicKey.type === "public" && v.publicKey.extractable === true && v.publicKey.usages.includes("verify");
      }
    }
  });

  // node_modules/.pnpm/@atproto+jwk-webcrypto@0.1.6/node_modules/@atproto/jwk-webcrypto/dist/webcrypto-key.js
  var require_webcrypto_key = __commonJS({
    "node_modules/.pnpm/@atproto+jwk-webcrypto@0.1.6/node_modules/@atproto/jwk-webcrypto/dist/webcrypto-key.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.WebcryptoKey = exports.jwkWithAlgSchema = void 0;
      var zod_1 = require_cjs();
      var jwk_1 = require_dist();
      var jwk_jose_1 = require_dist2();
      var util_js_1 = require_util4();
      exports.jwkWithAlgSchema = zod_1.z.intersection(jwk_1.jwkSchema, zod_1.z.object({ alg: zod_1.z.string() }));
      var WebcryptoKey = class _WebcryptoKey extends jwk_jose_1.JoseKey {
        // We need to override the static method generate from JoseKey because
        // the browser needs both the private and public keys
        static async generate(allowedAlgos = ["ES256"], kid = crypto.randomUUID(), options) {
          const keyPair = await this.generateKeyPair(allowedAlgos, options);
          if (!(0, util_js_1.isCryptoKeyPair)(keyPair)) {
            throw new TypeError("Invalid CryptoKeyPair");
          }
          return this.fromKeypair(keyPair, kid);
        }
        static async fromKeypair(cryptoKeyPair, kid) {
          const { key_ops, use, alg = (0, util_js_1.fromSubtleAlgorithm)(cryptoKeyPair.privateKey.algorithm), ...jwk } = await crypto.subtle.exportKey("jwk", cryptoKeyPair.privateKey.extractable ? cryptoKeyPair.privateKey : cryptoKeyPair.publicKey);
          if (use && use !== "sig") {
            throw new TypeError(`Unsupported JWK use "${use}"`);
          }
          if (key_ops && !key_ops.some((o) => o === "sign" || o === "verify")) {
            throw new TypeError(`Invalid key_ops "${key_ops}" for "sig" use`);
          }
          return new _WebcryptoKey(exports.jwkWithAlgSchema.parse({ ...jwk, kid, alg, use: "sig" }), cryptoKeyPair);
        }
        constructor(jwk, cryptoKeyPair) {
          super(jwk);
          Object.defineProperty(this, "cryptoKeyPair", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: cryptoKeyPair
          });
        }
        get isPrivate() {
          return true;
        }
        get privateJwk() {
          if (super.isPrivate)
            return this.jwk;
          throw new Error("Private Webcrypto Key not exportable");
        }
        async getKeyObj(alg) {
          if (this.jwk.alg !== alg) {
            throw new jwk_1.JwkError(`Key cannot be used with algorithm "${alg}"`);
          }
          return this.cryptoKeyPair.privateKey;
        }
      };
      exports.WebcryptoKey = WebcryptoKey;
    }
  });

  // node_modules/.pnpm/@atproto+jwk-webcrypto@0.1.6/node_modules/@atproto/jwk-webcrypto/dist/index.js
  var require_dist3 = __commonJS({
    "node_modules/.pnpm/@atproto+jwk-webcrypto@0.1.6/node_modules/@atproto/jwk-webcrypto/dist/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_webcrypto_key(), exports);
    }
  });

  // node_modules/.pnpm/@atproto+did@0.1.5/node_modules/@atproto/did/dist/did-error.js
  var require_did_error = __commonJS({
    "node_modules/.pnpm/@atproto+did@0.1.5/node_modules/@atproto/did/dist/did-error.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InvalidDidError = exports.DidError = void 0;
      var DidError = class _DidError extends Error {
        constructor(did, message2, code2, status = 400, cause) {
          super(message2, { cause });
          Object.defineProperty(this, "did", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: did
          });
          Object.defineProperty(this, "code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: code2
          });
          Object.defineProperty(this, "status", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: status
          });
        }
        /**
         * For compatibility with error handlers in common HTTP frameworks.
         */
        get statusCode() {
          return this.status;
        }
        toString() {
          return `${this.constructor.name} ${this.code} (${this.did}): ${this.message}`;
        }
        static from(cause, did) {
          if (cause instanceof _DidError) {
            return cause;
          }
          const message2 = cause instanceof Error ? cause.message : typeof cause === "string" ? cause : "An unknown error occurred";
          const status = (typeof cause?.["statusCode"] === "number" ? cause["statusCode"] : void 0) ?? (typeof cause?.["status"] === "number" ? cause["status"] : void 0);
          return new _DidError(did, message2, "did-unknown-error", status, cause);
        }
      };
      exports.DidError = DidError;
      var InvalidDidError = class extends DidError {
        constructor(did, message2, cause) {
          super(did, message2, "did-invalid", 400, cause);
        }
      };
      exports.InvalidDidError = InvalidDidError;
    }
  });

  // node_modules/.pnpm/@atproto+did@0.1.5/node_modules/@atproto/did/dist/methods/plc.js
  var require_plc = __commonJS({
    "node_modules/.pnpm/@atproto+did@0.1.5/node_modules/@atproto/did/dist/methods/plc.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DID_PLC_PREFIX = void 0;
      exports.isDidPlc = isDidPlc;
      exports.asDidPlc = asDidPlc;
      exports.assertDidPlc = assertDidPlc;
      var did_error_js_1 = require_did_error();
      var DID_PLC_PREFIX = `did:plc:`;
      exports.DID_PLC_PREFIX = DID_PLC_PREFIX;
      var DID_PLC_PREFIX_LENGTH = DID_PLC_PREFIX.length;
      var DID_PLC_LENGTH = 32;
      function isDidPlc(input) {
        if (typeof input !== "string")
          return false;
        if (input.length !== DID_PLC_LENGTH)
          return false;
        if (!input.startsWith(DID_PLC_PREFIX))
          return false;
        for (let i = DID_PLC_PREFIX_LENGTH; i < DID_PLC_LENGTH; i++) {
          if (!isBase32Char(input.charCodeAt(i)))
            return false;
        }
        return true;
      }
      function asDidPlc(input) {
        assertDidPlc(input);
        return input;
      }
      function assertDidPlc(input) {
        if (typeof input !== "string") {
          throw new did_error_js_1.InvalidDidError(typeof input, `DID must be a string`);
        }
        if (!input.startsWith(DID_PLC_PREFIX)) {
          throw new did_error_js_1.InvalidDidError(input, `Invalid did:plc prefix`);
        }
        if (input.length !== DID_PLC_LENGTH) {
          throw new did_error_js_1.InvalidDidError(input, `did:plc must be ${DID_PLC_LENGTH} characters long`);
        }
        for (let i = DID_PLC_PREFIX_LENGTH; i < DID_PLC_LENGTH; i++) {
          if (!isBase32Char(input.charCodeAt(i))) {
            throw new did_error_js_1.InvalidDidError(input, `Invalid character at position ${i}`);
          }
        }
      }
      var isBase32Char = (c) => c >= 97 && c <= 122 || c >= 50 && c <= 55;
    }
  });

  // node_modules/.pnpm/@atproto+did@0.1.5/node_modules/@atproto/did/dist/did.js
  var require_did = __commonJS({
    "node_modules/.pnpm/@atproto+did@0.1.5/node_modules/@atproto/did/dist/did.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.didSchema = exports.DID_PREFIX = void 0;
      exports.assertDidMethod = assertDidMethod;
      exports.extractDidMethod = extractDidMethod;
      exports.assertDidMsid = assertDidMsid;
      exports.assertDid = assertDid;
      exports.isDid = isDid;
      exports.asDid = asDid;
      var zod_1 = require_cjs();
      var did_error_js_1 = require_did_error();
      var DID_PREFIX = "did:";
      exports.DID_PREFIX = DID_PREFIX;
      var DID_PREFIX_LENGTH = DID_PREFIX.length;
      function assertDidMethod(input, start = 0, end = input.length) {
        if (!Number.isFinite(end) || !Number.isFinite(start) || end < start || end > input.length) {
          throw new TypeError("Invalid start or end position");
        }
        if (end === start) {
          throw new did_error_js_1.InvalidDidError(input, `Empty method name`);
        }
        let c;
        for (let i = start; i < end; i++) {
          c = input.charCodeAt(i);
          if ((c < 97 || c > 122) && // a-z
          (c < 48 || c > 57)) {
            throw new did_error_js_1.InvalidDidError(input, `Invalid character at position ${i} in DID method name`);
          }
        }
      }
      function extractDidMethod(did) {
        const msidSep = did.indexOf(":", DID_PREFIX_LENGTH);
        const method = did.slice(DID_PREFIX_LENGTH, msidSep);
        return method;
      }
      function assertDidMsid(input, start = 0, end = input.length) {
        if (!Number.isFinite(end) || !Number.isFinite(start) || end < start || end > input.length) {
          throw new TypeError("Invalid start or end position");
        }
        if (end === start) {
          throw new did_error_js_1.InvalidDidError(input, `DID method-specific id must not be empty`);
        }
        let c;
        for (let i = start; i < end; i++) {
          c = input.charCodeAt(i);
          if ((c < 97 || c > 122) && // a-z
          (c < 65 || c > 90) && // A-Z
          (c < 48 || c > 57) && // 0-9
          c !== 46 && // .
          c !== 45 && // -
          c !== 95) {
            if (c === 58) {
              if (i === end - 1) {
                throw new did_error_js_1.InvalidDidError(input, `DID cannot end with ":"`);
              }
              continue;
            }
            if (c === 37) {
              c = input.charCodeAt(++i);
              if ((c < 48 || c > 57) && (c < 65 || c > 70)) {
                throw new did_error_js_1.InvalidDidError(input, `Invalid pct-encoded character at position ${i}`);
              }
              c = input.charCodeAt(++i);
              if ((c < 48 || c > 57) && (c < 65 || c > 70)) {
                throw new did_error_js_1.InvalidDidError(input, `Invalid pct-encoded character at position ${i}`);
              }
              if (i >= end) {
                throw new did_error_js_1.InvalidDidError(input, `Incomplete pct-encoded character at position ${i - 2}`);
              }
              continue;
            }
            throw new did_error_js_1.InvalidDidError(input, `Disallowed character in DID at position ${i}`);
          }
        }
      }
      function assertDid(input) {
        if (typeof input !== "string") {
          throw new did_error_js_1.InvalidDidError(typeof input, `DID must be a string`);
        }
        const { length: length2 } = input;
        if (length2 > 2048) {
          throw new did_error_js_1.InvalidDidError(input, `DID is too long (2048 chars max)`);
        }
        if (!input.startsWith(DID_PREFIX)) {
          throw new did_error_js_1.InvalidDidError(input, `DID requires "${DID_PREFIX}" prefix`);
        }
        const idSep = input.indexOf(":", DID_PREFIX_LENGTH);
        if (idSep === -1) {
          throw new did_error_js_1.InvalidDidError(input, `Missing colon after method name`);
        }
        assertDidMethod(input, DID_PREFIX_LENGTH, idSep);
        assertDidMsid(input, idSep + 1, length2);
      }
      function isDid(input) {
        try {
          assertDid(input);
          return true;
        } catch (err) {
          if (err instanceof did_error_js_1.DidError) {
            return false;
          }
          throw err;
        }
      }
      function asDid(input) {
        assertDid(input);
        return input;
      }
      exports.didSchema = zod_1.z.string().superRefine((value, ctx) => {
        try {
          assertDid(value);
          return true;
        } catch (err) {
          ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: err instanceof Error ? err.message : "Unexpected error"
          });
          return false;
        }
      });
    }
  });

  // node_modules/.pnpm/@atproto+did@0.1.5/node_modules/@atproto/did/dist/methods/web.js
  var require_web = __commonJS({
    "node_modules/.pnpm/@atproto+did@0.1.5/node_modules/@atproto/did/dist/methods/web.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DID_WEB_PREFIX = void 0;
      exports.isDidWeb = isDidWeb;
      exports.asDidWeb = asDidWeb;
      exports.assertDidWeb = assertDidWeb;
      exports.didWebToUrl = didWebToUrl;
      exports.urlToDidWeb = urlToDidWeb;
      var did_error_js_1 = require_did_error();
      var did_js_1 = require_did();
      exports.DID_WEB_PREFIX = `did:web:`;
      function isDidWeb(input) {
        if (typeof input !== "string")
          return false;
        if (!input.startsWith(exports.DID_WEB_PREFIX))
          return false;
        if (input.charAt(exports.DID_WEB_PREFIX.length) === ":")
          return false;
        try {
          didWebToUrl(input);
          return true;
        } catch {
          return false;
        }
      }
      function asDidWeb(input) {
        assertDidWeb(input);
        return input;
      }
      function assertDidWeb(input) {
        if (typeof input !== "string") {
          throw new did_error_js_1.InvalidDidError(typeof input, `DID must be a string`);
        }
        if (!input.startsWith(exports.DID_WEB_PREFIX)) {
          throw new did_error_js_1.InvalidDidError(input, `Invalid did:web prefix`);
        }
        if (input.charAt(exports.DID_WEB_PREFIX.length) === ":") {
          throw new did_error_js_1.InvalidDidError(input, "did:web MSID must not start with a colon");
        }
        void didWebToUrl(input);
      }
      function didWebToUrl(did) {
        (0, did_js_1.assertDidMsid)(did, exports.DID_WEB_PREFIX.length);
        const hostIdx = exports.DID_WEB_PREFIX.length;
        const pathIdx = did.indexOf(":", hostIdx);
        const host = pathIdx === -1 ? did.slice(hostIdx) : did.slice(hostIdx, pathIdx);
        const path = pathIdx === -1 ? "" : did.slice(pathIdx);
        try {
          const url = new URL(`https://${host.replaceAll("%3A", ":")}${path.replaceAll(":", "/")}`);
          if (url.hostname === "localhost") {
            url.protocol = "http:";
          }
          return url;
        } catch (cause) {
          throw new did_error_js_1.InvalidDidError(did, "Invalid Web DID", cause);
        }
      }
      function urlToDidWeb(url) {
        const port = url.port ? `%3A${url.port}` : "";
        const path = url.pathname === "/" ? "" : url.pathname.replaceAll("/", ":");
        return `did:web:${url.hostname}${port}${path}`;
      }
    }
  });

  // node_modules/.pnpm/@atproto+did@0.1.5/node_modules/@atproto/did/dist/methods.js
  var require_methods = __commonJS({
    "node_modules/.pnpm/@atproto+did@0.1.5/node_modules/@atproto/did/dist/methods.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_plc(), exports);
      __exportStar(require_web(), exports);
    }
  });

  // node_modules/.pnpm/@atproto+did@0.1.5/node_modules/@atproto/did/dist/atproto.js
  var require_atproto = __commonJS({
    "node_modules/.pnpm/@atproto+did@0.1.5/node_modules/@atproto/did/dist/atproto.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.atprotoDidSchema = void 0;
      exports.isAtprotoDid = isAtprotoDid;
      exports.asAtprotoDid = asAtprotoDid;
      exports.assertAtprotoDid = assertAtprotoDid;
      exports.assertAtprotoDidWeb = assertAtprotoDidWeb;
      exports.isAtprotoDidWeb = isAtprotoDidWeb;
      var zod_1 = require_cjs();
      var did_error_js_1 = require_did_error();
      var methods_js_1 = require_methods();
      exports.atprotoDidSchema = zod_1.z.string().refine(isAtprotoDid, `Atproto only allows "plc" and "web" DID methods`);
      function isAtprotoDid(input) {
        if (typeof input !== "string") {
          return false;
        } else if (input.startsWith(methods_js_1.DID_PLC_PREFIX)) {
          return (0, methods_js_1.isDidPlc)(input);
        } else if (input.startsWith(methods_js_1.DID_WEB_PREFIX)) {
          return isAtprotoDidWeb(input);
        } else {
          return false;
        }
      }
      function asAtprotoDid(input) {
        assertAtprotoDid(input);
        return input;
      }
      function assertAtprotoDid(input) {
        if (typeof input !== "string") {
          throw new did_error_js_1.InvalidDidError(typeof input, `DID must be a string`);
        } else if (input.startsWith(methods_js_1.DID_PLC_PREFIX)) {
          (0, methods_js_1.assertDidPlc)(input);
        } else if (input.startsWith(methods_js_1.DID_WEB_PREFIX)) {
          assertAtprotoDidWeb(input);
        } else {
          throw new did_error_js_1.InvalidDidError(input, `Atproto only allows "plc" and "web" DID methods`);
        }
      }
      function assertAtprotoDidWeb(input) {
        (0, methods_js_1.assertDidWeb)(input);
        if (input.includes(":", methods_js_1.DID_WEB_PREFIX.length)) {
          throw new did_error_js_1.InvalidDidError(input, `Atproto does not allow path components in Web DIDs`);
        }
        if (input.includes("%3A", methods_js_1.DID_WEB_PREFIX.length) && !input.startsWith("did:web:localhost%3A")) {
          throw new did_error_js_1.InvalidDidError(input, `Atproto does not allow port numbers in Web DIDs, except for localhost`);
        }
      }
      function isAtprotoDidWeb(input) {
        try {
          assertAtprotoDidWeb(input);
          return true;
        } catch {
          return false;
        }
      }
    }
  });

  // node_modules/.pnpm/@atproto+did@0.1.5/node_modules/@atproto/did/dist/did-document.js
  var require_did_document = __commonJS({
    "node_modules/.pnpm/@atproto+did@0.1.5/node_modules/@atproto/did/dist/did-document.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.didDocumentValidator = exports.didDocumentSchema = void 0;
      var zod_1 = require_cjs();
      var did_js_1 = require_did();
      var rfc3968UriSchema = zod_1.z.string().refine((data) => {
        try {
          new URL(data);
          return true;
        } catch {
          return false;
        }
      }, "RFC3968 compliant URI");
      var didControllerSchema = zod_1.z.union([did_js_1.didSchema, zod_1.z.array(did_js_1.didSchema)]);
      var didRelativeUriSchema = zod_1.z.union([
        rfc3968UriSchema,
        zod_1.z.string().regex(/^#[^#]+$/)
      ]);
      var didVerificationMethodSchema = zod_1.z.object({
        id: didRelativeUriSchema,
        type: zod_1.z.string().min(1),
        controller: didControllerSchema,
        publicKeyJwk: zod_1.z.record(zod_1.z.string(), zod_1.z.unknown()).optional(),
        publicKeyMultibase: zod_1.z.string().optional()
      });
      var didServiceIdSchema = didRelativeUriSchema;
      var didServiceTypeSchema = zod_1.z.union([zod_1.z.string(), zod_1.z.array(zod_1.z.string())]);
      var didServiceEndpointSchema = zod_1.z.union([
        rfc3968UriSchema,
        zod_1.z.record(zod_1.z.string(), rfc3968UriSchema),
        zod_1.z.array(zod_1.z.union([rfc3968UriSchema, zod_1.z.record(zod_1.z.string(), rfc3968UriSchema)])).nonempty()
      ]);
      var didServiceSchema = zod_1.z.object({
        id: didServiceIdSchema,
        type: didServiceTypeSchema,
        serviceEndpoint: didServiceEndpointSchema
      });
      var didAuthenticationSchema = zod_1.z.union([
        //
        didRelativeUriSchema,
        didVerificationMethodSchema
      ]);
      exports.didDocumentSchema = zod_1.z.object({
        "@context": zod_1.z.union([
          zod_1.z.literal("https://www.w3.org/ns/did/v1"),
          zod_1.z.array(zod_1.z.string().url()).nonempty().refine((data) => data[0] === "https://www.w3.org/ns/did/v1", {
            message: "First @context must be https://www.w3.org/ns/did/v1"
          })
        ]),
        id: did_js_1.didSchema,
        controller: didControllerSchema.optional(),
        alsoKnownAs: zod_1.z.array(rfc3968UriSchema).optional(),
        service: zod_1.z.array(didServiceSchema).optional(),
        authentication: zod_1.z.array(didAuthenticationSchema).optional(),
        verificationMethod: zod_1.z.array(zod_1.z.union([didVerificationMethodSchema, didRelativeUriSchema])).optional()
      });
      exports.didDocumentValidator = exports.didDocumentSchema.superRefine(({ id: did, service }, ctx) => {
        if (service) {
          const visited = /* @__PURE__ */ new Set();
          for (let i = 0; i < service.length; i++) {
            const current = service[i];
            const serviceId = current.id.startsWith("#") ? `${did}${current.id}` : current.id;
            if (!visited.has(serviceId)) {
              visited.add(serviceId);
            } else {
              ctx.addIssue({
                code: zod_1.z.ZodIssueCode.custom,
                message: `Duplicate service id (${current.id}) found in the document`,
                path: ["service", i, "id"]
              });
            }
          }
        }
      });
    }
  });

  // node_modules/.pnpm/@atproto+did@0.1.5/node_modules/@atproto/did/dist/index.js
  var require_dist4 = __commonJS({
    "node_modules/.pnpm/@atproto+did@0.1.5/node_modules/@atproto/did/dist/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_atproto(), exports);
      __exportStar(require_did_document(), exports);
      __exportStar(require_did_error(), exports);
      __exportStar(require_did(), exports);
      __exportStar(require_methods(), exports);
    }
  });

  // node_modules/.pnpm/lru-cache@10.4.3/node_modules/lru-cache/dist/commonjs/index.js
  var require_commonjs = __commonJS({
    "node_modules/.pnpm/lru-cache@10.4.3/node_modules/lru-cache/dist/commonjs/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.LRUCache = void 0;
      var perf = typeof performance === "object" && performance && typeof performance.now === "function" ? performance : Date;
      var warned = /* @__PURE__ */ new Set();
      var PROCESS = typeof process === "object" && !!process ? process : {};
      var emitWarning = (msg, type, code2, fn) => {
        typeof PROCESS.emitWarning === "function" ? PROCESS.emitWarning(msg, type, code2, fn) : console.error(`[${code2}] ${type}: ${msg}`);
      };
      var AC = globalThis.AbortController;
      var AS = globalThis.AbortSignal;
      if (typeof AC === "undefined") {
        AS = class AbortSignal {
          onabort;
          _onabort = [];
          reason;
          aborted = false;
          addEventListener(_, fn) {
            this._onabort.push(fn);
          }
        };
        AC = class AbortController {
          constructor() {
            warnACPolyfill();
          }
          signal = new AS();
          abort(reason) {
            if (this.signal.aborted)
              return;
            this.signal.reason = reason;
            this.signal.aborted = true;
            for (const fn of this.signal._onabort) {
              fn(reason);
            }
            this.signal.onabort?.(reason);
          }
        };
        let printACPolyfillWarning = PROCESS.env?.LRU_CACHE_IGNORE_AC_WARNING !== "1";
        const warnACPolyfill = () => {
          if (!printACPolyfillWarning)
            return;
          printACPolyfillWarning = false;
          emitWarning("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.", "NO_ABORT_CONTROLLER", "ENOTSUP", warnACPolyfill);
        };
      }
      var shouldWarn = (code2) => !warned.has(code2);
      var TYPE = Symbol("type");
      var isPosInt = (n) => n && n === Math.floor(n) && n > 0 && isFinite(n);
      var getUintArray = (max) => !isPosInt(max) ? null : max <= Math.pow(2, 8) ? Uint8Array : max <= Math.pow(2, 16) ? Uint16Array : max <= Math.pow(2, 32) ? Uint32Array : max <= Number.MAX_SAFE_INTEGER ? ZeroArray : null;
      var ZeroArray = class extends Array {
        constructor(size) {
          super(size);
          this.fill(0);
        }
      };
      var Stack = class _Stack {
        heap;
        length;
        // private constructor
        static #constructing = false;
        static create(max) {
          const HeapCls = getUintArray(max);
          if (!HeapCls)
            return [];
          _Stack.#constructing = true;
          const s = new _Stack(max, HeapCls);
          _Stack.#constructing = false;
          return s;
        }
        constructor(max, HeapCls) {
          if (!_Stack.#constructing) {
            throw new TypeError("instantiate Stack using Stack.create(n)");
          }
          this.heap = new HeapCls(max);
          this.length = 0;
        }
        push(n) {
          this.heap[this.length++] = n;
        }
        pop() {
          return this.heap[--this.length];
        }
      };
      var LRUCache = class _LRUCache {
        // options that cannot be changed without disaster
        #max;
        #maxSize;
        #dispose;
        #disposeAfter;
        #fetchMethod;
        #memoMethod;
        /**
         * {@link LRUCache.OptionsBase.ttl}
         */
        ttl;
        /**
         * {@link LRUCache.OptionsBase.ttlResolution}
         */
        ttlResolution;
        /**
         * {@link LRUCache.OptionsBase.ttlAutopurge}
         */
        ttlAutopurge;
        /**
         * {@link LRUCache.OptionsBase.updateAgeOnGet}
         */
        updateAgeOnGet;
        /**
         * {@link LRUCache.OptionsBase.updateAgeOnHas}
         */
        updateAgeOnHas;
        /**
         * {@link LRUCache.OptionsBase.allowStale}
         */
        allowStale;
        /**
         * {@link LRUCache.OptionsBase.noDisposeOnSet}
         */
        noDisposeOnSet;
        /**
         * {@link LRUCache.OptionsBase.noUpdateTTL}
         */
        noUpdateTTL;
        /**
         * {@link LRUCache.OptionsBase.maxEntrySize}
         */
        maxEntrySize;
        /**
         * {@link LRUCache.OptionsBase.sizeCalculation}
         */
        sizeCalculation;
        /**
         * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}
         */
        noDeleteOnFetchRejection;
        /**
         * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}
         */
        noDeleteOnStaleGet;
        /**
         * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}
         */
        allowStaleOnFetchAbort;
        /**
         * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}
         */
        allowStaleOnFetchRejection;
        /**
         * {@link LRUCache.OptionsBase.ignoreFetchAbort}
         */
        ignoreFetchAbort;
        // computed properties
        #size;
        #calculatedSize;
        #keyMap;
        #keyList;
        #valList;
        #next;
        #prev;
        #head;
        #tail;
        #free;
        #disposed;
        #sizes;
        #starts;
        #ttls;
        #hasDispose;
        #hasFetchMethod;
        #hasDisposeAfter;
        /**
         * Do not call this method unless you need to inspect the
         * inner workings of the cache.  If anything returned by this
         * object is modified in any way, strange breakage may occur.
         *
         * These fields are private for a reason!
         *
         * @internal
         */
        static unsafeExposeInternals(c) {
          return {
            // properties
            starts: c.#starts,
            ttls: c.#ttls,
            sizes: c.#sizes,
            keyMap: c.#keyMap,
            keyList: c.#keyList,
            valList: c.#valList,
            next: c.#next,
            prev: c.#prev,
            get head() {
              return c.#head;
            },
            get tail() {
              return c.#tail;
            },
            free: c.#free,
            // methods
            isBackgroundFetch: (p) => c.#isBackgroundFetch(p),
            backgroundFetch: (k, index, options, context) => c.#backgroundFetch(k, index, options, context),
            moveToTail: (index) => c.#moveToTail(index),
            indexes: (options) => c.#indexes(options),
            rindexes: (options) => c.#rindexes(options),
            isStale: (index) => c.#isStale(index)
          };
        }
        // Protected read-only members
        /**
         * {@link LRUCache.OptionsBase.max} (read-only)
         */
        get max() {
          return this.#max;
        }
        /**
         * {@link LRUCache.OptionsBase.maxSize} (read-only)
         */
        get maxSize() {
          return this.#maxSize;
        }
        /**
         * The total computed size of items in the cache (read-only)
         */
        get calculatedSize() {
          return this.#calculatedSize;
        }
        /**
         * The number of items stored in the cache (read-only)
         */
        get size() {
          return this.#size;
        }
        /**
         * {@link LRUCache.OptionsBase.fetchMethod} (read-only)
         */
        get fetchMethod() {
          return this.#fetchMethod;
        }
        get memoMethod() {
          return this.#memoMethod;
        }
        /**
         * {@link LRUCache.OptionsBase.dispose} (read-only)
         */
        get dispose() {
          return this.#dispose;
        }
        /**
         * {@link LRUCache.OptionsBase.disposeAfter} (read-only)
         */
        get disposeAfter() {
          return this.#disposeAfter;
        }
        constructor(options) {
          const { max = 0, ttl, ttlResolution = 1, ttlAutopurge, updateAgeOnGet, updateAgeOnHas, allowStale, dispose, disposeAfter, noDisposeOnSet, noUpdateTTL, maxSize = 0, maxEntrySize = 0, sizeCalculation, fetchMethod, memoMethod, noDeleteOnFetchRejection, noDeleteOnStaleGet, allowStaleOnFetchRejection, allowStaleOnFetchAbort, ignoreFetchAbort } = options;
          if (max !== 0 && !isPosInt(max)) {
            throw new TypeError("max option must be a nonnegative integer");
          }
          const UintArray = max ? getUintArray(max) : Array;
          if (!UintArray) {
            throw new Error("invalid max value: " + max);
          }
          this.#max = max;
          this.#maxSize = maxSize;
          this.maxEntrySize = maxEntrySize || this.#maxSize;
          this.sizeCalculation = sizeCalculation;
          if (this.sizeCalculation) {
            if (!this.#maxSize && !this.maxEntrySize) {
              throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");
            }
            if (typeof this.sizeCalculation !== "function") {
              throw new TypeError("sizeCalculation set to non-function");
            }
          }
          if (memoMethod !== void 0 && typeof memoMethod !== "function") {
            throw new TypeError("memoMethod must be a function if defined");
          }
          this.#memoMethod = memoMethod;
          if (fetchMethod !== void 0 && typeof fetchMethod !== "function") {
            throw new TypeError("fetchMethod must be a function if specified");
          }
          this.#fetchMethod = fetchMethod;
          this.#hasFetchMethod = !!fetchMethod;
          this.#keyMap = /* @__PURE__ */ new Map();
          this.#keyList = new Array(max).fill(void 0);
          this.#valList = new Array(max).fill(void 0);
          this.#next = new UintArray(max);
          this.#prev = new UintArray(max);
          this.#head = 0;
          this.#tail = 0;
          this.#free = Stack.create(max);
          this.#size = 0;
          this.#calculatedSize = 0;
          if (typeof dispose === "function") {
            this.#dispose = dispose;
          }
          if (typeof disposeAfter === "function") {
            this.#disposeAfter = disposeAfter;
            this.#disposed = [];
          } else {
            this.#disposeAfter = void 0;
            this.#disposed = void 0;
          }
          this.#hasDispose = !!this.#dispose;
          this.#hasDisposeAfter = !!this.#disposeAfter;
          this.noDisposeOnSet = !!noDisposeOnSet;
          this.noUpdateTTL = !!noUpdateTTL;
          this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection;
          this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection;
          this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort;
          this.ignoreFetchAbort = !!ignoreFetchAbort;
          if (this.maxEntrySize !== 0) {
            if (this.#maxSize !== 0) {
              if (!isPosInt(this.#maxSize)) {
                throw new TypeError("maxSize must be a positive integer if specified");
              }
            }
            if (!isPosInt(this.maxEntrySize)) {
              throw new TypeError("maxEntrySize must be a positive integer if specified");
            }
            this.#initializeSizeTracking();
          }
          this.allowStale = !!allowStale;
          this.noDeleteOnStaleGet = !!noDeleteOnStaleGet;
          this.updateAgeOnGet = !!updateAgeOnGet;
          this.updateAgeOnHas = !!updateAgeOnHas;
          this.ttlResolution = isPosInt(ttlResolution) || ttlResolution === 0 ? ttlResolution : 1;
          this.ttlAutopurge = !!ttlAutopurge;
          this.ttl = ttl || 0;
          if (this.ttl) {
            if (!isPosInt(this.ttl)) {
              throw new TypeError("ttl must be a positive integer if specified");
            }
            this.#initializeTTLTracking();
          }
          if (this.#max === 0 && this.ttl === 0 && this.#maxSize === 0) {
            throw new TypeError("At least one of max, maxSize, or ttl is required");
          }
          if (!this.ttlAutopurge && !this.#max && !this.#maxSize) {
            const code2 = "LRU_CACHE_UNBOUNDED";
            if (shouldWarn(code2)) {
              warned.add(code2);
              const msg = "TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.";
              emitWarning(msg, "UnboundedCacheWarning", code2, _LRUCache);
            }
          }
        }
        /**
         * Return the number of ms left in the item's TTL. If item is not in cache,
         * returns `0`. Returns `Infinity` if item is in cache without a defined TTL.
         */
        getRemainingTTL(key) {
          return this.#keyMap.has(key) ? Infinity : 0;
        }
        #initializeTTLTracking() {
          const ttls = new ZeroArray(this.#max);
          const starts = new ZeroArray(this.#max);
          this.#ttls = ttls;
          this.#starts = starts;
          this.#setItemTTL = (index, ttl, start = perf.now()) => {
            starts[index] = ttl !== 0 ? start : 0;
            ttls[index] = ttl;
            if (ttl !== 0 && this.ttlAutopurge) {
              const t = setTimeout(() => {
                if (this.#isStale(index)) {
                  this.#delete(this.#keyList[index], "expire");
                }
              }, ttl + 1);
              if (t.unref) {
                t.unref();
              }
            }
          };
          this.#updateItemAge = (index) => {
            starts[index] = ttls[index] !== 0 ? perf.now() : 0;
          };
          this.#statusTTL = (status, index) => {
            if (ttls[index]) {
              const ttl = ttls[index];
              const start = starts[index];
              if (!ttl || !start)
                return;
              status.ttl = ttl;
              status.start = start;
              status.now = cachedNow || getNow();
              const age = status.now - start;
              status.remainingTTL = ttl - age;
            }
          };
          let cachedNow = 0;
          const getNow = () => {
            const n = perf.now();
            if (this.ttlResolution > 0) {
              cachedNow = n;
              const t = setTimeout(() => cachedNow = 0, this.ttlResolution);
              if (t.unref) {
                t.unref();
              }
            }
            return n;
          };
          this.getRemainingTTL = (key) => {
            const index = this.#keyMap.get(key);
            if (index === void 0) {
              return 0;
            }
            const ttl = ttls[index];
            const start = starts[index];
            if (!ttl || !start) {
              return Infinity;
            }
            const age = (cachedNow || getNow()) - start;
            return ttl - age;
          };
          this.#isStale = (index) => {
            const s = starts[index];
            const t = ttls[index];
            return !!t && !!s && (cachedNow || getNow()) - s > t;
          };
        }
        // conditionally set private methods related to TTL
        #updateItemAge = () => {
        };
        #statusTTL = () => {
        };
        #setItemTTL = () => {
        };
        /* c8 ignore stop */
        #isStale = () => false;
        #initializeSizeTracking() {
          const sizes = new ZeroArray(this.#max);
          this.#calculatedSize = 0;
          this.#sizes = sizes;
          this.#removeItemSize = (index) => {
            this.#calculatedSize -= sizes[index];
            sizes[index] = 0;
          };
          this.#requireSize = (k, v, size, sizeCalculation) => {
            if (this.#isBackgroundFetch(v)) {
              return 0;
            }
            if (!isPosInt(size)) {
              if (sizeCalculation) {
                if (typeof sizeCalculation !== "function") {
                  throw new TypeError("sizeCalculation must be a function");
                }
                size = sizeCalculation(v, k);
                if (!isPosInt(size)) {
                  throw new TypeError("sizeCalculation return invalid (expect positive integer)");
                }
              } else {
                throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");
              }
            }
            return size;
          };
          this.#addItemSize = (index, size, status) => {
            sizes[index] = size;
            if (this.#maxSize) {
              const maxSize = this.#maxSize - sizes[index];
              while (this.#calculatedSize > maxSize) {
                this.#evict(true);
              }
            }
            this.#calculatedSize += sizes[index];
            if (status) {
              status.entrySize = size;
              status.totalCalculatedSize = this.#calculatedSize;
            }
          };
        }
        #removeItemSize = (_i) => {
        };
        #addItemSize = (_i, _s, _st) => {
        };
        #requireSize = (_k, _v, size, sizeCalculation) => {
          if (size || sizeCalculation) {
            throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");
          }
          return 0;
        };
        *#indexes({ allowStale = this.allowStale } = {}) {
          if (this.#size) {
            for (let i = this.#tail; true; ) {
              if (!this.#isValidIndex(i)) {
                break;
              }
              if (allowStale || !this.#isStale(i)) {
                yield i;
              }
              if (i === this.#head) {
                break;
              } else {
                i = this.#prev[i];
              }
            }
          }
        }
        *#rindexes({ allowStale = this.allowStale } = {}) {
          if (this.#size) {
            for (let i = this.#head; true; ) {
              if (!this.#isValidIndex(i)) {
                break;
              }
              if (allowStale || !this.#isStale(i)) {
                yield i;
              }
              if (i === this.#tail) {
                break;
              } else {
                i = this.#next[i];
              }
            }
          }
        }
        #isValidIndex(index) {
          return index !== void 0 && this.#keyMap.get(this.#keyList[index]) === index;
        }
        /**
         * Return a generator yielding `[key, value]` pairs,
         * in order from most recently used to least recently used.
         */
        *entries() {
          for (const i of this.#indexes()) {
            if (this.#valList[i] !== void 0 && this.#keyList[i] !== void 0 && !this.#isBackgroundFetch(this.#valList[i])) {
              yield [this.#keyList[i], this.#valList[i]];
            }
          }
        }
        /**
         * Inverse order version of {@link LRUCache.entries}
         *
         * Return a generator yielding `[key, value]` pairs,
         * in order from least recently used to most recently used.
         */
        *rentries() {
          for (const i of this.#rindexes()) {
            if (this.#valList[i] !== void 0 && this.#keyList[i] !== void 0 && !this.#isBackgroundFetch(this.#valList[i])) {
              yield [this.#keyList[i], this.#valList[i]];
            }
          }
        }
        /**
         * Return a generator yielding the keys in the cache,
         * in order from most recently used to least recently used.
         */
        *keys() {
          for (const i of this.#indexes()) {
            const k = this.#keyList[i];
            if (k !== void 0 && !this.#isBackgroundFetch(this.#valList[i])) {
              yield k;
            }
          }
        }
        /**
         * Inverse order version of {@link LRUCache.keys}
         *
         * Return a generator yielding the keys in the cache,
         * in order from least recently used to most recently used.
         */
        *rkeys() {
          for (const i of this.#rindexes()) {
            const k = this.#keyList[i];
            if (k !== void 0 && !this.#isBackgroundFetch(this.#valList[i])) {
              yield k;
            }
          }
        }
        /**
         * Return a generator yielding the values in the cache,
         * in order from most recently used to least recently used.
         */
        *values() {
          for (const i of this.#indexes()) {
            const v = this.#valList[i];
            if (v !== void 0 && !this.#isBackgroundFetch(this.#valList[i])) {
              yield this.#valList[i];
            }
          }
        }
        /**
         * Inverse order version of {@link LRUCache.values}
         *
         * Return a generator yielding the values in the cache,
         * in order from least recently used to most recently used.
         */
        *rvalues() {
          for (const i of this.#rindexes()) {
            const v = this.#valList[i];
            if (v !== void 0 && !this.#isBackgroundFetch(this.#valList[i])) {
              yield this.#valList[i];
            }
          }
        }
        /**
         * Iterating over the cache itself yields the same results as
         * {@link LRUCache.entries}
         */
        [Symbol.iterator]() {
          return this.entries();
        }
        /**
         * A String value that is used in the creation of the default string
         * description of an object. Called by the built-in method
         * `Object.prototype.toString`.
         */
        [Symbol.toStringTag] = "LRUCache";
        /**
         * Find a value for which the supplied fn method returns a truthy value,
         * similar to `Array.find()`. fn is called as `fn(value, key, cache)`.
         */
        find(fn, getOptions = {}) {
          for (const i of this.#indexes()) {
            const v = this.#valList[i];
            const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
            if (value === void 0)
              continue;
            if (fn(value, this.#keyList[i], this)) {
              return this.get(this.#keyList[i], getOptions);
            }
          }
        }
        /**
         * Call the supplied function on each item in the cache, in order from most
         * recently used to least recently used.
         *
         * `fn` is called as `fn(value, key, cache)`.
         *
         * If `thisp` is provided, function will be called in the `this`-context of
         * the provided object, or the cache if no `thisp` object is provided.
         *
         * Does not update age or recenty of use, or iterate over stale values.
         */
        forEach(fn, thisp = this) {
          for (const i of this.#indexes()) {
            const v = this.#valList[i];
            const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
            if (value === void 0)
              continue;
            fn.call(thisp, value, this.#keyList[i], this);
          }
        }
        /**
         * The same as {@link LRUCache.forEach} but items are iterated over in
         * reverse order.  (ie, less recently used items are iterated over first.)
         */
        rforEach(fn, thisp = this) {
          for (const i of this.#rindexes()) {
            const v = this.#valList[i];
            const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
            if (value === void 0)
              continue;
            fn.call(thisp, value, this.#keyList[i], this);
          }
        }
        /**
         * Delete any stale entries. Returns true if anything was removed,
         * false otherwise.
         */
        purgeStale() {
          let deleted = false;
          for (const i of this.#rindexes({ allowStale: true })) {
            if (this.#isStale(i)) {
              this.#delete(this.#keyList[i], "expire");
              deleted = true;
            }
          }
          return deleted;
        }
        /**
         * Get the extended info about a given entry, to get its value, size, and
         * TTL info simultaneously. Returns `undefined` if the key is not present.
         *
         * Unlike {@link LRUCache#dump}, which is designed to be portable and survive
         * serialization, the `start` value is always the current timestamp, and the
         * `ttl` is a calculated remaining time to live (negative if expired).
         *
         * Always returns stale values, if their info is found in the cache, so be
         * sure to check for expirations (ie, a negative {@link LRUCache.Entry#ttl})
         * if relevant.
         */
        info(key) {
          const i = this.#keyMap.get(key);
          if (i === void 0)
            return void 0;
          const v = this.#valList[i];
          const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
          if (value === void 0)
            return void 0;
          const entry = { value };
          if (this.#ttls && this.#starts) {
            const ttl = this.#ttls[i];
            const start = this.#starts[i];
            if (ttl && start) {
              const remain = ttl - (perf.now() - start);
              entry.ttl = remain;
              entry.start = Date.now();
            }
          }
          if (this.#sizes) {
            entry.size = this.#sizes[i];
          }
          return entry;
        }
        /**
         * Return an array of [key, {@link LRUCache.Entry}] tuples which can be
         * passed to {@link LRLUCache#load}.
         *
         * The `start` fields are calculated relative to a portable `Date.now()`
         * timestamp, even if `performance.now()` is available.
         *
         * Stale entries are always included in the `dump`, even if
         * {@link LRUCache.OptionsBase.allowStale} is false.
         *
         * Note: this returns an actual array, not a generator, so it can be more
         * easily passed around.
         */
        dump() {
          const arr = [];
          for (const i of this.#indexes({ allowStale: true })) {
            const key = this.#keyList[i];
            const v = this.#valList[i];
            const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
            if (value === void 0 || key === void 0)
              continue;
            const entry = { value };
            if (this.#ttls && this.#starts) {
              entry.ttl = this.#ttls[i];
              const age = perf.now() - this.#starts[i];
              entry.start = Math.floor(Date.now() - age);
            }
            if (this.#sizes) {
              entry.size = this.#sizes[i];
            }
            arr.unshift([key, entry]);
          }
          return arr;
        }
        /**
         * Reset the cache and load in the items in entries in the order listed.
         *
         * The shape of the resulting cache may be different if the same options are
         * not used in both caches.
         *
         * The `start` fields are assumed to be calculated relative to a portable
         * `Date.now()` timestamp, even if `performance.now()` is available.
         */
        load(arr) {
          this.clear();
          for (const [key, entry] of arr) {
            if (entry.start) {
              const age = Date.now() - entry.start;
              entry.start = perf.now() - age;
            }
            this.set(key, entry.value, entry);
          }
        }
        /**
         * Add a value to the cache.
         *
         * Note: if `undefined` is specified as a value, this is an alias for
         * {@link LRUCache#delete}
         *
         * Fields on the {@link LRUCache.SetOptions} options param will override
         * their corresponding values in the constructor options for the scope
         * of this single `set()` operation.
         *
         * If `start` is provided, then that will set the effective start
         * time for the TTL calculation. Note that this must be a previous
         * value of `performance.now()` if supported, or a previous value of
         * `Date.now()` if not.
         *
         * Options object may also include `size`, which will prevent
         * calling the `sizeCalculation` function and just use the specified
         * number if it is a positive integer, and `noDisposeOnSet` which
         * will prevent calling a `dispose` function in the case of
         * overwrites.
         *
         * If the `size` (or return value of `sizeCalculation`) for a given
         * entry is greater than `maxEntrySize`, then the item will not be
         * added to the cache.
         *
         * Will update the recency of the entry.
         *
         * If the value is `undefined`, then this is an alias for
         * `cache.delete(key)`. `undefined` is never stored in the cache.
         */
        set(k, v, setOptions = {}) {
          if (v === void 0) {
            this.delete(k);
            return this;
          }
          const { ttl = this.ttl, start, noDisposeOnSet = this.noDisposeOnSet, sizeCalculation = this.sizeCalculation, status } = setOptions;
          let { noUpdateTTL = this.noUpdateTTL } = setOptions;
          const size = this.#requireSize(k, v, setOptions.size || 0, sizeCalculation);
          if (this.maxEntrySize && size > this.maxEntrySize) {
            if (status) {
              status.set = "miss";
              status.maxEntrySizeExceeded = true;
            }
            this.#delete(k, "set");
            return this;
          }
          let index = this.#size === 0 ? void 0 : this.#keyMap.get(k);
          if (index === void 0) {
            index = this.#size === 0 ? this.#tail : this.#free.length !== 0 ? this.#free.pop() : this.#size === this.#max ? this.#evict(false) : this.#size;
            this.#keyList[index] = k;
            this.#valList[index] = v;
            this.#keyMap.set(k, index);
            this.#next[this.#tail] = index;
            this.#prev[index] = this.#tail;
            this.#tail = index;
            this.#size++;
            this.#addItemSize(index, size, status);
            if (status)
              status.set = "add";
            noUpdateTTL = false;
          } else {
            this.#moveToTail(index);
            const oldVal = this.#valList[index];
            if (v !== oldVal) {
              if (this.#hasFetchMethod && this.#isBackgroundFetch(oldVal)) {
                oldVal.__abortController.abort(new Error("replaced"));
                const { __staleWhileFetching: s } = oldVal;
                if (s !== void 0 && !noDisposeOnSet) {
                  if (this.#hasDispose) {
                    this.#dispose?.(s, k, "set");
                  }
                  if (this.#hasDisposeAfter) {
                    this.#disposed?.push([s, k, "set"]);
                  }
                }
              } else if (!noDisposeOnSet) {
                if (this.#hasDispose) {
                  this.#dispose?.(oldVal, k, "set");
                }
                if (this.#hasDisposeAfter) {
                  this.#disposed?.push([oldVal, k, "set"]);
                }
              }
              this.#removeItemSize(index);
              this.#addItemSize(index, size, status);
              this.#valList[index] = v;
              if (status) {
                status.set = "replace";
                const oldValue = oldVal && this.#isBackgroundFetch(oldVal) ? oldVal.__staleWhileFetching : oldVal;
                if (oldValue !== void 0)
                  status.oldValue = oldValue;
              }
            } else if (status) {
              status.set = "update";
            }
          }
          if (ttl !== 0 && !this.#ttls) {
            this.#initializeTTLTracking();
          }
          if (this.#ttls) {
            if (!noUpdateTTL) {
              this.#setItemTTL(index, ttl, start);
            }
            if (status)
              this.#statusTTL(status, index);
          }
          if (!noDisposeOnSet && this.#hasDisposeAfter && this.#disposed) {
            const dt = this.#disposed;
            let task;
            while (task = dt?.shift()) {
              this.#disposeAfter?.(...task);
            }
          }
          return this;
        }
        /**
         * Evict the least recently used item, returning its value or
         * `undefined` if cache is empty.
         */
        pop() {
          try {
            while (this.#size) {
              const val = this.#valList[this.#head];
              this.#evict(true);
              if (this.#isBackgroundFetch(val)) {
                if (val.__staleWhileFetching) {
                  return val.__staleWhileFetching;
                }
              } else if (val !== void 0) {
                return val;
              }
            }
          } finally {
            if (this.#hasDisposeAfter && this.#disposed) {
              const dt = this.#disposed;
              let task;
              while (task = dt?.shift()) {
                this.#disposeAfter?.(...task);
              }
            }
          }
        }
        #evict(free) {
          const head = this.#head;
          const k = this.#keyList[head];
          const v = this.#valList[head];
          if (this.#hasFetchMethod && this.#isBackgroundFetch(v)) {
            v.__abortController.abort(new Error("evicted"));
          } else if (this.#hasDispose || this.#hasDisposeAfter) {
            if (this.#hasDispose) {
              this.#dispose?.(v, k, "evict");
            }
            if (this.#hasDisposeAfter) {
              this.#disposed?.push([v, k, "evict"]);
            }
          }
          this.#removeItemSize(head);
          if (free) {
            this.#keyList[head] = void 0;
            this.#valList[head] = void 0;
            this.#free.push(head);
          }
          if (this.#size === 1) {
            this.#head = this.#tail = 0;
            this.#free.length = 0;
          } else {
            this.#head = this.#next[head];
          }
          this.#keyMap.delete(k);
          this.#size--;
          return head;
        }
        /**
         * Check if a key is in the cache, without updating the recency of use.
         * Will return false if the item is stale, even though it is technically
         * in the cache.
         *
         * Check if a key is in the cache, without updating the recency of
         * use. Age is updated if {@link LRUCache.OptionsBase.updateAgeOnHas} is set
         * to `true` in either the options or the constructor.
         *
         * Will return `false` if the item is stale, even though it is technically in
         * the cache. The difference can be determined (if it matters) by using a
         * `status` argument, and inspecting the `has` field.
         *
         * Will not update item age unless
         * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.
         */
        has(k, hasOptions = {}) {
          const { updateAgeOnHas = this.updateAgeOnHas, status } = hasOptions;
          const index = this.#keyMap.get(k);
          if (index !== void 0) {
            const v = this.#valList[index];
            if (this.#isBackgroundFetch(v) && v.__staleWhileFetching === void 0) {
              return false;
            }
            if (!this.#isStale(index)) {
              if (updateAgeOnHas) {
                this.#updateItemAge(index);
              }
              if (status) {
                status.has = "hit";
                this.#statusTTL(status, index);
              }
              return true;
            } else if (status) {
              status.has = "stale";
              this.#statusTTL(status, index);
            }
          } else if (status) {
            status.has = "miss";
          }
          return false;
        }
        /**
         * Like {@link LRUCache#get} but doesn't update recency or delete stale
         * items.
         *
         * Returns `undefined` if the item is stale, unless
         * {@link LRUCache.OptionsBase.allowStale} is set.
         */
        peek(k, peekOptions = {}) {
          const { allowStale = this.allowStale } = peekOptions;
          const index = this.#keyMap.get(k);
          if (index === void 0 || !allowStale && this.#isStale(index)) {
            return;
          }
          const v = this.#valList[index];
          return this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
        }
        #backgroundFetch(k, index, options, context) {
          const v = index === void 0 ? void 0 : this.#valList[index];
          if (this.#isBackgroundFetch(v)) {
            return v;
          }
          const ac = new AC();
          const { signal } = options;
          signal?.addEventListener("abort", () => ac.abort(signal.reason), {
            signal: ac.signal
          });
          const fetchOpts = {
            signal: ac.signal,
            options,
            context
          };
          const cb = (v2, updateCache = false) => {
            const { aborted } = ac.signal;
            const ignoreAbort = options.ignoreFetchAbort && v2 !== void 0;
            if (options.status) {
              if (aborted && !updateCache) {
                options.status.fetchAborted = true;
                options.status.fetchError = ac.signal.reason;
                if (ignoreAbort)
                  options.status.fetchAbortIgnored = true;
              } else {
                options.status.fetchResolved = true;
              }
            }
            if (aborted && !ignoreAbort && !updateCache) {
              return fetchFail(ac.signal.reason);
            }
            const bf2 = p;
            if (this.#valList[index] === p) {
              if (v2 === void 0) {
                if (bf2.__staleWhileFetching) {
                  this.#valList[index] = bf2.__staleWhileFetching;
                } else {
                  this.#delete(k, "fetch");
                }
              } else {
                if (options.status)
                  options.status.fetchUpdated = true;
                this.set(k, v2, fetchOpts.options);
              }
            }
            return v2;
          };
          const eb = (er) => {
            if (options.status) {
              options.status.fetchRejected = true;
              options.status.fetchError = er;
            }
            return fetchFail(er);
          };
          const fetchFail = (er) => {
            const { aborted } = ac.signal;
            const allowStaleAborted = aborted && options.allowStaleOnFetchAbort;
            const allowStale = allowStaleAborted || options.allowStaleOnFetchRejection;
            const noDelete = allowStale || options.noDeleteOnFetchRejection;
            const bf2 = p;
            if (this.#valList[index] === p) {
              const del = !noDelete || bf2.__staleWhileFetching === void 0;
              if (del) {
                this.#delete(k, "fetch");
              } else if (!allowStaleAborted) {
                this.#valList[index] = bf2.__staleWhileFetching;
              }
            }
            if (allowStale) {
              if (options.status && bf2.__staleWhileFetching !== void 0) {
                options.status.returnedStale = true;
              }
              return bf2.__staleWhileFetching;
            } else if (bf2.__returned === bf2) {
              throw er;
            }
          };
          const pcall = (res, rej) => {
            const fmp = this.#fetchMethod?.(k, v, fetchOpts);
            if (fmp && fmp instanceof Promise) {
              fmp.then((v2) => res(v2 === void 0 ? void 0 : v2), rej);
            }
            ac.signal.addEventListener("abort", () => {
              if (!options.ignoreFetchAbort || options.allowStaleOnFetchAbort) {
                res(void 0);
                if (options.allowStaleOnFetchAbort) {
                  res = (v2) => cb(v2, true);
                }
              }
            });
          };
          if (options.status)
            options.status.fetchDispatched = true;
          const p = new Promise(pcall).then(cb, eb);
          const bf = Object.assign(p, {
            __abortController: ac,
            __staleWhileFetching: v,
            __returned: void 0
          });
          if (index === void 0) {
            this.set(k, bf, { ...fetchOpts.options, status: void 0 });
            index = this.#keyMap.get(k);
          } else {
            this.#valList[index] = bf;
          }
          return bf;
        }
        #isBackgroundFetch(p) {
          if (!this.#hasFetchMethod)
            return false;
          const b = p;
          return !!b && b instanceof Promise && b.hasOwnProperty("__staleWhileFetching") && b.__abortController instanceof AC;
        }
        async fetch(k, fetchOptions = {}) {
          const {
            // get options
            allowStale = this.allowStale,
            updateAgeOnGet = this.updateAgeOnGet,
            noDeleteOnStaleGet = this.noDeleteOnStaleGet,
            // set options
            ttl = this.ttl,
            noDisposeOnSet = this.noDisposeOnSet,
            size = 0,
            sizeCalculation = this.sizeCalculation,
            noUpdateTTL = this.noUpdateTTL,
            // fetch exclusive options
            noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,
            allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,
            ignoreFetchAbort = this.ignoreFetchAbort,
            allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,
            context,
            forceRefresh = false,
            status,
            signal
          } = fetchOptions;
          if (!this.#hasFetchMethod) {
            if (status)
              status.fetch = "get";
            return this.get(k, {
              allowStale,
              updateAgeOnGet,
              noDeleteOnStaleGet,
              status
            });
          }
          const options = {
            allowStale,
            updateAgeOnGet,
            noDeleteOnStaleGet,
            ttl,
            noDisposeOnSet,
            size,
            sizeCalculation,
            noUpdateTTL,
            noDeleteOnFetchRejection,
            allowStaleOnFetchRejection,
            allowStaleOnFetchAbort,
            ignoreFetchAbort,
            status,
            signal
          };
          let index = this.#keyMap.get(k);
          if (index === void 0) {
            if (status)
              status.fetch = "miss";
            const p = this.#backgroundFetch(k, index, options, context);
            return p.__returned = p;
          } else {
            const v = this.#valList[index];
            if (this.#isBackgroundFetch(v)) {
              const stale = allowStale && v.__staleWhileFetching !== void 0;
              if (status) {
                status.fetch = "inflight";
                if (stale)
                  status.returnedStale = true;
              }
              return stale ? v.__staleWhileFetching : v.__returned = v;
            }
            const isStale = this.#isStale(index);
            if (!forceRefresh && !isStale) {
              if (status)
                status.fetch = "hit";
              this.#moveToTail(index);
              if (updateAgeOnGet) {
                this.#updateItemAge(index);
              }
              if (status)
                this.#statusTTL(status, index);
              return v;
            }
            const p = this.#backgroundFetch(k, index, options, context);
            const hasStale = p.__staleWhileFetching !== void 0;
            const staleVal = hasStale && allowStale;
            if (status) {
              status.fetch = isStale ? "stale" : "refresh";
              if (staleVal && isStale)
                status.returnedStale = true;
            }
            return staleVal ? p.__staleWhileFetching : p.__returned = p;
          }
        }
        async forceFetch(k, fetchOptions = {}) {
          const v = await this.fetch(k, fetchOptions);
          if (v === void 0)
            throw new Error("fetch() returned undefined");
          return v;
        }
        memo(k, memoOptions = {}) {
          const memoMethod = this.#memoMethod;
          if (!memoMethod) {
            throw new Error("no memoMethod provided to constructor");
          }
          const { context, forceRefresh, ...options } = memoOptions;
          const v = this.get(k, options);
          if (!forceRefresh && v !== void 0)
            return v;
          const vv = memoMethod(k, v, {
            options,
            context
          });
          this.set(k, vv, options);
          return vv;
        }
        /**
         * Return a value from the cache. Will update the recency of the cache
         * entry found.
         *
         * If the key is not found, get() will return `undefined`.
         */
        get(k, getOptions = {}) {
          const { allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, status } = getOptions;
          const index = this.#keyMap.get(k);
          if (index !== void 0) {
            const value = this.#valList[index];
            const fetching = this.#isBackgroundFetch(value);
            if (status)
              this.#statusTTL(status, index);
            if (this.#isStale(index)) {
              if (status)
                status.get = "stale";
              if (!fetching) {
                if (!noDeleteOnStaleGet) {
                  this.#delete(k, "expire");
                }
                if (status && allowStale)
                  status.returnedStale = true;
                return allowStale ? value : void 0;
              } else {
                if (status && allowStale && value.__staleWhileFetching !== void 0) {
                  status.returnedStale = true;
                }
                return allowStale ? value.__staleWhileFetching : void 0;
              }
            } else {
              if (status)
                status.get = "hit";
              if (fetching) {
                return value.__staleWhileFetching;
              }
              this.#moveToTail(index);
              if (updateAgeOnGet) {
                this.#updateItemAge(index);
              }
              return value;
            }
          } else if (status) {
            status.get = "miss";
          }
        }
        #connect(p, n) {
          this.#prev[n] = p;
          this.#next[p] = n;
        }
        #moveToTail(index) {
          if (index !== this.#tail) {
            if (index === this.#head) {
              this.#head = this.#next[index];
            } else {
              this.#connect(this.#prev[index], this.#next[index]);
            }
            this.#connect(this.#tail, index);
            this.#tail = index;
          }
        }
        /**
         * Deletes a key out of the cache.
         *
         * Returns true if the key was deleted, false otherwise.
         */
        delete(k) {
          return this.#delete(k, "delete");
        }
        #delete(k, reason) {
          let deleted = false;
          if (this.#size !== 0) {
            const index = this.#keyMap.get(k);
            if (index !== void 0) {
              deleted = true;
              if (this.#size === 1) {
                this.#clear(reason);
              } else {
                this.#removeItemSize(index);
                const v = this.#valList[index];
                if (this.#isBackgroundFetch(v)) {
                  v.__abortController.abort(new Error("deleted"));
                } else if (this.#hasDispose || this.#hasDisposeAfter) {
                  if (this.#hasDispose) {
                    this.#dispose?.(v, k, reason);
                  }
                  if (this.#hasDisposeAfter) {
                    this.#disposed?.push([v, k, reason]);
                  }
                }
                this.#keyMap.delete(k);
                this.#keyList[index] = void 0;
                this.#valList[index] = void 0;
                if (index === this.#tail) {
                  this.#tail = this.#prev[index];
                } else if (index === this.#head) {
                  this.#head = this.#next[index];
                } else {
                  const pi = this.#prev[index];
                  this.#next[pi] = this.#next[index];
                  const ni = this.#next[index];
                  this.#prev[ni] = this.#prev[index];
                }
                this.#size--;
                this.#free.push(index);
              }
            }
          }
          if (this.#hasDisposeAfter && this.#disposed?.length) {
            const dt = this.#disposed;
            let task;
            while (task = dt?.shift()) {
              this.#disposeAfter?.(...task);
            }
          }
          return deleted;
        }
        /**
         * Clear the cache entirely, throwing away all values.
         */
        clear() {
          return this.#clear("delete");
        }
        #clear(reason) {
          for (const index of this.#rindexes({ allowStale: true })) {
            const v = this.#valList[index];
            if (this.#isBackgroundFetch(v)) {
              v.__abortController.abort(new Error("deleted"));
            } else {
              const k = this.#keyList[index];
              if (this.#hasDispose) {
                this.#dispose?.(v, k, reason);
              }
              if (this.#hasDisposeAfter) {
                this.#disposed?.push([v, k, reason]);
              }
            }
          }
          this.#keyMap.clear();
          this.#valList.fill(void 0);
          this.#keyList.fill(void 0);
          if (this.#ttls && this.#starts) {
            this.#ttls.fill(0);
            this.#starts.fill(0);
          }
          if (this.#sizes) {
            this.#sizes.fill(0);
          }
          this.#head = 0;
          this.#tail = 0;
          this.#free.length = 0;
          this.#calculatedSize = 0;
          this.#size = 0;
          if (this.#hasDisposeAfter && this.#disposed) {
            const dt = this.#disposed;
            let task;
            while (task = dt?.shift()) {
              this.#disposeAfter?.(...task);
            }
          }
        }
      };
      exports.LRUCache = LRUCache;
    }
  });

  // node_modules/.pnpm/@atproto-labs+simple-store-memory@0.1.3/node_modules/@atproto-labs/simple-store-memory/dist/util.js
  var require_util5 = __commonJS({
    "node_modules/.pnpm/@atproto-labs+simple-store-memory@0.1.3/node_modules/@atproto-labs/simple-store-memory/dist/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.roughSizeOfObject = roughSizeOfObject;
      var knownSizes = /* @__PURE__ */ new WeakMap();
      function roughSizeOfObject(value) {
        const objectList = /* @__PURE__ */ new Set();
        const stack = [value];
        let bytes = 0;
        while (stack.length) {
          const value2 = stack.pop();
          switch (typeof value2) {
            // Types are ordered by frequency
            case "string":
              bytes += 12 + 4 * Math.ceil(value2.length / 4);
              break;
            case "number":
              bytes += 12;
              break;
            case "boolean":
              bytes += 4;
              break;
            case "object":
              bytes += 4;
              if (value2 === null) {
                break;
              }
              if (knownSizes.has(value2)) {
                bytes += knownSizes.get(value2);
                break;
              }
              if (objectList.has(value2))
                continue;
              objectList.add(value2);
              if (Array.isArray(value2)) {
                bytes += 4;
                stack.push(...value2);
              } else {
                bytes += 8;
                const keys = Object.getOwnPropertyNames(value2);
                for (let i = 0; i < keys.length; i++) {
                  bytes += 4;
                  const key = keys[i];
                  const val = value2[key];
                  if (val !== void 0)
                    stack.push(val);
                  stack.push(key);
                }
              }
              break;
            case "function":
              bytes += 8;
              break;
            case "symbol":
              bytes += 8;
              break;
            case "bigint":
              bytes += 16;
              break;
          }
        }
        if (typeof value === "object" && value !== null) {
          knownSizes.set(value, bytes);
        }
        return bytes;
      }
    }
  });

  // node_modules/.pnpm/@atproto-labs+simple-store-memory@0.1.3/node_modules/@atproto-labs/simple-store-memory/dist/index.js
  var require_dist5 = __commonJS({
    "node_modules/.pnpm/@atproto-labs+simple-store-memory@0.1.3/node_modules/@atproto-labs/simple-store-memory/dist/index.js"(exports) {
      "use strict";
      var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      var _SimpleStoreMemory_cache;
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SimpleStoreMemory = void 0;
      var lru_cache_1 = require_commonjs();
      var util_js_1 = require_util5();
      var nullSymbol = Symbol("nullItem");
      var toLruValue = (value) => value === null ? nullSymbol : value;
      var fromLruValue = (value) => value === nullSymbol ? null : value;
      var SimpleStoreMemory = class {
        constructor({ sizeCalculation, ...options }) {
          _SimpleStoreMemory_cache.set(this, void 0);
          __classPrivateFieldSet(this, _SimpleStoreMemory_cache, new lru_cache_1.LRUCache({
            ...options,
            allowStale: false,
            updateAgeOnGet: false,
            updateAgeOnHas: false,
            sizeCalculation: sizeCalculation ? (value, key) => sizeCalculation(fromLruValue(value), key) : options.maxEntrySize != null || options.maxSize != null ? (
              // maxEntrySize and maxSize require a size calculation function.
              util_js_1.roughSizeOfObject
            ) : void 0
          }), "f");
        }
        get(key) {
          const value = __classPrivateFieldGet(this, _SimpleStoreMemory_cache, "f").get(key);
          if (value === void 0)
            return void 0;
          return fromLruValue(value);
        }
        set(key, value) {
          __classPrivateFieldGet(this, _SimpleStoreMemory_cache, "f").set(key, toLruValue(value));
        }
        del(key) {
          __classPrivateFieldGet(this, _SimpleStoreMemory_cache, "f").delete(key);
        }
        clear() {
          __classPrivateFieldGet(this, _SimpleStoreMemory_cache, "f").clear();
        }
      };
      exports.SimpleStoreMemory = SimpleStoreMemory;
      _SimpleStoreMemory_cache = /* @__PURE__ */ new WeakMap();
    }
  });

  // node_modules/.pnpm/@atproto-labs+did-resolver@0.1.13/node_modules/@atproto-labs/did-resolver/dist/did-cache-memory.js
  var require_did_cache_memory = __commonJS({
    "node_modules/.pnpm/@atproto-labs+did-resolver@0.1.13/node_modules/@atproto-labs/did-resolver/dist/did-cache-memory.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DidCacheMemory = void 0;
      var simple_store_memory_1 = require_dist5();
      var DEFAULT_TTL = 3600 * 1e3;
      var DEFAULT_MAX_SIZE = 50 * 1024 * 1024;
      var DidCacheMemory = class extends simple_store_memory_1.SimpleStoreMemory {
        constructor(options) {
          super(options?.max == null ? { ttl: DEFAULT_TTL, maxSize: DEFAULT_MAX_SIZE, ...options } : { ttl: DEFAULT_TTL, ...options });
        }
      };
      exports.DidCacheMemory = DidCacheMemory;
    }
  });

  // node_modules/.pnpm/@atproto-labs+simple-store@0.2.0/node_modules/@atproto-labs/simple-store/dist/cached-getter.js
  var require_cached_getter = __commonJS({
    "node_modules/.pnpm/@atproto-labs+simple-store@0.2.0/node_modules/@atproto-labs/simple-store/dist/cached-getter.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.CachedGetter = void 0;
      var returnTrue = () => true;
      var returnFalse = () => false;
      var CachedGetter = class {
        constructor(getter, store, options) {
          Object.defineProperty(this, "getter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: getter
          });
          Object.defineProperty(this, "store", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: store
          });
          Object.defineProperty(this, "options", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: options
          });
          Object.defineProperty(this, "pending", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: /* @__PURE__ */ new Map()
          });
        }
        async get(key, options = {}) {
          options.signal?.throwIfAborted();
          const isStale = this.options?.isStale;
          const allowStored = options.noCache ? returnFalse : options.allowStale || isStale == null ? returnTrue : async (value2) => !await isStale(key, value2);
          let previousExecutionFlow;
          while (previousExecutionFlow = this.pending.get(key)) {
            try {
              const { isFresh, value: value2 } = await previousExecutionFlow;
              if (isFresh)
                return value2;
              if (await allowStored(value2))
                return value2;
            } catch {
            }
            options.signal?.throwIfAborted();
          }
          const currentExecutionFlow = Promise.resolve().then(async () => {
            const storedValue = await this.getStored(key, options);
            if (storedValue !== void 0 && await allowStored(storedValue)) {
              return { isFresh: false, value: storedValue };
            }
            return Promise.resolve().then(async () => (0, this.getter)(key, options, storedValue)).catch(async (err) => {
              if (storedValue !== void 0) {
                try {
                  const deleteOnError = this.options?.deleteOnError;
                  if (await deleteOnError?.(err, key, storedValue)) {
                    await this.delStored(key, err);
                  }
                } catch (error) {
                  throw new AggregateError([err, error], "Error while deleting stored value");
                }
              }
              throw err;
            }).then(async (value2) => {
              await this.setStored(key, value2);
              return { isFresh: true, value: value2 };
            });
          }).finally(() => {
            this.pending.delete(key);
          });
          if (this.pending.has(key)) {
            throw new Error("Concurrent request for the same key");
          }
          this.pending.set(key, currentExecutionFlow);
          const { value } = await currentExecutionFlow;
          return value;
        }
        async getStored(key, options) {
          try {
            return await this.store.get(key, options);
          } catch (err) {
            return void 0;
          }
        }
        async setStored(key, value) {
          try {
            await this.store.set(key, value);
          } catch (err) {
            const onStoreError = this.options?.onStoreError;
            await onStoreError?.(err, key, value);
          }
        }
        async delStored(key, _cause) {
          await this.store.del(key);
        }
      };
      exports.CachedGetter = CachedGetter;
    }
  });

  // node_modules/.pnpm/@atproto-labs+simple-store@0.2.0/node_modules/@atproto-labs/simple-store/dist/simple-store.js
  var require_simple_store = __commonJS({
    "node_modules/.pnpm/@atproto-labs+simple-store@0.2.0/node_modules/@atproto-labs/simple-store/dist/simple-store.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/.pnpm/@atproto-labs+simple-store@0.2.0/node_modules/@atproto-labs/simple-store/dist/index.js
  var require_dist6 = __commonJS({
    "node_modules/.pnpm/@atproto-labs+simple-store@0.2.0/node_modules/@atproto-labs/simple-store/dist/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_cached_getter(), exports);
      __exportStar(require_simple_store(), exports);
    }
  });

  // node_modules/.pnpm/@atproto-labs+did-resolver@0.1.13/node_modules/@atproto-labs/did-resolver/dist/did-cache.js
  var require_did_cache = __commonJS({
    "node_modules/.pnpm/@atproto-labs+did-resolver@0.1.13/node_modules/@atproto-labs/did-resolver/dist/did-cache.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DidResolverCached = void 0;
      var simple_store_1 = require_dist6();
      var did_cache_memory_js_1 = require_did_cache_memory();
      var DidResolverCached = class {
        constructor(resolver, cache = new did_cache_memory_js_1.DidCacheMemory()) {
          Object.defineProperty(this, "getter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.getter = new simple_store_1.CachedGetter((did, options) => resolver.resolve(did, options), cache);
        }
        async resolve(did, options) {
          return this.getter.get(did, options);
        }
      };
      exports.DidResolverCached = DidResolverCached;
    }
  });

  // node_modules/.pnpm/@atproto-labs+did-resolver@0.1.13/node_modules/@atproto-labs/did-resolver/dist/did-method.js
  var require_did_method = __commonJS({
    "node_modules/.pnpm/@atproto-labs+did-resolver@0.1.13/node_modules/@atproto-labs/did-resolver/dist/did-method.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/.pnpm/@atproto-labs+fetch@0.2.3/node_modules/@atproto-labs/fetch/dist/fetch-error.js
  var require_fetch_error = __commonJS({
    "node_modules/.pnpm/@atproto-labs+fetch@0.2.3/node_modules/@atproto-labs/fetch/dist/fetch-error.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FetchError = void 0;
      var FetchError = class extends Error {
        constructor(statusCode, message2, options) {
          super(message2, options);
          Object.defineProperty(this, "statusCode", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: statusCode
          });
        }
        get expose() {
          return true;
        }
      };
      exports.FetchError = FetchError;
    }
  });

  // node_modules/.pnpm/@atproto-labs+fetch@0.2.3/node_modules/@atproto-labs/fetch/dist/fetch.js
  var require_fetch = __commonJS({
    "node_modules/.pnpm/@atproto-labs+fetch@0.2.3/node_modules/@atproto-labs/fetch/dist/fetch.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toRequestTransformer = toRequestTransformer;
      exports.asRequest = asRequest;
      function toRequestTransformer(requestTransformer) {
        return function(input, init) {
          return requestTransformer.call(this, asRequest(input, init));
        };
      }
      function asRequest(input, init) {
        if (!init && input instanceof Request)
          return input;
        return new Request(input, init);
      }
    }
  });

  // node_modules/.pnpm/@atproto-labs+fetch@0.2.3/node_modules/@atproto-labs/fetch/dist/util.js
  var require_util6 = __commonJS({
    "node_modules/.pnpm/@atproto-labs+fetch@0.2.3/node_modules/@atproto-labs/fetch/dist/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.extractUrl = exports.MaxBytesTransformStream = exports.ifString = void 0;
      exports.isIp = isIp;
      exports.padLines = padLines;
      exports.cancelBody = cancelBody;
      exports.logCancellationError = logCancellationError;
      exports.stringifyMessage = stringifyMessage;
      function isIp(hostname) {
        if (hostname.match(/^\d+\.\d+\.\d+\.\d+$/))
          return true;
        if (hostname.startsWith("[") && hostname.endsWith("]"))
          return true;
        return false;
      }
      var ifString = (v) => typeof v === "string" ? v : void 0;
      exports.ifString = ifString;
      var MaxBytesTransformStream = class extends TransformStream {
        constructor(maxBytes) {
          if (!(maxBytes >= 0)) {
            throw new TypeError("maxBytes must be a non-negative number");
          }
          let bytesRead = 0;
          super({
            transform: (chunk, ctrl) => {
              if ((bytesRead += chunk.length) <= maxBytes) {
                ctrl.enqueue(chunk);
              } else {
                ctrl.error(new Error("Response too large"));
              }
            }
          });
        }
      };
      exports.MaxBytesTransformStream = MaxBytesTransformStream;
      var LINE_BREAK = /\r?\n/g;
      function padLines(input, pad) {
        if (!input)
          return input;
        return pad + input.replace(LINE_BREAK, `$&${pad}`);
      }
      async function cancelBody(body, onCancellationError) {
        if (body.body && !body.bodyUsed && !body.body.locked && // Support for alternative fetch implementations
        typeof body.body.cancel === "function") {
          if (typeof onCancellationError === "function") {
            void body.body.cancel().catch(onCancellationError);
          } else if (onCancellationError === "log") {
            void body.body.cancel().catch(logCancellationError);
          } else {
            await body.body.cancel();
          }
        }
      }
      function logCancellationError(err) {
        console.warn("Failed to cancel response body", err);
      }
      async function stringifyMessage(input) {
        try {
          const headers = stringifyHeaders(input.headers);
          const payload = await stringifyBody(input);
          return headers && payload ? `${headers}
${payload}` : headers || payload;
        } finally {
          void cancelBody(input, "log");
        }
      }
      function stringifyHeaders(headers) {
        return Array.from(headers).map(([name2, value]) => `${name2}: ${value}`).join("\n");
      }
      async function stringifyBody(body) {
        try {
          const blob = await body.blob();
          if (blob.type?.startsWith("text/")) {
            const text = await blob.text();
            return JSON.stringify(text);
          }
          if (/application\/(?:\w+\+)?json/.test(blob.type)) {
            const text = await blob.text();
            return text.includes("\n") ? JSON.stringify(JSON.parse(text)) : text;
          }
          return `[Body size: ${blob.size}, type: ${JSON.stringify(blob.type)} ]`;
        } catch {
          return "[Body could not be read]";
        }
      }
      var extractUrl = (input) => typeof input === "string" ? new URL(input) : input instanceof URL ? input : new URL(input.url);
      exports.extractUrl = extractUrl;
    }
  });

  // node_modules/.pnpm/@atproto-labs+fetch@0.2.3/node_modules/@atproto-labs/fetch/dist/fetch-request.js
  var require_fetch_request = __commonJS({
    "node_modules/.pnpm/@atproto-labs+fetch@0.2.3/node_modules/@atproto-labs/fetch/dist/fetch-request.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DEFAULT_FORBIDDEN_DOMAIN_NAMES = exports.FetchRequestError = void 0;
      exports.protocolCheckRequestTransform = protocolCheckRequestTransform;
      exports.explicitRedirectCheckRequestTransform = explicitRedirectCheckRequestTransform;
      exports.requireHostHeaderTransform = requireHostHeaderTransform;
      exports.forbiddenDomainNameRequestTransform = forbiddenDomainNameRequestTransform;
      var fetch_error_js_1 = require_fetch_error();
      var fetch_js_1 = require_fetch();
      var util_js_1 = require_util6();
      var FetchRequestError = class _FetchRequestError extends fetch_error_js_1.FetchError {
        constructor(request, statusCode, message2, options) {
          if (statusCode == null || !message2) {
            const info = extractInfo(extractRootCause(options?.cause));
            statusCode ?? (statusCode = info[0]);
            message2 || (message2 = info[1]);
          }
          super(statusCode, message2, options);
          Object.defineProperty(this, "request", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: request
          });
        }
        get expose() {
          return this.statusCode !== 500;
        }
        static from(request, cause) {
          if (cause instanceof _FetchRequestError)
            return cause;
          return new _FetchRequestError(request, void 0, void 0, { cause });
        }
      };
      exports.FetchRequestError = FetchRequestError;
      function extractRootCause(err) {
        if (err instanceof TypeError && err.message === "fetch failed" && err.cause !== void 0) {
          return err.cause;
        }
        return err;
      }
      function extractInfo(err) {
        if (typeof err === "string" && err.length > 0) {
          return [500, err];
        }
        if (!(err instanceof Error)) {
          return [500, "Failed to fetch"];
        }
        switch (err.message) {
          case "failed to fetch the data URL":
            return [400, err.message];
          case "unexpected redirect":
          case "cors failure":
          case "blocked":
          case "proxy authentication required":
            return [502, err.message];
        }
        const code2 = err["code"];
        if (typeof code2 === "string") {
          switch (true) {
            case code2 === "ENOTFOUND":
              return [400, "Invalid hostname"];
            case code2 === "ECONNREFUSED":
              return [502, "Connection refused"];
            case code2 === "DEPTH_ZERO_SELF_SIGNED_CERT":
              return [502, "Self-signed certificate"];
            case code2.startsWith("ERR_TLS"):
              return [502, "TLS error"];
            case code2.startsWith("ECONN"):
              return [502, "Connection error"];
            default:
              return [500, `${code2} error`];
          }
        }
        return [500, err.message];
      }
      function protocolCheckRequestTransform(protocols) {
        return (input, init) => {
          const { protocol, port } = (0, util_js_1.extractUrl)(input);
          const request = (0, fetch_js_1.asRequest)(input, init);
          const config = Object.hasOwn(protocols, protocol) ? protocols[protocol] : void 0;
          if (!config) {
            throw new FetchRequestError(request, 400, `Forbidden protocol "${protocol}"`);
          } else if (config === true) {
          } else if (!config["allowCustomPort"] && port !== "") {
            throw new FetchRequestError(request, 400, `Custom ${protocol} ports not allowed`);
          }
          return request;
        };
      }
      function explicitRedirectCheckRequestTransform() {
        return (input, init) => {
          const request = (0, fetch_js_1.asRequest)(input, init);
          if (init?.redirect != null)
            return request;
          if (request.redirect === "follow") {
            throw new FetchRequestError(request, 500, 'Request redirect must be "error" or "manual"');
          }
          return request;
        };
      }
      function requireHostHeaderTransform() {
        return (input, init) => {
          const { protocol, hostname } = (0, util_js_1.extractUrl)(input);
          const request = (0, fetch_js_1.asRequest)(input, init);
          if (protocol !== "http:" && protocol !== "https:") {
            throw new FetchRequestError(request, 400, `"${protocol}" requests are not allowed`);
          }
          if (!hostname || (0, util_js_1.isIp)(hostname)) {
            throw new FetchRequestError(request, 400, "Invalid hostname");
          }
          return request;
        };
      }
      exports.DEFAULT_FORBIDDEN_DOMAIN_NAMES = [
        "example.com",
        "*.example.com",
        "example.org",
        "*.example.org",
        "example.net",
        "*.example.net",
        "googleusercontent.com",
        "*.googleusercontent.com"
      ];
      function forbiddenDomainNameRequestTransform(denyList = exports.DEFAULT_FORBIDDEN_DOMAIN_NAMES) {
        const denySet = new Set(denyList);
        if (denySet.size === 0) {
          return fetch_js_1.asRequest;
        }
        return async (input, init) => {
          const { hostname } = (0, util_js_1.extractUrl)(input);
          const request = (0, fetch_js_1.asRequest)(input, init);
          if (denySet.has(hostname)) {
            throw new FetchRequestError(request, 403, "Forbidden hostname");
          }
          let curDot = hostname.indexOf(".");
          while (curDot !== -1) {
            const subdomain = hostname.slice(curDot + 1);
            if (denySet.has(`*.${subdomain}`)) {
              throw new FetchRequestError(request, 403, "Forbidden hostname");
            }
            curDot = hostname.indexOf(".", curDot + 1);
          }
          return request;
        };
      }
    }
  });

  // node_modules/.pnpm/@atproto-labs+pipe@0.1.1/node_modules/@atproto-labs/pipe/dist/pipe.js
  var require_pipe = __commonJS({
    "node_modules/.pnpm/@atproto-labs+pipe@0.1.1/node_modules/@atproto-labs/pipe/dist/pipe.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.pipe = pipe;
      exports.pipeTwo = pipeTwo;
      function pipe(...pipeline) {
        return pipeline.reduce(pipeTwo);
      }
      function pipeTwo(first, second) {
        return async (...args) => second(await first(...args));
      }
    }
  });

  // node_modules/.pnpm/@atproto-labs+pipe@0.1.1/node_modules/@atproto-labs/pipe/dist/index.js
  var require_dist7 = __commonJS({
    "node_modules/.pnpm/@atproto-labs+pipe@0.1.1/node_modules/@atproto-labs/pipe/dist/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.pipeTwo = exports.pipe = void 0;
      var pipe_js_1 = require_pipe();
      Object.defineProperty(exports, "pipe", { enumerable: true, get: function() {
        return pipe_js_1.pipe;
      } });
      Object.defineProperty(exports, "pipeTwo", { enumerable: true, get: function() {
        return pipe_js_1.pipeTwo;
      } });
    }
  });

  // node_modules/.pnpm/@atproto-labs+fetch@0.2.3/node_modules/@atproto-labs/fetch/dist/transformed-response.js
  var require_transformed_response = __commonJS({
    "node_modules/.pnpm/@atproto-labs+fetch@0.2.3/node_modules/@atproto-labs/fetch/dist/transformed-response.js"(exports) {
      "use strict";
      var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      var _TransformedResponse_response;
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TransformedResponse = void 0;
      var TransformedResponse = class extends Response {
        constructor(response, transform) {
          if (!response.body) {
            throw new TypeError("Response body is not available");
          }
          if (response.bodyUsed) {
            throw new TypeError("Response body is already used");
          }
          super(response.body.pipeThrough(transform), {
            status: response.status,
            statusText: response.statusText,
            headers: response.headers
          });
          _TransformedResponse_response.set(this, void 0);
          __classPrivateFieldSet(this, _TransformedResponse_response, response, "f");
        }
        /**
         * Some props can't be set through ResponseInit, so we need to proxy them
         */
        get url() {
          return __classPrivateFieldGet(this, _TransformedResponse_response, "f").url;
        }
        get redirected() {
          return __classPrivateFieldGet(this, _TransformedResponse_response, "f").redirected;
        }
        get type() {
          return __classPrivateFieldGet(this, _TransformedResponse_response, "f").type;
        }
        get statusText() {
          return __classPrivateFieldGet(this, _TransformedResponse_response, "f").statusText;
        }
      };
      exports.TransformedResponse = TransformedResponse;
      _TransformedResponse_response = /* @__PURE__ */ new WeakMap();
    }
  });

  // node_modules/.pnpm/@atproto-labs+fetch@0.2.3/node_modules/@atproto-labs/fetch/dist/fetch-response.js
  var require_fetch_response = __commonJS({
    "node_modules/.pnpm/@atproto-labs+fetch@0.2.3/node_modules/@atproto-labs/fetch/dist/fetch-response.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.fetchJsonZodProcessor = exports.FetchResponseError = void 0;
      exports.peekJson = peekJson;
      exports.checkLength = checkLength;
      exports.extractLength = extractLength;
      exports.extractMime = extractMime;
      exports.cancelBodyOnError = cancelBodyOnError;
      exports.fetchOkProcessor = fetchOkProcessor;
      exports.fetchOkTransformer = fetchOkTransformer;
      exports.fetchMaxSizeProcessor = fetchMaxSizeProcessor;
      exports.fetchResponseMaxSizeChecker = fetchResponseMaxSizeChecker;
      exports.fetchTypeProcessor = fetchTypeProcessor;
      exports.fetchResponseTypeChecker = fetchResponseTypeChecker;
      exports.fetchResponseJsonTransformer = fetchResponseJsonTransformer;
      exports.fetchJsonProcessor = fetchJsonProcessor;
      exports.fetchJsonValidatorProcessor = fetchJsonValidatorProcessor;
      var pipe_1 = require_dist7();
      var fetch_error_js_1 = require_fetch_error();
      var transformed_response_js_1 = require_transformed_response();
      var util_js_1 = require_util6();
      var JSON_MIME = /^application\/(?:[^()<>@,;:/[\]\\?={} \t]+\+)?json$/i;
      var FetchResponseError = class _FetchResponseError extends fetch_error_js_1.FetchError {
        constructor(response, statusCode = response.status, message2 = response.statusText, options) {
          super(statusCode, message2, options);
          Object.defineProperty(this, "response", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: response
          });
        }
        static async from(response, customMessage = extractResponseMessage, statusCode = response.status, options) {
          const message2 = typeof customMessage === "string" ? customMessage : typeof customMessage === "function" ? await customMessage(response) : void 0;
          return new _FetchResponseError(response, statusCode, message2, options);
        }
      };
      exports.FetchResponseError = FetchResponseError;
      var extractResponseMessage = async (response) => {
        const mimeType = extractMime(response);
        if (!mimeType)
          return void 0;
        try {
          if (mimeType === "text/plain") {
            return await response.text();
          } else if (JSON_MIME.test(mimeType)) {
            const json = await response.json();
            if (typeof json === "string")
              return json;
            if (typeof json === "object" && json != null) {
              const errorDescription = (0, util_js_1.ifString)(json["error_description"]);
              if (errorDescription)
                return errorDescription;
              const error = (0, util_js_1.ifString)(json["error"]);
              if (error)
                return error;
              const message2 = (0, util_js_1.ifString)(json["message"]);
              if (message2)
                return message2;
            }
          }
        } catch {
        }
        return void 0;
      };
      async function peekJson(response, maxSize = Infinity) {
        const type = extractMime(response);
        if (type !== "application/json")
          return void 0;
        checkLength(response, maxSize);
        const clonedResponse = response.clone();
        const limitedResponse = response.body && maxSize < Infinity ? new transformed_response_js_1.TransformedResponse(clonedResponse, new util_js_1.MaxBytesTransformStream(maxSize)) : (
          // Note: some runtimes (e.g. react-native) don't expose a body property
          clonedResponse
        );
        return limitedResponse.json();
      }
      function checkLength(response, maxBytes) {
        if (!(maxBytes >= 0)) {
          throw new TypeError("maxBytes must be a non-negative number");
        }
        const length2 = extractLength(response);
        if (length2 != null && length2 > maxBytes) {
          throw new FetchResponseError(response, 502, "Response too large");
        }
        return length2;
      }
      function extractLength(response) {
        const contentLength = response.headers.get("Content-Length");
        if (contentLength == null)
          return void 0;
        if (!/^\d+$/.test(contentLength)) {
          throw new FetchResponseError(response, 502, "Invalid Content-Length");
        }
        const length2 = Number(contentLength);
        if (!Number.isSafeInteger(length2)) {
          throw new FetchResponseError(response, 502, "Content-Length too large");
        }
        return length2;
      }
      function extractMime(response) {
        const contentType = response.headers.get("Content-Type");
        if (contentType == null)
          return void 0;
        return contentType.split(";", 1)[0].trim();
      }
      function cancelBodyOnError(transformer, onCancellationError = util_js_1.logCancellationError) {
        return async (response) => {
          try {
            return await transformer(response);
          } catch (err) {
            await (0, util_js_1.cancelBody)(response, onCancellationError ?? void 0);
            throw err;
          }
        };
      }
      function fetchOkProcessor(customMessage) {
        return cancelBodyOnError((response) => {
          return fetchOkTransformer(response, customMessage);
        });
      }
      async function fetchOkTransformer(response, customMessage) {
        if (response.ok)
          return response;
        throw await FetchResponseError.from(response, customMessage);
      }
      function fetchMaxSizeProcessor(maxBytes) {
        if (maxBytes === Infinity)
          return (response) => response;
        if (!Number.isFinite(maxBytes) || maxBytes < 0) {
          throw new TypeError("maxBytes must be a 0, Infinity or a positive number");
        }
        return cancelBodyOnError((response) => {
          return fetchResponseMaxSizeChecker(response, maxBytes);
        });
      }
      function fetchResponseMaxSizeChecker(response, maxBytes) {
        if (maxBytes === Infinity)
          return response;
        checkLength(response, maxBytes);
        if (!response.body)
          return response;
        const transform = new util_js_1.MaxBytesTransformStream(maxBytes);
        return new transformed_response_js_1.TransformedResponse(response, transform);
      }
      function fetchTypeProcessor(expectedMime, contentTypeRequired = true) {
        const isExpected = typeof expectedMime === "string" ? (mimeType) => mimeType === expectedMime : expectedMime instanceof RegExp ? (mimeType) => expectedMime.test(mimeType) : expectedMime;
        return cancelBodyOnError((response) => {
          return fetchResponseTypeChecker(response, isExpected, contentTypeRequired);
        });
      }
      async function fetchResponseTypeChecker(response, isExpectedMime, contentTypeRequired = true) {
        const mimeType = extractMime(response);
        if (mimeType) {
          if (!isExpectedMime(mimeType.toLowerCase())) {
            throw await FetchResponseError.from(response, `Unexpected response Content-Type (${mimeType})`, 502);
          }
        } else if (contentTypeRequired) {
          throw await FetchResponseError.from(response, "Missing response Content-Type header", 502);
        }
        return response;
      }
      async function fetchResponseJsonTransformer(response) {
        try {
          const json = await response.json();
          return { response, json };
        } catch (cause) {
          throw new FetchResponseError(response, 502, "Unable to parse response as JSON", { cause });
        }
      }
      function fetchJsonProcessor(expectedMime = JSON_MIME, contentTypeRequired = true) {
        return (0, pipe_1.pipe)(fetchTypeProcessor(expectedMime, contentTypeRequired), cancelBodyOnError(fetchResponseJsonTransformer));
      }
      function fetchJsonValidatorProcessor(schema, params) {
        if ("parseAsync" in schema && typeof schema.parseAsync === "function") {
          return async (jsonResponse) => schema.parseAsync(jsonResponse.json, params);
        }
        if ("parse" in schema && typeof schema.parse === "function") {
          return async (jsonResponse) => schema.parse(jsonResponse.json, params);
        }
        throw new TypeError("Invalid schema");
      }
      exports.fetchJsonZodProcessor = fetchJsonValidatorProcessor;
    }
  });

  // node_modules/.pnpm/@atproto-labs+fetch@0.2.3/node_modules/@atproto-labs/fetch/dist/fetch-wrap.js
  var require_fetch_wrap = __commonJS({
    "node_modules/.pnpm/@atproto-labs+fetch@0.2.3/node_modules/@atproto-labs/fetch/dist/fetch-wrap.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.timedFetch = void 0;
      exports.loggedFetch = loggedFetch;
      exports.bindFetch = bindFetch;
      var fetch_request_js_1 = require_fetch_request();
      var fetch_js_1 = require_fetch();
      var transformed_response_js_1 = require_transformed_response();
      var util_js_1 = require_util6();
      function loggedFetch({ fetch: fetch2 = globalThis.fetch, logRequest = true, logResponse = true, logError = true }) {
        const onRequest = logRequest === true ? async (request) => {
          const requestMessage = await (0, util_js_1.stringifyMessage)(request);
          console.info(`> ${request.method} ${request.url}
${(0, util_js_1.padLines)(requestMessage, "  ")}`);
        } : logRequest || void 0;
        const onResponse = logResponse === true ? async (response) => {
          const responseMessage = await (0, util_js_1.stringifyMessage)(response.clone());
          console.info(`< HTTP/1.1 ${response.status} ${response.statusText}
${(0, util_js_1.padLines)(responseMessage, "  ")}`);
        } : logResponse || void 0;
        const onError = logError === true ? async (error) => {
          console.error(`< Error:`, error);
        } : logError || void 0;
        if (!onRequest && !onResponse && !onError)
          return fetch2;
        return (0, fetch_js_1.toRequestTransformer)(async function(request) {
          if (onRequest)
            await onRequest(request);
          try {
            const response = await fetch2.call(this, request);
            if (onResponse)
              await onResponse(response, request);
            return response;
          } catch (error) {
            if (onError)
              await onError(error, request);
            throw error;
          }
        });
      }
      var timedFetch = (timeout = 6e4, fetch2 = globalThis.fetch) => {
        if (timeout === Infinity)
          return fetch2;
        if (!Number.isFinite(timeout) || timeout <= 0) {
          throw new TypeError("Timeout must be positive");
        }
        return (0, fetch_js_1.toRequestTransformer)(async function(request) {
          const controller = new AbortController();
          const signal = controller.signal;
          const abort = () => {
            controller.abort();
          };
          const cleanup = () => {
            clearTimeout(timer);
            request.signal?.removeEventListener("abort", abort);
          };
          const timer = setTimeout(abort, timeout);
          if (typeof timer === "object")
            timer.unref?.();
          request.signal?.addEventListener("abort", abort);
          signal.addEventListener("abort", cleanup);
          const response = await fetch2.call(this, request, { signal });
          if (!response.body) {
            cleanup();
            return response;
          } else {
            const transform = new TransformStream({ flush: cleanup });
            return new transformed_response_js_1.TransformedResponse(response, transform);
          }
        });
      };
      exports.timedFetch = timedFetch;
      function bindFetch(fetch2 = globalThis.fetch, context = globalThis) {
        return (0, fetch_js_1.toRequestTransformer)(async (request) => {
          try {
            return await fetch2.call(context, request);
          } catch (err) {
            throw fetch_request_js_1.FetchRequestError.from(request, err);
          }
        });
      }
    }
  });

  // node_modules/.pnpm/@atproto-labs+fetch@0.2.3/node_modules/@atproto-labs/fetch/dist/index.js
  var require_dist8 = __commonJS({
    "node_modules/.pnpm/@atproto-labs+fetch@0.2.3/node_modules/@atproto-labs/fetch/dist/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_fetch_error(), exports);
      __exportStar(require_fetch_request(), exports);
      __exportStar(require_fetch_response(), exports);
      __exportStar(require_fetch_wrap(), exports);
      __exportStar(require_fetch(), exports);
      __exportStar(require_util6(), exports);
    }
  });

  // node_modules/.pnpm/@atproto-labs+did-resolver@0.1.13/node_modules/@atproto-labs/did-resolver/dist/did-resolver-base.js
  var require_did_resolver_base = __commonJS({
    "node_modules/.pnpm/@atproto-labs+did-resolver@0.1.13/node_modules/@atproto-labs/did-resolver/dist/did-resolver-base.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DidResolverBase = void 0;
      var zod_1 = require_cjs();
      var did_1 = require_dist4();
      var fetch_1 = require_dist8();
      var DidResolverBase = class {
        constructor(methods) {
          Object.defineProperty(this, "methods", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.methods = new Map(Object.entries(methods));
        }
        async resolve(did, options) {
          options?.signal?.throwIfAborted();
          const method = (0, did_1.extractDidMethod)(did);
          const resolver = this.methods.get(method);
          if (!resolver) {
            throw new did_1.DidError(did, `Unsupported DID method`, "did-method-invalid", 400);
          }
          try {
            const document2 = await resolver.resolve(did, options);
            if (document2.id !== did) {
              throw new did_1.DidError(did, `DID document id (${document2.id}) does not match DID`, "did-document-id-mismatch", 400);
            }
            return document2;
          } catch (err) {
            if (err instanceof fetch_1.FetchResponseError) {
              const status = err.response.status >= 500 ? 502 : err.response.status;
              throw new did_1.DidError(did, err.message, "did-fetch-error", status, err);
            }
            if (err instanceof fetch_1.FetchError) {
              throw new did_1.DidError(did, err.message, "did-fetch-error", 400, err);
            }
            if (err instanceof zod_1.ZodError) {
              throw new did_1.DidError(did, err.message, "did-document-format-error", 503, err);
            }
            throw did_1.DidError.from(err, did);
          }
        }
      };
      exports.DidResolverBase = DidResolverBase;
    }
  });

  // node_modules/.pnpm/@atproto-labs+did-resolver@0.1.13/node_modules/@atproto-labs/did-resolver/dist/methods/plc.js
  var require_plc2 = __commonJS({
    "node_modules/.pnpm/@atproto-labs+did-resolver@0.1.13/node_modules/@atproto-labs/did-resolver/dist/methods/plc.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DidPlcMethod = void 0;
      var did_1 = require_dist4();
      var fetch_1 = require_dist8();
      var pipe_1 = require_dist7();
      var fetchSuccessHandler = (0, pipe_1.pipe)((0, fetch_1.fetchOkProcessor)(), (0, fetch_1.fetchJsonProcessor)(/^application\/(did\+ld\+)?json$/), (0, fetch_1.fetchJsonZodProcessor)(did_1.didDocumentValidator));
      var DidPlcMethod = class {
        constructor(options) {
          Object.defineProperty(this, "fetch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "plcDirectoryUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.plcDirectoryUrl = new URL(options?.plcDirectoryUrl || "https://plc.directory/");
          this.fetch = (0, fetch_1.bindFetch)(options?.fetch);
        }
        async resolve(did, options) {
          (0, did_1.assertDidPlc)(did);
          const url = new URL(`/${encodeURIComponent(did)}`, this.plcDirectoryUrl);
          return this.fetch(url, {
            redirect: "error",
            headers: { accept: "application/did+ld+json,application/json" },
            signal: options?.signal
          }).then(fetchSuccessHandler);
        }
      };
      exports.DidPlcMethod = DidPlcMethod;
    }
  });

  // node_modules/.pnpm/@atproto-labs+did-resolver@0.1.13/node_modules/@atproto-labs/did-resolver/dist/methods/web.js
  var require_web2 = __commonJS({
    "node_modules/.pnpm/@atproto-labs+did-resolver@0.1.13/node_modules/@atproto-labs/did-resolver/dist/methods/web.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DidWebMethod = void 0;
      exports.buildDidWebDocumentUrl = buildDidWebDocumentUrl;
      var did_1 = require_dist4();
      var fetch_1 = require_dist8();
      var pipe_1 = require_dist7();
      var fetchSuccessHandler = (0, pipe_1.pipe)((0, fetch_1.fetchOkProcessor)(), (0, fetch_1.fetchJsonProcessor)(/^application\/(did\+ld\+)?json$/), (0, fetch_1.fetchJsonZodProcessor)(did_1.didDocumentValidator));
      var DidWebMethod = class {
        constructor({ fetch: fetch2 = globalThis.fetch, allowHttp = true } = {}) {
          Object.defineProperty(this, "fetch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "allowHttp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.fetch = (0, fetch_1.bindFetch)(fetch2);
          this.allowHttp = allowHttp;
        }
        async resolve(did, options) {
          const didDocumentUrl = buildDidWebDocumentUrl(did);
          if (!this.allowHttp && didDocumentUrl.protocol === "http:") {
            throw new did_1.DidError(did, 'Resolution of "http" did:web is not allowed', "did-web-http-not-allowed");
          }
          return this.fetch(didDocumentUrl, {
            redirect: "error",
            headers: { accept: "application/did+ld+json,application/json" },
            signal: options?.signal
          }).then(fetchSuccessHandler);
        }
      };
      exports.DidWebMethod = DidWebMethod;
      function buildDidWebDocumentUrl(did) {
        const url = (0, did_1.didWebToUrl)(did);
        if (url.pathname === "/") {
          return new URL(`/.well-known/did.json`, url);
        } else {
          return new URL(`${url.pathname}/did.json`, url);
        }
      }
    }
  });

  // node_modules/.pnpm/@atproto-labs+did-resolver@0.1.13/node_modules/@atproto-labs/did-resolver/dist/did-resolver-common.js
  var require_did_resolver_common = __commonJS({
    "node_modules/.pnpm/@atproto-labs+did-resolver@0.1.13/node_modules/@atproto-labs/did-resolver/dist/did-resolver-common.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DidResolverCommon = void 0;
      var did_resolver_base_js_1 = require_did_resolver_base();
      var plc_js_1 = require_plc2();
      var web_js_1 = require_web2();
      var DidResolverCommon = class extends did_resolver_base_js_1.DidResolverBase {
        constructor(options) {
          super({
            plc: new plc_js_1.DidPlcMethod(options),
            web: new web_js_1.DidWebMethod(options)
          });
        }
      };
      exports.DidResolverCommon = DidResolverCommon;
    }
  });

  // node_modules/.pnpm/@atproto-labs+did-resolver@0.1.13/node_modules/@atproto-labs/did-resolver/dist/did-resolver.js
  var require_did_resolver = __commonJS({
    "node_modules/.pnpm/@atproto-labs+did-resolver@0.1.13/node_modules/@atproto-labs/did-resolver/dist/did-resolver.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/.pnpm/@atproto-labs+did-resolver@0.1.13/node_modules/@atproto-labs/did-resolver/dist/methods.js
  var require_methods2 = __commonJS({
    "node_modules/.pnpm/@atproto-labs+did-resolver@0.1.13/node_modules/@atproto-labs/did-resolver/dist/methods.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_plc2(), exports);
      __exportStar(require_web2(), exports);
    }
  });

  // node_modules/.pnpm/@atproto-labs+did-resolver@0.1.13/node_modules/@atproto-labs/did-resolver/dist/util.js
  var require_util7 = __commonJS({
    "node_modules/.pnpm/@atproto-labs+did-resolver@0.1.13/node_modules/@atproto-labs/did-resolver/dist/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/.pnpm/@atproto-labs+did-resolver@0.1.13/node_modules/@atproto-labs/did-resolver/dist/index.js
  var require_dist9 = __commonJS({
    "node_modules/.pnpm/@atproto-labs+did-resolver@0.1.13/node_modules/@atproto-labs/did-resolver/dist/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_dist4(), exports);
      __exportStar(require_did_cache_memory(), exports);
      __exportStar(require_did_cache(), exports);
      __exportStar(require_did_method(), exports);
      __exportStar(require_did_resolver_common(), exports);
      __exportStar(require_did_resolver(), exports);
      __exportStar(require_methods2(), exports);
      __exportStar(require_util7(), exports);
    }
  });

  // node_modules/.pnpm/@atproto-labs+handle-resolver@0.1.8/node_modules/@atproto-labs/handle-resolver/dist/types.js
  var require_types2 = __commonJS({
    "node_modules/.pnpm/@atproto-labs+handle-resolver@0.1.8/node_modules/@atproto-labs/handle-resolver/dist/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isResolvedHandle = isResolvedHandle;
      var did_1 = require_dist4();
      function isResolvedHandle(value) {
        return value === null || (0, did_1.isAtprotoDid)(value);
      }
    }
  });

  // node_modules/.pnpm/@atproto-labs+handle-resolver@0.1.8/node_modules/@atproto-labs/handle-resolver/dist/app-view-handle-resolver.js
  var require_app_view_handle_resolver = __commonJS({
    "node_modules/.pnpm/@atproto-labs+handle-resolver@0.1.8/node_modules/@atproto-labs/handle-resolver/dist/app-view-handle-resolver.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AppViewHandleResolver = exports.xrpcErrorSchema = void 0;
      var zod_1 = require_cjs();
      var types_js_1 = require_types2();
      exports.xrpcErrorSchema = zod_1.z.object({
        error: zod_1.z.string(),
        message: zod_1.z.string().optional()
      });
      var AppViewHandleResolver = class _AppViewHandleResolver {
        static from(service, options) {
          if (typeof service === "string" || service instanceof URL) {
            return new _AppViewHandleResolver(service, options);
          }
          return service;
        }
        constructor(service, options) {
          Object.defineProperty(this, "serviceUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "fetch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.serviceUrl = new URL(service);
          this.fetch = options?.fetch ?? globalThis.fetch;
        }
        async resolve(handle, options) {
          const url = new URL("/xrpc/com.atproto.identity.resolveHandle", this.serviceUrl);
          url.searchParams.set("handle", handle);
          const response = await this.fetch.call(null, url, {
            cache: options?.noCache ? "no-cache" : void 0,
            signal: options?.signal,
            redirect: "error"
          });
          const payload = await response.json();
          if (response.status === 400) {
            const data = exports.xrpcErrorSchema.parse(payload);
            if (data.error === "InvalidRequest" && data.message === "Unable to resolve handle") {
              return null;
            }
          }
          if (!response.ok) {
            throw new TypeError("Invalid response from resolveHandle method");
          }
          const value = payload?.did;
          if (!(0, types_js_1.isResolvedHandle)(value)) {
            throw new TypeError("Invalid DID returned from resolveHandle method");
          }
          return value;
        }
      };
      exports.AppViewHandleResolver = AppViewHandleResolver;
    }
  });

  // node_modules/.pnpm/@atproto-labs+handle-resolver@0.1.8/node_modules/@atproto-labs/handle-resolver/dist/internal-resolvers/dns-handle-resolver.js
  var require_dns_handle_resolver = __commonJS({
    "node_modules/.pnpm/@atproto-labs+handle-resolver@0.1.8/node_modules/@atproto-labs/handle-resolver/dist/internal-resolvers/dns-handle-resolver.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DnsHandleResolver = void 0;
      var types_1 = require_types2();
      var SUBDOMAIN = "_atproto";
      var PREFIX = "did=";
      var DnsHandleResolver = class {
        constructor(resolveTxt) {
          Object.defineProperty(this, "resolveTxt", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: resolveTxt
          });
        }
        async resolve(handle) {
          const results = await this.resolveTxt.call(null, `${SUBDOMAIN}.${handle}`);
          if (!results)
            return null;
          for (let i = 0; i < results.length; i++) {
            if (!results[i].startsWith(PREFIX))
              continue;
            for (let j = i + 1; j < results.length; j++) {
              if (results[j].startsWith(PREFIX))
                return null;
            }
            const did = results[i].slice(PREFIX.length);
            return (0, types_1.isResolvedHandle)(did) ? did : null;
          }
          return null;
        }
      };
      exports.DnsHandleResolver = DnsHandleResolver;
    }
  });

  // node_modules/.pnpm/@atproto-labs+handle-resolver@0.1.8/node_modules/@atproto-labs/handle-resolver/dist/internal-resolvers/well-known-handler-resolver.js
  var require_well_known_handler_resolver = __commonJS({
    "node_modules/.pnpm/@atproto-labs+handle-resolver@0.1.8/node_modules/@atproto-labs/handle-resolver/dist/internal-resolvers/well-known-handler-resolver.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.WellKnownHandleResolver = void 0;
      var types_js_1 = require_types2();
      var WellKnownHandleResolver = class {
        constructor(options) {
          Object.defineProperty(this, "fetch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.fetch = options?.fetch ?? globalThis.fetch;
        }
        async resolve(handle, options) {
          const url = new URL("/.well-known/atproto-did", `https://${handle}`);
          try {
            const response = await this.fetch.call(null, url, {
              cache: options?.noCache ? "no-cache" : void 0,
              signal: options?.signal,
              redirect: "error"
            });
            const text = await response.text();
            const firstLine = text.split("\n")[0].trim();
            if ((0, types_js_1.isResolvedHandle)(firstLine))
              return firstLine;
            return null;
          } catch (err) {
            options?.signal?.throwIfAborted();
            return null;
          }
        }
      };
      exports.WellKnownHandleResolver = WellKnownHandleResolver;
    }
  });

  // node_modules/.pnpm/@atproto-labs+handle-resolver@0.1.8/node_modules/@atproto-labs/handle-resolver/dist/atproto-handle-resolver.js
  var require_atproto_handle_resolver = __commonJS({
    "node_modules/.pnpm/@atproto-labs+handle-resolver@0.1.8/node_modules/@atproto-labs/handle-resolver/dist/atproto-handle-resolver.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AtprotoHandleResolver = void 0;
      var dns_handle_resolver_js_1 = require_dns_handle_resolver();
      var well_known_handler_resolver_js_1 = require_well_known_handler_resolver();
      var noop = () => {
      };
      var AtprotoHandleResolver = class {
        constructor(options) {
          Object.defineProperty(this, "httpResolver", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "dnsResolver", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "dnsResolverFallback", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.httpResolver = new well_known_handler_resolver_js_1.WellKnownHandleResolver(options);
          this.dnsResolver = new dns_handle_resolver_js_1.DnsHandleResolver(options.resolveTxt);
          this.dnsResolverFallback = options.resolveTxtFallback ? new dns_handle_resolver_js_1.DnsHandleResolver(options.resolveTxtFallback) : void 0;
        }
        async resolve(handle, options) {
          options?.signal?.throwIfAborted();
          const abortController = new AbortController();
          const { signal } = abortController;
          options?.signal?.addEventListener("abort", () => abortController.abort(), {
            signal
          });
          const wrappedOptions = { ...options, signal };
          try {
            const dnsPromise = this.dnsResolver.resolve(handle, wrappedOptions);
            const httpPromise = this.httpResolver.resolve(handle, wrappedOptions);
            httpPromise.catch(noop);
            const dnsRes = await dnsPromise;
            if (dnsRes)
              return dnsRes;
            signal.throwIfAborted();
            const res = await httpPromise;
            if (res)
              return res;
            signal.throwIfAborted();
            return this.dnsResolverFallback?.resolve(handle, wrappedOptions) ?? null;
          } finally {
            abortController.abort();
          }
        }
      };
      exports.AtprotoHandleResolver = AtprotoHandleResolver;
    }
  });

  // node_modules/.pnpm/@atproto-labs+handle-resolver@0.1.8/node_modules/@atproto-labs/handle-resolver/dist/atproto-doh-handle-resolver.js
  var require_atproto_doh_handle_resolver = __commonJS({
    "node_modules/.pnpm/@atproto-labs+handle-resolver@0.1.8/node_modules/@atproto-labs/handle-resolver/dist/atproto-doh-handle-resolver.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AtprotoDohHandleResolver = void 0;
      var atproto_handle_resolver_js_1 = require_atproto_handle_resolver();
      var AtprotoDohHandleResolver = class extends atproto_handle_resolver_js_1.AtprotoHandleResolver {
        constructor(options) {
          super({
            ...options,
            resolveTxt: dohResolveTxtFactory(options),
            resolveTxtFallback: void 0
          });
        }
      };
      exports.AtprotoDohHandleResolver = AtprotoDohHandleResolver;
      function dohResolveTxtFactory({ dohEndpoint, fetch: fetch2 = globalThis.fetch }) {
        return async (hostname) => {
          const url = new URL(dohEndpoint);
          url.searchParams.set("type", "TXT");
          url.searchParams.set("name", hostname);
          const response = await fetch2(url, {
            method: "GET",
            headers: { accept: "application/dns-json" },
            redirect: "follow"
          });
          try {
            const contentType = response.headers.get("content-type")?.trim();
            if (!response.ok) {
              const message2 = contentType?.startsWith("text/plain") ? await response.text() : `Failed to resolve ${hostname}`;
              throw new TypeError(message2);
            } else if (contentType?.match(/application\/(dns-)?json/i) == null) {
              throw new TypeError("Unexpected response from DoH server");
            }
            const result = asResult(await response.json());
            return result.Answer?.filter(isAnswerTxt).map(extractTxtData) ?? null;
          } finally {
            if (response.bodyUsed === false) {
              void response.body?.cancel().catch(onCancelError);
            }
          }
        };
      }
      function onCancelError(err) {
        if (!(err instanceof DOMException) || err.name !== "AbortError") {
          console.error("An error occurred while cancelling the response body:", err);
        }
      }
      function isResult(result) {
        if (typeof result !== "object" || result === null)
          return false;
        if (!("Status" in result) || typeof result.Status !== "number")
          return false;
        if ("Answer" in result && !isArrayOf(result.Answer, isAnswer))
          return false;
        return true;
      }
      function asResult(result) {
        if (isResult(result))
          return result;
        throw new TypeError("Invalid DoH response");
      }
      function isArrayOf(value, predicate) {
        return Array.isArray(value) && value.every(predicate);
      }
      function isAnswer(answer) {
        return typeof answer === "object" && answer !== null && "name" in answer && typeof answer.name === "string" && "type" in answer && typeof answer.type === "number" && "data" in answer && typeof answer.data === "string" && "TTL" in answer && typeof answer.TTL === "number";
      }
      function isAnswerTxt(answer) {
        return answer.type === 16;
      }
      function extractTxtData(answer) {
        return answer.data.replace(/^"|"$/g, "").replace(/\\"/g, '"');
      }
    }
  });

  // node_modules/.pnpm/@atproto-labs+handle-resolver@0.1.8/node_modules/@atproto-labs/handle-resolver/dist/cached-handle-resolver.js
  var require_cached_handle_resolver = __commonJS({
    "node_modules/.pnpm/@atproto-labs+handle-resolver@0.1.8/node_modules/@atproto-labs/handle-resolver/dist/cached-handle-resolver.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.CachedHandleResolver = void 0;
      var simple_store_1 = require_dist6();
      var simple_store_memory_1 = require_dist5();
      var CachedHandleResolver = class {
        constructor(resolver, cache = new simple_store_memory_1.SimpleStoreMemory({
          max: 1e3,
          ttl: 10 * 6e4
        })) {
          Object.defineProperty(this, "getter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.getter = new simple_store_1.CachedGetter((handle, options) => resolver.resolve(handle, options), cache);
        }
        async resolve(handle, options) {
          return this.getter.get(handle, options);
        }
      };
      exports.CachedHandleResolver = CachedHandleResolver;
    }
  });

  // node_modules/.pnpm/@atproto-labs+handle-resolver@0.1.8/node_modules/@atproto-labs/handle-resolver/dist/index.js
  var require_dist10 = __commonJS({
    "node_modules/.pnpm/@atproto-labs+handle-resolver@0.1.8/node_modules/@atproto-labs/handle-resolver/dist/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_types2(), exports);
      __exportStar(require_app_view_handle_resolver(), exports);
      __exportStar(require_atproto_doh_handle_resolver(), exports);
      __exportStar(require_atproto_handle_resolver(), exports);
      __exportStar(require_cached_handle_resolver(), exports);
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/constants.js
  var require_constants = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/constants.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.CLIENT_ASSERTION_TYPE_JWT_BEARER = void 0;
      exports.CLIENT_ASSERTION_TYPE_JWT_BEARER = "urn:ietf:params:oauth:client-assertion-type:jwt-bearer";
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/util.js
  var require_util8 = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isHostnameIP = isHostnameIP;
      exports.isLoopbackHost = isLoopbackHost;
      exports.isLoopbackUrl = isLoopbackUrl;
      exports.safeUrl = safeUrl;
      exports.extractUrlPath = extractUrlPath;
      function isHostnameIP(hostname) {
        if (hostname.match(/^\d+\.\d+\.\d+\.\d+$/))
          return true;
        if (hostname.startsWith("[") && hostname.endsWith("]"))
          return true;
        return false;
      }
      function isLoopbackHost(host) {
        return host === "localhost" || host === "127.0.0.1" || host === "[::1]";
      }
      function isLoopbackUrl(input) {
        const url = typeof input === "string" ? new URL(input) : input;
        return isLoopbackHost(url.hostname);
      }
      function safeUrl(input) {
        try {
          return new URL(input);
        } catch {
          return null;
        }
      }
      function extractUrlPath(url) {
        const endOfProtocol = url.startsWith("https://") ? 8 : url.startsWith("http://") ? 7 : -1;
        if (endOfProtocol === -1) {
          throw new TypeError('URL must use the "https:" or "http:" protocol');
        }
        const hashIdx = url.indexOf("#", endOfProtocol);
        const questionIdx = url.indexOf("?", endOfProtocol);
        const queryStrIdx = questionIdx !== -1 && (hashIdx === -1 || questionIdx < hashIdx) ? questionIdx : -1;
        const pathEnd = hashIdx === -1 ? queryStrIdx === -1 ? url.length : queryStrIdx : queryStrIdx === -1 ? hashIdx : Math.min(hashIdx, queryStrIdx);
        const slashIdx = url.indexOf("/", endOfProtocol);
        const pathStart = slashIdx === -1 || slashIdx > pathEnd ? pathEnd : slashIdx;
        if (endOfProtocol === pathStart) {
          throw new TypeError("URL must contain a host");
        }
        return url.substring(pathStart, pathEnd);
      }
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/uri.js
  var require_uri = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/uri.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.privateUseUriSchema = exports.webUriSchema = exports.httpsUriSchema = exports.loopbackUriSchema = exports.dangerousUriSchema = void 0;
      var zod_1 = require_cjs();
      var util_js_1 = require_util8();
      var canParseUrl = (
        // eslint-disable-next-line n/no-unsupported-features/node-builtins
        URL.canParse ?? // URL.canParse is not available in Node.js < 18.7.0
        ((urlStr) => {
          try {
            new URL(urlStr);
            return true;
          } catch {
            return false;
          }
        })
      );
      exports.dangerousUriSchema = zod_1.z.string().refine((data) => data.includes(":") && canParseUrl(data), {
        message: "Invalid URL"
      });
      exports.loopbackUriSchema = exports.dangerousUriSchema.superRefine((value, ctx) => {
        if (!value.startsWith("http://")) {
          ctx.addIssue({
            code: zod_1.ZodIssueCode.custom,
            message: 'URL must use the "http:" protocol'
          });
          return false;
        }
        const url = new URL(value);
        if (!(0, util_js_1.isLoopbackHost)(url.hostname)) {
          ctx.addIssue({
            code: zod_1.ZodIssueCode.custom,
            message: 'URL must use "localhost", "127.0.0.1" or "[::1]" as hostname'
          });
          return false;
        }
        return true;
      });
      exports.httpsUriSchema = exports.dangerousUriSchema.superRefine((value, ctx) => {
        if (!value.startsWith("https://")) {
          ctx.addIssue({
            code: zod_1.ZodIssueCode.custom,
            message: 'URL must use the "https:" protocol'
          });
          return false;
        }
        const url = new URL(value);
        if ((0, util_js_1.isLoopbackHost)(url.hostname)) {
          ctx.addIssue({
            code: zod_1.ZodIssueCode.custom,
            message: "https: URL must not use a loopback host"
          });
          return false;
        }
        if ((0, util_js_1.isHostnameIP)(url.hostname)) {
        } else {
          if (!url.hostname.includes(".")) {
            ctx.addIssue({
              code: zod_1.ZodIssueCode.custom,
              message: "Domain name must contain at least two segments"
            });
            return false;
          }
          if (url.hostname.endsWith(".local")) {
            ctx.addIssue({
              code: zod_1.ZodIssueCode.custom,
              message: 'Domain name must not end with ".local"'
            });
            return false;
          }
        }
        return true;
      });
      exports.webUriSchema = zod_1.z.string().superRefine((value, ctx) => {
        if (value.startsWith("http://")) {
          const result = exports.loopbackUriSchema.safeParse(value);
          if (!result.success)
            result.error.issues.forEach(ctx.addIssue, ctx);
          return result.success;
        }
        if (value.startsWith("https://")) {
          const result = exports.httpsUriSchema.safeParse(value);
          if (!result.success)
            result.error.issues.forEach(ctx.addIssue, ctx);
          return result.success;
        }
        ctx.addIssue({
          code: zod_1.ZodIssueCode.custom,
          message: 'URL must use the "http:" or "https:" protocol'
        });
        return false;
      });
      exports.privateUseUriSchema = exports.dangerousUriSchema.superRefine((value, ctx) => {
        const dotIdx = value.indexOf(".");
        const colonIdx = value.indexOf(":");
        if (dotIdx === -1 || colonIdx === -1 || dotIdx > colonIdx) {
          ctx.addIssue({
            code: zod_1.ZodIssueCode.custom,
            message: 'Private-use URI scheme requires a "." as part of the protocol'
          });
          return false;
        }
        const url = new URL(value);
        if (!url.protocol.includes(".")) {
          ctx.addIssue({
            code: zod_1.ZodIssueCode.custom,
            message: "Invalid private-use URI scheme"
          });
          return false;
        }
        if (url.hostname) {
          ctx.addIssue({
            code: zod_1.ZodIssueCode.custom,
            message: 'Private-use URI schemes must not include a hostname (only one "/" is allowed after the protocol, as per RFC 8252)'
          });
          return false;
        }
        return true;
      });
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-client-id.js
  var require_oauth_client_id = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-client-id.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthClientIdSchema = void 0;
      var zod_1 = require_cjs();
      exports.oauthClientIdSchema = zod_1.z.string().min(1);
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-redirect-uri.js
  var require_oauth_redirect_uri = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-redirect-uri.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthRedirectUriSchema = exports.oauthPrivateUseRedirectURISchema = exports.oauthHttpsRedirectURISchema = exports.oauthLoopbackRedirectURISchema = void 0;
      var zod_1 = require_cjs();
      var uri_js_1 = require_uri();
      exports.oauthLoopbackRedirectURISchema = uri_js_1.loopbackUriSchema.superRefine((value, ctx) => {
        if (value.startsWith("http://localhost")) {
          ctx.addIssue({
            code: zod_1.ZodIssueCode.custom,
            message: 'Use of "localhost" hostname is not allowed (RFC 8252), use a loopback IP such as "127.0.0.1" instead'
          });
          return false;
        }
        return true;
      });
      exports.oauthHttpsRedirectURISchema = uri_js_1.httpsUriSchema;
      exports.oauthPrivateUseRedirectURISchema = uri_js_1.privateUseUriSchema;
      exports.oauthRedirectUriSchema = zod_1.z.union([
        exports.oauthLoopbackRedirectURISchema,
        exports.oauthHttpsRedirectURISchema,
        exports.oauthPrivateUseRedirectURISchema
      ], {
        message: `URL must use the "https:" or "http:" protocol, or a private-use URI scheme (RFC 8252)`
      });
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-scope.js
  var require_oauth_scope = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-scope.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthScopeSchema = void 0;
      var zod_1 = require_cjs();
      exports.oauthScopeSchema = zod_1.z.string().regex(/^[\x21\x23-\x5B\x5D-\x7E]+(?: [\x21\x23-\x5B\x5D-\x7E]+)*$/);
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-client-id-loopback.js
  var require_oauth_client_id_loopback = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-client-id-loopback.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthClientIdLoopbackSchema = void 0;
      exports.isOAuthClientIdLoopback = isOAuthClientIdLoopback;
      exports.assertOAuthLoopbackClientId = assertOAuthLoopbackClientId;
      exports.parseOAuthLoopbackClientId = parseOAuthLoopbackClientId;
      var zod_1 = require_cjs();
      var oauth_client_id_js_1 = require_oauth_client_id();
      var oauth_redirect_uri_js_1 = require_oauth_redirect_uri();
      var oauth_scope_js_1 = require_oauth_scope();
      var PREFIX = "http://localhost";
      exports.oauthClientIdLoopbackSchema = oauth_client_id_js_1.oauthClientIdSchema.superRefine((value, ctx) => {
        try {
          assertOAuthLoopbackClientId(value);
          return true;
        } catch (error) {
          ctx.addIssue({
            code: zod_1.ZodIssueCode.custom,
            message: error instanceof TypeError ? error.message : "Invalid loopback client ID"
          });
          return false;
        }
      });
      function isOAuthClientIdLoopback(clientId) {
        try {
          parseOAuthLoopbackClientId(clientId);
          return true;
        } catch {
          return false;
        }
      }
      function assertOAuthLoopbackClientId(clientId) {
        void parseOAuthLoopbackClientId(clientId);
      }
      function parseOAuthLoopbackClientId(clientId) {
        if (!clientId.startsWith(PREFIX)) {
          throw new TypeError(`Loopback ClientID must start with "${PREFIX}"`);
        } else if (clientId.includes("#", PREFIX.length)) {
          throw new TypeError("Loopback ClientID must not contain a hash component");
        }
        const queryStringIdx = clientId.length > PREFIX.length && clientId[PREFIX.length] === "/" ? PREFIX.length + 1 : PREFIX.length;
        if (clientId.length === queryStringIdx) {
          return {};
        }
        if (clientId[queryStringIdx] !== "?") {
          throw new TypeError("Loopback ClientID must not contain a path component");
        }
        const searchParams = new URLSearchParams(clientId.slice(queryStringIdx + 1));
        for (const name2 of searchParams.keys()) {
          if (name2 !== "redirect_uri" && name2 !== "scope") {
            throw new TypeError(`Invalid query parameter "${name2}" in client ID`);
          }
        }
        const scope = searchParams.get("scope") ?? void 0;
        if (scope != null) {
          if (searchParams.getAll("scope").length > 1) {
            throw new TypeError("Loopback ClientID must contain at most one scope query parameter");
          } else if (!oauth_scope_js_1.oauthScopeSchema.safeParse(scope).success) {
            throw new TypeError("Invalid scope query parameter in client ID");
          }
        }
        const redirect_uris = searchParams.has("redirect_uri") ? searchParams.getAll("redirect_uri").map((value) => oauth_redirect_uri_js_1.oauthLoopbackRedirectURISchema.parse(value)) : void 0;
        return {
          scope,
          redirect_uris
        };
      }
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/atproto-loopback-client-metadata.js
  var require_atproto_loopback_client_metadata = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/atproto-loopback-client-metadata.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.atprotoLoopbackClientMetadata = atprotoLoopbackClientMetadata;
      var oauth_client_id_loopback_js_1 = require_oauth_client_id_loopback();
      function atprotoLoopbackClientMetadata(clientId) {
        const { scope = "atproto", redirect_uris = [`http://127.0.0.1/`, `http://[::1]/`] } = (0, oauth_client_id_loopback_js_1.parseOAuthLoopbackClientId)(clientId);
        return {
          client_id: clientId,
          scope,
          redirect_uris,
          response_types: ["code"],
          grant_types: ["authorization_code", "refresh_token"],
          token_endpoint_auth_method: "none",
          application_type: "native",
          dpop_bound_access_tokens: true
        };
      }
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-access-token.js
  var require_oauth_access_token = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-access-token.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthAccessTokenSchema = void 0;
      var zod_1 = require_cjs();
      exports.oauthAccessTokenSchema = zod_1.z.string().min(1);
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-authentication-error-response.js
  var require_oauth_authentication_error_response = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-authentication-error-response.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthAuthenticationErrorResponseSchema = void 0;
      var zod_1 = require_cjs();
      exports.oauthAuthenticationErrorResponseSchema = zod_1.z.enum([
        // The request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed.
        "invalid_request",
        // The client is not authorized to request an authorization code using this method.
        "unauthorized_client",
        // The resource owner or authorization server denied the request.
        "access_denied",
        // The authorization server does not support obtaining an authorization code using this method.
        "unsupported_response_type",
        // The requested scope is invalid, unknown, or malformed.
        "invalid_scope",
        // The authorization server encountered an unexpected condition that prevented it from fulfilling the request. (This error code is needed because a 500 Internal Server Error HTTP status code cannot be returned to the client via an HTTP redirect.)
        "server_error",
        // The authorization server is currently unable to handle the request due to a temporary overloading or maintenance of the server. (This error code is needed because a 503 Service Unavailable HTTP status code cannot be returned to the client via an HTTP redirect.)
        "temporarily_unavailable"
      ]);
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-authorization-code-grant-token-request.js
  var require_oauth_authorization_code_grant_token_request = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-authorization-code-grant-token-request.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthAuthorizationCodeGrantTokenRequestSchema = void 0;
      var zod_1 = require_cjs();
      var oauth_redirect_uri_js_1 = require_oauth_redirect_uri();
      exports.oauthAuthorizationCodeGrantTokenRequestSchema = zod_1.z.object({
        grant_type: zod_1.z.literal("authorization_code"),
        code: zod_1.z.string().min(1),
        redirect_uri: oauth_redirect_uri_js_1.oauthRedirectUriSchema,
        /** @see {@link https://datatracker.ietf.org/doc/html/rfc7636#section-4.1} */
        code_verifier: zod_1.z.string().min(43).max(128).regex(/^[a-zA-Z0-9-._~]+$/).optional()
      });
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-authorization-details.js
  var require_oauth_authorization_details = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-authorization-details.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthAuthorizationDetailsSchema = exports.oauthAuthorizationDetailSchema = void 0;
      var zod_1 = require_cjs();
      var uri_js_1 = require_uri();
      exports.oauthAuthorizationDetailSchema = zod_1.z.object({
        type: zod_1.z.string(),
        /**
         * An array of strings representing the location of the resource or RS. These
         * strings are typically URIs identifying the location of the RS.
         */
        locations: zod_1.z.array(uri_js_1.dangerousUriSchema).optional(),
        /**
         * An array of strings representing the kinds of actions to be taken at the
         * resource.
         */
        actions: zod_1.z.array(zod_1.z.string()).optional(),
        /**
         * An array of strings representing the kinds of data being requested from the
         * resource.
         */
        datatypes: zod_1.z.array(zod_1.z.string()).optional(),
        /**
         * A string identifier indicating a specific resource available at the API.
         */
        identifier: zod_1.z.string().optional(),
        /**
         * An array of strings representing the types or levels of privilege being
         * requested at the resource.
         */
        privileges: zod_1.z.array(zod_1.z.string()).optional()
      });
      exports.oauthAuthorizationDetailsSchema = zod_1.z.array(exports.oauthAuthorizationDetailSchema);
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-authorization-request-jar.js
  var require_oauth_authorization_request_jar = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-authorization-request-jar.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthAuthorizationRequestJarSchema = void 0;
      var zod_1 = require_cjs();
      var jwk_1 = require_dist();
      exports.oauthAuthorizationRequestJarSchema = zod_1.z.object({
        /**
         * AuthorizationRequest inside a JWT:
         * - "iat" is required and **MUST** be less than one minute
         *
         * @see {@link https://datatracker.ietf.org/doc/html/rfc9101}
         */
        request: zod_1.z.union([jwk_1.signedJwtSchema, jwk_1.unsignedJwtSchema])
      });
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-code-challenge-method.js
  var require_oauth_code_challenge_method = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-code-challenge-method.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthCodeChallengeMethodSchema = void 0;
      var zod_1 = require_cjs();
      exports.oauthCodeChallengeMethodSchema = zod_1.z.enum(["S256", "plain"]);
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-response-mode.js
  var require_oauth_response_mode = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-response-mode.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthResponseModeSchema = void 0;
      var zod_1 = require_cjs();
      exports.oauthResponseModeSchema = zod_1.z.enum([
        "query",
        "fragment",
        "form_post"
      ]);
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-response-type.js
  var require_oauth_response_type = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-response-type.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthResponseTypeSchema = void 0;
      var zod_1 = require_cjs();
      exports.oauthResponseTypeSchema = zod_1.z.enum([
        // OAuth2 (https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-10#section-4.1.1)
        "code",
        // Authorization Code Grant
        "token",
        // Implicit Grant
        // OIDC (https://openid.net/specs/oauth-v2-multiple-response-types-1_0.html)
        "none",
        "code id_token token",
        "code id_token",
        "code token",
        "id_token token",
        "id_token"
      ]);
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oidc-claims-parameter.js
  var require_oidc_claims_parameter = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oidc-claims-parameter.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oidcClaimsParameterSchema = void 0;
      var zod_1 = require_cjs();
      exports.oidcClaimsParameterSchema = zod_1.z.enum([
        // https://openid.net/specs/openid-provider-authentication-policy-extension-1_0.html#rfc.section.5.2
        // if client metadata "require_auth_time" is true, this *must* be provided
        "auth_time",
        // OIDC
        "nonce",
        "acr",
        // OpenID: "profile" scope
        "name",
        "family_name",
        "given_name",
        "middle_name",
        "nickname",
        "preferred_username",
        "gender",
        "picture",
        "profile",
        "website",
        "birthdate",
        "zoneinfo",
        "locale",
        "updated_at",
        // OpenID: "email" scope
        "email",
        "email_verified",
        // OpenID: "phone" scope
        "phone_number",
        "phone_number_verified",
        // OpenID: "address" scope
        "address"
      ]);
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oidc-claims-properties.js
  var require_oidc_claims_properties = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oidc-claims-properties.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oidcClaimsPropertiesSchema = void 0;
      var zod_1 = require_cjs();
      var oidcClaimsValueSchema = zod_1.z.union([zod_1.z.string(), zod_1.z.number(), zod_1.z.boolean()]);
      exports.oidcClaimsPropertiesSchema = zod_1.z.object({
        essential: zod_1.z.boolean().optional(),
        value: oidcClaimsValueSchema.optional(),
        values: zod_1.z.array(oidcClaimsValueSchema).optional()
      });
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oidc-entity-type.js
  var require_oidc_entity_type = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oidc-entity-type.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oidcEntityTypeSchema = void 0;
      var zod_1 = require_cjs();
      exports.oidcEntityTypeSchema = zod_1.z.enum(["userinfo", "id_token"]);
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-authorization-request-parameters.js
  var require_oauth_authorization_request_parameters = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-authorization-request-parameters.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthAuthorizationRequestParametersSchema = void 0;
      var zod_1 = require_cjs();
      var jwk_1 = require_dist();
      var oauth_authorization_details_js_1 = require_oauth_authorization_details();
      var oauth_client_id_js_1 = require_oauth_client_id();
      var oauth_code_challenge_method_js_1 = require_oauth_code_challenge_method();
      var oauth_redirect_uri_js_1 = require_oauth_redirect_uri();
      var oauth_response_mode_js_1 = require_oauth_response_mode();
      var oauth_response_type_js_1 = require_oauth_response_type();
      var oauth_scope_js_1 = require_oauth_scope();
      var oidc_claims_parameter_js_1 = require_oidc_claims_parameter();
      var oidc_claims_properties_js_1 = require_oidc_claims_properties();
      var oidc_entity_type_js_1 = require_oidc_entity_type();
      exports.oauthAuthorizationRequestParametersSchema = zod_1.z.object({
        client_id: oauth_client_id_js_1.oauthClientIdSchema,
        state: zod_1.z.string().optional(),
        redirect_uri: oauth_redirect_uri_js_1.oauthRedirectUriSchema.optional(),
        scope: oauth_scope_js_1.oauthScopeSchema.optional(),
        response_type: oauth_response_type_js_1.oauthResponseTypeSchema,
        // PKCE
        code_challenge: zod_1.z.string().optional(),
        code_challenge_method: oauth_code_challenge_method_js_1.oauthCodeChallengeMethodSchema.default("S256").optional(),
        // DPOP
        // https://datatracker.ietf.org/doc/html/rfc9449#section-12.3
        dpop_jkt: zod_1.z.string().optional(),
        // OIDC
        // Default depend on response_type
        response_mode: oauth_response_mode_js_1.oauthResponseModeSchema.optional(),
        nonce: zod_1.z.string().optional(),
        // Specifies the allowable elapsed time in seconds since the last time the
        // End-User was actively authenticated by the OP. If the elapsed time is
        // greater than this value, the OP MUST attempt to actively re-authenticate
        // the End-User. (The max_age request parameter corresponds to the OpenID 2.0
        // PAPE [OpenID.PAPE] max_auth_age request parameter.) When max_age is used,
        // the ID Token returned MUST include an auth_time Claim Value. Note that
        // max_age=0 is equivalent to prompt=login.
        max_age: zod_1.z.number().int().min(0).optional(),
        claims: zod_1.z.record(oidc_entity_type_js_1.oidcEntityTypeSchema, zod_1.z.record(oidc_claims_parameter_js_1.oidcClaimsParameterSchema, zod_1.z.union([zod_1.z.literal(null), oidc_claims_properties_js_1.oidcClaimsPropertiesSchema]))).optional(),
        // https://openid.net/specs/openid-connect-core-1_0.html#RegistrationParameter
        // Not supported by this library (yet?)
        // registration: clientMetadataSchema.optional(),
        login_hint: zod_1.z.string().min(1).optional(),
        ui_locales: zod_1.z.string().regex(/^[a-z]{2,3}(-[A-Z]{2})?( [a-z]{2,3}(-[A-Z]{2})?)*$/).optional(),
        // Previous ID Token, should be provided when prompt=none is used
        id_token_hint: jwk_1.signedJwtSchema.optional(),
        // Type of UI the AS is displayed on
        display: zod_1.z.enum(["page", "popup", "touch", "wap"]).optional(),
        /**
         * - "none" will only be allowed if the user already allowed the client on the same device
         * - "login" will force the user to login again, unless he very recently logged in
         * - "consent" will force the user to consent again
         * - "select_account" will force the user to select an account
         */
        prompt: zod_1.z.enum(["none", "login", "consent", "select_account"]).optional(),
        // https://datatracker.ietf.org/doc/html/rfc9396
        authorization_details: oauth_authorization_details_js_1.oauthAuthorizationDetailsSchema.optional()
      });
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-authorization-request-par.js
  var require_oauth_authorization_request_par = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-authorization-request-par.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthAuthorizationRequestParSchema = void 0;
      var zod_1 = require_cjs();
      var oauth_authorization_request_jar_js_1 = require_oauth_authorization_request_jar();
      var oauth_authorization_request_parameters_js_1 = require_oauth_authorization_request_parameters();
      exports.oauthAuthorizationRequestParSchema = zod_1.z.union([
        oauth_authorization_request_parameters_js_1.oauthAuthorizationRequestParametersSchema,
        oauth_authorization_request_jar_js_1.oauthAuthorizationRequestJarSchema
      ]);
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-request-uri.js
  var require_oauth_request_uri = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-request-uri.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthRequestUriSchema = void 0;
      var zod_1 = require_cjs();
      exports.oauthRequestUriSchema = zod_1.z.string();
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-authorization-request-uri.js
  var require_oauth_authorization_request_uri = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-authorization-request-uri.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthAuthorizationRequestUriSchema = void 0;
      var zod_1 = require_cjs();
      var oauth_request_uri_js_1 = require_oauth_request_uri();
      exports.oauthAuthorizationRequestUriSchema = zod_1.z.object({
        request_uri: oauth_request_uri_js_1.oauthRequestUriSchema
      });
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-authorization-request-query.js
  var require_oauth_authorization_request_query = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-authorization-request-query.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthAuthorizationRequestQuerySchema = void 0;
      var zod_1 = require_cjs();
      var oauth_authorization_request_jar_js_1 = require_oauth_authorization_request_jar();
      var oauth_authorization_request_parameters_js_1 = require_oauth_authorization_request_parameters();
      var oauth_authorization_request_uri_js_1 = require_oauth_authorization_request_uri();
      exports.oauthAuthorizationRequestQuerySchema = zod_1.z.union([
        oauth_authorization_request_parameters_js_1.oauthAuthorizationRequestParametersSchema,
        oauth_authorization_request_jar_js_1.oauthAuthorizationRequestJarSchema,
        oauth_authorization_request_uri_js_1.oauthAuthorizationRequestUriSchema
      ]);
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-issuer-identifier.js
  var require_oauth_issuer_identifier = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-issuer-identifier.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthIssuerIdentifierSchema = void 0;
      var zod_1 = require_cjs();
      var uri_js_1 = require_uri();
      exports.oauthIssuerIdentifierSchema = uri_js_1.webUriSchema.superRefine((value, ctx) => {
        if (value.endsWith("/")) {
          ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: "Issuer URL must not end with a slash"
          });
          return false;
        }
        const url = new URL(value);
        if (url.username || url.password) {
          ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: "Issuer URL must not contain a username or password"
          });
          return false;
        }
        if (url.hash || url.search) {
          ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: "Issuer URL must not contain a query or fragment"
          });
          return false;
        }
        const canonicalValue = url.pathname === "/" ? url.origin : url.href;
        if (value !== canonicalValue) {
          ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: "Issuer URL must be in the canonical form"
          });
          return false;
        }
        return true;
      });
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-authorization-server-metadata.js
  var require_oauth_authorization_server_metadata = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-authorization-server-metadata.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthAuthorizationServerMetadataValidator = exports.oauthAuthorizationServerMetadataSchema = void 0;
      var zod_1 = require_cjs();
      var oauth_code_challenge_method_js_1 = require_oauth_code_challenge_method();
      var oauth_issuer_identifier_js_1 = require_oauth_issuer_identifier();
      var uri_js_1 = require_uri();
      exports.oauthAuthorizationServerMetadataSchema = zod_1.z.object({
        issuer: oauth_issuer_identifier_js_1.oauthIssuerIdentifierSchema,
        claims_supported: zod_1.z.array(zod_1.z.string()).optional(),
        claims_locales_supported: zod_1.z.array(zod_1.z.string()).optional(),
        claims_parameter_supported: zod_1.z.boolean().optional(),
        request_parameter_supported: zod_1.z.boolean().optional(),
        request_uri_parameter_supported: zod_1.z.boolean().optional(),
        require_request_uri_registration: zod_1.z.boolean().optional(),
        scopes_supported: zod_1.z.array(zod_1.z.string()).optional(),
        subject_types_supported: zod_1.z.array(zod_1.z.string()).optional(),
        response_types_supported: zod_1.z.array(zod_1.z.string()).optional(),
        response_modes_supported: zod_1.z.array(zod_1.z.string()).optional(),
        grant_types_supported: zod_1.z.array(zod_1.z.string()).optional(),
        code_challenge_methods_supported: zod_1.z.array(oauth_code_challenge_method_js_1.oauthCodeChallengeMethodSchema).min(1).optional(),
        ui_locales_supported: zod_1.z.array(zod_1.z.string()).optional(),
        id_token_signing_alg_values_supported: zod_1.z.array(zod_1.z.string()).optional(),
        display_values_supported: zod_1.z.array(zod_1.z.string()).optional(),
        request_object_signing_alg_values_supported: zod_1.z.array(zod_1.z.string()).optional(),
        authorization_response_iss_parameter_supported: zod_1.z.boolean().optional(),
        authorization_details_types_supported: zod_1.z.array(zod_1.z.string()).optional(),
        request_object_encryption_alg_values_supported: zod_1.z.array(zod_1.z.string()).optional(),
        request_object_encryption_enc_values_supported: zod_1.z.array(zod_1.z.string()).optional(),
        jwks_uri: uri_js_1.webUriSchema.optional(),
        authorization_endpoint: uri_js_1.webUriSchema,
        // .optional(),
        token_endpoint: uri_js_1.webUriSchema,
        // .optional(),
        token_endpoint_auth_methods_supported: zod_1.z.array(zod_1.z.string()).optional(),
        token_endpoint_auth_signing_alg_values_supported: zod_1.z.array(zod_1.z.string()).optional(),
        revocation_endpoint: uri_js_1.webUriSchema.optional(),
        introspection_endpoint: uri_js_1.webUriSchema.optional(),
        pushed_authorization_request_endpoint: uri_js_1.webUriSchema.optional(),
        require_pushed_authorization_requests: zod_1.z.boolean().optional(),
        userinfo_endpoint: uri_js_1.webUriSchema.optional(),
        end_session_endpoint: uri_js_1.webUriSchema.optional(),
        registration_endpoint: uri_js_1.webUriSchema.optional(),
        // https://datatracker.ietf.org/doc/html/rfc9449#section-5.1
        dpop_signing_alg_values_supported: zod_1.z.array(zod_1.z.string()).optional(),
        // https://datatracker.ietf.org/doc/html/draft-ietf-oauth-resource-metadata-05#section-4
        protected_resources: zod_1.z.array(uri_js_1.webUriSchema).optional(),
        // https://drafts.aaronpk.com/draft-parecki-oauth-client-id-metadata-document/draft-parecki-oauth-client-id-metadata-document.html
        client_id_metadata_document_supported: zod_1.z.boolean().optional()
      });
      exports.oauthAuthorizationServerMetadataValidator = exports.oauthAuthorizationServerMetadataSchema.superRefine((data, ctx) => {
        if (data.require_pushed_authorization_requests && !data.pushed_authorization_request_endpoint) {
          ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: '"pushed_authorization_request_endpoint" required when "require_pushed_authorization_requests" is true'
          });
        }
      }).superRefine((data, ctx) => {
        if (data.response_types_supported) {
          if (!data.response_types_supported.includes("code")) {
            ctx.addIssue({
              code: zod_1.z.ZodIssueCode.custom,
              message: 'Response type "code" is required'
            });
          }
        }
      });
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-client-credentials-grant-token-request.js
  var require_oauth_client_credentials_grant_token_request = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-client-credentials-grant-token-request.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthClientCredentialsGrantTokenRequestSchema = void 0;
      var zod_1 = require_cjs();
      exports.oauthClientCredentialsGrantTokenRequestSchema = zod_1.z.object({
        grant_type: zod_1.z.literal("client_credentials")
      });
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-client-credentials.js
  var require_oauth_client_credentials = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-client-credentials.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthClientCredentialsSchema = exports.oauthClientCredentialsNoneSchema = exports.oauthClientCredentialsSecretPostSchema = exports.oauthClientCredentialsJwtBearerSchema = void 0;
      var zod_1 = require_cjs();
      var jwk_1 = require_dist();
      var constants_js_1 = require_constants();
      var oauth_client_id_js_1 = require_oauth_client_id();
      exports.oauthClientCredentialsJwtBearerSchema = zod_1.z.object({
        client_id: oauth_client_id_js_1.oauthClientIdSchema,
        client_assertion_type: zod_1.z.literal(constants_js_1.CLIENT_ASSERTION_TYPE_JWT_BEARER),
        /**
         * - "sub" the subject MUST be the "client_id" of the OAuth client
         * - "iat" is required and MUST be less than one minute
         * - "aud" must containing a value that identifies the authorization server
         * - The JWT MAY contain a "jti" (JWT ID) claim that provides a unique identifier for the token.
         * - Note that the authorization server may reject JWTs with an "exp" claim value that is unreasonably far in the future.
         *
         * @see {@link https://datatracker.ietf.org/doc/html/rfc7523#section-3}
         */
        client_assertion: jwk_1.signedJwtSchema
      });
      exports.oauthClientCredentialsSecretPostSchema = zod_1.z.object({
        client_id: oauth_client_id_js_1.oauthClientIdSchema,
        client_secret: zod_1.z.string()
      });
      exports.oauthClientCredentialsNoneSchema = zod_1.z.object({
        client_id: oauth_client_id_js_1.oauthClientIdSchema
      });
      exports.oauthClientCredentialsSchema = zod_1.z.union([
        exports.oauthClientCredentialsJwtBearerSchema,
        exports.oauthClientCredentialsSecretPostSchema,
        // Must be last since it is less specific
        exports.oauthClientCredentialsNoneSchema
      ]);
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-client-id-discoverable.js
  var require_oauth_client_id_discoverable = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-client-id-discoverable.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.conventionalOAuthClientIdSchema = exports.oauthClientIdDiscoverableSchema = void 0;
      exports.isOAuthClientIdDiscoverable = isOAuthClientIdDiscoverable;
      exports.isConventionalOAuthClientId = isConventionalOAuthClientId;
      exports.assertOAuthDiscoverableClientId = assertOAuthDiscoverableClientId;
      exports.parseOAuthDiscoverableClientId = parseOAuthDiscoverableClientId;
      var zod_1 = require_cjs();
      var oauth_client_id_js_1 = require_oauth_client_id();
      var uri_js_1 = require_uri();
      var util_js_1 = require_util8();
      exports.oauthClientIdDiscoverableSchema = zod_1.z.intersection(oauth_client_id_js_1.oauthClientIdSchema, uri_js_1.httpsUriSchema).superRefine((value, ctx) => {
        const url = new URL(value);
        if (url.username || url.password) {
          ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: "ClientID must not contain credentials"
          });
          return false;
        }
        if (url.hash) {
          ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: "ClientID must not contain a fragment"
          });
          return false;
        }
        if (url.pathname === "/") {
          ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: 'ClientID must contain a path component (e.g. "/client-metadata.json")'
          });
          return false;
        }
        if (url.pathname.endsWith("/")) {
          ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: "ClientID path must not end with a trailing slash"
          });
          return false;
        }
        if ((0, util_js_1.isHostnameIP)(url.hostname)) {
          ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: "ClientID hostname must not be an IP address"
          });
          return false;
        }
        if ((0, util_js_1.extractUrlPath)(value) !== url.pathname) {
          ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: `ClientID must be in canonical form ("${url.href}", got "${value}")`
          });
          return false;
        }
        return true;
      });
      function isOAuthClientIdDiscoverable(clientId) {
        return exports.oauthClientIdDiscoverableSchema.safeParse(clientId).success;
      }
      exports.conventionalOAuthClientIdSchema = exports.oauthClientIdDiscoverableSchema.superRefine((value, ctx) => {
        const url = new URL(value);
        if (url.port) {
          ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: "ClientID must not contain a port"
          });
          return false;
        }
        if (url.search) {
          ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: "ClientID must not contain a query string"
          });
          return false;
        }
        if (url.pathname !== "/oauth-client-metadata.json") {
          ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: 'ClientID must be "/oauth-client-metadata.json"'
          });
          return false;
        }
        return true;
      });
      function isConventionalOAuthClientId(clientId) {
        return exports.conventionalOAuthClientIdSchema.safeParse(clientId).success;
      }
      function assertOAuthDiscoverableClientId(value) {
        void exports.oauthClientIdDiscoverableSchema.parse(value);
      }
      function parseOAuthDiscoverableClientId(clientId) {
        return new URL(exports.oauthClientIdDiscoverableSchema.parse(clientId));
      }
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-endpoint-auth-method.js
  var require_oauth_endpoint_auth_method = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-endpoint-auth-method.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthEndpointAuthMethod = void 0;
      var zod_1 = require_cjs();
      exports.oauthEndpointAuthMethod = zod_1.z.enum([
        "client_secret_basic",
        "client_secret_jwt",
        "client_secret_post",
        "none",
        "private_key_jwt",
        "self_signed_tls_client_auth",
        "tls_client_auth"
      ]);
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-grant-type.js
  var require_oauth_grant_type = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-grant-type.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthGrantTypeSchema = void 0;
      var zod_1 = require_cjs();
      exports.oauthGrantTypeSchema = zod_1.z.enum([
        "authorization_code",
        "implicit",
        "refresh_token",
        "password",
        // Not part of OAuth 2.1
        "client_credentials",
        "urn:ietf:params:oauth:grant-type:jwt-bearer",
        "urn:ietf:params:oauth:grant-type:saml2-bearer"
      ]);
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-client-metadata.js
  var require_oauth_client_metadata = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-client-metadata.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthClientMetadataSchema = void 0;
      var zod_1 = require_cjs();
      var jwk_1 = require_dist();
      var oauth_client_id_js_1 = require_oauth_client_id();
      var oauth_endpoint_auth_method_js_1 = require_oauth_endpoint_auth_method();
      var oauth_grant_type_js_1 = require_oauth_grant_type();
      var oauth_redirect_uri_js_1 = require_oauth_redirect_uri();
      var oauth_response_type_js_1 = require_oauth_response_type();
      var oauth_scope_js_1 = require_oauth_scope();
      var uri_js_1 = require_uri();
      exports.oauthClientMetadataSchema = zod_1.z.object({
        /**
         * @note redirect_uris require additional validation
         */
        redirect_uris: zod_1.z.array(oauth_redirect_uri_js_1.oauthRedirectUriSchema).nonempty(),
        response_types: zod_1.z.array(oauth_response_type_js_1.oauthResponseTypeSchema).nonempty().default(["code"]),
        grant_types: zod_1.z.array(oauth_grant_type_js_1.oauthGrantTypeSchema).nonempty().default(["authorization_code"]),
        scope: oauth_scope_js_1.oauthScopeSchema.optional(),
        token_endpoint_auth_method: oauth_endpoint_auth_method_js_1.oauthEndpointAuthMethod.default("none").optional(),
        token_endpoint_auth_signing_alg: zod_1.z.string().optional(),
        userinfo_signed_response_alg: zod_1.z.string().optional(),
        userinfo_encrypted_response_alg: zod_1.z.string().optional(),
        jwks_uri: uri_js_1.webUriSchema.optional(),
        jwks: jwk_1.jwksPubSchema.optional(),
        application_type: zod_1.z.enum(["web", "native"]).default("web").optional(),
        // default, per spec, is "web"
        subject_type: zod_1.z.enum(["public", "pairwise"]).default("public").optional(),
        request_object_signing_alg: zod_1.z.string().optional(),
        id_token_signed_response_alg: zod_1.z.string().optional(),
        authorization_signed_response_alg: zod_1.z.string().default("RS256").optional(),
        authorization_encrypted_response_enc: zod_1.z.enum(["A128CBC-HS256"]).optional(),
        authorization_encrypted_response_alg: zod_1.z.string().optional(),
        client_id: oauth_client_id_js_1.oauthClientIdSchema.optional(),
        client_name: zod_1.z.string().optional(),
        client_uri: uri_js_1.webUriSchema.optional(),
        policy_uri: uri_js_1.webUriSchema.optional(),
        tos_uri: uri_js_1.webUriSchema.optional(),
        logo_uri: uri_js_1.webUriSchema.optional(),
        // @TODO: allow data: uri ?
        /**
         * Default Maximum Authentication Age. Specifies that the End-User MUST be
         * actively authenticated if the End-User was authenticated longer ago than
         * the specified number of seconds. The max_age request parameter overrides
         * this default value. If omitted, no default Maximum Authentication Age is
         * specified.
         */
        default_max_age: zod_1.z.number().optional(),
        require_auth_time: zod_1.z.boolean().optional(),
        contacts: zod_1.z.array(zod_1.z.string().email()).optional(),
        tls_client_certificate_bound_access_tokens: zod_1.z.boolean().optional(),
        // https://datatracker.ietf.org/doc/html/rfc9449#section-5.2
        dpop_bound_access_tokens: zod_1.z.boolean().optional(),
        // https://datatracker.ietf.org/doc/html/rfc9396#section-14.5
        authorization_details_types: zod_1.z.array(zod_1.z.string()).optional()
      });
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-endpoint-name.js
  var require_oauth_endpoint_name = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-endpoint-name.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.OAUTH_ENDPOINT_NAMES = void 0;
      exports.OAUTH_ENDPOINT_NAMES = [
        "token",
        "revocation",
        "introspection",
        "pushed_authorization_request"
      ];
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-introspection-response.js
  var require_oauth_introspection_response = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-introspection-response.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-par-response.js
  var require_oauth_par_response = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-par-response.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthParResponseSchema = void 0;
      var zod_1 = require_cjs();
      exports.oauthParResponseSchema = zod_1.z.object({
        request_uri: zod_1.z.string(),
        expires_in: zod_1.z.number().int().positive()
      });
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-password-grant-token-request.js
  var require_oauth_password_grant_token_request = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-password-grant-token-request.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthPasswordGrantTokenRequestSchema = void 0;
      var zod_1 = require_cjs();
      exports.oauthPasswordGrantTokenRequestSchema = zod_1.z.object({
        grant_type: zod_1.z.literal("password"),
        username: zod_1.z.string(),
        password: zod_1.z.string()
      });
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-protected-resource-metadata.js
  var require_oauth_protected_resource_metadata = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-protected-resource-metadata.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthProtectedResourceMetadataSchema = void 0;
      var zod_1 = require_cjs();
      var oauth_issuer_identifier_js_1 = require_oauth_issuer_identifier();
      var uri_js_1 = require_uri();
      exports.oauthProtectedResourceMetadataSchema = zod_1.z.object({
        /**
         * REQUIRED. The protected resource's resource identifier, which is a URL that
         * uses the https scheme and has no query or fragment components. Using these
         * well-known resources is described in Section 3.
         *
         * @note This schema allows non https URLs for testing & development purposes.
         * Make sure to validate the URL before using it in a production environment.
         */
        resource: uri_js_1.webUriSchema.refine((url) => !url.includes("?"), {
          message: "Resource URL must not contain query parameters"
        }).refine((url) => !url.includes("#"), {
          message: "Resource URL must not contain a fragment"
        }),
        /**
         * OPTIONAL. JSON array containing a list of OAuth authorization server issuer
         * identifiers, as defined in [RFC8414], for authorization servers that can be
         * used with this protected resource. Protected resources MAY choose not to
         * advertise some supported authorization servers even when this parameter is
         * used. In some use cases, the set of authorization servers will not be
         * enumerable, in which case this metadata parameter would not be used.
         */
        authorization_servers: zod_1.z.array(oauth_issuer_identifier_js_1.oauthIssuerIdentifierSchema).optional(),
        /**
         * OPTIONAL. URL of the protected resource's JWK Set [JWK] document. This
         * contains public keys belonging to the protected resource, such as signing
         * key(s) that the resource server uses to sign resource responses. This URL
         * MUST use the https scheme. When both signing and encryption keys are made
         * available, a use (public key use) parameter value is REQUIRED for all keys
         * in the referenced JWK Set to indicate each key's intended usage.
         */
        jwks_uri: uri_js_1.webUriSchema.optional(),
        /**
         * RECOMMENDED. JSON array containing a list of the OAuth 2.0 [RFC6749] scope
         * values that are used in authorization requests to request access to this
         * protected resource. Protected resources MAY choose not to advertise some
         * scope values supported even when this parameter is used.
         */
        scopes_supported: zod_1.z.array(zod_1.z.string()).optional(),
        /**
         * OPTIONAL. JSON array containing a list of the supported methods of sending
         * an OAuth 2.0 Bearer Token [RFC6750] to the protected resource. Defined
         * values are ["header", "body", "query"], corresponding to Sections 2.1, 2.2,
         * and 2.3 of RFC 6750.
         */
        bearer_methods_supported: zod_1.z.array(zod_1.z.enum(["header", "body", "query"])).optional(),
        /**
         * OPTIONAL. JSON array containing a list of the JWS [JWS] signing algorithms
         * (alg values) [JWA] supported by the protected resource for signing resource
         * responses, for instance, as described in [FAPI.MessageSigning]. No default
         * algorithms are implied if this entry is omitted. The value none MUST NOT be
         * used.
         */
        resource_signing_alg_values_supported: zod_1.z.array(zod_1.z.string()).optional(),
        /**
         * OPTIONAL. URL of a page containing human-readable information that
         * developers might want or need to know when using the protected resource
         */
        resource_documentation: uri_js_1.webUriSchema.optional(),
        /**
         * OPTIONAL. URL that the protected resource provides to read about the
         * protected resource's requirements on how the client can use the data
         * provided by the protected resource
         */
        resource_policy_uri: uri_js_1.webUriSchema.optional(),
        /**
         * OPTIONAL. URL that the protected resource provides to read about the
         * protected resource's terms of service
         */
        resource_tos_uri: uri_js_1.webUriSchema.optional()
      });
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-refresh-token.js
  var require_oauth_refresh_token = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-refresh-token.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthRefreshTokenSchema = void 0;
      var zod_1 = require_cjs();
      exports.oauthRefreshTokenSchema = zod_1.z.string().min(1);
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-refresh-token-grant-token-request.js
  var require_oauth_refresh_token_grant_token_request = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-refresh-token-grant-token-request.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthRefreshTokenGrantTokenRequestSchema = void 0;
      var zod_1 = require_cjs();
      var oauth_refresh_token_js_1 = require_oauth_refresh_token();
      exports.oauthRefreshTokenGrantTokenRequestSchema = zod_1.z.object({
        grant_type: zod_1.z.literal("refresh_token"),
        refresh_token: oauth_refresh_token_js_1.oauthRefreshTokenSchema
      });
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-token-identification.js
  var require_oauth_token_identification = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-token-identification.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthTokenIdentificationSchema = void 0;
      var zod_1 = require_cjs();
      var oauth_access_token_js_1 = require_oauth_access_token();
      var oauth_refresh_token_js_1 = require_oauth_refresh_token();
      exports.oauthTokenIdentificationSchema = zod_1.z.object({
        token: zod_1.z.union([oauth_access_token_js_1.oauthAccessTokenSchema, oauth_refresh_token_js_1.oauthRefreshTokenSchema]),
        token_type_hint: zod_1.z.enum(["access_token", "refresh_token"]).optional()
      });
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-token-request.js
  var require_oauth_token_request = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-token-request.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthTokenRequestSchema = void 0;
      var zod_1 = require_cjs();
      var oauth_authorization_code_grant_token_request_js_1 = require_oauth_authorization_code_grant_token_request();
      var oauth_client_credentials_grant_token_request_js_1 = require_oauth_client_credentials_grant_token_request();
      var oauth_password_grant_token_request_js_1 = require_oauth_password_grant_token_request();
      var oauth_refresh_token_grant_token_request_js_1 = require_oauth_refresh_token_grant_token_request();
      exports.oauthTokenRequestSchema = zod_1.z.discriminatedUnion("grant_type", [
        oauth_authorization_code_grant_token_request_js_1.oauthAuthorizationCodeGrantTokenRequestSchema,
        oauth_refresh_token_grant_token_request_js_1.oauthRefreshTokenGrantTokenRequestSchema,
        oauth_password_grant_token_request_js_1.oauthPasswordGrantTokenRequestSchema,
        oauth_client_credentials_grant_token_request_js_1.oauthClientCredentialsGrantTokenRequestSchema
      ]);
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-token-type.js
  var require_oauth_token_type = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-token-type.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthTokenTypeSchema = void 0;
      var zod_1 = require_cjs();
      exports.oauthTokenTypeSchema = zod_1.z.union([
        zod_1.z.string().regex(/^DPoP$/i).transform(() => "DPoP"),
        zod_1.z.string().regex(/^Bearer$/i).transform(() => "Bearer")
      ]);
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-token-response.js
  var require_oauth_token_response = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oauth-token-response.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oauthTokenResponseSchema = void 0;
      var zod_1 = require_cjs();
      var jwk_1 = require_dist();
      var oauth_authorization_details_js_1 = require_oauth_authorization_details();
      var oauth_token_type_js_1 = require_oauth_token_type();
      exports.oauthTokenResponseSchema = zod_1.z.object({
        // https://www.rfc-editor.org/rfc/rfc6749.html#section-5.1
        access_token: zod_1.z.string(),
        token_type: oauth_token_type_js_1.oauthTokenTypeSchema,
        scope: zod_1.z.string().optional(),
        refresh_token: zod_1.z.string().optional(),
        expires_in: zod_1.z.number().optional(),
        // https://openid.net/specs/openid-connect-core-1_0.html#TokenResponse
        id_token: jwk_1.signedJwtSchema.optional(),
        // https://datatracker.ietf.org/doc/html/rfc9396#name-enriched-authorization-deta
        authorization_details: oauth_authorization_details_js_1.oauthAuthorizationDetailsSchema.optional()
      }).passthrough();
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oidc-authentication-error-response.js
  var require_oidc_authentication_error_response = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oidc-authentication-error-response.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oidcAuthenticationErrorResponseSchema = void 0;
      var zod_1 = require_cjs();
      exports.oidcAuthenticationErrorResponseSchema = zod_1.z.enum([
        // The Authorization Server requires End-User interaction of some form to proceed. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for End-User interaction.
        "interaction_required",
        // The Authorization Server requires End-User authentication. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for End-User authentication.
        "login_required",
        // The End-User is REQUIRED to select a session at the Authorization Server. The End-User MAY be authenticated at the Authorization Server with different associated accounts, but the End-User did not select a session. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface to prompt for a session to use.
        "account_selection_required",
        // The Authorization Server requires End-User consent. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for End-User consent.
        "consent_required",
        // The request_uri in the Authorization Request returns an error or contains invalid data.
        "invalid_request_uri",
        // The request parameter contains an invalid Request Object.
        "invalid_request_object",
        // The OP does not support use of the request parameter defined in Section 6.
        "request_not_supported",
        // The OP does not support use of the request_uri parameter defined in Section 6.
        "request_uri_not_supported",
        // The OP does not support use of the registration parameter defined in Section 7.2.1.
        "registration_not_supported"
      ]);
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oidc-userinfo.js
  var require_oidc_userinfo = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/oidc-userinfo.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oidcUserinfoSchema = void 0;
      var zod_1 = require_cjs();
      exports.oidcUserinfoSchema = zod_1.z.object({
        sub: zod_1.z.string(),
        iss: zod_1.z.string().url().optional(),
        aud: zod_1.z.union([zod_1.z.string(), zod_1.z.array(zod_1.z.string()).min(1)]).optional(),
        email: zod_1.z.string().email().optional(),
        email_verified: zod_1.z.boolean().optional(),
        name: zod_1.z.string().optional(),
        preferred_username: zod_1.z.string().optional(),
        picture: zod_1.z.string().url().optional()
      });
    }
  });

  // node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/index.js
  var require_dist11 = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-types@0.2.7/node_modules/@atproto/oauth-types/dist/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_constants(), exports);
      __exportStar(require_uri(), exports);
      __exportStar(require_util8(), exports);
      __exportStar(require_atproto_loopback_client_metadata(), exports);
      __exportStar(require_oauth_access_token(), exports);
      __exportStar(require_oauth_authentication_error_response(), exports);
      __exportStar(require_oauth_authorization_code_grant_token_request(), exports);
      __exportStar(require_oauth_authorization_details(), exports);
      __exportStar(require_oauth_authorization_request_jar(), exports);
      __exportStar(require_oauth_authorization_request_par(), exports);
      __exportStar(require_oauth_authorization_request_parameters(), exports);
      __exportStar(require_oauth_authorization_request_query(), exports);
      __exportStar(require_oauth_authorization_request_uri(), exports);
      __exportStar(require_oauth_authorization_server_metadata(), exports);
      __exportStar(require_oauth_client_credentials_grant_token_request(), exports);
      __exportStar(require_oauth_client_credentials(), exports);
      __exportStar(require_oauth_client_id_discoverable(), exports);
      __exportStar(require_oauth_client_id_loopback(), exports);
      __exportStar(require_oauth_client_id(), exports);
      __exportStar(require_oauth_client_metadata(), exports);
      __exportStar(require_oauth_endpoint_auth_method(), exports);
      __exportStar(require_oauth_endpoint_name(), exports);
      __exportStar(require_oauth_grant_type(), exports);
      __exportStar(require_oauth_introspection_response(), exports);
      __exportStar(require_oauth_issuer_identifier(), exports);
      __exportStar(require_oauth_par_response(), exports);
      __exportStar(require_oauth_password_grant_token_request(), exports);
      __exportStar(require_oauth_protected_resource_metadata(), exports);
      __exportStar(require_oauth_redirect_uri(), exports);
      __exportStar(require_oauth_refresh_token_grant_token_request(), exports);
      __exportStar(require_oauth_refresh_token(), exports);
      __exportStar(require_oauth_request_uri(), exports);
      __exportStar(require_oauth_response_mode(), exports);
      __exportStar(require_oauth_response_type(), exports);
      __exportStar(require_oauth_scope(), exports);
      __exportStar(require_oauth_token_identification(), exports);
      __exportStar(require_oauth_token_request(), exports);
      __exportStar(require_oauth_token_response(), exports);
      __exportStar(require_oauth_token_type(), exports);
      __exportStar(require_oidc_authentication_error_response(), exports);
      __exportStar(require_oidc_claims_parameter(), exports);
      __exportStar(require_oidc_claims_properties(), exports);
      __exportStar(require_oidc_entity_type(), exports);
      __exportStar(require_oidc_userinfo(), exports);
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/util.js
  var require_util9 = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/util.js"(exports) {
      "use strict";
      var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.includesSpaceSeparatedValue = exports.CustomEventTarget = exports.CustomEvent = exports.timeoutSignal = exports.ifString = void 0;
      exports.contentMime = contentMime;
      exports.combineSignals = combineSignals;
      Symbol.dispose ?? (Symbol.dispose = Symbol("@@dispose"));
      var ifString = (v) => typeof v === "string" ? v : void 0;
      exports.ifString = ifString;
      var timeoutSignal = (timeout, options) => {
        if (!Number.isInteger(timeout) || timeout < 0) {
          throw new TypeError("Expected a positive integer");
        }
        options?.signal?.throwIfAborted();
        const controller = new AbortController();
        const { signal } = controller;
        options?.signal?.addEventListener("abort", (reason) => controller.abort(reason), { once: true, signal });
        const timeoutId = setTimeout(
          (err) => controller.abort(err),
          timeout,
          // create Error here to keep original stack trace
          new Error("Timeout")
        );
        timeoutId?.unref?.();
        signal.addEventListener("abort", () => clearTimeout(timeoutId), {
          once: true,
          signal
        });
        Object.defineProperty(signal, Symbol.dispose, {
          value: () => controller.abort()
        });
        return signal;
      };
      exports.timeoutSignal = timeoutSignal;
      function contentMime(headers) {
        return headers.get("content-type")?.split(";")[0].trim();
      }
      exports.CustomEvent = globalThis.CustomEvent ?? (() => {
        var _CustomEvent_detail;
        class CustomEvent extends Event {
          constructor(type, options) {
            if (!arguments.length)
              throw new TypeError("type argument is required");
            super(type, options);
            _CustomEvent_detail.set(this, void 0);
            __classPrivateFieldSet(this, _CustomEvent_detail, options?.detail ?? null, "f");
          }
          get detail() {
            return __classPrivateFieldGet(this, _CustomEvent_detail, "f");
          }
        }
        _CustomEvent_detail = /* @__PURE__ */ new WeakMap();
        Object.defineProperties(CustomEvent.prototype, {
          [Symbol.toStringTag]: {
            writable: false,
            enumerable: false,
            configurable: true,
            value: "CustomEvent"
          },
          detail: {
            enumerable: true
          }
        });
        return CustomEvent;
      })();
      var CustomEventTarget = class {
        constructor() {
          Object.defineProperty(this, "eventTarget", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new EventTarget()
          });
        }
        addEventListener(type, callback, options) {
          this.eventTarget.addEventListener(type, callback, options);
        }
        removeEventListener(type, callback, options) {
          this.eventTarget.removeEventListener(type, callback, options);
        }
        dispatchCustomEvent(type, detail, init) {
          return this.eventTarget.dispatchEvent(new exports.CustomEvent(type, { ...init, detail }));
        }
      };
      exports.CustomEventTarget = CustomEventTarget;
      var includesSpaceSeparatedValue = (input, value) => {
        if (value.length === 0)
          throw new TypeError("Value cannot be empty");
        if (value.includes(" "))
          throw new TypeError("Value cannot contain spaces");
        const inputLength = input.length;
        const valueLength = value.length;
        if (inputLength < valueLength)
          return false;
        let idx = input.indexOf(value);
        let idxEnd;
        while (idx !== -1) {
          idxEnd = idx + valueLength;
          if (
            // at beginning or preceded by space
            (idx === 0 || input[idx - 1] === " ") && // at end or followed by space
            (idxEnd === inputLength || input[idxEnd] === " ")
          ) {
            return true;
          }
          idx = input.indexOf(value, idxEnd + 1);
        }
        return false;
      };
      exports.includesSpaceSeparatedValue = includesSpaceSeparatedValue;
      function combineSignals(signals) {
        const controller = new AbortController();
        const onAbort = function(_event) {
          const reason = new Error("This operation was aborted", {
            cause: this.reason
          });
          controller.abort(reason);
        };
        for (const sig of signals) {
          if (!sig)
            continue;
          if (sig.aborted) {
            controller.abort();
            throw new Error("One of the signals is already aborted", {
              cause: sig.reason
            });
          }
          sig.addEventListener("abort", onAbort, { signal: controller.signal });
        }
        controller[Symbol.dispose] = () => {
          const reason = new Error("AbortController was disposed");
          controller.abort(reason);
        };
        return controller;
      }
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/oauth-authorization-server-metadata-resolver.js
  var require_oauth_authorization_server_metadata_resolver = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/oauth-authorization-server-metadata-resolver.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.OAuthAuthorizationServerMetadataResolver = void 0;
      var oauth_types_1 = require_dist11();
      var fetch_1 = require_dist8();
      var simple_store_1 = require_dist6();
      var util_js_1 = require_util9();
      var OAuthAuthorizationServerMetadataResolver = class extends simple_store_1.CachedGetter {
        constructor(cache, fetch2, config) {
          super(async (issuer, options) => this.fetchMetadata(issuer, options), cache);
          Object.defineProperty(this, "fetch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "allowHttpIssuer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.fetch = (0, fetch_1.bindFetch)(fetch2);
          this.allowHttpIssuer = config?.allowHttpIssuer === true;
        }
        async get(input, options) {
          const issuer = oauth_types_1.oauthIssuerIdentifierSchema.parse(input);
          if (!this.allowHttpIssuer && issuer.startsWith("http:")) {
            throw new TypeError("Unsecure issuer URL protocol only allowed in development and test environments");
          }
          return super.get(issuer, options);
        }
        async fetchMetadata(issuer, options) {
          const url = new URL(`/.well-known/oauth-authorization-server`, issuer);
          const request = new Request(url, {
            headers: { accept: "application/json" },
            cache: options?.noCache ? "no-cache" : void 0,
            signal: options?.signal,
            redirect: "manual"
            // response must be 200 OK
          });
          const response = await this.fetch(request);
          if (response.status !== 200) {
            await (0, fetch_1.cancelBody)(response, "log");
            throw await fetch_1.FetchResponseError.from(response, `Unexpected status code ${response.status} for "${url}"`, void 0, { cause: request });
          }
          if ((0, util_js_1.contentMime)(response.headers) !== "application/json") {
            await (0, fetch_1.cancelBody)(response, "log");
            throw await fetch_1.FetchResponseError.from(response, `Unexpected content type for "${url}"`, void 0, { cause: request });
          }
          const metadata = oauth_types_1.oauthAuthorizationServerMetadataValidator.parse(await response.json());
          if (metadata.issuer !== issuer) {
            throw new TypeError(`Invalid issuer ${metadata.issuer}`);
          }
          if (metadata.client_id_metadata_document_supported !== true) {
            throw new TypeError(`Authorization server "${issuer}" does not support client_id_metadata_document`);
          }
          return metadata;
        }
      };
      exports.OAuthAuthorizationServerMetadataResolver = OAuthAuthorizationServerMetadataResolver;
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/oauth-callback-error.js
  var require_oauth_callback_error = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/oauth-callback-error.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.OAuthCallbackError = void 0;
      var OAuthCallbackError = class _OAuthCallbackError extends Error {
        static from(err, params, state) {
          if (err instanceof _OAuthCallbackError)
            return err;
          const message2 = err instanceof Error ? err.message : void 0;
          return new _OAuthCallbackError(params, message2, state, err);
        }
        constructor(params, message2 = params.get("error_description") || "OAuth callback error", state, cause) {
          super(message2, { cause });
          Object.defineProperty(this, "params", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: params
          });
          Object.defineProperty(this, "state", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: state
          });
        }
      };
      exports.OAuthCallbackError = OAuthCallbackError;
    }
  });

  // node_modules/.pnpm/@atproto+syntax@0.4.0/node_modules/@atproto/syntax/dist/handle.js
  var require_handle = __commonJS({
    "node_modules/.pnpm/@atproto+syntax@0.4.0/node_modules/@atproto/syntax/dist/handle.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DisallowedDomainError = exports.UnsupportedDomainError = exports.ReservedHandleError = exports.InvalidHandleError = exports.isValidTld = exports.isValidHandle = exports.normalizeAndEnsureValidHandle = exports.normalizeHandle = exports.ensureValidHandleRegex = exports.ensureValidHandle = exports.DISALLOWED_TLDS = exports.INVALID_HANDLE = void 0;
      exports.INVALID_HANDLE = "handle.invalid";
      exports.DISALLOWED_TLDS = [
        ".local",
        ".arpa",
        ".invalid",
        ".localhost",
        ".internal",
        ".example",
        ".alt",
        // policy could concievably change on ".onion" some day
        ".onion"
        // NOTE: .test is allowed in testing and devopment. In practical terms
        // "should" "never" actually resolve and get registered in production
      ];
      var ensureValidHandle = (handle) => {
        if (!/^[a-zA-Z0-9.-]*$/.test(handle)) {
          throw new InvalidHandleError("Disallowed characters in handle (ASCII letters, digits, dashes, periods only)");
        }
        if (handle.length > 253) {
          throw new InvalidHandleError("Handle is too long (253 chars max)");
        }
        const labels = handle.split(".");
        if (labels.length < 2) {
          throw new InvalidHandleError("Handle domain needs at least two parts");
        }
        for (let i = 0; i < labels.length; i++) {
          const l = labels[i];
          if (l.length < 1) {
            throw new InvalidHandleError("Handle parts can not be empty");
          }
          if (l.length > 63) {
            throw new InvalidHandleError("Handle part too long (max 63 chars)");
          }
          if (l.endsWith("-") || l.startsWith("-")) {
            throw new InvalidHandleError("Handle parts can not start or end with hyphens");
          }
          if (i + 1 === labels.length && !/^[a-zA-Z]/.test(l)) {
            throw new InvalidHandleError("Handle final component (TLD) must start with ASCII letter");
          }
        }
      };
      exports.ensureValidHandle = ensureValidHandle;
      var ensureValidHandleRegex = (handle) => {
        if (!/^([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?$/.test(handle)) {
          throw new InvalidHandleError("Handle didn't validate via regex");
        }
        if (handle.length > 253) {
          throw new InvalidHandleError("Handle is too long (253 chars max)");
        }
      };
      exports.ensureValidHandleRegex = ensureValidHandleRegex;
      var normalizeHandle = (handle) => {
        return handle.toLowerCase();
      };
      exports.normalizeHandle = normalizeHandle;
      var normalizeAndEnsureValidHandle = (handle) => {
        const normalized = (0, exports.normalizeHandle)(handle);
        (0, exports.ensureValidHandle)(normalized);
        return normalized;
      };
      exports.normalizeAndEnsureValidHandle = normalizeAndEnsureValidHandle;
      var isValidHandle = (handle) => {
        try {
          (0, exports.ensureValidHandle)(handle);
        } catch (err) {
          if (err instanceof InvalidHandleError) {
            return false;
          }
          throw err;
        }
        return true;
      };
      exports.isValidHandle = isValidHandle;
      var isValidTld = (handle) => {
        return !exports.DISALLOWED_TLDS.some((domain) => handle.endsWith(domain));
      };
      exports.isValidTld = isValidTld;
      var InvalidHandleError = class extends Error {
      };
      exports.InvalidHandleError = InvalidHandleError;
      var ReservedHandleError = class extends Error {
      };
      exports.ReservedHandleError = ReservedHandleError;
      var UnsupportedDomainError = class extends Error {
      };
      exports.UnsupportedDomainError = UnsupportedDomainError;
      var DisallowedDomainError = class extends Error {
      };
      exports.DisallowedDomainError = DisallowedDomainError;
    }
  });

  // node_modules/.pnpm/@atproto+syntax@0.4.0/node_modules/@atproto/syntax/dist/did.js
  var require_did2 = __commonJS({
    "node_modules/.pnpm/@atproto+syntax@0.4.0/node_modules/@atproto/syntax/dist/did.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InvalidDidError = exports.ensureValidDidRegex = exports.ensureValidDid = void 0;
      var ensureValidDid = (did) => {
        if (!did.startsWith("did:")) {
          throw new InvalidDidError('DID requires "did:" prefix');
        }
        if (!/^[a-zA-Z0-9._:%-]*$/.test(did)) {
          throw new InvalidDidError("Disallowed characters in DID (ASCII letters, digits, and a couple other characters only)");
        }
        const { length: length2, 1: method } = did.split(":");
        if (length2 < 3) {
          throw new InvalidDidError("DID requires prefix, method, and method-specific content");
        }
        if (!/^[a-z]+$/.test(method)) {
          throw new InvalidDidError("DID method must be lower-case letters");
        }
        if (did.endsWith(":") || did.endsWith("%")) {
          throw new InvalidDidError('DID can not end with ":" or "%"');
        }
        if (did.length > 2 * 1024) {
          throw new InvalidDidError("DID is too long (2048 chars max)");
        }
      };
      exports.ensureValidDid = ensureValidDid;
      var ensureValidDidRegex = (did) => {
        if (!/^did:[a-z]+:[a-zA-Z0-9._:%-]*[a-zA-Z0-9._-]$/.test(did)) {
          throw new InvalidDidError("DID didn't validate via regex");
        }
        if (did.length > 2 * 1024) {
          throw new InvalidDidError("DID is too long (2048 chars max)");
        }
      };
      exports.ensureValidDidRegex = ensureValidDidRegex;
      var InvalidDidError = class extends Error {
      };
      exports.InvalidDidError = InvalidDidError;
    }
  });

  // node_modules/.pnpm/@atproto+syntax@0.4.0/node_modules/@atproto/syntax/dist/nsid.js
  var require_nsid = __commonJS({
    "node_modules/.pnpm/@atproto+syntax@0.4.0/node_modules/@atproto/syntax/dist/nsid.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InvalidNsidError = exports.ensureValidNsidRegex = exports.ensureValidNsid = exports.NSID = void 0;
      var NSID = class _NSID {
        static parse(nsid) {
          return new _NSID(nsid);
        }
        static create(authority, name2) {
          const segments = [...authority.split(".").reverse(), name2].join(".");
          return new _NSID(segments);
        }
        static isValid(nsid) {
          try {
            _NSID.parse(nsid);
            return true;
          } catch (e) {
            return false;
          }
        }
        constructor(nsid) {
          Object.defineProperty(this, "segments", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
          });
          (0, exports.ensureValidNsid)(nsid);
          this.segments = nsid.split(".");
        }
        get authority() {
          return this.segments.slice(0, this.segments.length - 1).reverse().join(".");
        }
        get name() {
          return this.segments.at(this.segments.length - 1);
        }
        toString() {
          return this.segments.join(".");
        }
      };
      exports.NSID = NSID;
      var ensureValidNsid = (nsid) => {
        const toCheck = nsid;
        if (!/^[a-zA-Z0-9.-]*$/.test(toCheck)) {
          throw new InvalidNsidError("Disallowed characters in NSID (ASCII letters, digits, dashes, periods only)");
        }
        if (toCheck.length > 253 + 1 + 63) {
          throw new InvalidNsidError("NSID is too long (317 chars max)");
        }
        const labels = toCheck.split(".");
        if (labels.length < 3) {
          throw new InvalidNsidError("NSID needs at least three parts");
        }
        for (let i = 0; i < labels.length; i++) {
          const l = labels[i];
          if (l.length < 1) {
            throw new InvalidNsidError("NSID parts can not be empty");
          }
          if (l.length > 63) {
            throw new InvalidNsidError("NSID part too long (max 63 chars)");
          }
          if (l.endsWith("-") || l.startsWith("-")) {
            throw new InvalidNsidError("NSID parts can not start or end with hyphen");
          }
          if (/^[0-9]/.test(l) && i === 0) {
            throw new InvalidNsidError("NSID first part may not start with a digit");
          }
          if (!/^[a-zA-Z][a-zA-Z0-9]*$/.test(l) && i + 1 === labels.length) {
            throw new InvalidNsidError("NSID name part must be only letters and digits (and no leading digit)");
          }
        }
      };
      exports.ensureValidNsid = ensureValidNsid;
      var ensureValidNsidRegex = (nsid) => {
        if (!/^[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(\.[a-zA-Z]([a-zA-Z0-9]{0,62})?)$/.test(nsid)) {
          throw new InvalidNsidError("NSID didn't validate via regex");
        }
        if (nsid.length > 253 + 1 + 63) {
          throw new InvalidNsidError("NSID is too long (317 chars max)");
        }
      };
      exports.ensureValidNsidRegex = ensureValidNsidRegex;
      var InvalidNsidError = class extends Error {
      };
      exports.InvalidNsidError = InvalidNsidError;
    }
  });

  // node_modules/.pnpm/@atproto+syntax@0.4.0/node_modules/@atproto/syntax/dist/aturi_validation.js
  var require_aturi_validation = __commonJS({
    "node_modules/.pnpm/@atproto+syntax@0.4.0/node_modules/@atproto/syntax/dist/aturi_validation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ensureValidAtUriRegex = exports.ensureValidAtUri = void 0;
      var did_1 = require_did2();
      var handle_1 = require_handle();
      var nsid_1 = require_nsid();
      var ensureValidAtUri = (uri) => {
        const uriParts = uri.split("#");
        if (uriParts.length > 2) {
          throw new Error('ATURI can have at most one "#", separating fragment out');
        }
        const fragmentPart = uriParts[1] || null;
        uri = uriParts[0];
        if (!/^[a-zA-Z0-9._~:@!$&')(*+,;=%/-]*$/.test(uri)) {
          throw new Error("Disallowed characters in ATURI (ASCII)");
        }
        const parts = uri.split("/");
        if (parts.length >= 3 && (parts[0] !== "at:" || parts[1].length !== 0)) {
          throw new Error('ATURI must start with "at://"');
        }
        if (parts.length < 3) {
          throw new Error("ATURI requires at least method and authority sections");
        }
        try {
          if (parts[2].startsWith("did:")) {
            (0, did_1.ensureValidDid)(parts[2]);
          } else {
            (0, handle_1.ensureValidHandle)(parts[2]);
          }
        } catch {
          throw new Error("ATURI authority must be a valid handle or DID");
        }
        if (parts.length >= 4) {
          if (parts[3].length === 0) {
            throw new Error("ATURI can not have a slash after authority without a path segment");
          }
          try {
            (0, nsid_1.ensureValidNsid)(parts[3]);
          } catch {
            throw new Error("ATURI requires first path segment (if supplied) to be valid NSID");
          }
        }
        if (parts.length >= 5) {
          if (parts[4].length === 0) {
            throw new Error("ATURI can not have a slash after collection, unless record key is provided");
          }
        }
        if (parts.length >= 6) {
          throw new Error("ATURI path can have at most two parts, and no trailing slash");
        }
        if (uriParts.length >= 2 && fragmentPart == null) {
          throw new Error("ATURI fragment must be non-empty and start with slash");
        }
        if (fragmentPart != null) {
          if (fragmentPart.length === 0 || fragmentPart[0] !== "/") {
            throw new Error("ATURI fragment must be non-empty and start with slash");
          }
          if (!/^\/[a-zA-Z0-9._~:@!$&')(*+,;=%[\]/-]*$/.test(fragmentPart)) {
            throw new Error("Disallowed characters in ATURI fragment (ASCII)");
          }
        }
        if (uri.length > 8 * 1024) {
          throw new Error("ATURI is far too long");
        }
      };
      exports.ensureValidAtUri = ensureValidAtUri;
      var ensureValidAtUriRegex = (uri) => {
        const aturiRegex = /^at:\/\/(?<authority>[a-zA-Z0-9._:%-]+)(\/(?<collection>[a-zA-Z0-9-.]+)(\/(?<rkey>[a-zA-Z0-9._~:@!$&%')(*+,;=-]+))?)?(#(?<fragment>\/[a-zA-Z0-9._~:@!$&%')(*+,;=\-[\]/\\]*))?$/;
        const rm = uri.match(aturiRegex);
        if (!rm || !rm.groups) {
          throw new Error("ATURI didn't validate via regex");
        }
        const groups = rm.groups;
        try {
          (0, handle_1.ensureValidHandleRegex)(groups.authority);
        } catch {
          try {
            (0, did_1.ensureValidDidRegex)(groups.authority);
          } catch {
            throw new Error("ATURI authority must be a valid handle or DID");
          }
        }
        if (groups.collection) {
          try {
            (0, nsid_1.ensureValidNsidRegex)(groups.collection);
          } catch {
            throw new Error("ATURI collection path segment must be a valid NSID");
          }
        }
        if (uri.length > 8 * 1024) {
          throw new Error("ATURI is far too long");
        }
      };
      exports.ensureValidAtUriRegex = ensureValidAtUriRegex;
    }
  });

  // node_modules/.pnpm/@atproto+syntax@0.4.0/node_modules/@atproto/syntax/dist/aturi.js
  var require_aturi = __commonJS({
    "node_modules/.pnpm/@atproto+syntax@0.4.0/node_modules/@atproto/syntax/dist/aturi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AtUri = exports.ATP_URI_REGEX = void 0;
      __exportStar(require_aturi_validation(), exports);
      exports.ATP_URI_REGEX = // proto-    --did--------------   --name----------------   --path----   --query--   --hash--
      /^(at:\/\/)?((?:did:[a-z0-9:%-]+)|(?:[a-z0-9][a-z0-9.:-]*))(\/[^?#\s]*)?(\?[^#\s]+)?(#[^\s]+)?$/i;
      var RELATIVE_REGEX = /^(\/[^?#\s]*)?(\?[^#\s]+)?(#[^\s]+)?$/i;
      var AtUri = class _AtUri {
        constructor(uri, base3) {
          Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "host", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "pathname", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "searchParams", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          let parsed;
          if (base3) {
            parsed = parse2(base3);
            if (!parsed) {
              throw new Error(`Invalid at uri: ${base3}`);
            }
            const relativep = parseRelative(uri);
            if (!relativep) {
              throw new Error(`Invalid path: ${uri}`);
            }
            Object.assign(parsed, relativep);
          } else {
            parsed = parse2(uri);
            if (!parsed) {
              throw new Error(`Invalid at uri: ${uri}`);
            }
          }
          this.hash = parsed.hash;
          this.host = parsed.host;
          this.pathname = parsed.pathname;
          this.searchParams = parsed.searchParams;
        }
        static make(handleOrDid, collection, rkey) {
          let str = handleOrDid;
          if (collection)
            str += "/" + collection;
          if (rkey)
            str += "/" + rkey;
          return new _AtUri(str);
        }
        get protocol() {
          return "at:";
        }
        get origin() {
          return `at://${this.host}`;
        }
        get hostname() {
          return this.host;
        }
        set hostname(v) {
          this.host = v;
        }
        get search() {
          return this.searchParams.toString();
        }
        set search(v) {
          this.searchParams = new URLSearchParams(v);
        }
        get collection() {
          return this.pathname.split("/").filter(Boolean)[0] || "";
        }
        set collection(v) {
          const parts = this.pathname.split("/").filter(Boolean);
          parts[0] = v;
          this.pathname = parts.join("/");
        }
        get rkey() {
          return this.pathname.split("/").filter(Boolean)[1] || "";
        }
        set rkey(v) {
          const parts = this.pathname.split("/").filter(Boolean);
          if (!parts[0])
            parts[0] = "undefined";
          parts[1] = v;
          this.pathname = parts.join("/");
        }
        get href() {
          return this.toString();
        }
        toString() {
          let path = this.pathname || "/";
          if (!path.startsWith("/")) {
            path = `/${path}`;
          }
          let qs = this.searchParams.toString();
          if (qs && !qs.startsWith("?")) {
            qs = `?${qs}`;
          }
          let hash = this.hash;
          if (hash && !hash.startsWith("#")) {
            hash = `#${hash}`;
          }
          return `at://${this.host}${path}${qs}${hash}`;
        }
      };
      exports.AtUri = AtUri;
      function parse2(str) {
        const match = exports.ATP_URI_REGEX.exec(str);
        if (match) {
          return {
            hash: match[5] || "",
            host: match[2] || "",
            pathname: match[3] || "",
            searchParams: new URLSearchParams(match[4] || "")
          };
        }
        return void 0;
      }
      function parseRelative(str) {
        const match = RELATIVE_REGEX.exec(str);
        if (match) {
          return {
            hash: match[3] || "",
            pathname: match[1] || "",
            searchParams: new URLSearchParams(match[2] || "")
          };
        }
        return void 0;
      }
    }
  });

  // node_modules/.pnpm/@atproto+syntax@0.4.0/node_modules/@atproto/syntax/dist/tid.js
  var require_tid = __commonJS({
    "node_modules/.pnpm/@atproto+syntax@0.4.0/node_modules/@atproto/syntax/dist/tid.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InvalidTidError = exports.isValidTid = exports.ensureValidTid = void 0;
      var TID_LENGTH = 13;
      var TID_REGEX = /^[234567abcdefghij][234567abcdefghijklmnopqrstuvwxyz]{12}$/;
      var ensureValidTid = (tid) => {
        if (tid.length !== TID_LENGTH) {
          throw new InvalidTidError(`TID must be ${TID_LENGTH} characters`);
        }
        if (!TID_REGEX.test(tid)) {
          throw new InvalidTidError("TID syntax not valid (regex)");
        }
      };
      exports.ensureValidTid = ensureValidTid;
      var isValidTid = (tid) => {
        return tid.length === TID_LENGTH && TID_REGEX.test(tid);
      };
      exports.isValidTid = isValidTid;
      var InvalidTidError = class extends Error {
      };
      exports.InvalidTidError = InvalidTidError;
    }
  });

  // node_modules/.pnpm/@atproto+syntax@0.4.0/node_modules/@atproto/syntax/dist/recordkey.js
  var require_recordkey = __commonJS({
    "node_modules/.pnpm/@atproto+syntax@0.4.0/node_modules/@atproto/syntax/dist/recordkey.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InvalidRecordKeyError = exports.isValidRecordKey = exports.ensureValidRecordKey = void 0;
      var ensureValidRecordKey = (rkey) => {
        if (rkey.length > 512 || rkey.length < 1) {
          throw new InvalidRecordKeyError("record key must be 1 to 512 characters");
        }
        if (!/^[a-zA-Z0-9_~.:-]{1,512}$/.test(rkey)) {
          throw new InvalidRecordKeyError("record key syntax not valid (regex)");
        }
        if (rkey === "." || rkey === "..")
          throw new InvalidRecordKeyError('record key can not be "." or ".."');
      };
      exports.ensureValidRecordKey = ensureValidRecordKey;
      var isValidRecordKey = (rkey) => {
        try {
          (0, exports.ensureValidRecordKey)(rkey);
        } catch (err) {
          if (err instanceof InvalidRecordKeyError) {
            return false;
          }
          throw err;
        }
        return true;
      };
      exports.isValidRecordKey = isValidRecordKey;
      var InvalidRecordKeyError = class extends Error {
      };
      exports.InvalidRecordKeyError = InvalidRecordKeyError;
    }
  });

  // node_modules/.pnpm/@atproto+syntax@0.4.0/node_modules/@atproto/syntax/dist/datetime.js
  var require_datetime = __commonJS({
    "node_modules/.pnpm/@atproto+syntax@0.4.0/node_modules/@atproto/syntax/dist/datetime.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InvalidDatetimeError = exports.normalizeDatetimeAlways = exports.normalizeDatetime = exports.isValidDatetime = exports.ensureValidDatetime = void 0;
      var ensureValidDatetime = (dtStr) => {
        const date = new Date(dtStr);
        if (isNaN(date.getTime())) {
          throw new InvalidDatetimeError("datetime did not parse as ISO 8601");
        }
        if (date.toISOString().startsWith("-")) {
          throw new InvalidDatetimeError("datetime normalized to a negative time");
        }
        if (!/^[0-9]{4}-[01][0-9]-[0-3][0-9]T[0-2][0-9]:[0-6][0-9]:[0-6][0-9](.[0-9]{1,20})?(Z|([+-][0-2][0-9]:[0-5][0-9]))$/.test(dtStr)) {
          throw new InvalidDatetimeError("datetime didn't validate via regex");
        }
        if (dtStr.length > 64) {
          throw new InvalidDatetimeError("datetime is too long (64 chars max)");
        }
        if (dtStr.endsWith("-00:00")) {
          throw new InvalidDatetimeError('datetime can not use "-00:00" for UTC timezone');
        }
        if (dtStr.startsWith("000")) {
          throw new InvalidDatetimeError("datetime so close to year zero not allowed");
        }
      };
      exports.ensureValidDatetime = ensureValidDatetime;
      var isValidDatetime = (dtStr) => {
        try {
          (0, exports.ensureValidDatetime)(dtStr);
        } catch (err) {
          if (err instanceof InvalidDatetimeError) {
            return false;
          }
          throw err;
        }
        return true;
      };
      exports.isValidDatetime = isValidDatetime;
      var normalizeDatetime = (dtStr) => {
        if ((0, exports.isValidDatetime)(dtStr)) {
          const outStr = new Date(dtStr).toISOString();
          if ((0, exports.isValidDatetime)(outStr)) {
            return outStr;
          }
        }
        if (!/.*(([+-]\d\d:?\d\d)|[a-zA-Z])$/.test(dtStr)) {
          const date2 = /* @__PURE__ */ new Date(dtStr + "Z");
          if (!isNaN(date2.getTime())) {
            const tzStr = date2.toISOString();
            if ((0, exports.isValidDatetime)(tzStr)) {
              return tzStr;
            }
          }
        }
        const date = new Date(dtStr);
        if (isNaN(date.getTime())) {
          throw new InvalidDatetimeError("datetime did not parse as any timestamp format");
        }
        const isoStr = date.toISOString();
        if ((0, exports.isValidDatetime)(isoStr)) {
          return isoStr;
        } else {
          throw new InvalidDatetimeError("datetime normalized to invalid timestamp string");
        }
      };
      exports.normalizeDatetime = normalizeDatetime;
      var normalizeDatetimeAlways = (dtStr) => {
        try {
          return (0, exports.normalizeDatetime)(dtStr);
        } catch (err) {
          if (err instanceof InvalidDatetimeError) {
            return (/* @__PURE__ */ new Date(0)).toISOString();
          }
          throw err;
        }
      };
      exports.normalizeDatetimeAlways = normalizeDatetimeAlways;
      var InvalidDatetimeError = class extends Error {
      };
      exports.InvalidDatetimeError = InvalidDatetimeError;
    }
  });

  // node_modules/.pnpm/@atproto+syntax@0.4.0/node_modules/@atproto/syntax/dist/index.js
  var require_dist12 = __commonJS({
    "node_modules/.pnpm/@atproto+syntax@0.4.0/node_modules/@atproto/syntax/dist/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_handle(), exports);
      __exportStar(require_did2(), exports);
      __exportStar(require_nsid(), exports);
      __exportStar(require_aturi(), exports);
      __exportStar(require_tid(), exports);
      __exportStar(require_recordkey(), exports);
      __exportStar(require_datetime(), exports);
    }
  });

  // node_modules/.pnpm/@atproto-labs+identity-resolver@0.1.17/node_modules/@atproto-labs/identity-resolver/dist/identity-resolver.js
  var require_identity_resolver = __commonJS({
    "node_modules/.pnpm/@atproto-labs+identity-resolver@0.1.17/node_modules/@atproto-labs/identity-resolver/dist/identity-resolver.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.IdentityResolver = void 0;
      var syntax_1 = require_dist12();
      var handle_resolver_1 = require_dist10();
      var IdentityResolver = class {
        constructor(didResolver, handleResolver) {
          Object.defineProperty(this, "didResolver", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: didResolver
          });
          Object.defineProperty(this, "handleResolver", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: handleResolver
          });
        }
        async resolve(input, options) {
          const document2 = (0, handle_resolver_1.isResolvedHandle)(input) ? await this.getDocumentFromDid(input, options) : await this.getDocumentFromHandle(input, options);
          const service = document2.service?.find(isAtprotoPersonalDataServerService, document2);
          if (!service) {
            throw new TypeError(`No valid "AtprotoPersonalDataServer" service found in "${document2.id}" DID document`);
          }
          return {
            did: document2.id,
            pds: new URL(service.serviceEndpoint)
          };
        }
        async getDocumentFromDid(did, options) {
          return this.didResolver.resolve(did, options);
        }
        async getDocumentFromHandle(input, options) {
          const handle = (0, syntax_1.normalizeAndEnsureValidHandle)(input);
          const did = await this.handleResolver.resolve(handle, options);
          if (!did) {
            throw new TypeError(`Handle "${handle}" does not resolve to a DID`);
          }
          options?.signal?.throwIfAborted();
          const document2 = await this.didResolver.resolve(did, options);
          if (!document2.alsoKnownAs?.includes(`at://${handle}`)) {
            throw new TypeError(`Did document for "${did}" does not include the handle "${handle}"`);
          }
          return document2;
        }
      };
      exports.IdentityResolver = IdentityResolver;
      function isAtprotoPersonalDataServerService(s) {
        return typeof s.serviceEndpoint === "string" && s.type === "AtprotoPersonalDataServer" && (s.id.startsWith("#") ? s.id === "#atproto_pds" : s.id === `${this.id}#atproto_pds`);
      }
    }
  });

  // node_modules/.pnpm/@atproto-labs+identity-resolver@0.1.17/node_modules/@atproto-labs/identity-resolver/dist/index.js
  var require_dist13 = __commonJS({
    "node_modules/.pnpm/@atproto-labs+identity-resolver@0.1.17/node_modules/@atproto-labs/identity-resolver/dist/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_identity_resolver(), exports);
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/constants.js
  var require_constants2 = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/constants.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FALLBACK_ALG = void 0;
      exports.FALLBACK_ALG = "ES256";
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/errors/token-revoked-error.js
  var require_token_revoked_error = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/errors/token-revoked-error.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TokenRevokedError = void 0;
      var TokenRevokedError = class extends Error {
        constructor(sub, message2 = `The session for "${sub}" was successfully revoked`, options) {
          super(message2, options);
          Object.defineProperty(this, "sub", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: sub
          });
        }
      };
      exports.TokenRevokedError = TokenRevokedError;
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/oauth-protected-resource-metadata-resolver.js
  var require_oauth_protected_resource_metadata_resolver = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/oauth-protected-resource-metadata-resolver.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.OAuthProtectedResourceMetadataResolver = void 0;
      var oauth_types_1 = require_dist11();
      var fetch_1 = require_dist8();
      var simple_store_1 = require_dist6();
      var util_js_1 = require_util9();
      var OAuthProtectedResourceMetadataResolver = class extends simple_store_1.CachedGetter {
        constructor(cache, fetch2 = globalThis.fetch, config) {
          super(async (origin, options) => this.fetchMetadata(origin, options), cache);
          Object.defineProperty(this, "fetch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "allowHttpResource", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.fetch = (0, fetch_1.bindFetch)(fetch2);
          this.allowHttpResource = config?.allowHttpResource === true;
        }
        async get(resource, options) {
          const { protocol, origin } = new URL(resource);
          if (protocol !== "https:" && protocol !== "http:") {
            throw new TypeError(`Invalid protected resource metadata URL protocol: ${protocol}`);
          }
          if (protocol === "http:" && !this.allowHttpResource) {
            throw new TypeError(`Unsecure resource metadata URL (${protocol}) only allowed in development and test environments`);
          }
          return super.get(origin, options);
        }
        async fetchMetadata(origin, options) {
          const url = new URL(`/.well-known/oauth-protected-resource`, origin);
          const request = new Request(url, {
            signal: options?.signal,
            headers: { accept: "application/json" },
            cache: options?.noCache ? "no-cache" : void 0,
            redirect: "manual"
            // response must be 200 OK
          });
          const response = await this.fetch(request);
          if (response.status !== 200) {
            await (0, fetch_1.cancelBody)(response, "log");
            throw await fetch_1.FetchResponseError.from(response, `Unexpected status code ${response.status} for "${url}"`, void 0, { cause: request });
          }
          if ((0, util_js_1.contentMime)(response.headers) !== "application/json") {
            await (0, fetch_1.cancelBody)(response, "log");
            throw await fetch_1.FetchResponseError.from(response, `Unexpected content type for "${url}"`, void 0, { cause: request });
          }
          const metadata = oauth_types_1.oauthProtectedResourceMetadataSchema.parse(await response.json());
          if (metadata.resource !== origin) {
            throw new TypeError(`Invalid issuer ${metadata.resource}`);
          }
          return metadata;
        }
      };
      exports.OAuthProtectedResourceMetadataResolver = OAuthProtectedResourceMetadataResolver;
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/oauth-resolver-error.js
  var require_oauth_resolver_error = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/oauth-resolver-error.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.OAuthResolverError = void 0;
      var zod_1 = require_cjs();
      var OAuthResolverError = class _OAuthResolverError extends Error {
        constructor(message2, options) {
          super(message2, options);
        }
        static from(cause, message2) {
          if (cause instanceof _OAuthResolverError)
            return cause;
          const validationReason = cause instanceof zod_1.ZodError ? `${cause.errors[0].path} ${cause.errors[0].message}` : null;
          const fullMessage = (message2 ?? `Unable to resolve identity`) + (validationReason ? ` (${validationReason})` : "");
          return new _OAuthResolverError(fullMessage, {
            cause
          });
        }
      };
      exports.OAuthResolverError = OAuthResolverError;
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/oauth-resolver.js
  var require_oauth_resolver = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/oauth-resolver.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.OAuthResolver = void 0;
      var oauth_types_1 = require_dist11();
      var oauth_resolver_error_js_1 = require_oauth_resolver_error();
      var OAuthResolver = class {
        constructor(identityResolver, protectedResourceMetadataResolver, authorizationServerMetadataResolver) {
          Object.defineProperty(this, "identityResolver", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: identityResolver
          });
          Object.defineProperty(this, "protectedResourceMetadataResolver", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protectedResourceMetadataResolver
          });
          Object.defineProperty(this, "authorizationServerMetadataResolver", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: authorizationServerMetadataResolver
          });
        }
        /**
         * @param input - A handle, DID, PDS URL or Entryway URL
         */
        async resolve(input, options) {
          return /^https?:\/\//.test(input) ? this.resolveFromService(input, options) : this.resolveFromIdentity(input, options);
        }
        /**
         * @note this method can be used to verify if a particular uri supports OAuth
         * based sign-in (for compatibility with legacy implementation).
         */
        async resolveFromService(input, options) {
          try {
            const metadata = await this.getResourceServerMetadata(input, options);
            return { metadata };
          } catch (err) {
            if (!options?.signal?.aborted && err instanceof oauth_resolver_error_js_1.OAuthResolverError) {
              try {
                const result = oauth_types_1.oauthIssuerIdentifierSchema.safeParse(input);
                if (result.success) {
                  const metadata = await this.getAuthorizationServerMetadata(result.data, options);
                  return { metadata };
                }
              } catch {
              }
            }
            throw err;
          }
        }
        async resolveFromIdentity(input, options) {
          const identity3 = await this.resolveIdentity(input, options);
          options?.signal?.throwIfAborted();
          const metadata = await this.getResourceServerMetadata(identity3.pds, options);
          return { identity: identity3, metadata };
        }
        async resolveIdentity(input, options) {
          try {
            return await this.identityResolver.resolve(input, options);
          } catch (cause) {
            throw oauth_resolver_error_js_1.OAuthResolverError.from(cause, `Failed to resolve identity: ${input}`);
          }
        }
        async getAuthorizationServerMetadata(issuer, options) {
          try {
            return await this.authorizationServerMetadataResolver.get(issuer, options);
          } catch (cause) {
            throw oauth_resolver_error_js_1.OAuthResolverError.from(cause, `Failed to resolve OAuth server metadata for issuer: ${issuer}`);
          }
        }
        async getResourceServerMetadata(pdsUrl, options) {
          try {
            const rsMetadata = await this.protectedResourceMetadataResolver.get(pdsUrl, options);
            if (rsMetadata.authorization_servers?.length !== 1) {
              throw new oauth_resolver_error_js_1.OAuthResolverError(rsMetadata.authorization_servers?.length ? `Unable to determine authorization server for PDS: ${pdsUrl}` : `No authorization servers found for PDS: ${pdsUrl}`);
            }
            const issuer = rsMetadata.authorization_servers[0];
            options?.signal?.throwIfAborted();
            const asMetadata = await this.getAuthorizationServerMetadata(issuer, options);
            if (asMetadata.protected_resources) {
              if (!asMetadata.protected_resources.includes(rsMetadata.resource)) {
                throw new oauth_resolver_error_js_1.OAuthResolverError(`PDS "${pdsUrl}" not protected by issuer "${issuer}"`);
              }
            }
            return asMetadata;
          } catch (cause) {
            throw oauth_resolver_error_js_1.OAuthResolverError.from(cause, `Failed to resolve OAuth server metadata for resource: ${pdsUrl}`);
          }
        }
      };
      exports.OAuthResolver = OAuthResolver;
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/atproto-token-response.js
  var require_atproto_token_response = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/atproto-token-response.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.atprotoTokenResponseSchema = exports.atprotoScopeSchema = exports.isAtprotoScope = void 0;
      var zod_1 = require_cjs();
      var did_1 = require_dist4();
      var oauth_types_1 = require_dist11();
      var util_1 = require_util9();
      var isAtprotoScope = (input) => (0, util_1.includesSpaceSeparatedValue)(input, "atproto");
      exports.isAtprotoScope = isAtprotoScope;
      exports.atprotoScopeSchema = zod_1.z.string().refine(exports.isAtprotoScope, 'The "atproto" scope is required');
      exports.atprotoTokenResponseSchema = oauth_types_1.oauthTokenResponseSchema.extend({
        token_type: zod_1.z.literal("DPoP"),
        sub: did_1.atprotoDidSchema,
        scope: exports.atprotoScopeSchema,
        // OpenID is not compatible with atproto identities
        id_token: zod_1.z.never().optional()
      });
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/errors/token-refresh-error.js
  var require_token_refresh_error = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/errors/token-refresh-error.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TokenRefreshError = void 0;
      var TokenRefreshError = class extends Error {
        constructor(sub, message2, options) {
          super(message2, options);
          Object.defineProperty(this, "sub", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: sub
          });
        }
      };
      exports.TokenRefreshError = TokenRefreshError;
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/fetch-dpop.js
  var require_fetch_dpop = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/fetch-dpop.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.dpopFetchWrapper = dpopFetchWrapper;
      var base64_1 = (init_base64(), __toCommonJS(base64_exports));
      var fetch_1 = require_dist8();
      var subtle = globalThis.crypto?.subtle;
      var ReadableStream = globalThis.ReadableStream;
      function dpopFetchWrapper({ key, iss, supportedAlgs, nonces, sha256: sha2562 = typeof subtle !== "undefined" ? subtleSha256 : void 0, isAuthServer, fetch: fetch2 = globalThis.fetch }) {
        if (!sha2562) {
          throw new TypeError(`crypto.subtle is not available in this environment. Please provide a sha256 function.`);
        }
        const alg = negotiateAlg(key, supportedAlgs);
        return async function(input, init) {
          if (!key.algorithms.includes(alg)) {
            throw new TypeError(`Key does not support the algorithm ${alg}`);
          }
          const request = init == null && input instanceof Request ? input : new Request(input, init);
          const authorizationHeader = request.headers.get("Authorization");
          const ath = authorizationHeader?.startsWith("DPoP ") ? await sha2562(authorizationHeader.slice(5)) : void 0;
          const { method, url } = request;
          const { origin } = new URL(url);
          let initNonce;
          try {
            initNonce = await nonces.get(origin);
          } catch {
          }
          const initProof = await buildProof(key, alg, iss, method, url, initNonce, ath);
          request.headers.set("DPoP", initProof);
          const initResponse = await fetch2.call(this, request);
          const nextNonce = initResponse.headers.get("DPoP-Nonce");
          if (!nextNonce || nextNonce === initNonce) {
            return initResponse;
          }
          try {
            await nonces.set(origin, nextNonce);
          } catch {
          }
          const shouldRetry = await isUseDpopNonceError(initResponse, isAuthServer);
          if (!shouldRetry) {
            return initResponse;
          }
          if (input === request) {
            return initResponse;
          }
          if (ReadableStream && init?.body instanceof ReadableStream) {
            return initResponse;
          }
          await (0, fetch_1.cancelBody)(initResponse, "log");
          const nextProof = await buildProof(key, alg, iss, method, url, nextNonce, ath);
          const nextRequest = new Request(input, init);
          nextRequest.headers.set("DPoP", nextProof);
          return fetch2.call(this, nextRequest);
        };
      }
      async function buildProof(key, alg, iss, htm, htu, nonce, ath) {
        if (!key.bareJwk) {
          throw new Error("Only asymmetric keys can be used as DPoP proofs");
        }
        const now = Math.floor(Date.now() / 1e3);
        return key.createJwt(
          // https://datatracker.ietf.org/doc/html/rfc9449#section-4.2
          {
            alg,
            typ: "dpop+jwt",
            jwk: key.bareJwk
          },
          {
            iss,
            iat: now,
            // Any collision will cause the request to be rejected by the server. no biggie.
            jti: Math.random().toString(36).slice(2),
            htm,
            htu,
            nonce,
            ath
          }
        );
      }
      async function isUseDpopNonceError(response, isAuthServer) {
        if (isAuthServer === void 0 || isAuthServer === false) {
          if (response.status === 401) {
            const wwwAuth = response.headers.get("WWW-Authenticate");
            if (wwwAuth?.startsWith("DPoP")) {
              return wwwAuth.includes('error="use_dpop_nonce"');
            }
          }
        }
        if (isAuthServer === void 0 || isAuthServer === true) {
          if (response.status === 400) {
            try {
              const json = await (0, fetch_1.peekJson)(response, 10 * 1024);
              return typeof json === "object" && json?.["error"] === "use_dpop_nonce";
            } catch {
              return false;
            }
          }
        }
        return false;
      }
      function negotiateAlg(key, supportedAlgs) {
        if (supportedAlgs) {
          const alg = supportedAlgs.find((a) => key.algorithms.includes(a));
          if (alg)
            return alg;
        } else {
          const [alg] = key.algorithms;
          if (alg)
            return alg;
        }
        throw new Error("Key does not match any alg supported by the server");
      }
      async function subtleSha256(input) {
        if (subtle == null) {
          throw new Error(`crypto.subtle is not available in this environment. Please provide a sha256 function.`);
        }
        const bytes = new TextEncoder().encode(input);
        const digest3 = await subtle.digest("SHA-256", bytes);
        const digestBytes = new Uint8Array(digest3);
        return base64_1.base64url.baseEncode(digestBytes);
      }
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/oauth-response-error.js
  var require_oauth_response_error = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/oauth-response-error.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.OAuthResponseError = void 0;
      var util_js_1 = require_util9();
      var OAuthResponseError = class extends Error {
        constructor(response, payload) {
          const objPayload = typeof payload === "object" ? payload : void 0;
          const error = (0, util_js_1.ifString)(objPayload?.["error"]);
          const errorDescription = (0, util_js_1.ifString)(objPayload?.["error_description"]);
          const messageError = error ? `"${error}"` : "unknown";
          const messageDesc = errorDescription ? `: ${errorDescription}` : "";
          const message2 = `OAuth ${messageError} error${messageDesc}`;
          super(message2);
          Object.defineProperty(this, "response", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: response
          });
          Object.defineProperty(this, "payload", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: payload
          });
          Object.defineProperty(this, "error", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "errorDescription", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.error = error;
          this.errorDescription = errorDescription;
        }
        get status() {
          return this.response.status;
        }
        get headers() {
          return this.response.headers;
        }
      };
      exports.OAuthResponseError = OAuthResponseError;
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/oauth-server-agent.js
  var require_oauth_server_agent = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/oauth-server-agent.js"(exports) {
      "use strict";
      var __addDisposableResource = exports && exports.__addDisposableResource || function(env, value, async) {
        if (value !== null && value !== void 0) {
          if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
          var dispose, inner;
          if (async) {
            if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
            dispose = value[Symbol.asyncDispose];
          }
          if (dispose === void 0) {
            if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
            dispose = value[Symbol.dispose];
            if (async) inner = dispose;
          }
          if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
          if (inner) dispose = function() {
            try {
              inner.call(this);
            } catch (e) {
              return Promise.reject(e);
            }
          };
          env.stack.push({ value, dispose, async });
        } else if (async) {
          env.stack.push({ async: true });
        }
        return value;
      };
      var __disposeResources = exports && exports.__disposeResources || /* @__PURE__ */ function(SuppressedError2) {
        return function(env) {
          function fail(e) {
            env.error = env.hasError ? new SuppressedError2(e, env.error, "An error was suppressed during disposal.") : e;
            env.hasError = true;
          }
          var r, s = 0;
          function next() {
            while (r = env.stack.pop()) {
              try {
                if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);
                if (r.dispose) {
                  var result = r.dispose.call(r.value);
                  if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) {
                    fail(e);
                    return next();
                  });
                } else s |= 1;
              } catch (e) {
                fail(e);
              }
            }
            if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
            if (env.hasError) throw env.error;
          }
          return next();
        };
      }(typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message2) {
        var e = new Error(message2);
        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
      });
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.OAuthServerAgent = void 0;
      var oauth_types_1 = require_dist11();
      var fetch_1 = require_dist8();
      var atproto_token_response_js_1 = require_atproto_token_response();
      var constants_js_1 = require_constants2();
      var token_refresh_error_js_1 = require_token_refresh_error();
      var fetch_dpop_js_1 = require_fetch_dpop();
      var oauth_response_error_js_1 = require_oauth_response_error();
      var util_js_1 = require_util9();
      var OAuthServerAgent = class {
        constructor(dpopKey, serverMetadata, clientMetadata, dpopNonces, oauthResolver, runtime, keyset, fetch2) {
          Object.defineProperty(this, "dpopKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: dpopKey
          });
          Object.defineProperty(this, "serverMetadata", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: serverMetadata
          });
          Object.defineProperty(this, "clientMetadata", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: clientMetadata
          });
          Object.defineProperty(this, "dpopNonces", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: dpopNonces
          });
          Object.defineProperty(this, "oauthResolver", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: oauthResolver
          });
          Object.defineProperty(this, "runtime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: runtime
          });
          Object.defineProperty(this, "keyset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: keyset
          });
          Object.defineProperty(this, "dpopFetch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.dpopFetch = (0, fetch_dpop_js_1.dpopFetchWrapper)({
            fetch: (0, fetch_1.bindFetch)(fetch2),
            iss: clientMetadata.client_id,
            key: dpopKey,
            supportedAlgs: serverMetadata.dpop_signing_alg_values_supported,
            sha256: async (v) => runtime.sha256(v),
            nonces: dpopNonces,
            isAuthServer: true
          });
        }
        get issuer() {
          return this.serverMetadata.issuer;
        }
        async revoke(token) {
          try {
            await this.request("revocation", { token });
          } catch {
          }
        }
        async exchangeCode(code2, codeVerifier) {
          const now = Date.now();
          const tokenResponse = await this.request("token", {
            grant_type: "authorization_code",
            redirect_uri: this.clientMetadata.redirect_uris[0],
            code: code2,
            code_verifier: codeVerifier
          });
          try {
            const aud = await this.verifyIssuer(tokenResponse.sub);
            return {
              aud,
              sub: tokenResponse.sub,
              iss: this.issuer,
              scope: tokenResponse.scope,
              refresh_token: tokenResponse.refresh_token,
              access_token: tokenResponse.access_token,
              token_type: tokenResponse.token_type,
              expires_at: typeof tokenResponse.expires_in === "number" ? new Date(now + tokenResponse.expires_in * 1e3).toISOString() : void 0
            };
          } catch (err) {
            await this.revoke(tokenResponse.access_token);
            throw err;
          }
        }
        async refresh(tokenSet) {
          if (!tokenSet.refresh_token) {
            throw new token_refresh_error_js_1.TokenRefreshError(tokenSet.sub, "No refresh token available");
          }
          const aud = await this.verifyIssuer(tokenSet.sub);
          const now = Date.now();
          const tokenResponse = await this.request("token", {
            grant_type: "refresh_token",
            refresh_token: tokenSet.refresh_token
          });
          return {
            aud,
            sub: tokenSet.sub,
            iss: this.issuer,
            scope: tokenResponse.scope,
            refresh_token: tokenResponse.refresh_token,
            access_token: tokenResponse.access_token,
            token_type: tokenResponse.token_type,
            expires_at: typeof tokenResponse.expires_in === "number" ? new Date(now + tokenResponse.expires_in * 1e3).toISOString() : void 0
          };
        }
        /**
         * VERY IMPORTANT ! Always call this to process token responses.
         *
         * Whenever an OAuth token response is received, we **MUST** verify that the
         * "sub" is a DID, whose issuer authority is indeed the server we just
         * obtained credentials from. This check is a critical step to actually be
         * able to use the "sub" (DID) as being the actual user's identifier.
         *
         * @returns The user's PDS URL (the resource server for the user)
         */
        async verifyIssuer(sub) {
          const env_1 = { stack: [], error: void 0, hasError: false };
          try {
            const signal = __addDisposableResource(env_1, (0, util_js_1.timeoutSignal)(1e4), false);
            const resolved = await this.oauthResolver.resolveFromIdentity(sub, {
              noCache: true,
              allowStale: false,
              signal
            });
            if (this.issuer !== resolved.metadata.issuer) {
              throw new TypeError("Issuer mismatch");
            }
            return resolved.identity.pds.href;
          } catch (e_1) {
            env_1.error = e_1;
            env_1.hasError = true;
          } finally {
            __disposeResources(env_1);
          }
        }
        async request(endpoint, payload) {
          const url = this.serverMetadata[`${endpoint}_endpoint`];
          if (!url)
            throw new Error(`No ${endpoint} endpoint available`);
          const auth = await this.buildClientAuth(endpoint);
          const { response, json } = await this.dpopFetch(url, {
            method: "POST",
            headers: { ...auth.headers, "Content-Type": "application/json" },
            body: JSON.stringify({ ...payload, ...auth.payload })
          }).then((0, fetch_1.fetchJsonProcessor)());
          if (response.ok) {
            switch (endpoint) {
              case "token":
                return atproto_token_response_js_1.atprotoTokenResponseSchema.parse(json);
              case "pushed_authorization_request":
                return oauth_types_1.oauthParResponseSchema.parse(json);
              default:
                return json;
            }
          } else {
            throw new oauth_response_error_js_1.OAuthResponseError(response, json);
          }
        }
        async buildClientAuth(endpoint) {
          const methodSupported = this.serverMetadata[`token_endpoint_auth_methods_supported`];
          const method = this.clientMetadata[`token_endpoint_auth_method`];
          if (method === "private_key_jwt" || this.keyset && !method && (methodSupported?.includes("private_key_jwt") ?? false)) {
            if (!this.keyset)
              throw new Error("No keyset available");
            try {
              const alg = this.serverMetadata[`token_endpoint_auth_signing_alg_values_supported`] ?? constants_js_1.FALLBACK_ALG;
              const kid = this.clientMetadata.jwks?.keys.map(({ kid: kid2 }) => kid2).filter((v) => typeof v === "string");
              return {
                payload: {
                  client_id: this.clientMetadata.client_id,
                  client_assertion_type: oauth_types_1.CLIENT_ASSERTION_TYPE_JWT_BEARER,
                  client_assertion: await this.keyset.createJwt({ alg, kid }, {
                    iss: this.clientMetadata.client_id,
                    sub: this.clientMetadata.client_id,
                    aud: this.serverMetadata.issuer,
                    jti: await this.runtime.generateNonce(),
                    iat: Math.floor(Date.now() / 1e3)
                  })
                }
              };
            } catch (err) {
              if (method === "private_key_jwt")
                throw err;
            }
          }
          if (method === "none" || !method && (methodSupported?.includes("none") ?? true)) {
            return {
              payload: {
                client_id: this.clientMetadata.client_id
              }
            };
          }
          throw new Error(`Unsupported ${endpoint} authentication method`);
        }
      };
      exports.OAuthServerAgent = OAuthServerAgent;
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/oauth-server-factory.js
  var require_oauth_server_factory = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/oauth-server-factory.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.OAuthServerFactory = void 0;
      var oauth_server_agent_js_1 = require_oauth_server_agent();
      var OAuthServerFactory = class {
        constructor(clientMetadata, runtime, resolver, fetch2, keyset, dpopNonceCache) {
          Object.defineProperty(this, "clientMetadata", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: clientMetadata
          });
          Object.defineProperty(this, "runtime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: runtime
          });
          Object.defineProperty(this, "resolver", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: resolver
          });
          Object.defineProperty(this, "fetch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: fetch2
          });
          Object.defineProperty(this, "keyset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: keyset
          });
          Object.defineProperty(this, "dpopNonceCache", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: dpopNonceCache
          });
        }
        async fromIssuer(issuer, dpopKey, options) {
          const serverMetadata = await this.resolver.getAuthorizationServerMetadata(issuer, options);
          return this.fromMetadata(serverMetadata, dpopKey);
        }
        async fromMetadata(serverMetadata, dpopKey) {
          return new oauth_server_agent_js_1.OAuthServerAgent(dpopKey, serverMetadata, this.clientMetadata, this.dpopNonceCache, this.resolver, this.runtime, this.keyset, this.fetch);
        }
      };
      exports.OAuthServerFactory = OAuthServerFactory;
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/errors/token-invalid-error.js
  var require_token_invalid_error = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/errors/token-invalid-error.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TokenInvalidError = void 0;
      var TokenInvalidError = class extends Error {
        constructor(sub, message2 = `The session for "${sub}" is invalid`, options) {
          super(message2, options);
          Object.defineProperty(this, "sub", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: sub
          });
        }
      };
      exports.TokenInvalidError = TokenInvalidError;
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/oauth-session.js
  var require_oauth_session = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/oauth-session.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.OAuthSession = void 0;
      var fetch_1 = require_dist8();
      var token_invalid_error_js_1 = require_token_invalid_error();
      var token_revoked_error_js_1 = require_token_revoked_error();
      var fetch_dpop_js_1 = require_fetch_dpop();
      var ReadableStream = globalThis.ReadableStream;
      var OAuthSession = class {
        constructor(server, sub, sessionGetter, fetch2 = globalThis.fetch) {
          Object.defineProperty(this, "server", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: server
          });
          Object.defineProperty(this, "sub", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: sub
          });
          Object.defineProperty(this, "sessionGetter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: sessionGetter
          });
          Object.defineProperty(this, "dpopFetch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.dpopFetch = (0, fetch_dpop_js_1.dpopFetchWrapper)({
            fetch: (0, fetch_1.bindFetch)(fetch2),
            iss: server.clientMetadata.client_id,
            key: server.dpopKey,
            supportedAlgs: server.serverMetadata.dpop_signing_alg_values_supported,
            sha256: async (v) => server.runtime.sha256(v),
            nonces: server.dpopNonces,
            isAuthServer: false
          });
        }
        get did() {
          return this.sub;
        }
        get serverMetadata() {
          return this.server.serverMetadata;
        }
        /**
         * @param refresh When `true`, the credentials will be refreshed even if they
         * are not expired. When `false`, the credentials will not be refreshed even
         * if they are expired. When `undefined`, the credentials will be refreshed
         * if, and only if, they are (about to be) expired. Defaults to `undefined`.
         */
        async getTokenSet(refresh) {
          const { tokenSet } = await this.sessionGetter.get(this.sub, {
            noCache: refresh === true,
            allowStale: refresh === false
          });
          return tokenSet;
        }
        async getTokenInfo(refresh = "auto") {
          const tokenSet = await this.getTokenSet(refresh);
          const expiresAt = tokenSet.expires_at == null ? void 0 : new Date(tokenSet.expires_at);
          return {
            expiresAt,
            get expired() {
              return expiresAt == null ? void 0 : expiresAt.getTime() < Date.now() - 5e3;
            },
            scope: tokenSet.scope,
            iss: tokenSet.iss,
            aud: tokenSet.aud,
            sub: tokenSet.sub
          };
        }
        async signOut() {
          try {
            const tokenSet = await this.getTokenSet(false);
            await this.server.revoke(tokenSet.access_token);
          } finally {
            await this.sessionGetter.delStored(this.sub, new token_revoked_error_js_1.TokenRevokedError(this.sub));
          }
        }
        async fetchHandler(pathname, init) {
          const tokenSet = await this.getTokenSet("auto");
          const initialUrl = new URL(pathname, tokenSet.aud);
          const initialAuth = `${tokenSet.token_type} ${tokenSet.access_token}`;
          const headers = new Headers(init?.headers);
          headers.set("Authorization", initialAuth);
          const initialResponse = await this.dpopFetch(initialUrl, {
            ...init,
            headers
          });
          if (!isInvalidTokenResponse(initialResponse)) {
            return initialResponse;
          }
          let tokenSetFresh;
          try {
            tokenSetFresh = await this.getTokenSet(true);
          } catch (err) {
            return initialResponse;
          }
          if (ReadableStream && init?.body instanceof ReadableStream) {
            return initialResponse;
          }
          const finalAuth = `${tokenSetFresh.token_type} ${tokenSetFresh.access_token}`;
          const finalUrl = new URL(pathname, tokenSetFresh.aud);
          headers.set("Authorization", finalAuth);
          const finalResponse = await this.dpopFetch(finalUrl, { ...init, headers });
          if (isInvalidTokenResponse(finalResponse)) {
            await this.sessionGetter.delStored(this.sub, new token_invalid_error_js_1.TokenInvalidError(this.sub));
          }
          return finalResponse;
        }
      };
      exports.OAuthSession = OAuthSession;
      function isInvalidTokenResponse(response) {
        if (response.status !== 401)
          return false;
        const wwwAuth = response.headers.get("WWW-Authenticate");
        return wwwAuth != null && (wwwAuth.startsWith("Bearer ") || wwwAuth.startsWith("DPoP ")) && wwwAuth.includes('error="invalid_token"');
      }
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/lock.js
  var require_lock = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/lock.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.requestLocalLock = void 0;
      var locks = /* @__PURE__ */ new Map();
      function acquireLocalLock(name2) {
        return new Promise((resolveAcquire) => {
          const prev = locks.get(name2) ?? Promise.resolve();
          const next = prev.then(() => {
            return new Promise((resolveRelease) => {
              const release = () => {
                if (locks.get(name2) === next)
                  locks.delete(name2);
                resolveRelease();
              };
              resolveAcquire(release);
            });
          });
          locks.set(name2, next);
        });
      }
      var requestLocalLock = (name2, fn) => {
        return acquireLocalLock(name2).then(async (release) => {
          try {
            return await fn();
          } finally {
            release();
          }
        });
      };
      exports.requestLocalLock = requestLocalLock;
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/runtime.js
  var require_runtime = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/runtime.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Runtime = void 0;
      var base64_1 = (init_base64(), __toCommonJS(base64_exports));
      var lock_js_1 = require_lock();
      var Runtime = class {
        constructor(implementation) {
          Object.defineProperty(this, "implementation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: implementation
          });
          Object.defineProperty(this, "hasImplementationLock", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "usingLock", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          const { requestLock } = implementation;
          this.hasImplementationLock = requestLock != null;
          this.usingLock = requestLock?.bind(implementation) || // Falling back to a local lock
          lock_js_1.requestLocalLock;
        }
        async generateKey(algs) {
          const algsSorted = Array.from(algs).sort(compareAlgos);
          return this.implementation.createKey(algsSorted);
        }
        async sha256(text) {
          const bytes = new TextEncoder().encode(text);
          const digest3 = await this.implementation.digest(bytes, { name: "sha256" });
          return base64_1.base64url.baseEncode(digest3);
        }
        async generateNonce(length2 = 16) {
          const bytes = await this.implementation.getRandomValues(length2);
          return base64_1.base64url.baseEncode(bytes);
        }
        async generatePKCE(byteLength) {
          const verifier = await this.generateVerifier(byteLength);
          return {
            verifier,
            challenge: await this.sha256(verifier),
            method: "S256"
          };
        }
        async calculateJwkThumbprint(jwk) {
          const components = extractJktComponents(jwk);
          const data = JSON.stringify(components);
          return this.sha256(data);
        }
        /**
         * @see {@link https://datatracker.ietf.org/doc/html/rfc7636#section-4.1}
         * @note It is RECOMMENDED that the output of a suitable random number generator
         * be used to create a 32-octet sequence. The octet sequence is then
         * base64url-encoded to produce a 43-octet URL safe string to use as the code
         * verifier.
         */
        async generateVerifier(byteLength = 32) {
          if (byteLength < 32 || byteLength > 96) {
            throw new TypeError("Invalid code_verifier length");
          }
          const bytes = await this.implementation.getRandomValues(byteLength);
          return base64_1.base64url.baseEncode(bytes);
        }
      };
      exports.Runtime = Runtime;
      function extractJktComponents(jwk) {
        const get = (field) => {
          const value = jwk[field];
          if (typeof value !== "string" || !value) {
            throw new TypeError(`"${field}" Parameter missing or invalid`);
          }
          return value;
        };
        switch (jwk.kty) {
          case "EC":
            return { crv: get("crv"), kty: get("kty"), x: get("x"), y: get("y") };
          case "OKP":
            return { crv: get("crv"), kty: get("kty"), x: get("x") };
          case "RSA":
            return { e: get("e"), kty: get("kty"), n: get("n") };
          case "oct":
            return { k: get("k"), kty: get("kty") };
          default:
            throw new TypeError('"kty" (Key Type) Parameter missing or unsupported');
        }
      }
      function compareAlgos(a, b) {
        if (a === "ES256K")
          return -1;
        if (b === "ES256K")
          return 1;
        for (const prefix of ["ES", "PS", "RS"]) {
          if (a.startsWith(prefix)) {
            if (b.startsWith(prefix)) {
              const aLen = parseInt(a.slice(2, 5));
              const bLen = parseInt(b.slice(2, 5));
              return aLen - bLen;
            }
            return -1;
          } else if (b.startsWith(prefix)) {
            return 1;
          }
        }
        return 0;
      }
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/session-getter.js
  var require_session_getter = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/session-getter.js"(exports) {
      "use strict";
      var __addDisposableResource = exports && exports.__addDisposableResource || function(env, value, async) {
        if (value !== null && value !== void 0) {
          if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
          var dispose, inner;
          if (async) {
            if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
            dispose = value[Symbol.asyncDispose];
          }
          if (dispose === void 0) {
            if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
            dispose = value[Symbol.dispose];
            if (async) inner = dispose;
          }
          if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
          if (inner) dispose = function() {
            try {
              inner.call(this);
            } catch (e) {
              return Promise.reject(e);
            }
          };
          env.stack.push({ value, dispose, async });
        } else if (async) {
          env.stack.push({ async: true });
        }
        return value;
      };
      var __disposeResources = exports && exports.__disposeResources || /* @__PURE__ */ function(SuppressedError2) {
        return function(env) {
          function fail(e) {
            env.error = env.hasError ? new SuppressedError2(e, env.error, "An error was suppressed during disposal.") : e;
            env.hasError = true;
          }
          var r, s = 0;
          function next() {
            while (r = env.stack.pop()) {
              try {
                if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);
                if (r.dispose) {
                  var result = r.dispose.call(r.value);
                  if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) {
                    fail(e);
                    return next();
                  });
                } else s |= 1;
              } catch (e) {
                fail(e);
              }
            }
            if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
            if (env.hasError) throw env.error;
          }
          return next();
        };
      }(typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message2) {
        var e = new Error(message2);
        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
      });
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SessionGetter = void 0;
      var simple_store_1 = require_dist6();
      var token_invalid_error_js_1 = require_token_invalid_error();
      var token_refresh_error_js_1 = require_token_refresh_error();
      var token_revoked_error_js_1 = require_token_revoked_error();
      var oauth_response_error_js_1 = require_oauth_response_error();
      var util_js_1 = require_util9();
      var SessionGetter = class extends simple_store_1.CachedGetter {
        constructor(sessionStore, serverFactory, runtime) {
          super(async (sub, options, storedSession) => {
            if (storedSession === void 0) {
              const msg = "The session was deleted by another process";
              const cause = new token_refresh_error_js_1.TokenRefreshError(sub, msg);
              this.dispatchEvent("deleted", { sub, cause });
              throw cause;
            }
            const { dpopKey, tokenSet } = storedSession;
            if (sub !== tokenSet.sub) {
              throw new token_refresh_error_js_1.TokenRefreshError(sub, "Stored session sub mismatch");
            }
            if (!tokenSet.refresh_token) {
              throw new token_refresh_error_js_1.TokenRefreshError(sub, "No refresh token available");
            }
            const server = await serverFactory.fromIssuer(tokenSet.iss, dpopKey);
            options?.signal?.throwIfAborted();
            try {
              const newTokenSet = await server.refresh(tokenSet);
              if (sub !== newTokenSet.sub) {
                throw new token_refresh_error_js_1.TokenRefreshError(sub, "Token set sub mismatch");
              }
              return { dpopKey, tokenSet: newTokenSet };
            } catch (cause) {
              if (cause instanceof oauth_response_error_js_1.OAuthResponseError && cause.status === 400 && cause.error === "invalid_grant") {
                if (!runtime.hasImplementationLock) {
                  await new Promise((r) => setTimeout(r, 1e3));
                  const stored = await this.getStored(sub);
                  if (stored === void 0) {
                    const msg2 = "The session was deleted by another process";
                    throw new token_refresh_error_js_1.TokenRefreshError(sub, msg2, { cause });
                  } else if (stored.tokenSet.access_token !== tokenSet.access_token || stored.tokenSet.refresh_token !== tokenSet.refresh_token) {
                    return stored;
                  } else {
                  }
                }
                const msg = cause.errorDescription ?? "The session was revoked";
                throw new token_refresh_error_js_1.TokenRefreshError(sub, msg, { cause });
              }
              throw cause;
            }
          }, sessionStore, {
            isStale: (sub, { tokenSet }) => {
              return tokenSet.expires_at != null && new Date(tokenSet.expires_at).getTime() < Date.now() + // Add some lee way to ensure the token is not expired when it
              // reaches the server.
              1e4 + // Add some randomness to reduce the chances of multiple
              // instances trying to refresh the token at the same.
              3e4 * Math.random();
            },
            onStoreError: async (err, sub, { tokenSet, dpopKey }) => {
              const server = await serverFactory.fromIssuer(tokenSet.iss, dpopKey);
              await server.revoke(tokenSet.refresh_token ?? tokenSet.access_token);
              throw err;
            },
            deleteOnError: async (err) => (
              // Optimization: More likely to happen first
              err instanceof token_refresh_error_js_1.TokenRefreshError || err instanceof token_revoked_error_js_1.TokenRevokedError || err instanceof token_invalid_error_js_1.TokenInvalidError
            )
          });
          Object.defineProperty(this, "runtime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: runtime
          });
          Object.defineProperty(this, "eventTarget", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new util_js_1.CustomEventTarget()
          });
        }
        addEventListener(type, callback, options) {
          this.eventTarget.addEventListener(type, callback, options);
        }
        removeEventListener(type, callback, options) {
          this.eventTarget.removeEventListener(type, callback, options);
        }
        dispatchEvent(type, detail) {
          return this.eventTarget.dispatchCustomEvent(type, detail);
        }
        async setStored(sub, session) {
          if (sub !== session.tokenSet.sub) {
            throw new TypeError("Token set does not match the expected sub");
          }
          await super.setStored(sub, session);
          this.dispatchEvent("updated", { sub, ...session });
        }
        async delStored(sub, cause) {
          await super.delStored(sub, cause);
          this.dispatchEvent("deleted", { sub, cause });
        }
        /**
         * @param refresh When `true`, the credentials will be refreshed even if they
         * are not expired. When `false`, the credentials will not be refreshed even
         * if they are expired. When `undefined`, the credentials will be refreshed
         * if, and only if, they are (about to be) expired. Defaults to `undefined`.
         */
        async getSession(sub, refresh) {
          return this.get(sub, {
            noCache: refresh === true,
            allowStale: refresh === false
          });
        }
        async get(sub, options) {
          const session = await this.runtime.usingLock(`@atproto-oauth-client-${sub}`, async () => {
            const env_1 = { stack: [], error: void 0, hasError: false };
            try {
              const signal = __addDisposableResource(env_1, (0, util_js_1.timeoutSignal)(3e4, options), false);
              const abortController = __addDisposableResource(env_1, (0, util_js_1.combineSignals)([options?.signal, signal]), false);
              return await super.get(sub, {
                ...options,
                signal: abortController.signal
              });
            } catch (e_1) {
              env_1.error = e_1;
              env_1.hasError = true;
            } finally {
              __disposeResources(env_1);
            }
          });
          if (sub !== session.tokenSet.sub) {
            throw new Error("Token set does not match the expected sub");
          }
          return session;
        }
      };
      exports.SessionGetter = SessionGetter;
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/types.js
  var require_types3 = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.clientMetadataSchema = void 0;
      var zod_1 = require_cjs();
      var oauth_types_1 = require_dist11();
      exports.clientMetadataSchema = oauth_types_1.oauthClientMetadataSchema.extend({
        client_id: zod_1.z.union([
          oauth_types_1.oauthClientIdDiscoverableSchema,
          oauth_types_1.oauthClientIdLoopbackSchema
        ])
      });
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/validate-client-metadata.js
  var require_validate_client_metadata = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/validate-client-metadata.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateClientMetadata = validateClientMetadata;
      var oauth_types_1 = require_dist11();
      var types_js_1 = require_types3();
      var TOKEN_ENDPOINT_AUTH_METHOD = `token_endpoint_auth_method`;
      var TOKEN_ENDPOINT_AUTH_SIGNING_ALG = `token_endpoint_auth_signing_alg`;
      function validateClientMetadata(input, keyset) {
        if (input.jwks) {
          if (!keyset) {
            throw new TypeError(`Keyset must not be provided when jwks is provided`);
          }
          for (const key of input.jwks.keys) {
            if (!key.kid) {
              throw new TypeError(`Key must have a "kid" property`);
            } else if (!keyset.has(key.kid)) {
              throw new TypeError(`Key with kid "${key.kid}" not found in keyset`);
            }
          }
        }
        if (!input.jwks && !input.jwks_uri && keyset?.size) {
          input = { ...input, jwks: keyset.toJSON() };
        }
        const metadata = types_js_1.clientMetadataSchema.parse(input);
        if (metadata.client_id.startsWith("http:")) {
          (0, oauth_types_1.assertOAuthLoopbackClientId)(metadata.client_id);
        } else {
          (0, oauth_types_1.assertOAuthDiscoverableClientId)(metadata.client_id);
        }
        const scopes = metadata.scope?.split(" ");
        if (!scopes?.includes("atproto")) {
          throw new TypeError(`Client metadata must include the "atproto" scope`);
        }
        if (!metadata.response_types.includes("code")) {
          throw new TypeError(`"response_types" must include "code"`);
        }
        if (!metadata.grant_types.includes("authorization_code")) {
          throw new TypeError(`"grant_types" must include "authorization_code"`);
        }
        const method = metadata[TOKEN_ENDPOINT_AUTH_METHOD];
        switch (method) {
          case void 0:
            throw new TypeError(`${TOKEN_ENDPOINT_AUTH_METHOD} must be provided`);
          case "none":
            if (metadata[TOKEN_ENDPOINT_AUTH_SIGNING_ALG]) {
              throw new TypeError(`${TOKEN_ENDPOINT_AUTH_SIGNING_ALG} must not be provided when ${TOKEN_ENDPOINT_AUTH_METHOD} is "${method}"`);
            }
            break;
          case "private_key_jwt":
            if (!keyset?.size) {
              throw new TypeError(`A non-empty keyset must be provided when ${TOKEN_ENDPOINT_AUTH_METHOD} is "${method}"`);
            }
            if (!metadata[TOKEN_ENDPOINT_AUTH_SIGNING_ALG]) {
              throw new TypeError(`${TOKEN_ENDPOINT_AUTH_SIGNING_ALG} must be provided when ${TOKEN_ENDPOINT_AUTH_METHOD} is "${method}"`);
            }
            break;
          default:
            throw new TypeError(`Invalid "token_endpoint_auth_method" value: ${method}`);
        }
        return metadata;
      }
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/oauth-client.js
  var require_oauth_client = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/oauth-client.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.OAuthClient = void 0;
      var jwk_1 = require_dist();
      var oauth_types_1 = require_dist11();
      var did_resolver_1 = require_dist9();
      var handle_resolver_1 = require_dist10();
      var identity_resolver_1 = require_dist13();
      var simple_store_memory_1 = require_dist5();
      var constants_js_1 = require_constants2();
      var token_revoked_error_js_1 = require_token_revoked_error();
      var oauth_authorization_server_metadata_resolver_js_1 = require_oauth_authorization_server_metadata_resolver();
      var oauth_callback_error_js_1 = require_oauth_callback_error();
      var oauth_protected_resource_metadata_resolver_js_1 = require_oauth_protected_resource_metadata_resolver();
      var oauth_resolver_js_1 = require_oauth_resolver();
      var oauth_server_factory_js_1 = require_oauth_server_factory();
      var oauth_session_js_1 = require_oauth_session();
      var runtime_js_1 = require_runtime();
      var session_getter_js_1 = require_session_getter();
      var util_js_1 = require_util9();
      var validate_client_metadata_js_1 = require_validate_client_metadata();
      var OAuthClient2 = class extends util_js_1.CustomEventTarget {
        static async fetchMetadata({ clientId, fetch: fetch2 = globalThis.fetch, signal }) {
          signal?.throwIfAborted();
          const request = new Request(clientId, {
            redirect: "error",
            signal
          });
          const response = await fetch2(request);
          if (response.status !== 200) {
            response.body?.cancel?.();
            throw new TypeError(`Failed to fetch client metadata: ${response.status}`);
          }
          const mime = response.headers.get("content-type")?.split(";")[0].trim();
          if (mime !== "application/json") {
            response.body?.cancel?.();
            throw new TypeError(`Invalid client metadata content type: ${mime}`);
          }
          const json = await response.json();
          signal?.throwIfAborted();
          return oauth_types_1.oauthClientMetadataSchema.parse(json);
        }
        constructor({ fetch: fetch2 = globalThis.fetch, allowHttp = false, stateStore, sessionStore, didCache = void 0, dpopNonceCache = new simple_store_memory_1.SimpleStoreMemory({ ttl: 6e4, max: 100 }), handleCache = void 0, authorizationServerMetadataCache = new simple_store_memory_1.SimpleStoreMemory({
          ttl: 6e4,
          max: 100
        }), protectedResourceMetadataCache = new simple_store_memory_1.SimpleStoreMemory({
          ttl: 6e4,
          max: 100
        }), responseMode, clientMetadata, handleResolver, plcDirectoryUrl, runtimeImplementation, keyset }) {
          super();
          Object.defineProperty(this, "clientMetadata", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "responseMode", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "keyset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "runtime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "fetch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "oauthResolver", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "serverFactory", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "sessionGetter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "stateStore", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.keyset = keyset ? keyset instanceof jwk_1.Keyset ? keyset : new jwk_1.Keyset(keyset) : void 0;
          this.clientMetadata = (0, validate_client_metadata_js_1.validateClientMetadata)(clientMetadata, this.keyset);
          this.responseMode = responseMode;
          this.runtime = new runtime_js_1.Runtime(runtimeImplementation);
          this.fetch = fetch2;
          this.oauthResolver = new oauth_resolver_js_1.OAuthResolver(new identity_resolver_1.IdentityResolver(new did_resolver_1.DidResolverCached(new did_resolver_1.DidResolverCommon({ fetch: fetch2, plcDirectoryUrl, allowHttp }), didCache), new handle_resolver_1.CachedHandleResolver(handle_resolver_1.AppViewHandleResolver.from(handleResolver, { fetch: fetch2 }), handleCache)), new oauth_protected_resource_metadata_resolver_js_1.OAuthProtectedResourceMetadataResolver(protectedResourceMetadataCache, fetch2, { allowHttpResource: allowHttp }), new oauth_authorization_server_metadata_resolver_js_1.OAuthAuthorizationServerMetadataResolver(authorizationServerMetadataCache, fetch2, { allowHttpIssuer: allowHttp }));
          this.serverFactory = new oauth_server_factory_js_1.OAuthServerFactory(this.clientMetadata, this.runtime, this.oauthResolver, this.fetch, this.keyset, dpopNonceCache);
          this.sessionGetter = new session_getter_js_1.SessionGetter(sessionStore, this.serverFactory, this.runtime);
          this.stateStore = stateStore;
          for (const type of ["deleted", "updated"]) {
            this.sessionGetter.addEventListener(type, (event) => {
              if (!this.dispatchCustomEvent(type, event.detail)) {
                event.preventDefault();
              }
            });
          }
        }
        // Exposed as public API for convenience
        get identityResolver() {
          return this.oauthResolver.identityResolver;
        }
        // Exposed as public API for convenience
        get didResolver() {
          return this.identityResolver.didResolver;
        }
        // Exposed as public API for convenience
        get handleResolver() {
          return this.identityResolver.handleResolver;
        }
        get jwks() {
          return this.keyset?.publicJwks ?? { keys: [] };
        }
        async authorize(input, { signal, ...options } = {}) {
          const redirectUri = options?.redirect_uri ?? this.clientMetadata.redirect_uris[0];
          if (!this.clientMetadata.redirect_uris.includes(redirectUri)) {
            throw new TypeError("Invalid redirect_uri");
          }
          const { identity: identity3, metadata } = await this.oauthResolver.resolve(input, {
            signal
          });
          const pkce = await this.runtime.generatePKCE();
          const dpopKey = await this.runtime.generateKey(metadata.dpop_signing_alg_values_supported || [constants_js_1.FALLBACK_ALG]);
          const state = await this.runtime.generateNonce();
          await this.stateStore.set(state, {
            iss: metadata.issuer,
            dpopKey,
            verifier: pkce.verifier,
            appState: options?.state
          });
          const parameters = {
            ...options,
            client_id: this.clientMetadata.client_id,
            redirect_uri: redirectUri,
            code_challenge: pkce.challenge,
            code_challenge_method: pkce.method,
            state,
            login_hint: identity3 ? input : void 0,
            response_mode: this.responseMode,
            response_type: "code",
            scope: options?.scope ?? this.clientMetadata.scope
          };
          const authorizationUrl = new URL(metadata.authorization_endpoint);
          if (authorizationUrl.protocol !== "https:" && authorizationUrl.protocol !== "http:") {
            throw new TypeError(`Invalid authorization endpoint protocol: ${authorizationUrl.protocol}`);
          }
          if (metadata.pushed_authorization_request_endpoint) {
            const server = await this.serverFactory.fromMetadata(metadata, dpopKey);
            const parResponse = await server.request("pushed_authorization_request", parameters);
            authorizationUrl.searchParams.set("client_id", this.clientMetadata.client_id);
            authorizationUrl.searchParams.set("request_uri", parResponse.request_uri);
            return authorizationUrl;
          } else if (metadata.require_pushed_authorization_requests) {
            throw new Error("Server requires pushed authorization requests (PAR) but no PAR endpoint is available");
          } else {
            for (const [key, value] of Object.entries(parameters)) {
              if (value)
                authorizationUrl.searchParams.set(key, String(value));
            }
            const urlLength = authorizationUrl.pathname.length + authorizationUrl.search.length;
            if (urlLength < 2048) {
              return authorizationUrl;
            } else if (!metadata.pushed_authorization_request_endpoint) {
              throw new Error("Login URL too long");
            }
          }
          throw new Error("Server does not support pushed authorization requests (PAR)");
        }
        /**
         * This method allows the client to proactively revoke the request_uri it
         * created through PAR.
         */
        async abortRequest(authorizeUrl) {
          const requestUri = authorizeUrl.searchParams.get("request_uri");
          if (!requestUri)
            return;
        }
        async callback(params) {
          const responseJwt = params.get("response");
          if (responseJwt != null) {
            throw new oauth_callback_error_js_1.OAuthCallbackError(params, "JARM not supported");
          }
          const issuerParam = params.get("iss");
          const stateParam = params.get("state");
          const errorParam = params.get("error");
          const codeParam = params.get("code");
          if (!stateParam) {
            throw new oauth_callback_error_js_1.OAuthCallbackError(params, 'Missing "state" parameter');
          }
          const stateData = await this.stateStore.get(stateParam);
          if (stateData) {
            await this.stateStore.del(stateParam);
          } else {
            throw new oauth_callback_error_js_1.OAuthCallbackError(params, `Unknown authorization session "${stateParam}"`);
          }
          try {
            if (errorParam != null) {
              throw new oauth_callback_error_js_1.OAuthCallbackError(params, void 0, stateData.appState);
            }
            if (!codeParam) {
              throw new oauth_callback_error_js_1.OAuthCallbackError(params, 'Missing "code" query param', stateData.appState);
            }
            const server = await this.serverFactory.fromIssuer(stateData.iss, stateData.dpopKey);
            if (issuerParam != null) {
              if (!server.issuer) {
                throw new oauth_callback_error_js_1.OAuthCallbackError(params, "Issuer not found in metadata", stateData.appState);
              }
              if (server.issuer !== issuerParam) {
                throw new oauth_callback_error_js_1.OAuthCallbackError(params, "Issuer mismatch", stateData.appState);
              }
            } else if (server.serverMetadata.authorization_response_iss_parameter_supported) {
              throw new oauth_callback_error_js_1.OAuthCallbackError(params, "iss missing from the response", stateData.appState);
            }
            const tokenSet = await server.exchangeCode(codeParam, stateData.verifier);
            try {
              await this.sessionGetter.setStored(tokenSet.sub, {
                dpopKey: stateData.dpopKey,
                tokenSet
              });
              const session = this.createSession(server, tokenSet.sub);
              return { session, state: stateData.appState ?? null };
            } catch (err) {
              await server.revoke(tokenSet.refresh_token || tokenSet.access_token);
              throw err;
            }
          } catch (err) {
            throw oauth_callback_error_js_1.OAuthCallbackError.from(err, params, stateData.appState);
          }
        }
        /**
         * Load a stored session. This will refresh the token only if needed (about to
         * expire) by default.
         *
         * @param refresh See {@link SessionGetter.getSession}
         */
        async restore(sub, refresh = "auto") {
          (0, did_resolver_1.assertAtprotoDid)(sub);
          const { dpopKey, tokenSet } = await this.sessionGetter.get(sub, {
            noCache: refresh === true,
            allowStale: refresh === false
          });
          const server = await this.serverFactory.fromIssuer(tokenSet.iss, dpopKey, {
            noCache: refresh === true,
            allowStale: refresh === false
          });
          return this.createSession(server, sub);
        }
        async revoke(sub) {
          (0, did_resolver_1.assertAtprotoDid)(sub);
          const { dpopKey, tokenSet } = await this.sessionGetter.get(sub, {
            allowStale: true
          });
          try {
            const server = await this.serverFactory.fromIssuer(tokenSet.iss, dpopKey);
            await server.revoke(tokenSet.access_token);
          } finally {
            await this.sessionGetter.delStored(sub, new token_revoked_error_js_1.TokenRevokedError(sub));
          }
        }
        createSession(server, sub) {
          return new oauth_session_js_1.OAuthSession(server, sub, this.sessionGetter, this.fetch);
        }
      };
      exports.OAuthClient = OAuthClient2;
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/runtime-implementation.js
  var require_runtime_implementation = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/runtime-implementation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/state-store.js
  var require_state_store = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/state-store.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/index.js
  var require_dist14 = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client@0.3.17/node_modules/@atproto/oauth-client/dist/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FetchResponseError = exports.FetchRequestError = exports.FetchError = void 0;
      __exportStar(require_dist9(), exports);
      var fetch_1 = require_dist8();
      Object.defineProperty(exports, "FetchError", { enumerable: true, get: function() {
        return fetch_1.FetchError;
      } });
      Object.defineProperty(exports, "FetchRequestError", { enumerable: true, get: function() {
        return fetch_1.FetchRequestError;
      } });
      Object.defineProperty(exports, "FetchResponseError", { enumerable: true, get: function() {
        return fetch_1.FetchResponseError;
      } });
      __exportStar(require_dist10(), exports);
      __exportStar(require_dist4(), exports);
      __exportStar(require_dist11(), exports);
      __exportStar(require_oauth_authorization_server_metadata_resolver(), exports);
      __exportStar(require_oauth_callback_error(), exports);
      __exportStar(require_oauth_client(), exports);
      __exportStar(require_oauth_protected_resource_metadata_resolver(), exports);
      __exportStar(require_oauth_resolver_error(), exports);
      __exportStar(require_oauth_response_error(), exports);
      __exportStar(require_oauth_server_agent(), exports);
      __exportStar(require_oauth_server_factory(), exports);
      __exportStar(require_oauth_session(), exports);
      __exportStar(require_runtime_implementation(), exports);
      __exportStar(require_session_getter(), exports);
      __exportStar(require_state_store(), exports);
      __exportStar(require_types3(), exports);
      __exportStar(require_token_invalid_error(), exports);
      __exportStar(require_token_refresh_error(), exports);
      __exportStar(require_token_revoked_error(), exports);
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client-browser@0.3.17/node_modules/@atproto/oauth-client-browser/dist/indexed-db/util.js
  var require_util10 = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client-browser@0.3.17/node_modules/@atproto/oauth-client-browser/dist/indexed-db/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.handleRequest = handleRequest;
      exports.promisify = promisify;
      function handleRequest(request, onSuccess, onError) {
        const cleanup = () => {
          request.removeEventListener("success", success);
          request.removeEventListener("error", error);
        };
        const success = () => {
          onSuccess(request.result);
          cleanup();
        };
        const error = () => {
          onError(request.error || new Error("Unknown error"));
          cleanup();
        };
        request.addEventListener("success", success);
        request.addEventListener("error", error);
      }
      function promisify(request) {
        return new Promise((resolve, reject) => {
          handleRequest(request, resolve, reject);
        });
      }
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client-browser@0.3.17/node_modules/@atproto/oauth-client-browser/dist/indexed-db/db-index.js
  var require_db_index = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client-browser@0.3.17/node_modules/@atproto/oauth-client-browser/dist/indexed-db/db-index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DBIndex = void 0;
      var util_js_1 = require_util10();
      var DBIndex = class {
        constructor(idbIndex) {
          Object.defineProperty(this, "idbIndex", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: idbIndex
          });
        }
        count(query) {
          return (0, util_js_1.promisify)(this.idbIndex.count(query));
        }
        get(query) {
          return (0, util_js_1.promisify)(this.idbIndex.get(query));
        }
        getKey(query) {
          return (0, util_js_1.promisify)(this.idbIndex.getKey(query));
        }
        getAll(query, count) {
          return (0, util_js_1.promisify)(this.idbIndex.getAll(query, count));
        }
        getAllKeys(query, count) {
          return (0, util_js_1.promisify)(this.idbIndex.getAllKeys(query, count));
        }
        deleteAll(query) {
          return new Promise((resolve, reject) => {
            const result = this.idbIndex.openCursor(query);
            result.onsuccess = function(event) {
              const cursor = event.target.result;
              if (cursor) {
                cursor.delete();
                cursor.continue();
              } else {
                resolve();
              }
            };
            result.onerror = function(event) {
              reject(event.target?.error || new Error("Unexpected error"));
            };
          });
        }
      };
      exports.DBIndex = DBIndex;
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client-browser@0.3.17/node_modules/@atproto/oauth-client-browser/dist/indexed-db/db-object-store.js
  var require_db_object_store = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client-browser@0.3.17/node_modules/@atproto/oauth-client-browser/dist/indexed-db/db-object-store.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DBObjectStore = void 0;
      var db_index_js_1 = require_db_index();
      var util_js_1 = require_util10();
      var DBObjectStore = class {
        constructor(idbObjStore) {
          Object.defineProperty(this, "idbObjStore", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: idbObjStore
          });
        }
        get name() {
          return this.idbObjStore.name;
        }
        index(name2) {
          return new db_index_js_1.DBIndex(this.idbObjStore.index(name2));
        }
        get(key) {
          return (0, util_js_1.promisify)(this.idbObjStore.get(key));
        }
        getKey(query) {
          return (0, util_js_1.promisify)(this.idbObjStore.getKey(query));
        }
        getAll(query, count) {
          return (0, util_js_1.promisify)(this.idbObjStore.getAll(query, count));
        }
        getAllKeys(query, count) {
          return (0, util_js_1.promisify)(this.idbObjStore.getAllKeys(query, count));
        }
        add(value, key) {
          return (0, util_js_1.promisify)(this.idbObjStore.add(value, key));
        }
        put(value, key) {
          return (0, util_js_1.promisify)(this.idbObjStore.put(value, key));
        }
        delete(key) {
          return (0, util_js_1.promisify)(this.idbObjStore.delete(key));
        }
        clear() {
          return (0, util_js_1.promisify)(this.idbObjStore.clear());
        }
      };
      exports.DBObjectStore = DBObjectStore;
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client-browser@0.3.17/node_modules/@atproto/oauth-client-browser/dist/indexed-db/db-transaction.js
  var require_db_transaction = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client-browser@0.3.17/node_modules/@atproto/oauth-client-browser/dist/indexed-db/db-transaction.js"(exports) {
      "use strict";
      var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      var _DBTransaction_tx;
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DBTransaction = void 0;
      var db_object_store_js_1 = require_db_object_store();
      var DBTransaction = class {
        constructor(tx) {
          _DBTransaction_tx.set(this, void 0);
          __classPrivateFieldSet(this, _DBTransaction_tx, tx, "f");
          const onAbort = () => {
            cleanup();
          };
          const onComplete = () => {
            cleanup();
          };
          const cleanup = () => {
            __classPrivateFieldSet(this, _DBTransaction_tx, null, "f");
            tx.removeEventListener("abort", onAbort);
            tx.removeEventListener("complete", onComplete);
          };
          tx.addEventListener("abort", onAbort);
          tx.addEventListener("complete", onComplete);
        }
        get tx() {
          if (!__classPrivateFieldGet(this, _DBTransaction_tx, "f"))
            throw new Error("Transaction already ended");
          return __classPrivateFieldGet(this, _DBTransaction_tx, "f");
        }
        async abort() {
          const { tx } = this;
          __classPrivateFieldSet(this, _DBTransaction_tx, null, "f");
          tx.abort();
        }
        async commit() {
          const { tx } = this;
          __classPrivateFieldSet(this, _DBTransaction_tx, null, "f");
          tx.commit?.();
        }
        objectStore(name2) {
          const store = this.tx.objectStore(name2);
          return new db_object_store_js_1.DBObjectStore(store);
        }
        [(_DBTransaction_tx = /* @__PURE__ */ new WeakMap(), Symbol.dispose)]() {
          if (__classPrivateFieldGet(this, _DBTransaction_tx, "f"))
            this.commit();
        }
      };
      exports.DBTransaction = DBTransaction;
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client-browser@0.3.17/node_modules/@atproto/oauth-client-browser/dist/indexed-db/db.js
  var require_db = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client-browser@0.3.17/node_modules/@atproto/oauth-client-browser/dist/indexed-db/db.js"(exports) {
      "use strict";
      var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      var _DB_db;
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DB = void 0;
      var db_transaction_js_1 = require_db_transaction();
      var DB = class _DB {
        static async open(dbName, migrations, txOptions) {
          const db = await new Promise((resolve, reject) => {
            const request = indexedDB.open(dbName, migrations.length);
            request.onerror = () => reject(request.error);
            request.onsuccess = () => resolve(request.result);
            request.onupgradeneeded = ({ oldVersion, newVersion }) => {
              const db2 = request.result;
              try {
                for (let version2 = oldVersion; version2 < (newVersion ?? migrations.length); ++version2) {
                  const migration = migrations[version2];
                  if (migration)
                    migration(db2);
                  else
                    throw new Error(`Missing migration for version ${version2}`);
                }
              } catch (err) {
                db2.close();
                reject(err);
              }
            };
          });
          return new _DB(db, txOptions);
        }
        constructor(db, txOptions) {
          Object.defineProperty(this, "txOptions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: txOptions
          });
          _DB_db.set(this, void 0);
          __classPrivateFieldSet(this, _DB_db, db, "f");
          const cleanup = () => {
            __classPrivateFieldSet(this, _DB_db, null, "f");
            db.removeEventListener("versionchange", cleanup);
            db.removeEventListener("close", cleanup);
            db.close();
          };
          db.addEventListener("versionchange", cleanup);
          db.addEventListener("close", cleanup);
        }
        get db() {
          if (!__classPrivateFieldGet(this, _DB_db, "f"))
            throw new Error("Database closed");
          return __classPrivateFieldGet(this, _DB_db, "f");
        }
        get name() {
          return this.db.name;
        }
        get objectStoreNames() {
          return this.db.objectStoreNames;
        }
        get version() {
          return this.db.version;
        }
        async transaction(storeNames, mode, run) {
          return new Promise(async (resolve, reject) => {
            try {
              const tx = this.db.transaction(storeNames, mode, this.txOptions);
              let result = { done: false };
              tx.oncomplete = () => {
                if (result.done)
                  resolve(result.value);
                else
                  reject(new Error("Transaction completed without result"));
              };
              tx.onerror = () => reject(tx.error);
              tx.onabort = () => reject(tx.error || new Error("Transaction aborted"));
              try {
                const value = await run(new db_transaction_js_1.DBTransaction(tx));
                result = { done: true, value };
                tx.commit();
              } catch (err) {
                tx.abort();
                throw err;
              }
            } catch (err) {
              reject(err);
            }
          });
        }
        close() {
          const { db } = this;
          __classPrivateFieldSet(this, _DB_db, null, "f");
          db.close();
        }
        [(_DB_db = /* @__PURE__ */ new WeakMap(), Symbol.dispose)]() {
          if (__classPrivateFieldGet(this, _DB_db, "f"))
            return this.close();
        }
      };
      exports.DB = DB;
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client-browser@0.3.17/node_modules/@atproto/oauth-client-browser/dist/indexed-db/index.js
  var require_indexed_db = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client-browser@0.3.17/node_modules/@atproto/oauth-client-browser/dist/indexed-db/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      require_disposable_polyfill();
      __exportStar(require_db(), exports);
      __exportStar(require_db_index(), exports);
      __exportStar(require_db_object_store(), exports);
      __exportStar(require_db_transaction(), exports);
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client-browser@0.3.17/node_modules/@atproto/oauth-client-browser/dist/browser-oauth-database.js
  var require_browser_oauth_database = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client-browser@0.3.17/node_modules/@atproto/oauth-client-browser/dist/browser-oauth-database.js"(exports) {
      "use strict";
      var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      var _BrowserOAuthDatabase_dbPromise;
      var _BrowserOAuthDatabase_cleanupInterval;
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BrowserOAuthDatabase = void 0;
      var jwk_webcrypto_1 = require_dist3();
      var index_js_1 = require_indexed_db();
      function encodeKey(key) {
        if (!(key instanceof jwk_webcrypto_1.WebcryptoKey) || !key.kid) {
          throw new Error("Invalid key object");
        }
        return {
          keyId: key.kid,
          keyPair: key.cryptoKeyPair
        };
      }
      async function decodeKey(encoded) {
        return jwk_webcrypto_1.WebcryptoKey.fromKeypair(encoded.keyPair, encoded.keyId);
      }
      var STORES = [
        "state",
        "session",
        "didCache",
        "dpopNonceCache",
        "handleCache",
        "authorizationServerMetadataCache",
        "protectedResourceMetadataCache"
      ];
      var BrowserOAuthDatabase = class {
        constructor(options) {
          _BrowserOAuthDatabase_dbPromise.set(this, void 0);
          _BrowserOAuthDatabase_cleanupInterval.set(this, void 0);
          __classPrivateFieldSet(this, _BrowserOAuthDatabase_dbPromise, index_js_1.DB.open(options?.name ?? "@atproto-oauth-client", [
            (db) => {
              for (const name2 of STORES) {
                const store = db.createObjectStore(name2, { autoIncrement: true });
                store.createIndex("expiresAt", "expiresAt", { unique: false });
              }
            }
          ], { durability: options?.durability ?? "strict" }), "f");
          __classPrivateFieldSet(this, _BrowserOAuthDatabase_cleanupInterval, setInterval(() => {
            void this.cleanup();
          }, options?.cleanupInterval ?? 3e4), "f");
        }
        async run(storeName, mode, fn) {
          const db = await __classPrivateFieldGet(this, _BrowserOAuthDatabase_dbPromise, "f");
          return await db.transaction([storeName], mode, (tx) => fn(tx.objectStore(storeName)));
        }
        createStore(name2, { encode: encode7, decode: decode8, expiresAt }) {
          return {
            get: async (key) => {
              const item = await this.run(name2, "readonly", (store) => store.get(key));
              if (item === void 0)
                return void 0;
              if (item.expiresAt != null && new Date(item.expiresAt) < /* @__PURE__ */ new Date()) {
                await this.run(name2, "readwrite", (store) => store.delete(key));
                return void 0;
              }
              return decode8(item.value);
            },
            set: async (key, value) => {
              const item = {
                value: await encode7(value),
                expiresAt: expiresAt(value)?.toISOString()
              };
              await this.run(name2, "readwrite", (store) => store.put(item, key));
            },
            del: async (key) => {
              await this.run(name2, "readwrite", (store) => store.delete(key));
            }
          };
        }
        getSessionStore() {
          return this.createStore("session", {
            expiresAt: ({ tokenSet }) => tokenSet.refresh_token || tokenSet.expires_at == null ? null : new Date(tokenSet.expires_at),
            encode: ({ dpopKey, ...session }) => ({
              ...session,
              dpopKey: encodeKey(dpopKey)
            }),
            decode: async ({ dpopKey, ...encoded }) => ({
              ...encoded,
              dpopKey: await decodeKey(dpopKey)
            })
          });
        }
        getStateStore() {
          return this.createStore("state", {
            expiresAt: (_value) => new Date(Date.now() + 10 * 6e4),
            encode: ({ dpopKey, ...session }) => ({
              ...session,
              dpopKey: encodeKey(dpopKey)
            }),
            decode: async ({ dpopKey, ...encoded }) => ({
              ...encoded,
              dpopKey: await decodeKey(dpopKey)
            })
          });
        }
        getDpopNonceCache() {
          return this.createStore("dpopNonceCache", {
            expiresAt: (_value) => new Date(Date.now() + 6e5),
            encode: (value) => value,
            decode: (encoded) => encoded
          });
        }
        getDidCache() {
          return this.createStore("didCache", {
            expiresAt: (_value) => new Date(Date.now() + 6e4),
            encode: (value) => value,
            decode: (encoded) => encoded
          });
        }
        getHandleCache() {
          return this.createStore("handleCache", {
            expiresAt: (_value) => new Date(Date.now() + 6e4),
            encode: (value) => value,
            decode: (encoded) => encoded
          });
        }
        getAuthorizationServerMetadataCache() {
          return this.createStore("authorizationServerMetadataCache", {
            expiresAt: (_value) => new Date(Date.now() + 6e4),
            encode: (value) => value,
            decode: (encoded) => encoded
          });
        }
        getProtectedResourceMetadataCache() {
          return this.createStore("protectedResourceMetadataCache", {
            expiresAt: (_value) => new Date(Date.now() + 6e4),
            encode: (value) => value,
            decode: (encoded) => encoded
          });
        }
        async cleanup() {
          const db = await __classPrivateFieldGet(this, _BrowserOAuthDatabase_dbPromise, "f");
          for (const name2 of STORES) {
            await db.transaction([name2], "readwrite", (tx) => tx.objectStore(name2).index("expiresAt").deleteAll(IDBKeyRange.upperBound(Date.now())));
          }
        }
        async [(_BrowserOAuthDatabase_dbPromise = /* @__PURE__ */ new WeakMap(), _BrowserOAuthDatabase_cleanupInterval = /* @__PURE__ */ new WeakMap(), Symbol.asyncDispose)]() {
          clearInterval(__classPrivateFieldGet(this, _BrowserOAuthDatabase_cleanupInterval, "f"));
          __classPrivateFieldSet(this, _BrowserOAuthDatabase_cleanupInterval, void 0, "f");
          const dbPromise = __classPrivateFieldGet(this, _BrowserOAuthDatabase_dbPromise, "f");
          __classPrivateFieldSet(this, _BrowserOAuthDatabase_dbPromise, Promise.reject(new Error("Database has been disposed")), "f");
          __classPrivateFieldGet(this, _BrowserOAuthDatabase_dbPromise, "f").catch(() => null);
          const db = await dbPromise.catch(() => null);
          if (db)
            await (db[Symbol.asyncDispose] || db[Symbol.dispose]).call(db);
        }
      };
      exports.BrowserOAuthDatabase = BrowserOAuthDatabase;
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client-browser@0.3.17/node_modules/@atproto/oauth-client-browser/dist/browser-runtime-implementation.js
  var require_browser_runtime_implementation = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client-browser@0.3.17/node_modules/@atproto/oauth-client-browser/dist/browser-runtime-implementation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BrowserRuntimeImplementation = void 0;
      var jwk_webcrypto_1 = require_dist3();
      var nativeRequestLock = navigator.locks?.request ? (name2, fn) => navigator.locks.request(name2, { mode: "exclusive" }, async () => fn()) : void 0;
      var BrowserRuntimeImplementation = class {
        constructor() {
          Object.defineProperty(this, "requestLock", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: nativeRequestLock
          });
          if (typeof crypto !== "object" || !crypto?.subtle) {
            throw new Error("Crypto with CryptoSubtle is required. If running in a browser, make sure the current page is loaded over HTTPS.");
          }
          if (!this.requestLock) {
            console.warn("Locks API not available. You should consider using a more recent browser.");
          }
        }
        async createKey(algs) {
          return jwk_webcrypto_1.WebcryptoKey.generate(algs);
        }
        getRandomValues(byteLength) {
          return crypto.getRandomValues(new Uint8Array(byteLength));
        }
        async digest(data, { name: name2 }) {
          switch (name2) {
            case "sha256":
            case "sha384":
            case "sha512": {
              const buf = await crypto.subtle.digest(`SHA-${name2.slice(3)}`, data);
              return new Uint8Array(buf);
            }
            default:
              throw new Error(`Unsupported digest algorithm: ${name2}`);
          }
        }
      };
      exports.BrowserRuntimeImplementation = BrowserRuntimeImplementation;
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client-browser@0.3.17/node_modules/@atproto/oauth-client-browser/dist/errors.js
  var require_errors3 = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client-browser@0.3.17/node_modules/@atproto/oauth-client-browser/dist/errors.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.LoginContinuedInParentWindowError = void 0;
      var LoginContinuedInParentWindowError = class extends Error {
        constructor() {
          super("Login complete, please close the popup window.");
          Object.defineProperty(this, "code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "LOGIN_CONTINUED_IN_PARENT_WINDOW"
          });
        }
      };
      exports.LoginContinuedInParentWindowError = LoginContinuedInParentWindowError;
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client-browser@0.3.17/node_modules/@atproto/oauth-client-browser/dist/util.js
  var require_util11 = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client-browser@0.3.17/node_modules/@atproto/oauth-client-browser/dist/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.buildLoopbackClientId = buildLoopbackClientId;
      var oauth_types_1 = require_dist11();
      function buildLoopbackClientId(location2, localhost = "127.0.0.1") {
        if (!(0, oauth_types_1.isLoopbackHost)(location2.hostname)) {
          throw new TypeError(`Expected a loopback host, got ${location2.hostname}`);
        }
        const redirectUri = `http://${location2.hostname === "localhost" ? localhost : location2.hostname}${location2.port && !location2.port.startsWith(":") ? `:${location2.port}` : location2.port}${location2.pathname}`;
        return `http://localhost${location2.pathname === "/" ? "" : location2.pathname}?redirect_uri=${encodeURIComponent(redirectUri)}`;
      }
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client-browser@0.3.17/node_modules/@atproto/oauth-client-browser/dist/browser-oauth-client.js
  var require_browser_oauth_client = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client-browser@0.3.17/node_modules/@atproto/oauth-client-browser/dist/browser-oauth-client.js"(exports) {
      "use strict";
      var _a;
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BrowserOAuthClient = void 0;
      var oauth_client_1 = require_dist14();
      var oauth_types_1 = require_dist11();
      var browser_oauth_database_js_1 = require_browser_oauth_database();
      var browser_runtime_implementation_js_1 = require_browser_runtime_implementation();
      var errors_js_1 = require_errors3();
      var util_js_1 = require_util11();
      var NAMESPACE = `@@atproto/oauth-client-browser`;
      var POPUP_CHANNEL_NAME = `${NAMESPACE}(popup-channel)`;
      var POPUP_STATE_PREFIX = `${NAMESPACE}(popup-state):`;
      var syncChannel = new BroadcastChannel(`${NAMESPACE}(synchronization-channel)`);
      var BrowserOAuthClient2 = class _BrowserOAuthClient extends oauth_client_1.OAuthClient {
        static async load({ clientId, ...options }) {
          if (clientId.startsWith("http:")) {
            const clientMetadata = (0, oauth_types_1.atprotoLoopbackClientMetadata)(clientId);
            return new _BrowserOAuthClient({ clientMetadata, ...options });
          } else if (clientId.startsWith("https:")) {
            (0, oauth_types_1.assertOAuthDiscoverableClientId)(clientId);
            const clientMetadata = await oauth_client_1.OAuthClient.fetchMetadata({
              clientId,
              ...options
            });
            return new _BrowserOAuthClient({ clientMetadata, ...options });
          } else {
            throw new TypeError(`Invalid client id: ${clientId}`);
          }
        }
        constructor({
          clientMetadata = (0, oauth_types_1.atprotoLoopbackClientMetadata)((0, util_js_1.buildLoopbackClientId)(window.location)),
          // "fragment" is a safer default as the query params will not be sent to the server
          responseMode = "fragment",
          ...options
        }) {
          if (!globalThis.crypto?.subtle) {
            throw new Error("WebCrypto API is required");
          }
          if (!["query", "fragment"].includes(responseMode)) {
            throw new TypeError(`Invalid response mode: ${responseMode}`);
          }
          const database = new browser_oauth_database_js_1.BrowserOAuthDatabase();
          super({
            ...options,
            clientMetadata,
            responseMode,
            keyset: void 0,
            runtimeImplementation: new browser_runtime_implementation_js_1.BrowserRuntimeImplementation(),
            sessionStore: database.getSessionStore(),
            stateStore: database.getStateStore(),
            didCache: database.getDidCache(),
            handleCache: database.getHandleCache(),
            dpopNonceCache: database.getDpopNonceCache(),
            authorizationServerMetadataCache: database.getAuthorizationServerMetadataCache(),
            protectedResourceMetadataCache: database.getProtectedResourceMetadataCache()
          });
          Object.defineProperty(this, _a, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          const ac = new AbortController();
          const { signal } = ac;
          this[Symbol.dispose] = () => ac.abort();
          signal.addEventListener("abort", () => database[Symbol.asyncDispose](), {
            once: true
          });
          this.addEventListener("deleted", ({ detail: { sub } }) => {
            if (localStorage.getItem(`${NAMESPACE}(sub)`) === sub) {
              localStorage.removeItem(`${NAMESPACE}(sub)`);
            }
          });
          for (const type of ["deleted", "updated"]) {
            this.sessionGetter.addEventListener(type, ({ detail }) => {
              syncChannel.postMessage([type, detail]);
            });
          }
          syncChannel.addEventListener(
            "message",
            (event) => {
              if (event.source !== window) {
                const [type, detail] = event.data;
                this.dispatchCustomEvent(type, detail);
              }
            },
            // Remove the listener when the client is disposed
            { signal }
          );
        }
        async init(refresh) {
          await fixLocation(this.clientMetadata);
          const signInResult = await this.signInCallback();
          if (signInResult) {
            localStorage.setItem(`${NAMESPACE}(sub)`, signInResult.session.sub);
            return signInResult;
          }
          const sub = localStorage.getItem(`${NAMESPACE}(sub)`);
          if (sub) {
            try {
              const session = await this.restore(sub, refresh);
              return { session };
            } catch (err) {
              localStorage.removeItem(`${NAMESPACE}(sub)`);
              throw err;
            }
          }
        }
        async restore(sub, refresh) {
          const session = await super.restore(sub, refresh);
          localStorage.setItem(`${NAMESPACE}(sub)`, session.sub);
          return session;
        }
        async revoke(sub) {
          localStorage.removeItem(`${NAMESPACE}(sub)`);
          return super.revoke(sub);
        }
        async signIn(input, options) {
          if (options?.display === "popup") {
            return this.signInPopup(input, options);
          } else {
            return this.signInRedirect(input, options);
          }
        }
        async signInRedirect(input, options) {
          const url = await this.authorize(input, options);
          window.location.href = url.href;
          return new Promise((resolve, reject) => {
            setTimeout((err) => {
              this.abortRequest(url).then(() => reject(err), (reason) => reject(new AggregateError([err, reason])));
            }, 5e3, new Error("User navigated back"));
          });
        }
        async signInPopup(input, options) {
          const popupFeatures = "width=600,height=600,menubar=no,toolbar=no";
          let popup = window.open("about:blank", "_blank", popupFeatures);
          const stateKey = `${Math.random().toString(36).slice(2)}`;
          const url = await this.authorize(input, {
            ...options,
            state: `${POPUP_STATE_PREFIX}${stateKey}`,
            display: options?.display ?? "popup"
          });
          options?.signal?.throwIfAborted();
          if (popup) {
            popup.window.location.href = url.href;
          } else {
            popup = window.open(url.href, "_blank", popupFeatures);
          }
          popup?.focus();
          return new Promise((resolve, reject) => {
            const popupChannel = new BroadcastChannel(POPUP_CHANNEL_NAME);
            const cleanup = () => {
              clearTimeout(timeout);
              popupChannel.removeEventListener("message", onMessage);
              popupChannel.close();
              options?.signal?.removeEventListener("abort", cancel);
              popup?.close();
            };
            const cancel = () => {
              reject(new Error(options?.signal?.aborted ? "Aborted" : "Timeout"));
              cleanup();
            };
            options?.signal?.addEventListener("abort", cancel);
            const timeout = setTimeout(cancel, 5 * 6e4);
            const onMessage = async ({ data }) => {
              if (data.key !== stateKey)
                return;
              if (!("result" in data))
                return;
              popupChannel.postMessage({ key: stateKey, ack: true });
              cleanup();
              const { result } = data;
              if (result.status === "fulfilled") {
                const sub = result.value;
                try {
                  options?.signal?.throwIfAborted();
                  resolve(await this.restore(sub, false));
                } catch (err) {
                  reject(err);
                  void this.revoke(sub);
                }
              } else {
                const { message: message2, params } = result.reason;
                reject(new oauth_client_1.OAuthCallbackError(new URLSearchParams(params), message2));
              }
            };
            popupChannel.addEventListener("message", onMessage);
          });
        }
        readCallbackParams() {
          const params = this.responseMode === "fragment" ? new URLSearchParams(location.hash.slice(1)) : new URLSearchParams(location.search);
          if (!params.has("state") || !(params.has("code") || params.has("error"))) {
            return null;
          }
          const matchesLocation = (url) => location.origin === url.origin && location.pathname === url.pathname;
          const redirectUrls = this.clientMetadata.redirect_uris.map((uri) => new URL(uri));
          if (!redirectUrls.some(matchesLocation))
            return null;
          return params;
        }
        async signInCallback() {
          const params = this.readCallbackParams();
          if (!params)
            return null;
          if (this.responseMode === "fragment") {
            history.replaceState(null, "", location.pathname + location.search);
          } else if (this.responseMode === "query") {
            history.replaceState(null, "", location.pathname);
          }
          const sendPopupResult = (message2) => {
            const popupChannel = new BroadcastChannel(POPUP_CHANNEL_NAME);
            return new Promise((resolve) => {
              const cleanup = (result) => {
                clearTimeout(timer);
                popupChannel.removeEventListener("message", onMessage);
                popupChannel.close();
                resolve(result);
              };
              const onMessage = ({ data }) => {
                if ("ack" in data && message2.key === data.key)
                  cleanup(true);
              };
              popupChannel.addEventListener("message", onMessage);
              popupChannel.postMessage(message2);
              const timer = setTimeout(cleanup, 500, false);
            });
          };
          return this.callback(params).then(async (result) => {
            if (result.state?.startsWith(POPUP_STATE_PREFIX)) {
              const receivedByParent = await sendPopupResult({
                key: result.state.slice(POPUP_STATE_PREFIX.length),
                result: {
                  status: "fulfilled",
                  value: result.session.sub
                }
              });
              if (!receivedByParent)
                await result.session.signOut();
              throw new errors_js_1.LoginContinuedInParentWindowError();
            }
            return result;
          }).catch(async (err) => {
            if (err instanceof oauth_client_1.OAuthCallbackError && err.state?.startsWith(POPUP_STATE_PREFIX)) {
              await sendPopupResult({
                key: err.state.slice(POPUP_STATE_PREFIX.length),
                result: {
                  status: "rejected",
                  reason: {
                    message: err.message,
                    params: Array.from(err.params.entries())
                  }
                }
              });
              throw new errors_js_1.LoginContinuedInParentWindowError();
            }
            throw err;
          }).catch((err) => {
            if (err instanceof errors_js_1.LoginContinuedInParentWindowError) {
              window.close();
            }
            throw err;
          });
        }
        dispose() {
          this[Symbol.dispose]();
        }
      };
      exports.BrowserOAuthClient = BrowserOAuthClient2;
      _a = Symbol.dispose;
      function fixLocation(clientMetadata) {
        if (!(0, oauth_types_1.isOAuthClientIdLoopback)(clientMetadata.client_id))
          return;
        if (window.location.hostname !== "localhost")
          return;
        const locationUrl = new URL(window.location.href);
        for (const uri of clientMetadata.redirect_uris) {
          const url = new URL(uri);
          if ((url.hostname === "127.0.0.1" || url.hostname === "[::1]") && (!url.port || url.port === locationUrl.port) && url.protocol === locationUrl.protocol && url.pathname === locationUrl.pathname) {
            url.port = locationUrl.port;
            window.location.href = url.href;
            throw new Error("Redirecting to loopback IP...");
          }
        }
        throw new Error(`Please use the loopback IP address instead of ${locationUrl}`);
      }
    }
  });

  // node_modules/.pnpm/@atproto+oauth-client-browser@0.3.17/node_modules/@atproto/oauth-client-browser/dist/index.js
  var require_dist15 = __commonJS({
    "node_modules/.pnpm/@atproto+oauth-client-browser@0.3.17/node_modules/@atproto/oauth-client-browser/dist/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.buildLoopbackClientId = void 0;
      require_disposable_polyfill();
      __exportStar(require_dist3(), exports);
      __exportStar(require_dist14(), exports);
      __exportStar(require_browser_oauth_client(), exports);
      __exportStar(require_errors3(), exports);
      var util_js_1 = require_util11();
      Object.defineProperty(exports, "buildLoopbackClientId", { enumerable: true, get: function() {
        return util_js_1.buildLoopbackClientId;
      } });
    }
  });

  // node_modules/.pnpm/@atproto+lexicon@0.4.11/node_modules/@atproto/lexicon/dist/util.js
  var require_util12 = __commonJS({
    "node_modules/.pnpm/@atproto+lexicon@0.4.11/node_modules/@atproto/lexicon/dist/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toLexUri = toLexUri;
      exports.requiredPropertiesRefinement = requiredPropertiesRefinement;
      var zod_1 = require_cjs();
      function toLexUri(str, baseUri) {
        if (str.split("#").length > 2) {
          throw new Error("Uri can only have one hash segment");
        }
        if (str.startsWith("lex:")) {
          return str;
        }
        if (str.startsWith("#")) {
          if (!baseUri) {
            throw new Error(`Unable to resolve uri without anchor: ${str}`);
          }
          return `${baseUri}${str}`;
        }
        return `lex:${str}`;
      }
      function requiredPropertiesRefinement(object, ctx) {
        if (object.required === void 0) {
          return;
        }
        if (!Array.isArray(object.required)) {
          ctx.addIssue({
            code: zod_1.z.ZodIssueCode.invalid_type,
            received: typeof object.required,
            expected: "array"
          });
          return;
        }
        if (object.properties === void 0) {
          if (object.required.length > 0) {
            ctx.addIssue({
              code: zod_1.z.ZodIssueCode.custom,
              message: `Required fields defined but no properties defined`
            });
          }
          return;
        }
        for (const field of object.required) {
          if (object.properties[field] === void 0) {
            ctx.addIssue({
              code: zod_1.z.ZodIssueCode.custom,
              message: `Required field "${field}" not defined`
            });
          }
        }
      }
    }
  });

  // node_modules/.pnpm/@atproto+lexicon@0.4.11/node_modules/@atproto/lexicon/dist/types.js
  var require_types4 = __commonJS({
    "node_modules/.pnpm/@atproto+lexicon@0.4.11/node_modules/@atproto/lexicon/dist/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.LexiconDefNotFoundError = exports.InvalidLexiconError = exports.ValidationError = exports.lexiconDoc = exports.lexUserType = exports.lexRecord = exports.lexXrpcSubscription = exports.lexXrpcProcedure = exports.lexXrpcQuery = exports.lexXrpcError = exports.lexXrpcSubscriptionMessage = exports.lexXrpcBody = exports.lexXrpcParameters = exports.lexObject = exports.lexToken = exports.lexPrimitiveArray = exports.lexArray = exports.lexBlob = exports.lexRefVariant = exports.lexRefUnion = exports.lexRef = exports.lexIpldType = exports.lexCidLink = exports.lexBytes = exports.lexPrimitive = exports.lexUnknown = exports.lexString = exports.lexStringFormat = exports.lexInteger = exports.lexBoolean = void 0;
      exports.isValidLexiconDoc = isValidLexiconDoc;
      exports.isObj = isObj;
      exports.isDiscriminatedObject = isDiscriminatedObject;
      exports.parseLexiconDoc = parseLexiconDoc;
      var zod_1 = require_cjs();
      var syntax_1 = require_dist12();
      var util_1 = require_util12();
      exports.lexBoolean = zod_1.z.object({
        type: zod_1.z.literal("boolean"),
        description: zod_1.z.string().optional(),
        default: zod_1.z.boolean().optional(),
        const: zod_1.z.boolean().optional()
      }).strict();
      exports.lexInteger = zod_1.z.object({
        type: zod_1.z.literal("integer"),
        description: zod_1.z.string().optional(),
        default: zod_1.z.number().int().optional(),
        minimum: zod_1.z.number().int().optional(),
        maximum: zod_1.z.number().int().optional(),
        enum: zod_1.z.number().int().array().optional(),
        const: zod_1.z.number().int().optional()
      }).strict();
      exports.lexStringFormat = zod_1.z.enum([
        "datetime",
        "uri",
        "at-uri",
        "did",
        "handle",
        "at-identifier",
        "nsid",
        "cid",
        "language",
        "tid",
        "record-key"
      ]);
      exports.lexString = zod_1.z.object({
        type: zod_1.z.literal("string"),
        format: exports.lexStringFormat.optional(),
        description: zod_1.z.string().optional(),
        default: zod_1.z.string().optional(),
        minLength: zod_1.z.number().int().optional(),
        maxLength: zod_1.z.number().int().optional(),
        minGraphemes: zod_1.z.number().int().optional(),
        maxGraphemes: zod_1.z.number().int().optional(),
        enum: zod_1.z.string().array().optional(),
        const: zod_1.z.string().optional(),
        knownValues: zod_1.z.string().array().optional()
      }).strict();
      exports.lexUnknown = zod_1.z.object({
        type: zod_1.z.literal("unknown"),
        description: zod_1.z.string().optional()
      }).strict();
      exports.lexPrimitive = zod_1.z.discriminatedUnion("type", [
        exports.lexBoolean,
        exports.lexInteger,
        exports.lexString,
        exports.lexUnknown
      ]);
      exports.lexBytes = zod_1.z.object({
        type: zod_1.z.literal("bytes"),
        description: zod_1.z.string().optional(),
        maxLength: zod_1.z.number().optional(),
        minLength: zod_1.z.number().optional()
      }).strict();
      exports.lexCidLink = zod_1.z.object({
        type: zod_1.z.literal("cid-link"),
        description: zod_1.z.string().optional()
      }).strict();
      exports.lexIpldType = zod_1.z.discriminatedUnion("type", [exports.lexBytes, exports.lexCidLink]);
      exports.lexRef = zod_1.z.object({
        type: zod_1.z.literal("ref"),
        description: zod_1.z.string().optional(),
        ref: zod_1.z.string()
      }).strict();
      exports.lexRefUnion = zod_1.z.object({
        type: zod_1.z.literal("union"),
        description: zod_1.z.string().optional(),
        refs: zod_1.z.string().array(),
        closed: zod_1.z.boolean().optional()
      }).strict();
      exports.lexRefVariant = zod_1.z.discriminatedUnion("type", [exports.lexRef, exports.lexRefUnion]);
      exports.lexBlob = zod_1.z.object({
        type: zod_1.z.literal("blob"),
        description: zod_1.z.string().optional(),
        accept: zod_1.z.string().array().optional(),
        maxSize: zod_1.z.number().optional()
      }).strict();
      exports.lexArray = zod_1.z.object({
        type: zod_1.z.literal("array"),
        description: zod_1.z.string().optional(),
        items: zod_1.z.discriminatedUnion("type", [
          // lexPrimitive
          exports.lexBoolean,
          exports.lexInteger,
          exports.lexString,
          exports.lexUnknown,
          // lexIpldType
          exports.lexBytes,
          exports.lexCidLink,
          // lexRefVariant
          exports.lexRef,
          exports.lexRefUnion,
          // other
          exports.lexBlob
        ]),
        minLength: zod_1.z.number().int().optional(),
        maxLength: zod_1.z.number().int().optional()
      }).strict();
      exports.lexPrimitiveArray = exports.lexArray.merge(zod_1.z.object({
        items: exports.lexPrimitive
      }).strict());
      exports.lexToken = zod_1.z.object({
        type: zod_1.z.literal("token"),
        description: zod_1.z.string().optional()
      }).strict();
      exports.lexObject = zod_1.z.object({
        type: zod_1.z.literal("object"),
        description: zod_1.z.string().optional(),
        required: zod_1.z.string().array().optional(),
        nullable: zod_1.z.string().array().optional(),
        properties: zod_1.z.record(zod_1.z.discriminatedUnion("type", [
          exports.lexArray,
          // lexPrimitive
          exports.lexBoolean,
          exports.lexInteger,
          exports.lexString,
          exports.lexUnknown,
          // lexIpldType
          exports.lexBytes,
          exports.lexCidLink,
          // lexRefVariant
          exports.lexRef,
          exports.lexRefUnion,
          // other
          exports.lexBlob
        ]))
      }).strict().superRefine(util_1.requiredPropertiesRefinement);
      exports.lexXrpcParameters = zod_1.z.object({
        type: zod_1.z.literal("params"),
        description: zod_1.z.string().optional(),
        required: zod_1.z.string().array().optional(),
        properties: zod_1.z.record(zod_1.z.discriminatedUnion("type", [
          exports.lexPrimitiveArray,
          // lexPrimitive
          exports.lexBoolean,
          exports.lexInteger,
          exports.lexString,
          exports.lexUnknown
        ]))
      }).strict().superRefine(util_1.requiredPropertiesRefinement);
      exports.lexXrpcBody = zod_1.z.object({
        description: zod_1.z.string().optional(),
        encoding: zod_1.z.string(),
        // @NOTE using discriminatedUnion with a refined schema requires zod >= 4
        schema: zod_1.z.union([exports.lexRefVariant, exports.lexObject]).optional()
      }).strict();
      exports.lexXrpcSubscriptionMessage = zod_1.z.object({
        description: zod_1.z.string().optional(),
        // @NOTE using discriminatedUnion with a refined schema requires zod >= 4
        schema: zod_1.z.union([exports.lexRefVariant, exports.lexObject]).optional()
      }).strict();
      exports.lexXrpcError = zod_1.z.object({
        name: zod_1.z.string(),
        description: zod_1.z.string().optional()
      }).strict();
      exports.lexXrpcQuery = zod_1.z.object({
        type: zod_1.z.literal("query"),
        description: zod_1.z.string().optional(),
        parameters: exports.lexXrpcParameters.optional(),
        output: exports.lexXrpcBody.optional(),
        errors: exports.lexXrpcError.array().optional()
      }).strict();
      exports.lexXrpcProcedure = zod_1.z.object({
        type: zod_1.z.literal("procedure"),
        description: zod_1.z.string().optional(),
        parameters: exports.lexXrpcParameters.optional(),
        input: exports.lexXrpcBody.optional(),
        output: exports.lexXrpcBody.optional(),
        errors: exports.lexXrpcError.array().optional()
      }).strict();
      exports.lexXrpcSubscription = zod_1.z.object({
        type: zod_1.z.literal("subscription"),
        description: zod_1.z.string().optional(),
        parameters: exports.lexXrpcParameters.optional(),
        message: exports.lexXrpcSubscriptionMessage.optional(),
        errors: exports.lexXrpcError.array().optional()
      }).strict();
      exports.lexRecord = zod_1.z.object({
        type: zod_1.z.literal("record"),
        description: zod_1.z.string().optional(),
        key: zod_1.z.string().optional(),
        record: exports.lexObject
      }).strict();
      exports.lexUserType = zod_1.z.custom((val) => {
        if (!val || typeof val !== "object") {
          return;
        }
        if (val["type"] === void 0) {
          return;
        }
        switch (val["type"]) {
          case "record":
            return exports.lexRecord.parse(val);
          case "query":
            return exports.lexXrpcQuery.parse(val);
          case "procedure":
            return exports.lexXrpcProcedure.parse(val);
          case "subscription":
            return exports.lexXrpcSubscription.parse(val);
          case "blob":
            return exports.lexBlob.parse(val);
          case "array":
            return exports.lexArray.parse(val);
          case "token":
            return exports.lexToken.parse(val);
          case "object":
            return exports.lexObject.parse(val);
          case "boolean":
            return exports.lexBoolean.parse(val);
          case "integer":
            return exports.lexInteger.parse(val);
          case "string":
            return exports.lexString.parse(val);
          case "bytes":
            return exports.lexBytes.parse(val);
          case "cid-link":
            return exports.lexCidLink.parse(val);
          case "unknown":
            return exports.lexUnknown.parse(val);
        }
      }, (val) => {
        if (!val || typeof val !== "object") {
          return {
            message: "Must be an object",
            fatal: true
          };
        }
        if (val["type"] === void 0) {
          return {
            message: "Must have a type",
            fatal: true
          };
        }
        if (typeof val["type"] !== "string") {
          return {
            message: "Type property must be a string",
            fatal: true
          };
        }
        return {
          message: `Invalid type: ${val["type"]} must be one of: record, query, procedure, subscription, blob, array, token, object, boolean, integer, string, bytes, cid-link, unknown`,
          fatal: true
        };
      });
      exports.lexiconDoc = zod_1.z.object({
        lexicon: zod_1.z.literal(1),
        id: zod_1.z.string().refine((v) => syntax_1.NSID.isValid(v), {
          message: "Must be a valid NSID"
        }),
        revision: zod_1.z.number().optional(),
        description: zod_1.z.string().optional(),
        defs: zod_1.z.record(exports.lexUserType)
      }).strict().superRefine((doc, ctx) => {
        for (const defId in doc.defs) {
          const def = doc.defs[defId];
          if (defId !== "main" && (def.type === "record" || def.type === "procedure" || def.type === "query" || def.type === "subscription")) {
            ctx.addIssue({
              code: zod_1.z.ZodIssueCode.custom,
              message: `Records, procedures, queries, and subscriptions must be the main definition.`
            });
          }
        }
      });
      function isValidLexiconDoc(v) {
        return exports.lexiconDoc.safeParse(v).success;
      }
      function isObj(v) {
        return v != null && typeof v === "object";
      }
      function isDiscriminatedObject(v) {
        return isObj(v) && "$type" in v && typeof v.$type === "string";
      }
      function parseLexiconDoc(v) {
        exports.lexiconDoc.parse(v);
        return v;
      }
      var ValidationError = class extends Error {
      };
      exports.ValidationError = ValidationError;
      var InvalidLexiconError = class extends Error {
      };
      exports.InvalidLexiconError = InvalidLexiconError;
      var LexiconDefNotFoundError = class extends Error {
      };
      exports.LexiconDefNotFoundError = LexiconDefNotFoundError;
    }
  });

  // node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/vendor/varint.js
  function encode4(num, out, offset) {
    out = out || [];
    offset = offset || 0;
    var oldOffset = offset;
    while (num >= INT) {
      out[offset++] = num & 255 | MSB;
      num /= 128;
    }
    while (num & MSBALL) {
      out[offset++] = num & 255 | MSB;
      num >>>= 7;
    }
    out[offset] = num | 0;
    encode4.bytes = offset - oldOffset + 1;
    return out;
  }
  function read(buf, offset) {
    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;
    do {
      if (counter >= l) {
        read.bytes = 0;
        throw new RangeError("Could not decode varint");
      }
      b = buf[counter++];
      res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);
      shift += 7;
    } while (b >= MSB$1);
    read.bytes = counter - offset;
    return res;
  }
  var encode_1, MSB, REST, MSBALL, INT, decode4, MSB$1, REST$1, N1, N2, N3, N4, N5, N6, N7, N8, N9, length, varint, _brrp_varint, varint_default;
  var init_varint = __esm({
    "node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/vendor/varint.js"() {
      encode_1 = encode4;
      MSB = 128;
      REST = 127;
      MSBALL = ~REST;
      INT = Math.pow(2, 31);
      decode4 = read;
      MSB$1 = 128;
      REST$1 = 127;
      N1 = Math.pow(2, 7);
      N2 = Math.pow(2, 14);
      N3 = Math.pow(2, 21);
      N4 = Math.pow(2, 28);
      N5 = Math.pow(2, 35);
      N6 = Math.pow(2, 42);
      N7 = Math.pow(2, 49);
      N8 = Math.pow(2, 56);
      N9 = Math.pow(2, 63);
      length = function(value) {
        return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
      };
      varint = {
        encode: encode_1,
        decode: decode4,
        encodingLength: length
      };
      _brrp_varint = varint;
      varint_default = _brrp_varint;
    }
  });

  // node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/varint.js
  var decode5, encodeTo, encodingLength;
  var init_varint2 = __esm({
    "node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/varint.js"() {
      init_varint();
      decode5 = (data, offset = 0) => {
        const code2 = varint_default.decode(data, offset);
        return [
          code2,
          varint_default.decode.bytes
        ];
      };
      encodeTo = (int, target, offset = 0) => {
        varint_default.encode(int, target, offset);
        return target;
      };
      encodingLength = (int) => {
        return varint_default.encodingLength(int);
      };
    }
  });

  // node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/hashes/digest.js
  var create, decode6, equals2, Digest;
  var init_digest2 = __esm({
    "node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/hashes/digest.js"() {
      init_bytes();
      init_varint2();
      create = (code2, digest3) => {
        const size = digest3.byteLength;
        const sizeOffset = encodingLength(code2);
        const digestOffset = sizeOffset + encodingLength(size);
        const bytes = new Uint8Array(digestOffset + size);
        encodeTo(code2, bytes, 0);
        encodeTo(size, bytes, sizeOffset);
        bytes.set(digest3, digestOffset);
        return new Digest(code2, size, digest3, bytes);
      };
      decode6 = (multihash) => {
        const bytes = coerce(multihash);
        const [code2, sizeOffset] = decode5(bytes);
        const [size, digestOffset] = decode5(bytes.subarray(sizeOffset));
        const digest3 = bytes.subarray(sizeOffset + digestOffset);
        if (digest3.byteLength !== size) {
          throw new Error("Incorrect length");
        }
        return new Digest(code2, size, digest3, bytes);
      };
      equals2 = (a, b) => {
        if (a === b) {
          return true;
        } else {
          return a.code === b.code && a.size === b.size && equals(a.bytes, b.bytes);
        }
      };
      Digest = class {
        constructor(code2, size, digest3, bytes) {
          this.code = code2;
          this.size = size;
          this.digest = digest3;
          this.bytes = bytes;
        }
      };
    }
  });

  // node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base58.js
  var base58_exports = {};
  __export(base58_exports, {
    base58btc: () => base58btc,
    base58flickr: () => base58flickr
  });
  var base58btc, base58flickr;
  var init_base58 = __esm({
    "node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base58.js"() {
      init_base();
      base58btc = baseX({
        name: "base58btc",
        prefix: "z",
        alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
      });
      base58flickr = baseX({
        name: "base58flickr",
        prefix: "Z",
        alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
      });
    }
  });

  // node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base32.js
  var base32_exports = {};
  __export(base32_exports, {
    base32: () => base32,
    base32hex: () => base32hex,
    base32hexpad: () => base32hexpad,
    base32hexpadupper: () => base32hexpadupper,
    base32hexupper: () => base32hexupper,
    base32pad: () => base32pad,
    base32padupper: () => base32padupper,
    base32upper: () => base32upper,
    base32z: () => base32z
  });
  var base32, base32upper, base32pad, base32padupper, base32hex, base32hexupper, base32hexpad, base32hexpadupper, base32z;
  var init_base32 = __esm({
    "node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base32.js"() {
      init_base();
      base32 = rfc4648({
        prefix: "b",
        name: "base32",
        alphabet: "abcdefghijklmnopqrstuvwxyz234567",
        bitsPerChar: 5
      });
      base32upper = rfc4648({
        prefix: "B",
        name: "base32upper",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
        bitsPerChar: 5
      });
      base32pad = rfc4648({
        prefix: "c",
        name: "base32pad",
        alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
        bitsPerChar: 5
      });
      base32padupper = rfc4648({
        prefix: "C",
        name: "base32padupper",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
        bitsPerChar: 5
      });
      base32hex = rfc4648({
        prefix: "v",
        name: "base32hex",
        alphabet: "0123456789abcdefghijklmnopqrstuv",
        bitsPerChar: 5
      });
      base32hexupper = rfc4648({
        prefix: "V",
        name: "base32hexupper",
        alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
        bitsPerChar: 5
      });
      base32hexpad = rfc4648({
        prefix: "t",
        name: "base32hexpad",
        alphabet: "0123456789abcdefghijklmnopqrstuv=",
        bitsPerChar: 5
      });
      base32hexpadupper = rfc4648({
        prefix: "T",
        name: "base32hexpadupper",
        alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
        bitsPerChar: 5
      });
      base32z = rfc4648({
        prefix: "h",
        name: "base32z",
        alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
        bitsPerChar: 5
      });
    }
  });

  // node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/cid.js
  var cid_exports = {};
  __export(cid_exports, {
    CID: () => CID
  });
  var CID, parseCIDtoBytes, toStringV0, toStringV1, DAG_PB_CODE, SHA_256_CODE, encodeCID, cidSymbol, readonly, hidden, version, deprecate, IS_CID_DEPRECATION;
  var init_cid = __esm({
    "node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/cid.js"() {
      init_varint2();
      init_digest2();
      init_base58();
      init_base32();
      init_bytes();
      CID = class _CID {
        constructor(version2, code2, multihash, bytes) {
          this.code = code2;
          this.version = version2;
          this.multihash = multihash;
          this.bytes = bytes;
          this.byteOffset = bytes.byteOffset;
          this.byteLength = bytes.byteLength;
          this.asCID = this;
          this._baseCache = /* @__PURE__ */ new Map();
          Object.defineProperties(this, {
            byteOffset: hidden,
            byteLength: hidden,
            code: readonly,
            version: readonly,
            multihash: readonly,
            bytes: readonly,
            _baseCache: hidden,
            asCID: hidden
          });
        }
        toV0() {
          switch (this.version) {
            case 0: {
              return this;
            }
            default: {
              const { code: code2, multihash } = this;
              if (code2 !== DAG_PB_CODE) {
                throw new Error("Cannot convert a non dag-pb CID to CIDv0");
              }
              if (multihash.code !== SHA_256_CODE) {
                throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
              }
              return _CID.createV0(multihash);
            }
          }
        }
        toV1() {
          switch (this.version) {
            case 0: {
              const { code: code2, digest: digest3 } = this.multihash;
              const multihash = create(code2, digest3);
              return _CID.createV1(this.code, multihash);
            }
            case 1: {
              return this;
            }
            default: {
              throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
            }
          }
        }
        equals(other) {
          return other && this.code === other.code && this.version === other.version && equals2(this.multihash, other.multihash);
        }
        toString(base3) {
          const { bytes, version: version2, _baseCache } = this;
          switch (version2) {
            case 0:
              return toStringV0(bytes, _baseCache, base3 || base58btc.encoder);
            default:
              return toStringV1(bytes, _baseCache, base3 || base32.encoder);
          }
        }
        toJSON() {
          return {
            code: this.code,
            version: this.version,
            hash: this.multihash.bytes
          };
        }
        get [Symbol.toStringTag]() {
          return "CID";
        }
        [Symbol.for("nodejs.util.inspect.custom")]() {
          return "CID(" + this.toString() + ")";
        }
        static isCID(value) {
          deprecate(/^0\.0/, IS_CID_DEPRECATION);
          return !!(value && (value[cidSymbol] || value.asCID === value));
        }
        get toBaseEncodedString() {
          throw new Error("Deprecated, use .toString()");
        }
        get codec() {
          throw new Error('"codec" property is deprecated, use integer "code" property instead');
        }
        get buffer() {
          throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
        }
        get multibaseName() {
          throw new Error('"multibaseName" property is deprecated');
        }
        get prefix() {
          throw new Error('"prefix" property is deprecated');
        }
        static asCID(value) {
          if (value instanceof _CID) {
            return value;
          } else if (value != null && value.asCID === value) {
            const { version: version2, code: code2, multihash, bytes } = value;
            return new _CID(version2, code2, multihash, bytes || encodeCID(version2, code2, multihash.bytes));
          } else if (value != null && value[cidSymbol] === true) {
            const { version: version2, multihash, code: code2 } = value;
            const digest3 = decode6(multihash);
            return _CID.create(version2, code2, digest3);
          } else {
            return null;
          }
        }
        static create(version2, code2, digest3) {
          if (typeof code2 !== "number") {
            throw new Error("String codecs are no longer supported");
          }
          switch (version2) {
            case 0: {
              if (code2 !== DAG_PB_CODE) {
                throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);
              } else {
                return new _CID(version2, code2, digest3, digest3.bytes);
              }
            }
            case 1: {
              const bytes = encodeCID(version2, code2, digest3.bytes);
              return new _CID(version2, code2, digest3, bytes);
            }
            default: {
              throw new Error("Invalid version");
            }
          }
        }
        static createV0(digest3) {
          return _CID.create(0, DAG_PB_CODE, digest3);
        }
        static createV1(code2, digest3) {
          return _CID.create(1, code2, digest3);
        }
        static decode(bytes) {
          const [cid, remainder] = _CID.decodeFirst(bytes);
          if (remainder.length) {
            throw new Error("Incorrect length");
          }
          return cid;
        }
        static decodeFirst(bytes) {
          const specs = _CID.inspectBytes(bytes);
          const prefixSize = specs.size - specs.multihashSize;
          const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
          if (multihashBytes.byteLength !== specs.multihashSize) {
            throw new Error("Incorrect length");
          }
          const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
          const digest3 = new Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
          const cid = specs.version === 0 ? _CID.createV0(digest3) : _CID.createV1(specs.codec, digest3);
          return [
            cid,
            bytes.subarray(specs.size)
          ];
        }
        static inspectBytes(initialBytes) {
          let offset = 0;
          const next = () => {
            const [i, length2] = decode5(initialBytes.subarray(offset));
            offset += length2;
            return i;
          };
          let version2 = next();
          let codec = DAG_PB_CODE;
          if (version2 === 18) {
            version2 = 0;
            offset = 0;
          } else if (version2 === 1) {
            codec = next();
          }
          if (version2 !== 0 && version2 !== 1) {
            throw new RangeError(`Invalid CID version ${version2}`);
          }
          const prefixSize = offset;
          const multihashCode = next();
          const digestSize = next();
          const size = offset + digestSize;
          const multihashSize = size - prefixSize;
          return {
            version: version2,
            codec,
            multihashCode,
            digestSize,
            multihashSize,
            size
          };
        }
        static parse(source, base3) {
          const [prefix, bytes] = parseCIDtoBytes(source, base3);
          const cid = _CID.decode(bytes);
          cid._baseCache.set(prefix, source);
          return cid;
        }
      };
      parseCIDtoBytes = (source, base3) => {
        switch (source[0]) {
          case "Q": {
            const decoder2 = base3 || base58btc;
            return [
              base58btc.prefix,
              decoder2.decode(`${base58btc.prefix}${source}`)
            ];
          }
          case base58btc.prefix: {
            const decoder2 = base3 || base58btc;
            return [
              base58btc.prefix,
              decoder2.decode(source)
            ];
          }
          case base32.prefix: {
            const decoder2 = base3 || base32;
            return [
              base32.prefix,
              decoder2.decode(source)
            ];
          }
          default: {
            if (base3 == null) {
              throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
            }
            return [
              source[0],
              base3.decode(source)
            ];
          }
        }
      };
      toStringV0 = (bytes, cache, base3) => {
        const { prefix } = base3;
        if (prefix !== base58btc.prefix) {
          throw Error(`Cannot string encode V0 in ${base3.name} encoding`);
        }
        const cid = cache.get(prefix);
        if (cid == null) {
          const cid2 = base3.encode(bytes).slice(1);
          cache.set(prefix, cid2);
          return cid2;
        } else {
          return cid;
        }
      };
      toStringV1 = (bytes, cache, base3) => {
        const { prefix } = base3;
        const cid = cache.get(prefix);
        if (cid == null) {
          const cid2 = base3.encode(bytes);
          cache.set(prefix, cid2);
          return cid2;
        } else {
          return cid;
        }
      };
      DAG_PB_CODE = 112;
      SHA_256_CODE = 18;
      encodeCID = (version2, code2, multihash) => {
        const codeOffset = encodingLength(version2);
        const hashOffset = codeOffset + encodingLength(code2);
        const bytes = new Uint8Array(hashOffset + multihash.byteLength);
        encodeTo(version2, bytes, 0);
        encodeTo(code2, bytes, codeOffset);
        bytes.set(multihash, hashOffset);
        return bytes;
      };
      cidSymbol = Symbol.for("@ipld/js-cid/CID");
      readonly = {
        writable: false,
        configurable: false,
        enumerable: true
      };
      hidden = {
        writable: false,
        enumerable: false,
        configurable: false
      };
      version = "0.0.0-dev";
      deprecate = (range, message2) => {
        if (range.test(version)) {
          console.warn(message2);
        } else {
          throw new Error(message2);
        }
      };
      IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;
    }
  });

  // node_modules/.pnpm/@atproto+common-web@0.4.2/node_modules/@atproto/common-web/dist/check.js
  var require_check = __commonJS({
    "node_modules/.pnpm/@atproto+common-web@0.4.2/node_modules/@atproto/common-web/dist/check.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isObject = exports.assure = exports.create = exports.is = void 0;
      var is = (obj, def) => {
        return def.safeParse(obj).success;
      };
      exports.is = is;
      var create2 = (def) => (v) => def.safeParse(v).success;
      exports.create = create2;
      var assure = (def, obj) => {
        return def.parse(obj);
      };
      exports.assure = assure;
      var isObject2 = (obj) => {
        return typeof obj === "object" && obj !== null;
      };
      exports.isObject = isObject2;
    }
  });

  // node_modules/.pnpm/@atproto+common-web@0.4.2/node_modules/@atproto/common-web/dist/util.js
  var require_util13 = __commonJS({
    "node_modules/.pnpm/@atproto+common-web@0.4.2/node_modules/@atproto/common-web/dist/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.parseIntWithFallback = exports.dedupeStrs = exports.range = exports.chunkArray = exports.errHasMsg = exports.isErrnoException = exports.asyncFilter = exports.s32decode = exports.s32encode = exports.streamToBuffer = exports.flattenUint8Arrays = exports.bailableWait = exports.wait = exports.jitter = exports.noUndefinedVals = void 0;
      exports.omit = omit;
      var noUndefinedVals = (obj) => {
        Object.keys(obj).forEach((k) => {
          if (obj[k] === void 0) {
            delete obj[k];
          }
        });
        return obj;
      };
      exports.noUndefinedVals = noUndefinedVals;
      function omit(src2, rejectedKeys) {
        if (!src2)
          return src2;
        const dst = {};
        const srcKeys = Object.keys(src2);
        for (let i = 0; i < srcKeys.length; i++) {
          const key = srcKeys[i];
          if (!rejectedKeys.includes(key)) {
            dst[key] = src2[key];
          }
        }
        return dst;
      }
      var jitter = (maxMs) => {
        return Math.round((Math.random() - 0.5) * maxMs * 2);
      };
      exports.jitter = jitter;
      var wait = (ms) => {
        return new Promise((res) => setTimeout(res, ms));
      };
      exports.wait = wait;
      var bailableWait = (ms) => {
        let bail;
        const waitPromise = new Promise((res) => {
          const timeout = setTimeout(res, ms);
          bail = () => {
            clearTimeout(timeout);
            res();
          };
        });
        return { bail, wait: () => waitPromise };
      };
      exports.bailableWait = bailableWait;
      var flattenUint8Arrays = (arrs) => {
        const length2 = arrs.reduce((acc, cur) => {
          return acc + cur.length;
        }, 0);
        const flattened = new Uint8Array(length2);
        let offset = 0;
        arrs.forEach((arr) => {
          flattened.set(arr, offset);
          offset += arr.length;
        });
        return flattened;
      };
      exports.flattenUint8Arrays = flattenUint8Arrays;
      var streamToBuffer = async (stream) => {
        const arrays = [];
        for await (const chunk of stream) {
          arrays.push(chunk);
        }
        return (0, exports.flattenUint8Arrays)(arrays);
      };
      exports.streamToBuffer = streamToBuffer;
      var S32_CHAR = "234567abcdefghijklmnopqrstuvwxyz";
      var s32encode = (i) => {
        let s = "";
        while (i) {
          const c = i % 32;
          i = Math.floor(i / 32);
          s = S32_CHAR.charAt(c) + s;
        }
        return s;
      };
      exports.s32encode = s32encode;
      var s32decode = (s) => {
        let i = 0;
        for (const c of s) {
          i = i * 32 + S32_CHAR.indexOf(c);
        }
        return i;
      };
      exports.s32decode = s32decode;
      var asyncFilter = async (arr, fn) => {
        const results = await Promise.all(arr.map((t) => fn(t)));
        return arr.filter((_, i) => results[i]);
      };
      exports.asyncFilter = asyncFilter;
      var isErrnoException = (err) => {
        return !!err && err["code"];
      };
      exports.isErrnoException = isErrnoException;
      var errHasMsg = (err, msg) => {
        return !!err && typeof err === "object" && err["message"] === msg;
      };
      exports.errHasMsg = errHasMsg;
      var chunkArray = (arr, chunkSize) => {
        return arr.reduce((acc, cur, i) => {
          const chunkI = Math.floor(i / chunkSize);
          if (!acc[chunkI]) {
            acc[chunkI] = [];
          }
          acc[chunkI].push(cur);
          return acc;
        }, []);
      };
      exports.chunkArray = chunkArray;
      var range = (num) => {
        const nums = [];
        for (let i = 0; i < num; i++) {
          nums.push(i);
        }
        return nums;
      };
      exports.range = range;
      var dedupeStrs = (strs) => {
        return [...new Set(strs)];
      };
      exports.dedupeStrs = dedupeStrs;
      var parseIntWithFallback = (value, fallback) => {
        const parsed = parseInt(value || "", 10);
        return isNaN(parsed) ? fallback : parsed;
      };
      exports.parseIntWithFallback = parseIntWithFallback;
    }
  });

  // node_modules/.pnpm/@atproto+common-web@0.4.2/node_modules/@atproto/common-web/dist/arrays.js
  var require_arrays = __commonJS({
    "node_modules/.pnpm/@atproto+common-web@0.4.2/node_modules/@atproto/common-web/dist/arrays.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.mapDefined = void 0;
      exports.keyBy = keyBy;
      function keyBy(arr, key) {
        return arr.reduce((acc, cur) => {
          acc.set(cur[key], cur);
          return acc;
        }, /* @__PURE__ */ new Map());
      }
      var mapDefined = (arr, fn) => {
        const output = [];
        for (const item of arr) {
          const val = fn(item);
          if (val !== void 0) {
            output.push(val);
          }
        }
        return output;
      };
      exports.mapDefined = mapDefined;
    }
  });

  // node_modules/.pnpm/@atproto+common-web@0.4.2/node_modules/@atproto/common-web/dist/async.js
  var require_async = __commonJS({
    "node_modules/.pnpm/@atproto+common-web@0.4.2/node_modules/@atproto/common-web/dist/async.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AsyncBufferFullError = exports.AsyncBuffer = exports.allComplete = exports.createDeferrables = exports.createDeferrable = exports.readFromGenerator = void 0;
      exports.allFulfilled = allFulfilled;
      exports.handleAllSettledErrors = handleAllSettledErrors;
      exports.isRejectedResult = isRejectedResult;
      exports.isFulfilledResult = isFulfilledResult;
      var util_1 = require_util13();
      var readFromGenerator = async (gen, isDone, waitFor = Promise.resolve(), maxLength = Number.MAX_SAFE_INTEGER) => {
        const evts = [];
        let bail;
        let hasBroke = false;
        const awaitDone = async () => {
          if (await isDone(evts.at(-1))) {
            return true;
          }
          const bailable = (0, util_1.bailableWait)(20);
          await bailable.wait();
          bail = bailable.bail;
          if (hasBroke)
            return false;
          return await awaitDone();
        };
        const breakOn = new Promise((resolve) => {
          waitFor.then(() => {
            awaitDone().then(() => resolve());
          });
        });
        try {
          while (evts.length < maxLength) {
            const maybeEvt = await Promise.race([gen.next(), breakOn]);
            if (!maybeEvt)
              break;
            const evt = maybeEvt;
            if (evt.done)
              break;
            evts.push(evt.value);
          }
        } finally {
          hasBroke = true;
          bail && bail();
        }
        return evts;
      };
      exports.readFromGenerator = readFromGenerator;
      var createDeferrable = () => {
        let resolve;
        const promise = new Promise((res) => {
          resolve = () => res();
        });
        return { resolve, complete: promise };
      };
      exports.createDeferrable = createDeferrable;
      var createDeferrables = (count) => {
        const list = [];
        for (let i = 0; i < count; i++) {
          list.push((0, exports.createDeferrable)());
        }
        return list;
      };
      exports.createDeferrables = createDeferrables;
      var allComplete = async (deferrables) => {
        await Promise.all(deferrables.map((d) => d.complete));
      };
      exports.allComplete = allComplete;
      var AsyncBuffer = class {
        constructor(maxSize) {
          Object.defineProperty(this, "maxSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: maxSize
          });
          Object.defineProperty(this, "buffer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
          });
          Object.defineProperty(this, "promise", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "resolve", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "closed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
          });
          Object.defineProperty(this, "toThrow", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.promise = Promise.resolve();
          this.resolve = () => null;
          this.resetPromise();
        }
        get curr() {
          return this.buffer;
        }
        get size() {
          return this.buffer.length;
        }
        get isClosed() {
          return this.closed;
        }
        resetPromise() {
          this.promise = new Promise((r) => this.resolve = r);
        }
        push(item) {
          this.buffer.push(item);
          this.resolve();
        }
        pushMany(items) {
          items.forEach((i) => this.buffer.push(i));
          this.resolve();
        }
        async *events() {
          while (true) {
            if (this.closed && this.buffer.length === 0) {
              if (this.toThrow) {
                throw this.toThrow;
              } else {
                return;
              }
            }
            await this.promise;
            if (this.toThrow) {
              throw this.toThrow;
            }
            if (this.maxSize && this.size > this.maxSize) {
              throw new AsyncBufferFullError(this.maxSize);
            }
            const [first, ...rest] = this.buffer;
            if (first) {
              this.buffer = rest;
              yield first;
            } else {
              this.resetPromise();
            }
          }
        }
        throw(err) {
          this.toThrow = err;
          this.closed = true;
          this.resolve();
        }
        close() {
          this.closed = true;
          this.resolve();
        }
      };
      exports.AsyncBuffer = AsyncBuffer;
      var AsyncBufferFullError = class extends Error {
        constructor(maxSize) {
          super(`ReachedMaxBufferSize: ${maxSize}`);
        }
      };
      exports.AsyncBufferFullError = AsyncBufferFullError;
      function allFulfilled(promises) {
        return Promise.allSettled(promises).then(handleAllSettledErrors);
      }
      function handleAllSettledErrors(results) {
        const errors = results.filter(isRejectedResult).map(extractReason);
        if (errors.length === 0) {
          return results.map(extractValue);
        }
        if (errors.length === 1) {
          throw errors[0];
        }
        throw new AggregateError(errors, `Multiple errors: ${errors.map(stringifyReason).join("\n")}`);
      }
      function isRejectedResult(result) {
        return result.status === "rejected";
      }
      function extractReason(result) {
        return result.reason;
      }
      function isFulfilledResult(result) {
        return result.status === "fulfilled";
      }
      function extractValue(result) {
        return result.value;
      }
      function stringifyReason(reason) {
        if (reason instanceof Error) {
          return reason.message;
        }
        return String(reason);
      }
    }
  });

  // node_modules/.pnpm/@atproto+common-web@0.4.2/node_modules/@atproto/common-web/dist/tid.js
  var require_tid2 = __commonJS({
    "node_modules/.pnpm/@atproto+common-web@0.4.2/node_modules/@atproto/common-web/dist/tid.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TID = void 0;
      var util_1 = require_util13();
      var TID_LEN = 13;
      var lastTimestamp = 0;
      var timestampCount = 0;
      var clockid = null;
      function dedash(str) {
        return str.replaceAll("-", "");
      }
      var TID = class _TID {
        constructor(str) {
          Object.defineProperty(this, "str", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          const noDashes = dedash(str);
          if (noDashes.length !== TID_LEN) {
            throw new Error(`Poorly formatted TID: ${noDashes.length} length`);
          }
          this.str = noDashes;
        }
        static next(prev) {
          const time = Math.max(Date.now(), lastTimestamp);
          if (time === lastTimestamp) {
            timestampCount++;
          }
          lastTimestamp = time;
          const timestamp = time * 1e3 + timestampCount;
          if (clockid === null) {
            clockid = Math.floor(Math.random() * 32);
          }
          const tid = _TID.fromTime(timestamp, clockid);
          if (!prev || tid.newerThan(prev)) {
            return tid;
          }
          return _TID.fromTime(prev.timestamp() + 1, clockid);
        }
        static nextStr(prev) {
          return _TID.next(prev ? new _TID(prev) : void 0).toString();
        }
        static fromTime(timestamp, clockid2) {
          const str = `${(0, util_1.s32encode)(timestamp)}${(0, util_1.s32encode)(clockid2).padStart(2, "2")}`;
          return new _TID(str);
        }
        static fromStr(str) {
          return new _TID(str);
        }
        static oldestFirst(a, b) {
          return a.compareTo(b);
        }
        static newestFirst(a, b) {
          return b.compareTo(a);
        }
        static is(str) {
          return dedash(str).length === TID_LEN;
        }
        timestamp() {
          return (0, util_1.s32decode)(this.str.slice(0, 11));
        }
        clockid() {
          return (0, util_1.s32decode)(this.str.slice(11, 13));
        }
        formatted() {
          const str = this.toString();
          return `${str.slice(0, 4)}-${str.slice(4, 7)}-${str.slice(7, 11)}-${str.slice(11, 13)}`;
        }
        toString() {
          return this.str;
        }
        // newer > older
        compareTo(other) {
          if (this.str > other.str)
            return 1;
          if (this.str < other.str)
            return -1;
          return 0;
        }
        equals(other) {
          return this.str === other.str;
        }
        newerThan(other) {
          return this.compareTo(other) > 0;
        }
        olderThan(other) {
          return this.compareTo(other) < 0;
        }
      };
      exports.TID = TID;
    }
  });

  // node_modules/.pnpm/uint8arrays@3.0.0/node_modules/uint8arrays/esm/src/compare.js
  function compare(a, b) {
    for (let i = 0; i < a.byteLength; i++) {
      if (a[i] < b[i]) {
        return -1;
      }
      if (a[i] > b[i]) {
        return 1;
      }
    }
    if (a.byteLength > b.byteLength) {
      return 1;
    }
    if (a.byteLength < b.byteLength) {
      return -1;
    }
    return 0;
  }
  var init_compare = __esm({
    "node_modules/.pnpm/uint8arrays@3.0.0/node_modules/uint8arrays/esm/src/compare.js"() {
    }
  });

  // node_modules/.pnpm/uint8arrays@3.0.0/node_modules/uint8arrays/esm/src/concat.js
  function concat2(arrays, length2) {
    if (!length2) {
      length2 = arrays.reduce((acc, curr) => acc + curr.length, 0);
    }
    const output = new Uint8Array(length2);
    let offset = 0;
    for (const arr of arrays) {
      output.set(arr, offset);
      offset += arr.length;
    }
    return output;
  }
  var init_concat = __esm({
    "node_modules/.pnpm/uint8arrays@3.0.0/node_modules/uint8arrays/esm/src/concat.js"() {
    }
  });

  // node_modules/.pnpm/uint8arrays@3.0.0/node_modules/uint8arrays/esm/src/equals.js
  function equals3(a, b) {
    if (a === b) {
      return true;
    }
    if (a.byteLength !== b.byteLength) {
      return false;
    }
    for (let i = 0; i < a.byteLength; i++) {
      if (a[i] !== b[i]) {
        return false;
      }
    }
    return true;
  }
  var init_equals = __esm({
    "node_modules/.pnpm/uint8arrays@3.0.0/node_modules/uint8arrays/esm/src/equals.js"() {
    }
  });

  // node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/identity.js
  var identity_exports = {};
  __export(identity_exports, {
    identity: () => identity
  });
  var identity;
  var init_identity = __esm({
    "node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/identity.js"() {
      init_base();
      init_bytes();
      identity = from({
        prefix: "\0",
        name: "identity",
        encode: (buf) => toString(buf),
        decode: (str) => fromString(str)
      });
    }
  });

  // node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base2.js
  var base2_exports = {};
  __export(base2_exports, {
    base2: () => base2
  });
  var base2;
  var init_base2 = __esm({
    "node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base2.js"() {
      init_base();
      base2 = rfc4648({
        prefix: "0",
        name: "base2",
        alphabet: "01",
        bitsPerChar: 1
      });
    }
  });

  // node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base8.js
  var base8_exports = {};
  __export(base8_exports, {
    base8: () => base8
  });
  var base8;
  var init_base8 = __esm({
    "node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base8.js"() {
      init_base();
      base8 = rfc4648({
        prefix: "7",
        name: "base8",
        alphabet: "01234567",
        bitsPerChar: 3
      });
    }
  });

  // node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base10.js
  var base10_exports = {};
  __export(base10_exports, {
    base10: () => base10
  });
  var base10;
  var init_base10 = __esm({
    "node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base10.js"() {
      init_base();
      base10 = baseX({
        prefix: "9",
        name: "base10",
        alphabet: "0123456789"
      });
    }
  });

  // node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base16.js
  var base16_exports = {};
  __export(base16_exports, {
    base16: () => base16,
    base16upper: () => base16upper
  });
  var base16, base16upper;
  var init_base16 = __esm({
    "node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base16.js"() {
      init_base();
      base16 = rfc4648({
        prefix: "f",
        name: "base16",
        alphabet: "0123456789abcdef",
        bitsPerChar: 4
      });
      base16upper = rfc4648({
        prefix: "F",
        name: "base16upper",
        alphabet: "0123456789ABCDEF",
        bitsPerChar: 4
      });
    }
  });

  // node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base36.js
  var base36_exports = {};
  __export(base36_exports, {
    base36: () => base36,
    base36upper: () => base36upper
  });
  var base36, base36upper;
  var init_base36 = __esm({
    "node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base36.js"() {
      init_base();
      base36 = baseX({
        prefix: "k",
        name: "base36",
        alphabet: "0123456789abcdefghijklmnopqrstuvwxyz"
      });
      base36upper = baseX({
        prefix: "K",
        name: "base36upper",
        alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      });
    }
  });

  // node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base256emoji.js
  var base256emoji_exports = {};
  __export(base256emoji_exports, {
    base256emoji: () => base256emoji
  });
  function encode5(data) {
    return data.reduce((p, c) => {
      p += alphabetBytesToChars[c];
      return p;
    }, "");
  }
  function decode7(str) {
    const byts = [];
    for (const char of str) {
      const byt = alphabetCharsToBytes[char.codePointAt(0)];
      if (byt === void 0) {
        throw new Error(`Non-base256emoji character: ${char}`);
      }
      byts.push(byt);
    }
    return new Uint8Array(byts);
  }
  var alphabet, alphabetBytesToChars, alphabetCharsToBytes, base256emoji;
  var init_base256emoji = __esm({
    "node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base256emoji.js"() {
      init_base();
      alphabet = Array.from("\u{1F680}\u{1FA90}\u2604\u{1F6F0}\u{1F30C}\u{1F311}\u{1F312}\u{1F313}\u{1F314}\u{1F315}\u{1F316}\u{1F317}\u{1F318}\u{1F30D}\u{1F30F}\u{1F30E}\u{1F409}\u2600\u{1F4BB}\u{1F5A5}\u{1F4BE}\u{1F4BF}\u{1F602}\u2764\u{1F60D}\u{1F923}\u{1F60A}\u{1F64F}\u{1F495}\u{1F62D}\u{1F618}\u{1F44D}\u{1F605}\u{1F44F}\u{1F601}\u{1F525}\u{1F970}\u{1F494}\u{1F496}\u{1F499}\u{1F622}\u{1F914}\u{1F606}\u{1F644}\u{1F4AA}\u{1F609}\u263A\u{1F44C}\u{1F917}\u{1F49C}\u{1F614}\u{1F60E}\u{1F607}\u{1F339}\u{1F926}\u{1F389}\u{1F49E}\u270C\u2728\u{1F937}\u{1F631}\u{1F60C}\u{1F338}\u{1F64C}\u{1F60B}\u{1F497}\u{1F49A}\u{1F60F}\u{1F49B}\u{1F642}\u{1F493}\u{1F929}\u{1F604}\u{1F600}\u{1F5A4}\u{1F603}\u{1F4AF}\u{1F648}\u{1F447}\u{1F3B6}\u{1F612}\u{1F92D}\u2763\u{1F61C}\u{1F48B}\u{1F440}\u{1F62A}\u{1F611}\u{1F4A5}\u{1F64B}\u{1F61E}\u{1F629}\u{1F621}\u{1F92A}\u{1F44A}\u{1F973}\u{1F625}\u{1F924}\u{1F449}\u{1F483}\u{1F633}\u270B\u{1F61A}\u{1F61D}\u{1F634}\u{1F31F}\u{1F62C}\u{1F643}\u{1F340}\u{1F337}\u{1F63B}\u{1F613}\u2B50\u2705\u{1F97A}\u{1F308}\u{1F608}\u{1F918}\u{1F4A6}\u2714\u{1F623}\u{1F3C3}\u{1F490}\u2639\u{1F38A}\u{1F498}\u{1F620}\u261D\u{1F615}\u{1F33A}\u{1F382}\u{1F33B}\u{1F610}\u{1F595}\u{1F49D}\u{1F64A}\u{1F639}\u{1F5E3}\u{1F4AB}\u{1F480}\u{1F451}\u{1F3B5}\u{1F91E}\u{1F61B}\u{1F534}\u{1F624}\u{1F33C}\u{1F62B}\u26BD\u{1F919}\u2615\u{1F3C6}\u{1F92B}\u{1F448}\u{1F62E}\u{1F646}\u{1F37B}\u{1F343}\u{1F436}\u{1F481}\u{1F632}\u{1F33F}\u{1F9E1}\u{1F381}\u26A1\u{1F31E}\u{1F388}\u274C\u270A\u{1F44B}\u{1F630}\u{1F928}\u{1F636}\u{1F91D}\u{1F6B6}\u{1F4B0}\u{1F353}\u{1F4A2}\u{1F91F}\u{1F641}\u{1F6A8}\u{1F4A8}\u{1F92C}\u2708\u{1F380}\u{1F37A}\u{1F913}\u{1F619}\u{1F49F}\u{1F331}\u{1F616}\u{1F476}\u{1F974}\u25B6\u27A1\u2753\u{1F48E}\u{1F4B8}\u2B07\u{1F628}\u{1F31A}\u{1F98B}\u{1F637}\u{1F57A}\u26A0\u{1F645}\u{1F61F}\u{1F635}\u{1F44E}\u{1F932}\u{1F920}\u{1F927}\u{1F4CC}\u{1F535}\u{1F485}\u{1F9D0}\u{1F43E}\u{1F352}\u{1F617}\u{1F911}\u{1F30A}\u{1F92F}\u{1F437}\u260E\u{1F4A7}\u{1F62F}\u{1F486}\u{1F446}\u{1F3A4}\u{1F647}\u{1F351}\u2744\u{1F334}\u{1F4A3}\u{1F438}\u{1F48C}\u{1F4CD}\u{1F940}\u{1F922}\u{1F445}\u{1F4A1}\u{1F4A9}\u{1F450}\u{1F4F8}\u{1F47B}\u{1F910}\u{1F92E}\u{1F3BC}\u{1F975}\u{1F6A9}\u{1F34E}\u{1F34A}\u{1F47C}\u{1F48D}\u{1F4E3}\u{1F942}");
      alphabetBytesToChars = alphabet.reduce((p, c, i) => {
        p[i] = c;
        return p;
      }, []);
      alphabetCharsToBytes = alphabet.reduce((p, c, i) => {
        p[c.codePointAt(0)] = i;
        return p;
      }, []);
      base256emoji = from({
        prefix: "\u{1F680}",
        name: "base256emoji",
        encode: encode5,
        decode: decode7
      });
    }
  });

  // node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/hashes/hasher.js
  var from2, Hasher;
  var init_hasher = __esm({
    "node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/hashes/hasher.js"() {
      init_digest2();
      from2 = ({ name: name2, code: code2, encode: encode7 }) => new Hasher(name2, code2, encode7);
      Hasher = class {
        constructor(name2, code2, encode7) {
          this.name = name2;
          this.code = code2;
          this.encode = encode7;
        }
        digest(input) {
          if (input instanceof Uint8Array) {
            const result = this.encode(input);
            return result instanceof Uint8Array ? create(this.code, result) : result.then((digest3) => create(this.code, digest3));
          } else {
            throw Error("Unknown type, must be binary type");
          }
        }
      };
    }
  });

  // node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/hashes/sha2-browser.js
  var sha2_browser_exports = {};
  __export(sha2_browser_exports, {
    sha256: () => sha256,
    sha512: () => sha512
  });
  var sha, sha256, sha512;
  var init_sha2_browser = __esm({
    "node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/hashes/sha2-browser.js"() {
      init_hasher();
      sha = (name2) => async (data) => new Uint8Array(await crypto.subtle.digest(name2, data));
      sha256 = from2({
        name: "sha2-256",
        code: 18,
        encode: sha("SHA-256")
      });
      sha512 = from2({
        name: "sha2-512",
        code: 19,
        encode: sha("SHA-512")
      });
    }
  });

  // node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/hashes/identity.js
  var identity_exports2 = {};
  __export(identity_exports2, {
    identity: () => identity2
  });
  var code, name, encode6, digest2, identity2;
  var init_identity2 = __esm({
    "node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/hashes/identity.js"() {
      init_bytes();
      init_digest2();
      code = 0;
      name = "identity";
      encode6 = coerce;
      digest2 = (input) => create(code, encode6(input));
      identity2 = {
        code,
        name,
        encode: encode6,
        digest: digest2
      };
    }
  });

  // node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/codecs/raw.js
  var init_raw = __esm({
    "node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/codecs/raw.js"() {
      init_bytes();
    }
  });

  // node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/codecs/json.js
  var textEncoder, textDecoder;
  var init_json = __esm({
    "node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/codecs/json.js"() {
      textEncoder = new TextEncoder();
      textDecoder = new TextDecoder();
    }
  });

  // node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/index.js
  var init_src = __esm({
    "node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/index.js"() {
      init_cid();
      init_varint2();
      init_bytes();
      init_hasher();
      init_digest2();
    }
  });

  // node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/basics.js
  var bases, hashes;
  var init_basics = __esm({
    "node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/basics.js"() {
      init_identity();
      init_base2();
      init_base8();
      init_base10();
      init_base16();
      init_base32();
      init_base36();
      init_base58();
      init_base64();
      init_base256emoji();
      init_sha2_browser();
      init_identity2();
      init_raw();
      init_json();
      init_src();
      bases = {
        ...identity_exports,
        ...base2_exports,
        ...base8_exports,
        ...base10_exports,
        ...base16_exports,
        ...base32_exports,
        ...base36_exports,
        ...base58_exports,
        ...base64_exports,
        ...base256emoji_exports
      };
      hashes = {
        ...sha2_browser_exports,
        ...identity_exports2
      };
    }
  });

  // node_modules/.pnpm/uint8arrays@3.0.0/node_modules/uint8arrays/esm/src/util/bases.js
  function createCodec(name2, prefix, encode7, decode8) {
    return {
      name: name2,
      prefix,
      encoder: {
        name: name2,
        prefix,
        encode: encode7
      },
      decoder: { decode: decode8 }
    };
  }
  var string, ascii, BASES, bases_default;
  var init_bases = __esm({
    "node_modules/.pnpm/uint8arrays@3.0.0/node_modules/uint8arrays/esm/src/util/bases.js"() {
      init_basics();
      string = createCodec("utf8", "u", (buf) => {
        const decoder2 = new TextDecoder("utf8");
        return "u" + decoder2.decode(buf);
      }, (str) => {
        const encoder2 = new TextEncoder();
        return encoder2.encode(str.substring(1));
      });
      ascii = createCodec("ascii", "a", (buf) => {
        let string2 = "a";
        for (let i = 0; i < buf.length; i++) {
          string2 += String.fromCharCode(buf[i]);
        }
        return string2;
      }, (str) => {
        str = str.substring(1);
        const buf = new Uint8Array(str.length);
        for (let i = 0; i < str.length; i++) {
          buf[i] = str.charCodeAt(i);
        }
        return buf;
      });
      BASES = {
        utf8: string,
        "utf-8": string,
        hex: bases.base16,
        latin1: ascii,
        ascii,
        binary: ascii,
        ...bases
      };
      bases_default = BASES;
    }
  });

  // node_modules/.pnpm/uint8arrays@3.0.0/node_modules/uint8arrays/esm/src/from-string.js
  function fromString2(string2, encoding = "utf8") {
    const base3 = bases_default[encoding];
    if (!base3) {
      throw new Error(`Unsupported encoding "${encoding}"`);
    }
    return base3.decoder.decode(`${base3.prefix}${string2}`);
  }
  var init_from_string = __esm({
    "node_modules/.pnpm/uint8arrays@3.0.0/node_modules/uint8arrays/esm/src/from-string.js"() {
      init_bases();
    }
  });

  // node_modules/.pnpm/uint8arrays@3.0.0/node_modules/uint8arrays/esm/src/to-string.js
  function toString2(array, encoding = "utf8") {
    const base3 = bases_default[encoding];
    if (!base3) {
      throw new Error(`Unsupported encoding "${encoding}"`);
    }
    return base3.encoder.encode(array).substring(1);
  }
  var init_to_string = __esm({
    "node_modules/.pnpm/uint8arrays@3.0.0/node_modules/uint8arrays/esm/src/to-string.js"() {
      init_bases();
    }
  });

  // node_modules/.pnpm/uint8arrays@3.0.0/node_modules/uint8arrays/esm/src/xor.js
  function xor(a, b) {
    if (a.length !== b.length) {
      throw new Error("Inputs should have the same length");
    }
    const result = new Uint8Array(a.length);
    for (let i = 0; i < a.length; i++) {
      result[i] = a[i] ^ b[i];
    }
    return result;
  }
  var init_xor = __esm({
    "node_modules/.pnpm/uint8arrays@3.0.0/node_modules/uint8arrays/esm/src/xor.js"() {
    }
  });

  // node_modules/.pnpm/uint8arrays@3.0.0/node_modules/uint8arrays/esm/src/index.js
  var src_exports = {};
  __export(src_exports, {
    compare: () => compare,
    concat: () => concat2,
    equals: () => equals3,
    fromString: () => fromString2,
    toString: () => toString2,
    xor: () => xor
  });
  var init_src2 = __esm({
    "node_modules/.pnpm/uint8arrays@3.0.0/node_modules/uint8arrays/esm/src/index.js"() {
      init_compare();
      init_concat();
      init_equals();
      init_from_string();
      init_to_string();
      init_xor();
    }
  });

  // node_modules/.pnpm/@atproto+common-web@0.4.2/node_modules/@atproto/common-web/dist/ipld.js
  var require_ipld = __commonJS({
    "node_modules/.pnpm/@atproto+common-web@0.4.2/node_modules/@atproto/common-web/dist/ipld.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
        var ownKeys = function(o) {
          ownKeys = Object.getOwnPropertyNames || function(o2) {
            var ar = [];
            for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
            return ar;
          };
          return ownKeys(o);
        };
        return function(mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      }();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ipldEquals = exports.ipldToJson = exports.jsonToIpld = void 0;
      var cid_1 = (init_cid(), __toCommonJS(cid_exports));
      var ui8 = __importStar((init_src2(), __toCommonJS(src_exports)));
      var jsonToIpld = (val) => {
        if (Array.isArray(val)) {
          return val.map((item) => (0, exports.jsonToIpld)(item));
        }
        if (val && typeof val === "object") {
          if (typeof val["$link"] === "string" && Object.keys(val).length === 1) {
            return cid_1.CID.parse(val["$link"]);
          }
          if (typeof val["$bytes"] === "string" && Object.keys(val).length === 1) {
            return ui8.fromString(val["$bytes"], "base64");
          }
          const toReturn = {};
          for (const key of Object.keys(val)) {
            toReturn[key] = (0, exports.jsonToIpld)(val[key]);
          }
          return toReturn;
        }
        return val;
      };
      exports.jsonToIpld = jsonToIpld;
      var ipldToJson = (val) => {
        if (Array.isArray(val)) {
          return val.map((item) => (0, exports.ipldToJson)(item));
        }
        if (val && typeof val === "object") {
          if (val instanceof Uint8Array) {
            return {
              $bytes: ui8.toString(val, "base64")
            };
          }
          if (cid_1.CID.asCID(val)) {
            return {
              $link: val.toString()
            };
          }
          const toReturn = {};
          for (const key of Object.keys(val)) {
            toReturn[key] = (0, exports.ipldToJson)(val[key]);
          }
          return toReturn;
        }
        return val;
      };
      exports.ipldToJson = ipldToJson;
      var ipldEquals = (a, b) => {
        if (Array.isArray(a) && Array.isArray(b)) {
          if (a.length !== b.length)
            return false;
          for (let i = 0; i < a.length; i++) {
            if (!(0, exports.ipldEquals)(a[i], b[i]))
              return false;
          }
          return true;
        }
        if (a && b && typeof a === "object" && typeof b === "object") {
          if (a instanceof Uint8Array && b instanceof Uint8Array) {
            return ui8.equals(a, b);
          }
          if (cid_1.CID.asCID(a) && cid_1.CID.asCID(b)) {
            return cid_1.CID.asCID(a)?.equals(cid_1.CID.asCID(b));
          }
          if (Object.keys(a).length !== Object.keys(b).length)
            return false;
          for (const key of Object.keys(a)) {
            if (!(0, exports.ipldEquals)(a[key], b[key]))
              return false;
          }
          return true;
        }
        return a === b;
      };
      exports.ipldEquals = ipldEquals;
    }
  });

  // node_modules/.pnpm/@atproto+common-web@0.4.2/node_modules/@atproto/common-web/dist/retry.js
  var require_retry = __commonJS({
    "node_modules/.pnpm/@atproto+common-web@0.4.2/node_modules/@atproto/common-web/dist/retry.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.retry = retry;
      exports.createRetryable = createRetryable;
      exports.backoffMs = backoffMs;
      var util_1 = require_util13();
      async function retry(fn, opts = {}) {
        const { maxRetries = 3, retryable = () => true, getWaitMs = backoffMs } = opts;
        let retries = 0;
        let doneError;
        while (!doneError) {
          try {
            return await fn();
          } catch (err) {
            const waitMs = getWaitMs(retries);
            const willRetry = retries < maxRetries && waitMs !== null && retryable(err);
            if (willRetry) {
              retries += 1;
              if (waitMs !== 0) {
                await (0, util_1.wait)(waitMs);
              }
            } else {
              doneError = err;
            }
          }
        }
        throw doneError;
      }
      function createRetryable(retryable) {
        return async (fn, opts) => retry(fn, { ...opts, retryable });
      }
      function backoffMs(n, multiplier = 100, max = 1e3) {
        const exponentialMs = Math.pow(2, n) * multiplier;
        const ms = Math.min(exponentialMs, max);
        return jitter(ms);
      }
      function jitter(value) {
        const delta = value * 0.15;
        return value + randomRange(-delta, delta);
      }
      function randomRange(from3, to) {
        const rand = Math.random() * (to - from3);
        return rand + from3;
      }
    }
  });

  // node_modules/.pnpm/@atproto+common-web@0.4.2/node_modules/@atproto/common-web/dist/types.js
  var require_types5 = __commonJS({
    "node_modules/.pnpm/@atproto+common-web@0.4.2/node_modules/@atproto/common-web/dist/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.def = exports.schema = void 0;
      var cid_1 = (init_cid(), __toCommonJS(cid_exports));
      var zod_1 = require_cjs();
      var cidSchema = zod_1.z.unknown().transform((obj, ctx) => {
        const cid = cid_1.CID.asCID(obj);
        if (cid == null) {
          ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: "Not a valid CID"
          });
          return zod_1.z.NEVER;
        }
        return cid;
      });
      var carHeader = zod_1.z.object({
        version: zod_1.z.literal(1),
        roots: zod_1.z.array(cidSchema)
      });
      exports.schema = {
        cid: cidSchema,
        carHeader,
        bytes: zod_1.z.instanceof(Uint8Array),
        string: zod_1.z.string(),
        array: zod_1.z.array(zod_1.z.unknown()),
        map: zod_1.z.record(zod_1.z.string(), zod_1.z.unknown()),
        unknown: zod_1.z.unknown()
      };
      exports.def = {
        cid: {
          name: "cid",
          schema: exports.schema.cid
        },
        carHeader: {
          name: "CAR header",
          schema: exports.schema.carHeader
        },
        bytes: {
          name: "bytes",
          schema: exports.schema.bytes
        },
        string: {
          name: "string",
          schema: exports.schema.string
        },
        map: {
          name: "map",
          schema: exports.schema.map
        },
        unknown: {
          name: "unknown",
          schema: exports.schema.unknown
        }
      };
    }
  });

  // node_modules/.pnpm/@atproto+common-web@0.4.2/node_modules/@atproto/common-web/dist/times.js
  var require_times = __commonJS({
    "node_modules/.pnpm/@atproto+common-web@0.4.2/node_modules/@atproto/common-web/dist/times.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.addHoursToDate = exports.lessThanAgoMs = exports.DAY = exports.HOUR = exports.MINUTE = exports.SECOND = void 0;
      exports.SECOND = 1e3;
      exports.MINUTE = exports.SECOND * 60;
      exports.HOUR = exports.MINUTE * 60;
      exports.DAY = exports.HOUR * 24;
      var lessThanAgoMs = (time, range) => {
        return Date.now() < time.getTime() + range;
      };
      exports.lessThanAgoMs = lessThanAgoMs;
      var addHoursToDate = (hours, startingDate) => {
        const currentDate = startingDate ? new Date(startingDate) : /* @__PURE__ */ new Date();
        currentDate.setHours(currentDate.getHours() + hours);
        return currentDate;
      };
      exports.addHoursToDate = addHoursToDate;
    }
  });

  // node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/boundaries.js
  var require_boundaries = __commonJS({
    "node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/boundaries.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.EXTENDED_PICTOGRAPHIC = exports.CLUSTER_BREAK = void 0;
      var CLUSTER_BREAK;
      (function(CLUSTER_BREAK2) {
        CLUSTER_BREAK2[CLUSTER_BREAK2["CR"] = 0] = "CR";
        CLUSTER_BREAK2[CLUSTER_BREAK2["LF"] = 1] = "LF";
        CLUSTER_BREAK2[CLUSTER_BREAK2["CONTROL"] = 2] = "CONTROL";
        CLUSTER_BREAK2[CLUSTER_BREAK2["EXTEND"] = 3] = "EXTEND";
        CLUSTER_BREAK2[CLUSTER_BREAK2["REGIONAL_INDICATOR"] = 4] = "REGIONAL_INDICATOR";
        CLUSTER_BREAK2[CLUSTER_BREAK2["SPACINGMARK"] = 5] = "SPACINGMARK";
        CLUSTER_BREAK2[CLUSTER_BREAK2["L"] = 6] = "L";
        CLUSTER_BREAK2[CLUSTER_BREAK2["V"] = 7] = "V";
        CLUSTER_BREAK2[CLUSTER_BREAK2["T"] = 8] = "T";
        CLUSTER_BREAK2[CLUSTER_BREAK2["LV"] = 9] = "LV";
        CLUSTER_BREAK2[CLUSTER_BREAK2["LVT"] = 10] = "LVT";
        CLUSTER_BREAK2[CLUSTER_BREAK2["OTHER"] = 11] = "OTHER";
        CLUSTER_BREAK2[CLUSTER_BREAK2["PREPEND"] = 12] = "PREPEND";
        CLUSTER_BREAK2[CLUSTER_BREAK2["E_BASE"] = 13] = "E_BASE";
        CLUSTER_BREAK2[CLUSTER_BREAK2["E_MODIFIER"] = 14] = "E_MODIFIER";
        CLUSTER_BREAK2[CLUSTER_BREAK2["ZWJ"] = 15] = "ZWJ";
        CLUSTER_BREAK2[CLUSTER_BREAK2["GLUE_AFTER_ZWJ"] = 16] = "GLUE_AFTER_ZWJ";
        CLUSTER_BREAK2[CLUSTER_BREAK2["E_BASE_GAZ"] = 17] = "E_BASE_GAZ";
      })(CLUSTER_BREAK = exports.CLUSTER_BREAK || (exports.CLUSTER_BREAK = {}));
      exports.EXTENDED_PICTOGRAPHIC = 101;
    }
  });

  // node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/GraphemerHelper.js
  var require_GraphemerHelper = __commonJS({
    "node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/GraphemerHelper.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var boundaries_1 = require_boundaries();
      var NotBreak = 0;
      var BreakStart = 1;
      var Break = 2;
      var BreakLastRegional = 3;
      var BreakPenultimateRegional = 4;
      var GraphemerHelper = class {
        /**
         * Check if the the character at the position {pos} of the string is surrogate
         * @param str {string}
         * @param pos {number}
         * @returns {boolean}
         */
        static isSurrogate(str, pos) {
          return 55296 <= str.charCodeAt(pos) && str.charCodeAt(pos) <= 56319 && 56320 <= str.charCodeAt(pos + 1) && str.charCodeAt(pos + 1) <= 57343;
        }
        /**
         * The String.prototype.codePointAt polyfill
         * Private function, gets a Unicode code point from a JavaScript UTF-16 string
         * handling surrogate pairs appropriately
         * @param str {string}
         * @param idx {number}
         * @returns {number}
         */
        static codePointAt(str, idx) {
          if (idx === void 0) {
            idx = 0;
          }
          const code2 = str.charCodeAt(idx);
          if (55296 <= code2 && code2 <= 56319 && idx < str.length - 1) {
            const hi = code2;
            const low = str.charCodeAt(idx + 1);
            if (56320 <= low && low <= 57343) {
              return (hi - 55296) * 1024 + (low - 56320) + 65536;
            }
            return hi;
          }
          if (56320 <= code2 && code2 <= 57343 && idx >= 1) {
            const hi = str.charCodeAt(idx - 1);
            const low = code2;
            if (55296 <= hi && hi <= 56319) {
              return (hi - 55296) * 1024 + (low - 56320) + 65536;
            }
            return low;
          }
          return code2;
        }
        //
        /**
         * Private function, returns whether a break is allowed between the two given grapheme breaking classes
         * Implemented the UAX #29 3.1.1 Grapheme Cluster Boundary Rules on extended grapheme clusters
         * @param start {number}
         * @param mid {Array<number>}
         * @param end {number}
         * @param startEmoji {number}
         * @param midEmoji {Array<number>}
         * @param endEmoji {number}
         * @returns {number}
         */
        static shouldBreak(start, mid, end, startEmoji, midEmoji, endEmoji) {
          const all = [start].concat(mid).concat([end]);
          const allEmoji = [startEmoji].concat(midEmoji).concat([endEmoji]);
          const previous = all[all.length - 2];
          const next = end;
          const nextEmoji = endEmoji;
          const rIIndex = all.lastIndexOf(boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR);
          if (rIIndex > 0 && all.slice(1, rIIndex).every(function(c) {
            return c === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;
          }) && [boundaries_1.CLUSTER_BREAK.PREPEND, boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR].indexOf(previous) === -1) {
            if (all.filter(function(c) {
              return c === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;
            }).length % 2 === 1) {
              return BreakLastRegional;
            } else {
              return BreakPenultimateRegional;
            }
          }
          if (previous === boundaries_1.CLUSTER_BREAK.CR && next === boundaries_1.CLUSTER_BREAK.LF) {
            return NotBreak;
          } else if (previous === boundaries_1.CLUSTER_BREAK.CONTROL || previous === boundaries_1.CLUSTER_BREAK.CR || previous === boundaries_1.CLUSTER_BREAK.LF) {
            return BreakStart;
          } else if (next === boundaries_1.CLUSTER_BREAK.CONTROL || next === boundaries_1.CLUSTER_BREAK.CR || next === boundaries_1.CLUSTER_BREAK.LF) {
            return BreakStart;
          } else if (previous === boundaries_1.CLUSTER_BREAK.L && (next === boundaries_1.CLUSTER_BREAK.L || next === boundaries_1.CLUSTER_BREAK.V || next === boundaries_1.CLUSTER_BREAK.LV || next === boundaries_1.CLUSTER_BREAK.LVT)) {
            return NotBreak;
          } else if ((previous === boundaries_1.CLUSTER_BREAK.LV || previous === boundaries_1.CLUSTER_BREAK.V) && (next === boundaries_1.CLUSTER_BREAK.V || next === boundaries_1.CLUSTER_BREAK.T)) {
            return NotBreak;
          } else if ((previous === boundaries_1.CLUSTER_BREAK.LVT || previous === boundaries_1.CLUSTER_BREAK.T) && next === boundaries_1.CLUSTER_BREAK.T) {
            return NotBreak;
          } else if (next === boundaries_1.CLUSTER_BREAK.EXTEND || next === boundaries_1.CLUSTER_BREAK.ZWJ) {
            return NotBreak;
          } else if (next === boundaries_1.CLUSTER_BREAK.SPACINGMARK) {
            return NotBreak;
          } else if (previous === boundaries_1.CLUSTER_BREAK.PREPEND) {
            return NotBreak;
          }
          const previousNonExtendIndex = allEmoji.slice(0, -1).lastIndexOf(boundaries_1.EXTENDED_PICTOGRAPHIC);
          if (previousNonExtendIndex !== -1 && allEmoji[previousNonExtendIndex] === boundaries_1.EXTENDED_PICTOGRAPHIC && all.slice(previousNonExtendIndex + 1, -2).every(function(c) {
            return c === boundaries_1.CLUSTER_BREAK.EXTEND;
          }) && previous === boundaries_1.CLUSTER_BREAK.ZWJ && nextEmoji === boundaries_1.EXTENDED_PICTOGRAPHIC) {
            return NotBreak;
          }
          if (mid.indexOf(boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR) !== -1) {
            return Break;
          }
          if (previous === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR && next === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR) {
            return NotBreak;
          }
          return BreakStart;
        }
      };
      exports.default = GraphemerHelper;
    }
  });

  // node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/GraphemerIterator.js
  var require_GraphemerIterator = __commonJS({
    "node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/GraphemerIterator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var GraphemerIterator = class {
        constructor(str, nextBreak) {
          this._index = 0;
          this._str = str;
          this._nextBreak = nextBreak;
        }
        [Symbol.iterator]() {
          return this;
        }
        next() {
          let brk;
          if ((brk = this._nextBreak(this._str, this._index)) < this._str.length) {
            const value = this._str.slice(this._index, brk);
            this._index = brk;
            return { value, done: false };
          }
          if (this._index < this._str.length) {
            const value = this._str.slice(this._index);
            this._index = this._str.length;
            return { value, done: false };
          }
          return { value: void 0, done: true };
        }
      };
      exports.default = GraphemerIterator;
    }
  });

  // node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/Graphemer.js
  var require_Graphemer = __commonJS({
    "node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/Graphemer.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var boundaries_1 = require_boundaries();
      var GraphemerHelper_1 = __importDefault(require_GraphemerHelper());
      var GraphemerIterator_1 = __importDefault(require_GraphemerIterator());
      var Graphemer = class _Graphemer {
        /**
         * Returns the next grapheme break in the string after the given index
         * @param string {string}
         * @param index {number}
         * @returns {number}
         */
        static nextBreak(string2, index) {
          if (index === void 0) {
            index = 0;
          }
          if (index < 0) {
            return 0;
          }
          if (index >= string2.length - 1) {
            return string2.length;
          }
          const prevCP = GraphemerHelper_1.default.codePointAt(string2, index);
          const prev = _Graphemer.getGraphemeBreakProperty(prevCP);
          const prevEmoji = _Graphemer.getEmojiProperty(prevCP);
          const mid = [];
          const midEmoji = [];
          for (let i = index + 1; i < string2.length; i++) {
            if (GraphemerHelper_1.default.isSurrogate(string2, i - 1)) {
              continue;
            }
            const nextCP = GraphemerHelper_1.default.codePointAt(string2, i);
            const next = _Graphemer.getGraphemeBreakProperty(nextCP);
            const nextEmoji = _Graphemer.getEmojiProperty(nextCP);
            if (GraphemerHelper_1.default.shouldBreak(prev, mid, next, prevEmoji, midEmoji, nextEmoji)) {
              return i;
            }
            mid.push(next);
            midEmoji.push(nextEmoji);
          }
          return string2.length;
        }
        /**
         * Breaks the given string into an array of grapheme clusters
         * @param str {string}
         * @returns {string[]}
         */
        splitGraphemes(str) {
          const res = [];
          let index = 0;
          let brk;
          while ((brk = _Graphemer.nextBreak(str, index)) < str.length) {
            res.push(str.slice(index, brk));
            index = brk;
          }
          if (index < str.length) {
            res.push(str.slice(index));
          }
          return res;
        }
        /**
         * Returns an iterator of grapheme clusters in the given string
         * @param str {string}
         * @returns {GraphemerIterator}
         */
        iterateGraphemes(str) {
          return new GraphemerIterator_1.default(str, _Graphemer.nextBreak);
        }
        /**
         * Returns the number of grapheme clusters in the given string
         * @param str {string}
         * @returns {number}
         */
        countGraphemes(str) {
          let count = 0;
          let index = 0;
          let brk;
          while ((brk = _Graphemer.nextBreak(str, index)) < str.length) {
            index = brk;
            count++;
          }
          if (index < str.length) {
            count++;
          }
          return count;
        }
        /**
         * Given a Unicode code point, determines this symbol's grapheme break property
         * @param code {number} Unicode code point
         * @returns {number}
         */
        static getGraphemeBreakProperty(code2) {
          if (code2 < 48905) {
            if (code2 < 44116) {
              if (code2 < 4141) {
                if (code2 < 2818) {
                  if (code2 < 2363) {
                    if (code2 < 1759) {
                      if (code2 < 1471) {
                        if (code2 < 127) {
                          if (code2 < 11) {
                            if (code2 < 10) {
                              if (0 <= code2 && code2 <= 9) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            } else {
                              if (10 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LF;
                              }
                            }
                          } else {
                            if (code2 < 13) {
                              if (11 <= code2 && code2 <= 12) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            } else {
                              if (code2 < 14) {
                                if (13 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.CR;
                                }
                              } else {
                                if (14 <= code2 && code2 <= 31) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 768) {
                            if (code2 < 173) {
                              if (127 <= code2 && code2 <= 159) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            } else {
                              if (173 === code2) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            }
                          } else {
                            if (code2 < 1155) {
                              if (768 <= code2 && code2 <= 879) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 1425) {
                                if (1155 <= code2 && code2 <= 1161) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (1425 <= code2 && code2 <= 1469) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 1552) {
                          if (code2 < 1476) {
                            if (code2 < 1473) {
                              if (1471 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (1473 <= code2 && code2 <= 1474) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 1479) {
                              if (1476 <= code2 && code2 <= 1477) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 1536) {
                                if (1479 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (1536 <= code2 && code2 <= 1541) {
                                  return boundaries_1.CLUSTER_BREAK.PREPEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 1648) {
                            if (code2 < 1564) {
                              if (1552 <= code2 && code2 <= 1562) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 1611) {
                                if (1564 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL;
                                }
                              } else {
                                if (1611 <= code2 && code2 <= 1631) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 1750) {
                              if (1648 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 1757) {
                                if (1750 <= code2 && code2 <= 1756) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (1757 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.PREPEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 2075) {
                        if (code2 < 1840) {
                          if (code2 < 1770) {
                            if (code2 < 1767) {
                              if (1759 <= code2 && code2 <= 1764) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (1767 <= code2 && code2 <= 1768) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 1807) {
                              if (1770 <= code2 && code2 <= 1773) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (1807 === code2) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND;
                              }
                              if (1809 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 2027) {
                            if (code2 < 1958) {
                              if (1840 <= code2 && code2 <= 1866) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (1958 <= code2 && code2 <= 1968) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 2045) {
                              if (2027 <= code2 && code2 <= 2035) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2070) {
                                if (2045 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2070 <= code2 && code2 <= 2073) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 2200) {
                          if (code2 < 2089) {
                            if (code2 < 2085) {
                              if (2075 <= code2 && code2 <= 2083) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (2085 <= code2 && code2 <= 2087) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 2137) {
                              if (2089 <= code2 && code2 <= 2093) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2192) {
                                if (2137 <= code2 && code2 <= 2139) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2192 <= code2 && code2 <= 2193) {
                                  return boundaries_1.CLUSTER_BREAK.PREPEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 2275) {
                            if (code2 < 2250) {
                              if (2200 <= code2 && code2 <= 2207) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2274) {
                                if (2250 <= code2 && code2 <= 2273) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2274 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.PREPEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 2307) {
                              if (2275 <= code2 && code2 <= 2306) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (2307 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                              if (2362 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 2561) {
                      if (code2 < 2434) {
                        if (code2 < 2381) {
                          if (code2 < 2366) {
                            if (2363 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (2364 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 2369) {
                              if (2366 <= code2 && code2 <= 2368) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 2377) {
                                if (2369 <= code2 && code2 <= 2376) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2377 <= code2 && code2 <= 2380) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 2385) {
                            if (code2 < 2382) {
                              if (2381 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (2382 <= code2 && code2 <= 2383) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 2402) {
                              if (2385 <= code2 && code2 <= 2391) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2433) {
                                if (2402 <= code2 && code2 <= 2403) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2433 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 2503) {
                          if (code2 < 2494) {
                            if (code2 < 2492) {
                              if (2434 <= code2 && code2 <= 2435) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (2492 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 2495) {
                              if (2494 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2497) {
                                if (2495 <= code2 && code2 <= 2496) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (2497 <= code2 && code2 <= 2500) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 2519) {
                            if (code2 < 2507) {
                              if (2503 <= code2 && code2 <= 2504) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 2509) {
                                if (2507 <= code2 && code2 <= 2508) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (2509 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 2530) {
                              if (2519 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2558) {
                                if (2530 <= code2 && code2 <= 2531) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2558 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 2691) {
                        if (code2 < 2631) {
                          if (code2 < 2620) {
                            if (code2 < 2563) {
                              if (2561 <= code2 && code2 <= 2562) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (2563 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 2622) {
                              if (2620 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2625) {
                                if (2622 <= code2 && code2 <= 2624) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (2625 <= code2 && code2 <= 2626) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 2672) {
                            if (code2 < 2635) {
                              if (2631 <= code2 && code2 <= 2632) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2641) {
                                if (2635 <= code2 && code2 <= 2637) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2641 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 2677) {
                              if (2672 <= code2 && code2 <= 2673) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2689) {
                                if (2677 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2689 <= code2 && code2 <= 2690) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 2761) {
                          if (code2 < 2750) {
                            if (2691 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (2748 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 2753) {
                              if (2750 <= code2 && code2 <= 2752) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 2759) {
                                if (2753 <= code2 && code2 <= 2757) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2759 <= code2 && code2 <= 2760) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 2786) {
                            if (code2 < 2763) {
                              if (2761 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 2765) {
                                if (2763 <= code2 && code2 <= 2764) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (2765 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 2810) {
                              if (2786 <= code2 && code2 <= 2787) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2817) {
                                if (2810 <= code2 && code2 <= 2815) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2817 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 3315) {
                    if (code2 < 3076) {
                      if (code2 < 2946) {
                        if (code2 < 2887) {
                          if (code2 < 2878) {
                            if (code2 < 2876) {
                              if (2818 <= code2 && code2 <= 2819) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (2876 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 2880) {
                              if (2878 <= code2 && code2 <= 2879) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2881) {
                                if (2880 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (2881 <= code2 && code2 <= 2884) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 2893) {
                            if (code2 < 2891) {
                              if (2887 <= code2 && code2 <= 2888) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (2891 <= code2 && code2 <= 2892) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 2901) {
                              if (2893 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2914) {
                                if (2901 <= code2 && code2 <= 2903) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2914 <= code2 && code2 <= 2915) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 3014) {
                          if (code2 < 3007) {
                            if (2946 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (3006 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 3008) {
                              if (3007 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 3009) {
                                if (3008 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3009 <= code2 && code2 <= 3010) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 3031) {
                            if (code2 < 3018) {
                              if (3014 <= code2 && code2 <= 3016) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 3021) {
                                if (3018 <= code2 && code2 <= 3020) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (3021 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 3072) {
                              if (3031 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3073) {
                                if (3072 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3073 <= code2 && code2 <= 3075) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 3262) {
                        if (code2 < 3146) {
                          if (code2 < 3134) {
                            if (3076 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (3132 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 3137) {
                              if (3134 <= code2 && code2 <= 3136) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3142) {
                                if (3137 <= code2 && code2 <= 3140) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (3142 <= code2 && code2 <= 3144) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 3201) {
                            if (code2 < 3157) {
                              if (3146 <= code2 && code2 <= 3149) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3170) {
                                if (3157 <= code2 && code2 <= 3158) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3170 <= code2 && code2 <= 3171) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 3202) {
                              if (3201 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3260) {
                                if (3202 <= code2 && code2 <= 3203) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (3260 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 3270) {
                          if (code2 < 3264) {
                            if (3262 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (3263 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 3266) {
                              if (3264 <= code2 && code2 <= 3265) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 3267) {
                                if (3266 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3267 <= code2 && code2 <= 3268) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 3276) {
                            if (code2 < 3271) {
                              if (3270 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3274) {
                                if (3271 <= code2 && code2 <= 3272) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (3274 <= code2 && code2 <= 3275) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 3285) {
                              if (3276 <= code2 && code2 <= 3277) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3298) {
                                if (3285 <= code2 && code2 <= 3286) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3298 <= code2 && code2 <= 3299) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 3551) {
                      if (code2 < 3406) {
                        if (code2 < 3391) {
                          if (code2 < 3330) {
                            if (code2 < 3328) {
                              if (3315 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (3328 <= code2 && code2 <= 3329) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 3387) {
                              if (3330 <= code2 && code2 <= 3331) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 3390) {
                                if (3387 <= code2 && code2 <= 3388) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3390 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 3398) {
                            if (code2 < 3393) {
                              if (3391 <= code2 && code2 <= 3392) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (3393 <= code2 && code2 <= 3396) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 3402) {
                              if (3398 <= code2 && code2 <= 3400) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 3405) {
                                if (3402 <= code2 && code2 <= 3404) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (3405 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 3530) {
                          if (code2 < 3426) {
                            if (3406 === code2) {
                              return boundaries_1.CLUSTER_BREAK.PREPEND;
                            }
                            if (3415 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 3457) {
                              if (3426 <= code2 && code2 <= 3427) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3458) {
                                if (3457 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3458 <= code2 && code2 <= 3459) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 3538) {
                            if (code2 < 3535) {
                              if (3530 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3536) {
                                if (3535 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3536 <= code2 && code2 <= 3537) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 3542) {
                              if (3538 <= code2 && code2 <= 3540) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3544) {
                                if (3542 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3544 <= code2 && code2 <= 3550) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 3893) {
                        if (code2 < 3655) {
                          if (code2 < 3633) {
                            if (code2 < 3570) {
                              if (3551 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (3570 <= code2 && code2 <= 3571) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 3635) {
                              if (3633 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3636) {
                                if (3635 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (3636 <= code2 && code2 <= 3642) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 3764) {
                            if (code2 < 3761) {
                              if (3655 <= code2 && code2 <= 3662) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (3761 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (3763 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 3784) {
                              if (3764 <= code2 && code2 <= 3772) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3864) {
                                if (3784 <= code2 && code2 <= 3790) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3864 <= code2 && code2 <= 3865) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 3967) {
                          if (code2 < 3897) {
                            if (3893 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (3895 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 3902) {
                              if (3897 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3953) {
                                if (3902 <= code2 && code2 <= 3903) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (3953 <= code2 && code2 <= 3966) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 3981) {
                            if (code2 < 3968) {
                              if (3967 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 3974) {
                                if (3968 <= code2 && code2 <= 3972) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3974 <= code2 && code2 <= 3975) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 3993) {
                              if (3981 <= code2 && code2 <= 3991) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 4038) {
                                if (3993 <= code2 && code2 <= 4028) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (4038 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 7204) {
                  if (code2 < 6448) {
                    if (code2 < 5938) {
                      if (code2 < 4226) {
                        if (code2 < 4157) {
                          if (code2 < 4146) {
                            if (code2 < 4145) {
                              if (4141 <= code2 && code2 <= 4144) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (4145 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 4153) {
                              if (4146 <= code2 && code2 <= 4151) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 4155) {
                                if (4153 <= code2 && code2 <= 4154) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (4155 <= code2 && code2 <= 4156) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 4184) {
                            if (code2 < 4182) {
                              if (4157 <= code2 && code2 <= 4158) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (4182 <= code2 && code2 <= 4183) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 4190) {
                              if (4184 <= code2 && code2 <= 4185) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 4209) {
                                if (4190 <= code2 && code2 <= 4192) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (4209 <= code2 && code2 <= 4212) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 4352) {
                          if (code2 < 4229) {
                            if (4226 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (4228 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 4237) {
                              if (4229 <= code2 && code2 <= 4230) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (4237 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (4253 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 4957) {
                            if (code2 < 4448) {
                              if (4352 <= code2 && code2 <= 4447) {
                                return boundaries_1.CLUSTER_BREAK.L;
                              }
                            } else {
                              if (code2 < 4520) {
                                if (4448 <= code2 && code2 <= 4519) {
                                  return boundaries_1.CLUSTER_BREAK.V;
                                }
                              } else {
                                if (4520 <= code2 && code2 <= 4607) {
                                  return boundaries_1.CLUSTER_BREAK.T;
                                }
                              }
                            }
                          } else {
                            if (code2 < 5906) {
                              if (4957 <= code2 && code2 <= 4959) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 5909) {
                                if (5906 <= code2 && code2 <= 5908) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (5909 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 6089) {
                        if (code2 < 6070) {
                          if (code2 < 5970) {
                            if (code2 < 5940) {
                              if (5938 <= code2 && code2 <= 5939) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (5940 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 6002) {
                              if (5970 <= code2 && code2 <= 5971) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 6068) {
                                if (6002 <= code2 && code2 <= 6003) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (6068 <= code2 && code2 <= 6069) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 6078) {
                            if (code2 < 6071) {
                              if (6070 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (6071 <= code2 && code2 <= 6077) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 6086) {
                              if (6078 <= code2 && code2 <= 6085) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 6087) {
                                if (6086 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (6087 <= code2 && code2 <= 6088) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 6277) {
                          if (code2 < 6155) {
                            if (code2 < 6109) {
                              if (6089 <= code2 && code2 <= 6099) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (6109 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 6158) {
                              if (6155 <= code2 && code2 <= 6157) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (6158 === code2) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                              if (6159 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 6435) {
                            if (code2 < 6313) {
                              if (6277 <= code2 && code2 <= 6278) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 6432) {
                                if (6313 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (6432 <= code2 && code2 <= 6434) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 6439) {
                              if (6435 <= code2 && code2 <= 6438) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 6441) {
                                if (6439 <= code2 && code2 <= 6440) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (6441 <= code2 && code2 <= 6443) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 6971) {
                      if (code2 < 6744) {
                        if (code2 < 6681) {
                          if (code2 < 6451) {
                            if (code2 < 6450) {
                              if (6448 <= code2 && code2 <= 6449) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (6450 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 6457) {
                              if (6451 <= code2 && code2 <= 6456) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 6679) {
                                if (6457 <= code2 && code2 <= 6459) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (6679 <= code2 && code2 <= 6680) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 6741) {
                            if (code2 < 6683) {
                              if (6681 <= code2 && code2 <= 6682) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (6683 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 6742) {
                              if (6741 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (6742 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (6743 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 6771) {
                          if (code2 < 6754) {
                            if (code2 < 6752) {
                              if (6744 <= code2 && code2 <= 6750) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (6752 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 6757) {
                              if (6754 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 6765) {
                                if (6757 <= code2 && code2 <= 6764) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (6765 <= code2 && code2 <= 6770) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 6912) {
                            if (code2 < 6783) {
                              if (6771 <= code2 && code2 <= 6780) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 6832) {
                                if (6783 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (6832 <= code2 && code2 <= 6862) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 6916) {
                              if (6912 <= code2 && code2 <= 6915) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 6964) {
                                if (6916 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (6964 <= code2 && code2 <= 6970) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 7080) {
                        if (code2 < 7019) {
                          if (code2 < 6973) {
                            if (6971 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (6972 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 6978) {
                              if (6973 <= code2 && code2 <= 6977) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 6979) {
                                if (6978 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (6979 <= code2 && code2 <= 6980) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 7073) {
                            if (code2 < 7040) {
                              if (7019 <= code2 && code2 <= 7027) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 7042) {
                                if (7040 <= code2 && code2 <= 7041) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (7042 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 7074) {
                              if (7073 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 7078) {
                                if (7074 <= code2 && code2 <= 7077) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (7078 <= code2 && code2 <= 7079) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 7144) {
                          if (code2 < 7083) {
                            if (code2 < 7082) {
                              if (7080 <= code2 && code2 <= 7081) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (7082 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 7142) {
                              if (7083 <= code2 && code2 <= 7085) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (7142 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (7143 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        } else {
                          if (code2 < 7150) {
                            if (code2 < 7146) {
                              if (7144 <= code2 && code2 <= 7145) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 7149) {
                                if (7146 <= code2 && code2 <= 7148) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (7149 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 7151) {
                              if (7150 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 7154) {
                                if (7151 <= code2 && code2 <= 7153) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (7154 <= code2 && code2 <= 7155) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 43346) {
                    if (code2 < 11647) {
                      if (code2 < 7415) {
                        if (code2 < 7380) {
                          if (code2 < 7220) {
                            if (code2 < 7212) {
                              if (7204 <= code2 && code2 <= 7211) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (7212 <= code2 && code2 <= 7219) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 7222) {
                              if (7220 <= code2 && code2 <= 7221) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 7376) {
                                if (7222 <= code2 && code2 <= 7223) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (7376 <= code2 && code2 <= 7378) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 7394) {
                            if (code2 < 7393) {
                              if (7380 <= code2 && code2 <= 7392) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (7393 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 7405) {
                              if (7394 <= code2 && code2 <= 7400) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (7405 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (7412 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 8205) {
                          if (code2 < 7616) {
                            if (code2 < 7416) {
                              if (7415 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (7416 <= code2 && code2 <= 7417) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 8203) {
                              if (7616 <= code2 && code2 <= 7679) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (8203 === code2) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                              if (8204 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 8288) {
                            if (code2 < 8206) {
                              if (8205 === code2) {
                                return boundaries_1.CLUSTER_BREAK.ZWJ;
                              }
                            } else {
                              if (code2 < 8232) {
                                if (8206 <= code2 && code2 <= 8207) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL;
                                }
                              } else {
                                if (8232 <= code2 && code2 <= 8238) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL;
                                }
                              }
                            }
                          } else {
                            if (code2 < 8400) {
                              if (8288 <= code2 && code2 <= 8303) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            } else {
                              if (code2 < 11503) {
                                if (8400 <= code2 && code2 <= 8432) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (11503 <= code2 && code2 <= 11505) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 43043) {
                        if (code2 < 42612) {
                          if (code2 < 12330) {
                            if (code2 < 11744) {
                              if (11647 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (11744 <= code2 && code2 <= 11775) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 12441) {
                              if (12330 <= code2 && code2 <= 12335) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 42607) {
                                if (12441 <= code2 && code2 <= 12442) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (42607 <= code2 && code2 <= 42610) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 43010) {
                            if (code2 < 42654) {
                              if (42612 <= code2 && code2 <= 42621) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 42736) {
                                if (42654 <= code2 && code2 <= 42655) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (42736 <= code2 && code2 <= 42737) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 43014) {
                              if (43010 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (43014 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (43019 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 43188) {
                          if (code2 < 43047) {
                            if (code2 < 43045) {
                              if (43043 <= code2 && code2 <= 43044) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (43045 <= code2 && code2 <= 43046) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 43052) {
                              if (43047 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 43136) {
                                if (43052 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (43136 <= code2 && code2 <= 43137) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 43263) {
                            if (code2 < 43204) {
                              if (43188 <= code2 && code2 <= 43203) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 43232) {
                                if (43204 <= code2 && code2 <= 43205) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (43232 <= code2 && code2 <= 43249) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 43302) {
                              if (43263 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 43335) {
                                if (43302 <= code2 && code2 <= 43309) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (43335 <= code2 && code2 <= 43345) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 43698) {
                      if (code2 < 43493) {
                        if (code2 < 43444) {
                          if (code2 < 43392) {
                            if (code2 < 43360) {
                              if (43346 <= code2 && code2 <= 43347) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (43360 <= code2 && code2 <= 43388) {
                                return boundaries_1.CLUSTER_BREAK.L;
                              }
                            }
                          } else {
                            if (code2 < 43395) {
                              if (43392 <= code2 && code2 <= 43394) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (43395 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                              if (43443 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 43450) {
                            if (code2 < 43446) {
                              if (43444 <= code2 && code2 <= 43445) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (43446 <= code2 && code2 <= 43449) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 43452) {
                              if (43450 <= code2 && code2 <= 43451) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 43454) {
                                if (43452 <= code2 && code2 <= 43453) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (43454 <= code2 && code2 <= 43456) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 43573) {
                          if (code2 < 43567) {
                            if (code2 < 43561) {
                              if (43493 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (43561 <= code2 && code2 <= 43566) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 43569) {
                              if (43567 <= code2 && code2 <= 43568) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 43571) {
                                if (43569 <= code2 && code2 <= 43570) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (43571 <= code2 && code2 <= 43572) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 43597) {
                            if (code2 < 43587) {
                              if (43573 <= code2 && code2 <= 43574) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (43587 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (43596 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 43644) {
                              if (43597 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (43644 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (43696 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 44006) {
                        if (code2 < 43756) {
                          if (code2 < 43710) {
                            if (code2 < 43703) {
                              if (43698 <= code2 && code2 <= 43700) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (43703 <= code2 && code2 <= 43704) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 43713) {
                              if (43710 <= code2 && code2 <= 43711) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (43713 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (43755 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        } else {
                          if (code2 < 43766) {
                            if (code2 < 43758) {
                              if (43756 <= code2 && code2 <= 43757) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 43765) {
                                if (43758 <= code2 && code2 <= 43759) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (43765 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 44003) {
                              if (43766 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 44005) {
                                if (44003 <= code2 && code2 <= 44004) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (44005 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 44032) {
                          if (code2 < 44009) {
                            if (code2 < 44008) {
                              if (44006 <= code2 && code2 <= 44007) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (44008 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 44012) {
                              if (44009 <= code2 && code2 <= 44010) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (44012 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                              if (44013 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 44061) {
                            if (code2 < 44033) {
                              if (44032 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 44060) {
                                if (44033 <= code2 && code2 <= 44059) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (44060 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 44088) {
                              if (44061 <= code2 && code2 <= 44087) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 44089) {
                                if (44088 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (44089 <= code2 && code2 <= 44115) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            } else {
              if (code2 < 46497) {
                if (code2 < 45293) {
                  if (code2 < 44704) {
                    if (code2 < 44397) {
                      if (code2 < 44256) {
                        if (code2 < 44173) {
                          if (code2 < 44144) {
                            if (code2 < 44117) {
                              if (44116 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (44117 <= code2 && code2 <= 44143) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 44145) {
                              if (44144 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 44172) {
                                if (44145 <= code2 && code2 <= 44171) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (44172 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 44201) {
                            if (code2 < 44200) {
                              if (44173 <= code2 && code2 <= 44199) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (44200 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 44228) {
                              if (44201 <= code2 && code2 <= 44227) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 44229) {
                                if (44228 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (44229 <= code2 && code2 <= 44255) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 44313) {
                          if (code2 < 44284) {
                            if (code2 < 44257) {
                              if (44256 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (44257 <= code2 && code2 <= 44283) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 44285) {
                              if (44284 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 44312) {
                                if (44285 <= code2 && code2 <= 44311) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (44312 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 44368) {
                            if (code2 < 44340) {
                              if (44313 <= code2 && code2 <= 44339) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 44341) {
                                if (44340 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (44341 <= code2 && code2 <= 44367) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 44369) {
                              if (44368 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 44396) {
                                if (44369 <= code2 && code2 <= 44395) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (44396 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 44537) {
                        if (code2 < 44480) {
                          if (code2 < 44425) {
                            if (code2 < 44424) {
                              if (44397 <= code2 && code2 <= 44423) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (44424 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 44452) {
                              if (44425 <= code2 && code2 <= 44451) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 44453) {
                                if (44452 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (44453 <= code2 && code2 <= 44479) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 44508) {
                            if (code2 < 44481) {
                              if (44480 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (44481 <= code2 && code2 <= 44507) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 44509) {
                              if (44508 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 44536) {
                                if (44509 <= code2 && code2 <= 44535) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (44536 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 44620) {
                          if (code2 < 44565) {
                            if (code2 < 44564) {
                              if (44537 <= code2 && code2 <= 44563) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (44564 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 44592) {
                              if (44565 <= code2 && code2 <= 44591) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 44593) {
                                if (44592 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (44593 <= code2 && code2 <= 44619) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 44649) {
                            if (code2 < 44621) {
                              if (44620 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 44648) {
                                if (44621 <= code2 && code2 <= 44647) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (44648 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 44676) {
                              if (44649 <= code2 && code2 <= 44675) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 44677) {
                                if (44676 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (44677 <= code2 && code2 <= 44703) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 44985) {
                      if (code2 < 44844) {
                        if (code2 < 44761) {
                          if (code2 < 44732) {
                            if (code2 < 44705) {
                              if (44704 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (44705 <= code2 && code2 <= 44731) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 44733) {
                              if (44732 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 44760) {
                                if (44733 <= code2 && code2 <= 44759) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (44760 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 44789) {
                            if (code2 < 44788) {
                              if (44761 <= code2 && code2 <= 44787) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (44788 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 44816) {
                              if (44789 <= code2 && code2 <= 44815) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 44817) {
                                if (44816 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (44817 <= code2 && code2 <= 44843) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 44901) {
                          if (code2 < 44872) {
                            if (code2 < 44845) {
                              if (44844 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (44845 <= code2 && code2 <= 44871) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 44873) {
                              if (44872 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 44900) {
                                if (44873 <= code2 && code2 <= 44899) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (44900 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 44956) {
                            if (code2 < 44928) {
                              if (44901 <= code2 && code2 <= 44927) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 44929) {
                                if (44928 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (44929 <= code2 && code2 <= 44955) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 44957) {
                              if (44956 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 44984) {
                                if (44957 <= code2 && code2 <= 44983) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (44984 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 45152) {
                        if (code2 < 45068) {
                          if (code2 < 45013) {
                            if (code2 < 45012) {
                              if (44985 <= code2 && code2 <= 45011) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (45012 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 45040) {
                              if (45013 <= code2 && code2 <= 45039) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 45041) {
                                if (45040 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (45041 <= code2 && code2 <= 45067) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 45097) {
                            if (code2 < 45069) {
                              if (45068 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 45096) {
                                if (45069 <= code2 && code2 <= 45095) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (45096 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 45124) {
                              if (45097 <= code2 && code2 <= 45123) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 45125) {
                                if (45124 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (45125 <= code2 && code2 <= 45151) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 45209) {
                          if (code2 < 45180) {
                            if (code2 < 45153) {
                              if (45152 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (45153 <= code2 && code2 <= 45179) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 45181) {
                              if (45180 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 45208) {
                                if (45181 <= code2 && code2 <= 45207) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (45208 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 45264) {
                            if (code2 < 45236) {
                              if (45209 <= code2 && code2 <= 45235) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 45237) {
                                if (45236 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (45237 <= code2 && code2 <= 45263) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 45265) {
                              if (45264 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 45292) {
                                if (45265 <= code2 && code2 <= 45291) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (45292 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 45908) {
                    if (code2 < 45600) {
                      if (code2 < 45433) {
                        if (code2 < 45376) {
                          if (code2 < 45321) {
                            if (code2 < 45320) {
                              if (45293 <= code2 && code2 <= 45319) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (45320 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 45348) {
                              if (45321 <= code2 && code2 <= 45347) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 45349) {
                                if (45348 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (45349 <= code2 && code2 <= 45375) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 45404) {
                            if (code2 < 45377) {
                              if (45376 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (45377 <= code2 && code2 <= 45403) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 45405) {
                              if (45404 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 45432) {
                                if (45405 <= code2 && code2 <= 45431) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (45432 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 45516) {
                          if (code2 < 45461) {
                            if (code2 < 45460) {
                              if (45433 <= code2 && code2 <= 45459) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (45460 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 45488) {
                              if (45461 <= code2 && code2 <= 45487) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 45489) {
                                if (45488 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (45489 <= code2 && code2 <= 45515) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 45545) {
                            if (code2 < 45517) {
                              if (45516 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 45544) {
                                if (45517 <= code2 && code2 <= 45543) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (45544 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 45572) {
                              if (45545 <= code2 && code2 <= 45571) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 45573) {
                                if (45572 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (45573 <= code2 && code2 <= 45599) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 45741) {
                        if (code2 < 45657) {
                          if (code2 < 45628) {
                            if (code2 < 45601) {
                              if (45600 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (45601 <= code2 && code2 <= 45627) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 45629) {
                              if (45628 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 45656) {
                                if (45629 <= code2 && code2 <= 45655) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (45656 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 45712) {
                            if (code2 < 45684) {
                              if (45657 <= code2 && code2 <= 45683) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 45685) {
                                if (45684 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (45685 <= code2 && code2 <= 45711) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 45713) {
                              if (45712 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 45740) {
                                if (45713 <= code2 && code2 <= 45739) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (45740 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 45824) {
                          if (code2 < 45769) {
                            if (code2 < 45768) {
                              if (45741 <= code2 && code2 <= 45767) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (45768 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 45796) {
                              if (45769 <= code2 && code2 <= 45795) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 45797) {
                                if (45796 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (45797 <= code2 && code2 <= 45823) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 45853) {
                            if (code2 < 45825) {
                              if (45824 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 45852) {
                                if (45825 <= code2 && code2 <= 45851) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (45852 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 45880) {
                              if (45853 <= code2 && code2 <= 45879) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 45881) {
                                if (45880 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (45881 <= code2 && code2 <= 45907) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 46189) {
                      if (code2 < 46048) {
                        if (code2 < 45965) {
                          if (code2 < 45936) {
                            if (code2 < 45909) {
                              if (45908 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (45909 <= code2 && code2 <= 45935) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 45937) {
                              if (45936 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 45964) {
                                if (45937 <= code2 && code2 <= 45963) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (45964 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 45993) {
                            if (code2 < 45992) {
                              if (45965 <= code2 && code2 <= 45991) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (45992 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 46020) {
                              if (45993 <= code2 && code2 <= 46019) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 46021) {
                                if (46020 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (46021 <= code2 && code2 <= 46047) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 46105) {
                          if (code2 < 46076) {
                            if (code2 < 46049) {
                              if (46048 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (46049 <= code2 && code2 <= 46075) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 46077) {
                              if (46076 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 46104) {
                                if (46077 <= code2 && code2 <= 46103) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (46104 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 46160) {
                            if (code2 < 46132) {
                              if (46105 <= code2 && code2 <= 46131) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 46133) {
                                if (46132 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (46133 <= code2 && code2 <= 46159) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 46161) {
                              if (46160 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 46188) {
                                if (46161 <= code2 && code2 <= 46187) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (46188 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 46356) {
                        if (code2 < 46272) {
                          if (code2 < 46217) {
                            if (code2 < 46216) {
                              if (46189 <= code2 && code2 <= 46215) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (46216 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 46244) {
                              if (46217 <= code2 && code2 <= 46243) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 46245) {
                                if (46244 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (46245 <= code2 && code2 <= 46271) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 46301) {
                            if (code2 < 46273) {
                              if (46272 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 46300) {
                                if (46273 <= code2 && code2 <= 46299) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (46300 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 46328) {
                              if (46301 <= code2 && code2 <= 46327) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 46329) {
                                if (46328 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (46329 <= code2 && code2 <= 46355) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 46413) {
                          if (code2 < 46384) {
                            if (code2 < 46357) {
                              if (46356 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (46357 <= code2 && code2 <= 46383) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 46385) {
                              if (46384 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 46412) {
                                if (46385 <= code2 && code2 <= 46411) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (46412 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 46468) {
                            if (code2 < 46440) {
                              if (46413 <= code2 && code2 <= 46439) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 46441) {
                                if (46440 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (46441 <= code2 && code2 <= 46467) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 46469) {
                              if (46468 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 46496) {
                                if (46469 <= code2 && code2 <= 46495) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (46496 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 47701) {
                  if (code2 < 47112) {
                    if (code2 < 46804) {
                      if (code2 < 46637) {
                        if (code2 < 46580) {
                          if (code2 < 46525) {
                            if (code2 < 46524) {
                              if (46497 <= code2 && code2 <= 46523) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (46524 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 46552) {
                              if (46525 <= code2 && code2 <= 46551) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 46553) {
                                if (46552 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (46553 <= code2 && code2 <= 46579) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 46608) {
                            if (code2 < 46581) {
                              if (46580 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (46581 <= code2 && code2 <= 46607) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 46609) {
                              if (46608 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 46636) {
                                if (46609 <= code2 && code2 <= 46635) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (46636 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 46720) {
                          if (code2 < 46665) {
                            if (code2 < 46664) {
                              if (46637 <= code2 && code2 <= 46663) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (46664 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 46692) {
                              if (46665 <= code2 && code2 <= 46691) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 46693) {
                                if (46692 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (46693 <= code2 && code2 <= 46719) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 46749) {
                            if (code2 < 46721) {
                              if (46720 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 46748) {
                                if (46721 <= code2 && code2 <= 46747) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (46748 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 46776) {
                              if (46749 <= code2 && code2 <= 46775) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 46777) {
                                if (46776 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (46777 <= code2 && code2 <= 46803) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 46945) {
                        if (code2 < 46861) {
                          if (code2 < 46832) {
                            if (code2 < 46805) {
                              if (46804 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (46805 <= code2 && code2 <= 46831) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 46833) {
                              if (46832 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 46860) {
                                if (46833 <= code2 && code2 <= 46859) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (46860 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 46916) {
                            if (code2 < 46888) {
                              if (46861 <= code2 && code2 <= 46887) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 46889) {
                                if (46888 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (46889 <= code2 && code2 <= 46915) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 46917) {
                              if (46916 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 46944) {
                                if (46917 <= code2 && code2 <= 46943) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (46944 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 47028) {
                          if (code2 < 46973) {
                            if (code2 < 46972) {
                              if (46945 <= code2 && code2 <= 46971) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (46972 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 47e3) {
                              if (46973 <= code2 && code2 <= 46999) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47001) {
                                if (47e3 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47001 <= code2 && code2 <= 47027) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 47057) {
                            if (code2 < 47029) {
                              if (47028 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 47056) {
                                if (47029 <= code2 && code2 <= 47055) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (47056 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 47084) {
                              if (47057 <= code2 && code2 <= 47083) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47085) {
                                if (47084 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47085 <= code2 && code2 <= 47111) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 47393) {
                      if (code2 < 47252) {
                        if (code2 < 47169) {
                          if (code2 < 47140) {
                            if (code2 < 47113) {
                              if (47112 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (47113 <= code2 && code2 <= 47139) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 47141) {
                              if (47140 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 47168) {
                                if (47141 <= code2 && code2 <= 47167) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (47168 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 47197) {
                            if (code2 < 47196) {
                              if (47169 <= code2 && code2 <= 47195) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (47196 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 47224) {
                              if (47197 <= code2 && code2 <= 47223) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47225) {
                                if (47224 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47225 <= code2 && code2 <= 47251) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 47309) {
                          if (code2 < 47280) {
                            if (code2 < 47253) {
                              if (47252 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (47253 <= code2 && code2 <= 47279) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 47281) {
                              if (47280 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 47308) {
                                if (47281 <= code2 && code2 <= 47307) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (47308 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 47364) {
                            if (code2 < 47336) {
                              if (47309 <= code2 && code2 <= 47335) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47337) {
                                if (47336 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47337 <= code2 && code2 <= 47363) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 47365) {
                              if (47364 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 47392) {
                                if (47365 <= code2 && code2 <= 47391) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (47392 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 47560) {
                        if (code2 < 47476) {
                          if (code2 < 47421) {
                            if (code2 < 47420) {
                              if (47393 <= code2 && code2 <= 47419) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (47420 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 47448) {
                              if (47421 <= code2 && code2 <= 47447) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47449) {
                                if (47448 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47449 <= code2 && code2 <= 47475) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 47505) {
                            if (code2 < 47477) {
                              if (47476 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 47504) {
                                if (47477 <= code2 && code2 <= 47503) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (47504 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 47532) {
                              if (47505 <= code2 && code2 <= 47531) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47533) {
                                if (47532 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47533 <= code2 && code2 <= 47559) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 47617) {
                          if (code2 < 47588) {
                            if (code2 < 47561) {
                              if (47560 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (47561 <= code2 && code2 <= 47587) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 47589) {
                              if (47588 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 47616) {
                                if (47589 <= code2 && code2 <= 47615) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (47616 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 47672) {
                            if (code2 < 47644) {
                              if (47617 <= code2 && code2 <= 47643) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47645) {
                                if (47644 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47645 <= code2 && code2 <= 47671) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 47673) {
                              if (47672 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 47700) {
                                if (47673 <= code2 && code2 <= 47699) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (47700 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 48316) {
                    if (code2 < 48008) {
                      if (code2 < 47841) {
                        if (code2 < 47784) {
                          if (code2 < 47729) {
                            if (code2 < 47728) {
                              if (47701 <= code2 && code2 <= 47727) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (47728 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 47756) {
                              if (47729 <= code2 && code2 <= 47755) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47757) {
                                if (47756 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47757 <= code2 && code2 <= 47783) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 47812) {
                            if (code2 < 47785) {
                              if (47784 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (47785 <= code2 && code2 <= 47811) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 47813) {
                              if (47812 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 47840) {
                                if (47813 <= code2 && code2 <= 47839) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (47840 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 47924) {
                          if (code2 < 47869) {
                            if (code2 < 47868) {
                              if (47841 <= code2 && code2 <= 47867) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (47868 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 47896) {
                              if (47869 <= code2 && code2 <= 47895) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47897) {
                                if (47896 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47897 <= code2 && code2 <= 47923) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 47953) {
                            if (code2 < 47925) {
                              if (47924 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 47952) {
                                if (47925 <= code2 && code2 <= 47951) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (47952 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 47980) {
                              if (47953 <= code2 && code2 <= 47979) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47981) {
                                if (47980 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47981 <= code2 && code2 <= 48007) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 48149) {
                        if (code2 < 48065) {
                          if (code2 < 48036) {
                            if (code2 < 48009) {
                              if (48008 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (48009 <= code2 && code2 <= 48035) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 48037) {
                              if (48036 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 48064) {
                                if (48037 <= code2 && code2 <= 48063) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (48064 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 48120) {
                            if (code2 < 48092) {
                              if (48065 <= code2 && code2 <= 48091) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 48093) {
                                if (48092 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (48093 <= code2 && code2 <= 48119) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 48121) {
                              if (48120 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 48148) {
                                if (48121 <= code2 && code2 <= 48147) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (48148 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 48232) {
                          if (code2 < 48177) {
                            if (code2 < 48176) {
                              if (48149 <= code2 && code2 <= 48175) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (48176 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 48204) {
                              if (48177 <= code2 && code2 <= 48203) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 48205) {
                                if (48204 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (48205 <= code2 && code2 <= 48231) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 48261) {
                            if (code2 < 48233) {
                              if (48232 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 48260) {
                                if (48233 <= code2 && code2 <= 48259) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (48260 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 48288) {
                              if (48261 <= code2 && code2 <= 48287) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 48289) {
                                if (48288 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (48289 <= code2 && code2 <= 48315) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 48597) {
                      if (code2 < 48456) {
                        if (code2 < 48373) {
                          if (code2 < 48344) {
                            if (code2 < 48317) {
                              if (48316 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (48317 <= code2 && code2 <= 48343) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 48345) {
                              if (48344 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 48372) {
                                if (48345 <= code2 && code2 <= 48371) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (48372 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 48401) {
                            if (code2 < 48400) {
                              if (48373 <= code2 && code2 <= 48399) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (48400 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 48428) {
                              if (48401 <= code2 && code2 <= 48427) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 48429) {
                                if (48428 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (48429 <= code2 && code2 <= 48455) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 48513) {
                          if (code2 < 48484) {
                            if (code2 < 48457) {
                              if (48456 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (48457 <= code2 && code2 <= 48483) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 48485) {
                              if (48484 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 48512) {
                                if (48485 <= code2 && code2 <= 48511) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (48512 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 48568) {
                            if (code2 < 48540) {
                              if (48513 <= code2 && code2 <= 48539) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 48541) {
                                if (48540 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (48541 <= code2 && code2 <= 48567) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 48569) {
                              if (48568 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 48596) {
                                if (48569 <= code2 && code2 <= 48595) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (48596 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 48764) {
                        if (code2 < 48680) {
                          if (code2 < 48625) {
                            if (code2 < 48624) {
                              if (48597 <= code2 && code2 <= 48623) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (48624 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 48652) {
                              if (48625 <= code2 && code2 <= 48651) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 48653) {
                                if (48652 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (48653 <= code2 && code2 <= 48679) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 48709) {
                            if (code2 < 48681) {
                              if (48680 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 48708) {
                                if (48681 <= code2 && code2 <= 48707) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (48708 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 48736) {
                              if (48709 <= code2 && code2 <= 48735) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 48737) {
                                if (48736 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (48737 <= code2 && code2 <= 48763) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 48821) {
                          if (code2 < 48792) {
                            if (code2 < 48765) {
                              if (48764 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (48765 <= code2 && code2 <= 48791) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 48793) {
                              if (48792 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 48820) {
                                if (48793 <= code2 && code2 <= 48819) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (48820 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 48876) {
                            if (code2 < 48848) {
                              if (48821 <= code2 && code2 <= 48847) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 48849) {
                                if (48848 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (48849 <= code2 && code2 <= 48875) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 48877) {
                              if (48876 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 48904) {
                                if (48877 <= code2 && code2 <= 48903) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (48904 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          } else {
            if (code2 < 53720) {
              if (code2 < 51312) {
                if (code2 < 50108) {
                  if (code2 < 49493) {
                    if (code2 < 49212) {
                      if (code2 < 49045) {
                        if (code2 < 48988) {
                          if (code2 < 48933) {
                            if (code2 < 48932) {
                              if (48905 <= code2 && code2 <= 48931) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (48932 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 48960) {
                              if (48933 <= code2 && code2 <= 48959) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 48961) {
                                if (48960 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (48961 <= code2 && code2 <= 48987) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 49016) {
                            if (code2 < 48989) {
                              if (48988 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (48989 <= code2 && code2 <= 49015) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 49017) {
                              if (49016 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 49044) {
                                if (49017 <= code2 && code2 <= 49043) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (49044 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 49128) {
                          if (code2 < 49073) {
                            if (code2 < 49072) {
                              if (49045 <= code2 && code2 <= 49071) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (49072 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 49100) {
                              if (49073 <= code2 && code2 <= 49099) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 49101) {
                                if (49100 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (49101 <= code2 && code2 <= 49127) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 49157) {
                            if (code2 < 49129) {
                              if (49128 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 49156) {
                                if (49129 <= code2 && code2 <= 49155) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (49156 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 49184) {
                              if (49157 <= code2 && code2 <= 49183) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 49185) {
                                if (49184 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (49185 <= code2 && code2 <= 49211) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 49352) {
                        if (code2 < 49269) {
                          if (code2 < 49240) {
                            if (code2 < 49213) {
                              if (49212 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (49213 <= code2 && code2 <= 49239) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 49241) {
                              if (49240 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 49268) {
                                if (49241 <= code2 && code2 <= 49267) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (49268 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 49297) {
                            if (code2 < 49296) {
                              if (49269 <= code2 && code2 <= 49295) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (49296 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 49324) {
                              if (49297 <= code2 && code2 <= 49323) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 49325) {
                                if (49324 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (49325 <= code2 && code2 <= 49351) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 49409) {
                          if (code2 < 49380) {
                            if (code2 < 49353) {
                              if (49352 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (49353 <= code2 && code2 <= 49379) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 49381) {
                              if (49380 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 49408) {
                                if (49381 <= code2 && code2 <= 49407) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (49408 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 49464) {
                            if (code2 < 49436) {
                              if (49409 <= code2 && code2 <= 49435) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 49437) {
                                if (49436 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (49437 <= code2 && code2 <= 49463) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 49465) {
                              if (49464 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 49492) {
                                if (49465 <= code2 && code2 <= 49491) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (49492 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 49800) {
                      if (code2 < 49633) {
                        if (code2 < 49576) {
                          if (code2 < 49521) {
                            if (code2 < 49520) {
                              if (49493 <= code2 && code2 <= 49519) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (49520 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 49548) {
                              if (49521 <= code2 && code2 <= 49547) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 49549) {
                                if (49548 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (49549 <= code2 && code2 <= 49575) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 49604) {
                            if (code2 < 49577) {
                              if (49576 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (49577 <= code2 && code2 <= 49603) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 49605) {
                              if (49604 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 49632) {
                                if (49605 <= code2 && code2 <= 49631) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (49632 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 49716) {
                          if (code2 < 49661) {
                            if (code2 < 49660) {
                              if (49633 <= code2 && code2 <= 49659) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (49660 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 49688) {
                              if (49661 <= code2 && code2 <= 49687) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 49689) {
                                if (49688 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (49689 <= code2 && code2 <= 49715) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 49745) {
                            if (code2 < 49717) {
                              if (49716 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 49744) {
                                if (49717 <= code2 && code2 <= 49743) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (49744 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 49772) {
                              if (49745 <= code2 && code2 <= 49771) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 49773) {
                                if (49772 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (49773 <= code2 && code2 <= 49799) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 49941) {
                        if (code2 < 49857) {
                          if (code2 < 49828) {
                            if (code2 < 49801) {
                              if (49800 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (49801 <= code2 && code2 <= 49827) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 49829) {
                              if (49828 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 49856) {
                                if (49829 <= code2 && code2 <= 49855) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (49856 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 49912) {
                            if (code2 < 49884) {
                              if (49857 <= code2 && code2 <= 49883) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 49885) {
                                if (49884 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (49885 <= code2 && code2 <= 49911) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 49913) {
                              if (49912 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 49940) {
                                if (49913 <= code2 && code2 <= 49939) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (49940 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 50024) {
                          if (code2 < 49969) {
                            if (code2 < 49968) {
                              if (49941 <= code2 && code2 <= 49967) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (49968 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 49996) {
                              if (49969 <= code2 && code2 <= 49995) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 49997) {
                                if (49996 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (49997 <= code2 && code2 <= 50023) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 50053) {
                            if (code2 < 50025) {
                              if (50024 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 50052) {
                                if (50025 <= code2 && code2 <= 50051) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (50052 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 50080) {
                              if (50053 <= code2 && code2 <= 50079) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 50081) {
                                if (50080 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (50081 <= code2 && code2 <= 50107) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 50697) {
                    if (code2 < 50389) {
                      if (code2 < 50248) {
                        if (code2 < 50165) {
                          if (code2 < 50136) {
                            if (code2 < 50109) {
                              if (50108 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (50109 <= code2 && code2 <= 50135) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 50137) {
                              if (50136 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 50164) {
                                if (50137 <= code2 && code2 <= 50163) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (50164 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 50193) {
                            if (code2 < 50192) {
                              if (50165 <= code2 && code2 <= 50191) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (50192 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 50220) {
                              if (50193 <= code2 && code2 <= 50219) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 50221) {
                                if (50220 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (50221 <= code2 && code2 <= 50247) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 50305) {
                          if (code2 < 50276) {
                            if (code2 < 50249) {
                              if (50248 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (50249 <= code2 && code2 <= 50275) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 50277) {
                              if (50276 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 50304) {
                                if (50277 <= code2 && code2 <= 50303) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (50304 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 50360) {
                            if (code2 < 50332) {
                              if (50305 <= code2 && code2 <= 50331) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 50333) {
                                if (50332 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (50333 <= code2 && code2 <= 50359) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 50361) {
                              if (50360 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 50388) {
                                if (50361 <= code2 && code2 <= 50387) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (50388 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 50556) {
                        if (code2 < 50472) {
                          if (code2 < 50417) {
                            if (code2 < 50416) {
                              if (50389 <= code2 && code2 <= 50415) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (50416 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 50444) {
                              if (50417 <= code2 && code2 <= 50443) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 50445) {
                                if (50444 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (50445 <= code2 && code2 <= 50471) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 50501) {
                            if (code2 < 50473) {
                              if (50472 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 50500) {
                                if (50473 <= code2 && code2 <= 50499) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (50500 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 50528) {
                              if (50501 <= code2 && code2 <= 50527) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 50529) {
                                if (50528 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (50529 <= code2 && code2 <= 50555) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 50613) {
                          if (code2 < 50584) {
                            if (code2 < 50557) {
                              if (50556 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (50557 <= code2 && code2 <= 50583) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 50585) {
                              if (50584 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 50612) {
                                if (50585 <= code2 && code2 <= 50611) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (50612 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 50668) {
                            if (code2 < 50640) {
                              if (50613 <= code2 && code2 <= 50639) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 50641) {
                                if (50640 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (50641 <= code2 && code2 <= 50667) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 50669) {
                              if (50668 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 50696) {
                                if (50669 <= code2 && code2 <= 50695) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (50696 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 51004) {
                      if (code2 < 50837) {
                        if (code2 < 50780) {
                          if (code2 < 50725) {
                            if (code2 < 50724) {
                              if (50697 <= code2 && code2 <= 50723) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (50724 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 50752) {
                              if (50725 <= code2 && code2 <= 50751) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 50753) {
                                if (50752 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (50753 <= code2 && code2 <= 50779) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 50808) {
                            if (code2 < 50781) {
                              if (50780 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (50781 <= code2 && code2 <= 50807) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 50809) {
                              if (50808 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 50836) {
                                if (50809 <= code2 && code2 <= 50835) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (50836 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 50920) {
                          if (code2 < 50865) {
                            if (code2 < 50864) {
                              if (50837 <= code2 && code2 <= 50863) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (50864 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 50892) {
                              if (50865 <= code2 && code2 <= 50891) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 50893) {
                                if (50892 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (50893 <= code2 && code2 <= 50919) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 50949) {
                            if (code2 < 50921) {
                              if (50920 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 50948) {
                                if (50921 <= code2 && code2 <= 50947) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (50948 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 50976) {
                              if (50949 <= code2 && code2 <= 50975) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 50977) {
                                if (50976 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (50977 <= code2 && code2 <= 51003) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 51145) {
                        if (code2 < 51061) {
                          if (code2 < 51032) {
                            if (code2 < 51005) {
                              if (51004 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (51005 <= code2 && code2 <= 51031) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 51033) {
                              if (51032 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 51060) {
                                if (51033 <= code2 && code2 <= 51059) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (51060 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 51116) {
                            if (code2 < 51088) {
                              if (51061 <= code2 && code2 <= 51087) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 51089) {
                                if (51088 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (51089 <= code2 && code2 <= 51115) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 51117) {
                              if (51116 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 51144) {
                                if (51117 <= code2 && code2 <= 51143) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (51144 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 51228) {
                          if (code2 < 51173) {
                            if (code2 < 51172) {
                              if (51145 <= code2 && code2 <= 51171) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (51172 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 51200) {
                              if (51173 <= code2 && code2 <= 51199) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 51201) {
                                if (51200 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (51201 <= code2 && code2 <= 51227) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 51257) {
                            if (code2 < 51229) {
                              if (51228 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 51256) {
                                if (51229 <= code2 && code2 <= 51255) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (51256 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 51284) {
                              if (51257 <= code2 && code2 <= 51283) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 51285) {
                                if (51284 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (51285 <= code2 && code2 <= 51311) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 52516) {
                  if (code2 < 51901) {
                    if (code2 < 51593) {
                      if (code2 < 51452) {
                        if (code2 < 51369) {
                          if (code2 < 51340) {
                            if (code2 < 51313) {
                              if (51312 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (51313 <= code2 && code2 <= 51339) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 51341) {
                              if (51340 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 51368) {
                                if (51341 <= code2 && code2 <= 51367) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (51368 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 51397) {
                            if (code2 < 51396) {
                              if (51369 <= code2 && code2 <= 51395) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (51396 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 51424) {
                              if (51397 <= code2 && code2 <= 51423) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 51425) {
                                if (51424 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (51425 <= code2 && code2 <= 51451) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 51509) {
                          if (code2 < 51480) {
                            if (code2 < 51453) {
                              if (51452 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (51453 <= code2 && code2 <= 51479) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 51481) {
                              if (51480 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 51508) {
                                if (51481 <= code2 && code2 <= 51507) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (51508 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 51564) {
                            if (code2 < 51536) {
                              if (51509 <= code2 && code2 <= 51535) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 51537) {
                                if (51536 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (51537 <= code2 && code2 <= 51563) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 51565) {
                              if (51564 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 51592) {
                                if (51565 <= code2 && code2 <= 51591) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (51592 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 51760) {
                        if (code2 < 51676) {
                          if (code2 < 51621) {
                            if (code2 < 51620) {
                              if (51593 <= code2 && code2 <= 51619) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (51620 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 51648) {
                              if (51621 <= code2 && code2 <= 51647) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 51649) {
                                if (51648 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (51649 <= code2 && code2 <= 51675) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 51705) {
                            if (code2 < 51677) {
                              if (51676 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 51704) {
                                if (51677 <= code2 && code2 <= 51703) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (51704 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 51732) {
                              if (51705 <= code2 && code2 <= 51731) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 51733) {
                                if (51732 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (51733 <= code2 && code2 <= 51759) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 51817) {
                          if (code2 < 51788) {
                            if (code2 < 51761) {
                              if (51760 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (51761 <= code2 && code2 <= 51787) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 51789) {
                              if (51788 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 51816) {
                                if (51789 <= code2 && code2 <= 51815) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (51816 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 51872) {
                            if (code2 < 51844) {
                              if (51817 <= code2 && code2 <= 51843) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 51845) {
                                if (51844 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (51845 <= code2 && code2 <= 51871) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 51873) {
                              if (51872 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 51900) {
                                if (51873 <= code2 && code2 <= 51899) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (51900 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 52208) {
                      if (code2 < 52041) {
                        if (code2 < 51984) {
                          if (code2 < 51929) {
                            if (code2 < 51928) {
                              if (51901 <= code2 && code2 <= 51927) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (51928 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 51956) {
                              if (51929 <= code2 && code2 <= 51955) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 51957) {
                                if (51956 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (51957 <= code2 && code2 <= 51983) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 52012) {
                            if (code2 < 51985) {
                              if (51984 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (51985 <= code2 && code2 <= 52011) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 52013) {
                              if (52012 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 52040) {
                                if (52013 <= code2 && code2 <= 52039) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (52040 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 52124) {
                          if (code2 < 52069) {
                            if (code2 < 52068) {
                              if (52041 <= code2 && code2 <= 52067) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (52068 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 52096) {
                              if (52069 <= code2 && code2 <= 52095) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 52097) {
                                if (52096 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (52097 <= code2 && code2 <= 52123) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 52153) {
                            if (code2 < 52125) {
                              if (52124 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 52152) {
                                if (52125 <= code2 && code2 <= 52151) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (52152 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 52180) {
                              if (52153 <= code2 && code2 <= 52179) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 52181) {
                                if (52180 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (52181 <= code2 && code2 <= 52207) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 52349) {
                        if (code2 < 52265) {
                          if (code2 < 52236) {
                            if (code2 < 52209) {
                              if (52208 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (52209 <= code2 && code2 <= 52235) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 52237) {
                              if (52236 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 52264) {
                                if (52237 <= code2 && code2 <= 52263) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (52264 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 52320) {
                            if (code2 < 52292) {
                              if (52265 <= code2 && code2 <= 52291) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 52293) {
                                if (52292 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (52293 <= code2 && code2 <= 52319) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 52321) {
                              if (52320 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 52348) {
                                if (52321 <= code2 && code2 <= 52347) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (52348 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 52432) {
                          if (code2 < 52377) {
                            if (code2 < 52376) {
                              if (52349 <= code2 && code2 <= 52375) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (52376 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 52404) {
                              if (52377 <= code2 && code2 <= 52403) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 52405) {
                                if (52404 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (52405 <= code2 && code2 <= 52431) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 52461) {
                            if (code2 < 52433) {
                              if (52432 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 52460) {
                                if (52433 <= code2 && code2 <= 52459) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (52460 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 52488) {
                              if (52461 <= code2 && code2 <= 52487) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 52489) {
                                if (52488 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (52489 <= code2 && code2 <= 52515) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 53105) {
                    if (code2 < 52797) {
                      if (code2 < 52656) {
                        if (code2 < 52573) {
                          if (code2 < 52544) {
                            if (code2 < 52517) {
                              if (52516 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (52517 <= code2 && code2 <= 52543) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 52545) {
                              if (52544 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 52572) {
                                if (52545 <= code2 && code2 <= 52571) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (52572 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 52601) {
                            if (code2 < 52600) {
                              if (52573 <= code2 && code2 <= 52599) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (52600 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 52628) {
                              if (52601 <= code2 && code2 <= 52627) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 52629) {
                                if (52628 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (52629 <= code2 && code2 <= 52655) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 52713) {
                          if (code2 < 52684) {
                            if (code2 < 52657) {
                              if (52656 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (52657 <= code2 && code2 <= 52683) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 52685) {
                              if (52684 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 52712) {
                                if (52685 <= code2 && code2 <= 52711) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (52712 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 52768) {
                            if (code2 < 52740) {
                              if (52713 <= code2 && code2 <= 52739) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 52741) {
                                if (52740 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (52741 <= code2 && code2 <= 52767) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 52769) {
                              if (52768 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 52796) {
                                if (52769 <= code2 && code2 <= 52795) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (52796 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 52964) {
                        if (code2 < 52880) {
                          if (code2 < 52825) {
                            if (code2 < 52824) {
                              if (52797 <= code2 && code2 <= 52823) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (52824 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 52852) {
                              if (52825 <= code2 && code2 <= 52851) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 52853) {
                                if (52852 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (52853 <= code2 && code2 <= 52879) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 52909) {
                            if (code2 < 52881) {
                              if (52880 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 52908) {
                                if (52881 <= code2 && code2 <= 52907) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (52908 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 52936) {
                              if (52909 <= code2 && code2 <= 52935) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 52937) {
                                if (52936 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (52937 <= code2 && code2 <= 52963) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 53021) {
                          if (code2 < 52992) {
                            if (code2 < 52965) {
                              if (52964 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (52965 <= code2 && code2 <= 52991) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 52993) {
                              if (52992 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 53020) {
                                if (52993 <= code2 && code2 <= 53019) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (53020 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 53076) {
                            if (code2 < 53048) {
                              if (53021 <= code2 && code2 <= 53047) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 53049) {
                                if (53048 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (53049 <= code2 && code2 <= 53075) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 53077) {
                              if (53076 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 53104) {
                                if (53077 <= code2 && code2 <= 53103) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (53104 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 53412) {
                      if (code2 < 53245) {
                        if (code2 < 53188) {
                          if (code2 < 53133) {
                            if (code2 < 53132) {
                              if (53105 <= code2 && code2 <= 53131) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (53132 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 53160) {
                              if (53133 <= code2 && code2 <= 53159) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 53161) {
                                if (53160 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (53161 <= code2 && code2 <= 53187) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 53216) {
                            if (code2 < 53189) {
                              if (53188 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (53189 <= code2 && code2 <= 53215) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 53217) {
                              if (53216 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 53244) {
                                if (53217 <= code2 && code2 <= 53243) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (53244 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 53328) {
                          if (code2 < 53273) {
                            if (code2 < 53272) {
                              if (53245 <= code2 && code2 <= 53271) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (53272 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 53300) {
                              if (53273 <= code2 && code2 <= 53299) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 53301) {
                                if (53300 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (53301 <= code2 && code2 <= 53327) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 53357) {
                            if (code2 < 53329) {
                              if (53328 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 53356) {
                                if (53329 <= code2 && code2 <= 53355) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (53356 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 53384) {
                              if (53357 <= code2 && code2 <= 53383) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 53385) {
                                if (53384 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (53385 <= code2 && code2 <= 53411) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 53553) {
                        if (code2 < 53469) {
                          if (code2 < 53440) {
                            if (code2 < 53413) {
                              if (53412 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (53413 <= code2 && code2 <= 53439) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 53441) {
                              if (53440 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 53468) {
                                if (53441 <= code2 && code2 <= 53467) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (53468 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 53524) {
                            if (code2 < 53496) {
                              if (53469 <= code2 && code2 <= 53495) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 53497) {
                                if (53496 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (53497 <= code2 && code2 <= 53523) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 53525) {
                              if (53524 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 53552) {
                                if (53525 <= code2 && code2 <= 53551) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (53552 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 53636) {
                          if (code2 < 53581) {
                            if (code2 < 53580) {
                              if (53553 <= code2 && code2 <= 53579) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (53580 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 53608) {
                              if (53581 <= code2 && code2 <= 53607) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 53609) {
                                if (53608 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (53609 <= code2 && code2 <= 53635) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 53665) {
                            if (code2 < 53637) {
                              if (53636 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 53664) {
                                if (53637 <= code2 && code2 <= 53663) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (53664 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 53692) {
                              if (53665 <= code2 && code2 <= 53691) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 53693) {
                                if (53692 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (53693 <= code2 && code2 <= 53719) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            } else {
              if (code2 < 70459) {
                if (code2 < 54897) {
                  if (code2 < 54308) {
                    if (code2 < 54001) {
                      if (code2 < 53860) {
                        if (code2 < 53777) {
                          if (code2 < 53748) {
                            if (code2 < 53721) {
                              if (53720 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (53721 <= code2 && code2 <= 53747) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 53749) {
                              if (53748 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 53776) {
                                if (53749 <= code2 && code2 <= 53775) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (53776 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 53805) {
                            if (code2 < 53804) {
                              if (53777 <= code2 && code2 <= 53803) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (53804 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 53832) {
                              if (53805 <= code2 && code2 <= 53831) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 53833) {
                                if (53832 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (53833 <= code2 && code2 <= 53859) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 53917) {
                          if (code2 < 53888) {
                            if (code2 < 53861) {
                              if (53860 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (53861 <= code2 && code2 <= 53887) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 53889) {
                              if (53888 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 53916) {
                                if (53889 <= code2 && code2 <= 53915) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (53916 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 53972) {
                            if (code2 < 53944) {
                              if (53917 <= code2 && code2 <= 53943) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 53945) {
                                if (53944 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (53945 <= code2 && code2 <= 53971) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 53973) {
                              if (53972 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 54e3) {
                                if (53973 <= code2 && code2 <= 53999) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (54e3 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 54141) {
                        if (code2 < 54084) {
                          if (code2 < 54029) {
                            if (code2 < 54028) {
                              if (54001 <= code2 && code2 <= 54027) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (54028 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 54056) {
                              if (54029 <= code2 && code2 <= 54055) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 54057) {
                                if (54056 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (54057 <= code2 && code2 <= 54083) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 54112) {
                            if (code2 < 54085) {
                              if (54084 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (54085 <= code2 && code2 <= 54111) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 54113) {
                              if (54112 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 54140) {
                                if (54113 <= code2 && code2 <= 54139) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (54140 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 54224) {
                          if (code2 < 54169) {
                            if (code2 < 54168) {
                              if (54141 <= code2 && code2 <= 54167) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (54168 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 54196) {
                              if (54169 <= code2 && code2 <= 54195) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 54197) {
                                if (54196 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (54197 <= code2 && code2 <= 54223) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 54253) {
                            if (code2 < 54225) {
                              if (54224 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 54252) {
                                if (54225 <= code2 && code2 <= 54251) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (54252 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 54280) {
                              if (54253 <= code2 && code2 <= 54279) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 54281) {
                                if (54280 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (54281 <= code2 && code2 <= 54307) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 54589) {
                      if (code2 < 54448) {
                        if (code2 < 54365) {
                          if (code2 < 54336) {
                            if (code2 < 54309) {
                              if (54308 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (54309 <= code2 && code2 <= 54335) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 54337) {
                              if (54336 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 54364) {
                                if (54337 <= code2 && code2 <= 54363) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (54364 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 54393) {
                            if (code2 < 54392) {
                              if (54365 <= code2 && code2 <= 54391) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (54392 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 54420) {
                              if (54393 <= code2 && code2 <= 54419) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 54421) {
                                if (54420 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (54421 <= code2 && code2 <= 54447) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 54505) {
                          if (code2 < 54476) {
                            if (code2 < 54449) {
                              if (54448 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (54449 <= code2 && code2 <= 54475) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 54477) {
                              if (54476 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 54504) {
                                if (54477 <= code2 && code2 <= 54503) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (54504 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 54560) {
                            if (code2 < 54532) {
                              if (54505 <= code2 && code2 <= 54531) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 54533) {
                                if (54532 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (54533 <= code2 && code2 <= 54559) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 54561) {
                              if (54560 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 54588) {
                                if (54561 <= code2 && code2 <= 54587) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (54588 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 54756) {
                        if (code2 < 54672) {
                          if (code2 < 54617) {
                            if (code2 < 54616) {
                              if (54589 <= code2 && code2 <= 54615) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (54616 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 54644) {
                              if (54617 <= code2 && code2 <= 54643) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 54645) {
                                if (54644 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (54645 <= code2 && code2 <= 54671) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 54701) {
                            if (code2 < 54673) {
                              if (54672 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 54700) {
                                if (54673 <= code2 && code2 <= 54699) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (54700 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 54728) {
                              if (54701 <= code2 && code2 <= 54727) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 54729) {
                                if (54728 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (54729 <= code2 && code2 <= 54755) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 54813) {
                          if (code2 < 54784) {
                            if (code2 < 54757) {
                              if (54756 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (54757 <= code2 && code2 <= 54783) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 54785) {
                              if (54784 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 54812) {
                                if (54785 <= code2 && code2 <= 54811) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (54812 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 54868) {
                            if (code2 < 54840) {
                              if (54813 <= code2 && code2 <= 54839) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 54841) {
                                if (54840 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (54841 <= code2 && code2 <= 54867) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 54869) {
                              if (54868 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 54896) {
                                if (54869 <= code2 && code2 <= 54895) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (54896 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 69632) {
                    if (code2 < 55216) {
                      if (code2 < 55037) {
                        if (code2 < 54980) {
                          if (code2 < 54925) {
                            if (code2 < 54924) {
                              if (54897 <= code2 && code2 <= 54923) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (54924 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 54952) {
                              if (54925 <= code2 && code2 <= 54951) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 54953) {
                                if (54952 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (54953 <= code2 && code2 <= 54979) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 55008) {
                            if (code2 < 54981) {
                              if (54980 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (54981 <= code2 && code2 <= 55007) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 55009) {
                              if (55008 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 55036) {
                                if (55009 <= code2 && code2 <= 55035) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (55036 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 55120) {
                          if (code2 < 55065) {
                            if (code2 < 55064) {
                              if (55037 <= code2 && code2 <= 55063) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (55064 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 55092) {
                              if (55065 <= code2 && code2 <= 55091) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 55093) {
                                if (55092 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (55093 <= code2 && code2 <= 55119) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 55149) {
                            if (code2 < 55121) {
                              if (55120 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 55148) {
                                if (55121 <= code2 && code2 <= 55147) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (55148 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 55176) {
                              if (55149 <= code2 && code2 <= 55175) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 55177) {
                                if (55176 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (55177 <= code2 && code2 <= 55203) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 68097) {
                        if (code2 < 65279) {
                          if (code2 < 64286) {
                            if (code2 < 55243) {
                              if (55216 <= code2 && code2 <= 55238) {
                                return boundaries_1.CLUSTER_BREAK.V;
                              }
                            } else {
                              if (55243 <= code2 && code2 <= 55291) {
                                return boundaries_1.CLUSTER_BREAK.T;
                              }
                            }
                          } else {
                            if (code2 < 65024) {
                              if (64286 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 65056) {
                                if (65024 <= code2 && code2 <= 65039) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (65056 <= code2 && code2 <= 65071) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 66045) {
                            if (code2 < 65438) {
                              if (65279 === code2) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            } else {
                              if (code2 < 65520) {
                                if (65438 <= code2 && code2 <= 65439) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (65520 <= code2 && code2 <= 65531) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL;
                                }
                              }
                            }
                          } else {
                            if (code2 < 66272) {
                              if (66045 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 66422) {
                                if (66272 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (66422 <= code2 && code2 <= 66426) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 68325) {
                          if (code2 < 68108) {
                            if (code2 < 68101) {
                              if (68097 <= code2 && code2 <= 68099) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (68101 <= code2 && code2 <= 68102) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 68152) {
                              if (68108 <= code2 && code2 <= 68111) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 68159) {
                                if (68152 <= code2 && code2 <= 68154) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (68159 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 69373) {
                            if (code2 < 68900) {
                              if (68325 <= code2 && code2 <= 68326) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 69291) {
                                if (68900 <= code2 && code2 <= 68903) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (69291 <= code2 && code2 <= 69292) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 69446) {
                              if (69373 <= code2 && code2 <= 69375) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 69506) {
                                if (69446 <= code2 && code2 <= 69456) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (69506 <= code2 && code2 <= 69509) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 70016) {
                      if (code2 < 69815) {
                        if (code2 < 69747) {
                          if (code2 < 69634) {
                            if (69632 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (69633 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 69688) {
                              if (69634 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 69744) {
                                if (69688 <= code2 && code2 <= 69702) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (69744 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 69762) {
                            if (code2 < 69759) {
                              if (69747 <= code2 && code2 <= 69748) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (69759 <= code2 && code2 <= 69761) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 69808) {
                              if (69762 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 69811) {
                                if (69808 <= code2 && code2 <= 69810) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (69811 <= code2 && code2 <= 69814) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 69888) {
                          if (code2 < 69821) {
                            if (code2 < 69817) {
                              if (69815 <= code2 && code2 <= 69816) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (69817 <= code2 && code2 <= 69818) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 69826) {
                              if (69821 === code2) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND;
                              }
                            } else {
                              if (69826 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (69837 === code2) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 69933) {
                            if (code2 < 69927) {
                              if (69888 <= code2 && code2 <= 69890) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 69932) {
                                if (69927 <= code2 && code2 <= 69931) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (69932 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 69957) {
                              if (69933 <= code2 && code2 <= 69940) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 70003) {
                                if (69957 <= code2 && code2 <= 69958) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (70003 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 70194) {
                        if (code2 < 70082) {
                          if (code2 < 70067) {
                            if (code2 < 70018) {
                              if (70016 <= code2 && code2 <= 70017) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (70018 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 70070) {
                              if (70067 <= code2 && code2 <= 70069) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 70079) {
                                if (70070 <= code2 && code2 <= 70078) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (70079 <= code2 && code2 <= 70080) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 70095) {
                            if (code2 < 70089) {
                              if (70082 <= code2 && code2 <= 70083) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND;
                              }
                            } else {
                              if (code2 < 70094) {
                                if (70089 <= code2 && code2 <= 70092) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (70094 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 70188) {
                              if (70095 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 70191) {
                                if (70188 <= code2 && code2 <= 70190) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (70191 <= code2 && code2 <= 70193) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 70209) {
                          if (code2 < 70197) {
                            if (code2 < 70196) {
                              if (70194 <= code2 && code2 <= 70195) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (70196 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 70198) {
                              if (70197 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 70206) {
                                if (70198 <= code2 && code2 <= 70199) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (70206 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 70371) {
                            if (code2 < 70367) {
                              if (70209 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 70368) {
                                if (70367 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (70368 <= code2 && code2 <= 70370) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 70400) {
                              if (70371 <= code2 && code2 <= 70378) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 70402) {
                                if (70400 <= code2 && code2 <= 70401) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (70402 <= code2 && code2 <= 70403) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 72343) {
                  if (code2 < 71339) {
                    if (code2 < 70841) {
                      if (code2 < 70512) {
                        if (code2 < 70471) {
                          if (code2 < 70463) {
                            if (code2 < 70462) {
                              if (70459 <= code2 && code2 <= 70460) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (70462 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 70464) {
                              if (70463 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 70465) {
                                if (70464 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (70465 <= code2 && code2 <= 70468) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 70487) {
                            if (code2 < 70475) {
                              if (70471 <= code2 && code2 <= 70472) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (70475 <= code2 && code2 <= 70477) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 70498) {
                              if (70487 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 70502) {
                                if (70498 <= code2 && code2 <= 70499) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (70502 <= code2 && code2 <= 70508) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 70725) {
                          if (code2 < 70712) {
                            if (code2 < 70709) {
                              if (70512 <= code2 && code2 <= 70516) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (70709 <= code2 && code2 <= 70711) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 70720) {
                              if (70712 <= code2 && code2 <= 70719) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 70722) {
                                if (70720 <= code2 && code2 <= 70721) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (70722 <= code2 && code2 <= 70724) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 70832) {
                            if (code2 < 70726) {
                              if (70725 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (70726 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (70750 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 70833) {
                              if (70832 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 70835) {
                                if (70833 <= code2 && code2 <= 70834) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (70835 <= code2 && code2 <= 70840) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 71096) {
                        if (code2 < 70847) {
                          if (code2 < 70843) {
                            if (70841 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (70842 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 70845) {
                              if (70843 <= code2 && code2 <= 70844) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (70845 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (70846 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        } else {
                          if (code2 < 71087) {
                            if (code2 < 70849) {
                              if (70847 <= code2 && code2 <= 70848) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 70850) {
                                if (70849 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (70850 <= code2 && code2 <= 70851) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 71088) {
                              if (71087 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 71090) {
                                if (71088 <= code2 && code2 <= 71089) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (71090 <= code2 && code2 <= 71093) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 71216) {
                          if (code2 < 71102) {
                            if (code2 < 71100) {
                              if (71096 <= code2 && code2 <= 71099) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (71100 <= code2 && code2 <= 71101) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 71103) {
                              if (71102 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 71132) {
                                if (71103 <= code2 && code2 <= 71104) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (71132 <= code2 && code2 <= 71133) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 71229) {
                            if (code2 < 71219) {
                              if (71216 <= code2 && code2 <= 71218) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 71227) {
                                if (71219 <= code2 && code2 <= 71226) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (71227 <= code2 && code2 <= 71228) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 71230) {
                              if (71229 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 71231) {
                                if (71230 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (71231 <= code2 && code2 <= 71232) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 71999) {
                      if (code2 < 71463) {
                        if (code2 < 71350) {
                          if (code2 < 71341) {
                            if (71339 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (71340 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 71342) {
                              if (71341 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 71344) {
                                if (71342 <= code2 && code2 <= 71343) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (71344 <= code2 && code2 <= 71349) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 71453) {
                            if (71350 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (71351 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 71458) {
                              if (71453 <= code2 && code2 <= 71455) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 71462) {
                                if (71458 <= code2 && code2 <= 71461) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (71462 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 71984) {
                          if (code2 < 71727) {
                            if (code2 < 71724) {
                              if (71463 <= code2 && code2 <= 71467) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (71724 <= code2 && code2 <= 71726) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 71736) {
                              if (71727 <= code2 && code2 <= 71735) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 71737) {
                                if (71736 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (71737 <= code2 && code2 <= 71738) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 71995) {
                            if (code2 < 71985) {
                              if (71984 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 71991) {
                                if (71985 <= code2 && code2 <= 71989) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (71991 <= code2 && code2 <= 71992) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 71997) {
                              if (71995 <= code2 && code2 <= 71996) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (71997 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                              if (71998 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 72193) {
                        if (code2 < 72145) {
                          if (code2 < 72001) {
                            if (71999 === code2) {
                              return boundaries_1.CLUSTER_BREAK.PREPEND;
                            }
                            if (72e3 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 72002) {
                              if (72001 === code2) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND;
                              }
                            } else {
                              if (72002 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                              if (72003 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 72156) {
                            if (code2 < 72148) {
                              if (72145 <= code2 && code2 <= 72147) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 72154) {
                                if (72148 <= code2 && code2 <= 72151) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (72154 <= code2 && code2 <= 72155) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 72160) {
                              if (72156 <= code2 && code2 <= 72159) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (72160 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (72164 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 72263) {
                          if (code2 < 72249) {
                            if (code2 < 72243) {
                              if (72193 <= code2 && code2 <= 72202) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (72243 <= code2 && code2 <= 72248) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 72250) {
                              if (72249 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 72251) {
                                if (72250 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.PREPEND;
                                }
                              } else {
                                if (72251 <= code2 && code2 <= 72254) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 72281) {
                            if (code2 < 72273) {
                              if (72263 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 72279) {
                                if (72273 <= code2 && code2 <= 72278) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (72279 <= code2 && code2 <= 72280) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 72324) {
                              if (72281 <= code2 && code2 <= 72283) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 72330) {
                                if (72324 <= code2 && code2 <= 72329) {
                                  return boundaries_1.CLUSTER_BREAK.PREPEND;
                                }
                              } else {
                                if (72330 <= code2 && code2 <= 72342) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 94033) {
                    if (code2 < 73104) {
                      if (code2 < 72881) {
                        if (code2 < 72766) {
                          if (code2 < 72751) {
                            if (code2 < 72344) {
                              if (72343 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (72344 <= code2 && code2 <= 72345) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 72752) {
                              if (72751 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 72760) {
                                if (72752 <= code2 && code2 <= 72758) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (72760 <= code2 && code2 <= 72765) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 72850) {
                            if (72766 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (72767 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 72873) {
                              if (72850 <= code2 && code2 <= 72871) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 72874) {
                                if (72873 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (72874 <= code2 && code2 <= 72880) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 73018) {
                          if (code2 < 72884) {
                            if (code2 < 72882) {
                              if (72881 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (72882 <= code2 && code2 <= 72883) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 72885) {
                              if (72884 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 73009) {
                                if (72885 <= code2 && code2 <= 72886) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (73009 <= code2 && code2 <= 73014) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 73030) {
                            if (code2 < 73020) {
                              if (73018 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 73023) {
                                if (73020 <= code2 && code2 <= 73021) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (73023 <= code2 && code2 <= 73029) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 73031) {
                              if (73030 === code2) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND;
                              }
                            } else {
                              if (code2 < 73098) {
                                if (73031 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (73098 <= code2 && code2 <= 73102) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 73526) {
                        if (code2 < 73459) {
                          if (code2 < 73109) {
                            if (code2 < 73107) {
                              if (73104 <= code2 && code2 <= 73105) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (73107 <= code2 && code2 <= 73108) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 73110) {
                              if (73109 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (73110 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                              if (73111 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 73474) {
                            if (code2 < 73461) {
                              if (73459 <= code2 && code2 <= 73460) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 73472) {
                                if (73461 <= code2 && code2 <= 73462) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (73472 <= code2 && code2 <= 73473) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 73475) {
                              if (73474 === code2) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND;
                              }
                            } else {
                              if (code2 < 73524) {
                                if (73475 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (73524 <= code2 && code2 <= 73525) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 78896) {
                          if (code2 < 73536) {
                            if (code2 < 73534) {
                              if (73526 <= code2 && code2 <= 73530) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (73534 <= code2 && code2 <= 73535) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 73537) {
                              if (73536 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (73537 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                              if (73538 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 92912) {
                            if (code2 < 78912) {
                              if (78896 <= code2 && code2 <= 78911) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            } else {
                              if (code2 < 78919) {
                                if (78912 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (78919 <= code2 && code2 <= 78933) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 92976) {
                              if (92912 <= code2 && code2 <= 92916) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 94031) {
                                if (92976 <= code2 && code2 <= 92982) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (94031 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 121476) {
                      if (code2 < 119143) {
                        if (code2 < 113824) {
                          if (code2 < 94180) {
                            if (code2 < 94095) {
                              if (94033 <= code2 && code2 <= 94087) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (94095 <= code2 && code2 <= 94098) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 94192) {
                              if (94180 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 113821) {
                                if (94192 <= code2 && code2 <= 94193) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (113821 <= code2 && code2 <= 113822) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 118576) {
                            if (code2 < 118528) {
                              if (113824 <= code2 && code2 <= 113827) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            } else {
                              if (118528 <= code2 && code2 <= 118573) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 119141) {
                              if (118576 <= code2 && code2 <= 118598) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (119141 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (119142 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 119173) {
                          if (code2 < 119150) {
                            if (code2 < 119149) {
                              if (119143 <= code2 && code2 <= 119145) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (119149 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 119155) {
                              if (119150 <= code2 && code2 <= 119154) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 119163) {
                                if (119155 <= code2 && code2 <= 119162) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL;
                                }
                              } else {
                                if (119163 <= code2 && code2 <= 119170) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 121344) {
                            if (code2 < 119210) {
                              if (119173 <= code2 && code2 <= 119179) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 119362) {
                                if (119210 <= code2 && code2 <= 119213) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (119362 <= code2 && code2 <= 119364) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 121403) {
                              if (121344 <= code2 && code2 <= 121398) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 121461) {
                                if (121403 <= code2 && code2 <= 121452) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (121461 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 123628) {
                        if (code2 < 122907) {
                          if (code2 < 121505) {
                            if (code2 < 121499) {
                              if (121476 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (121499 <= code2 && code2 <= 121503) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 122880) {
                              if (121505 <= code2 && code2 <= 121519) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 122888) {
                                if (122880 <= code2 && code2 <= 122886) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (122888 <= code2 && code2 <= 122904) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 123023) {
                            if (code2 < 122915) {
                              if (122907 <= code2 && code2 <= 122913) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 122918) {
                                if (122915 <= code2 && code2 <= 122916) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (122918 <= code2 && code2 <= 122922) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 123184) {
                              if (123023 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 123566) {
                                if (123184 <= code2 && code2 <= 123190) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (123566 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 127995) {
                          if (code2 < 125136) {
                            if (code2 < 124140) {
                              if (123628 <= code2 && code2 <= 123631) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (124140 <= code2 && code2 <= 124143) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 125252) {
                              if (125136 <= code2 && code2 <= 125142) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 127462) {
                                if (125252 <= code2 && code2 <= 125258) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (127462 <= code2 && code2 <= 127487) {
                                  return boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 917632) {
                            if (code2 < 917504) {
                              if (127995 <= code2 && code2 <= 127999) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 917536) {
                                if (917504 <= code2 && code2 <= 917535) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL;
                                }
                              } else {
                                if (917536 <= code2 && code2 <= 917631) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 917760) {
                              if (917632 <= code2 && code2 <= 917759) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            } else {
                              if (code2 < 918e3) {
                                if (917760 <= code2 && code2 <= 917999) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (918e3 <= code2 && code2 <= 921599) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          return boundaries_1.CLUSTER_BREAK.OTHER;
        }
        /**
         * Given a Unicode code point, returns if symbol is an extended pictographic or some other break
         * @param code {number} Unicode code point
         * @returns {number}
         */
        static getEmojiProperty(code2) {
          if (code2 < 10160) {
            if (code2 < 9728) {
              if (code2 < 9e3) {
                if (code2 < 8482) {
                  if (code2 < 8252) {
                    if (169 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                    if (174 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (8252 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                    if (8265 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  }
                } else {
                  if (code2 < 8596) {
                    if (8482 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                    if (8505 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (code2 < 8617) {
                      if (8596 <= code2 && code2 <= 8601) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 8986) {
                        if (8617 <= code2 && code2 <= 8618) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (8986 <= code2 && code2 <= 8987) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 9410) {
                  if (code2 < 9167) {
                    if (9e3 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                    if (9096 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (code2 < 9193) {
                      if (9167 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 9208) {
                        if (9193 <= code2 && code2 <= 9203) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (9208 <= code2 && code2 <= 9210) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 9654) {
                    if (code2 < 9642) {
                      if (9410 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (9642 <= code2 && code2 <= 9643) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 9664) {
                      if (9654 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 9723) {
                        if (9664 === code2) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (9723 <= code2 && code2 <= 9726) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                }
              }
            } else {
              if (code2 < 10035) {
                if (code2 < 10004) {
                  if (code2 < 9748) {
                    if (code2 < 9735) {
                      if (9728 <= code2 && code2 <= 9733) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (9735 <= code2 && code2 <= 9746) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 9872) {
                      if (9748 <= code2 && code2 <= 9861) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 9992) {
                        if (9872 <= code2 && code2 <= 9989) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (9992 <= code2 && code2 <= 10002) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 10013) {
                    if (10004 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                    if (10006 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (code2 < 10017) {
                      if (10013 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (10017 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                      if (10024 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  }
                }
              } else {
                if (code2 < 10067) {
                  if (code2 < 10055) {
                    if (code2 < 10052) {
                      if (10035 <= code2 && code2 <= 10036) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (10052 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 10060) {
                      if (10055 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (10060 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                      if (10062 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  }
                } else {
                  if (code2 < 10083) {
                    if (code2 < 10071) {
                      if (10067 <= code2 && code2 <= 10069) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (10071 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 10133) {
                      if (10083 <= code2 && code2 <= 10087) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 10145) {
                        if (10133 <= code2 && code2 <= 10135) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (10145 === code2) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                }
              }
            }
          } else {
            if (code2 < 127489) {
              if (code2 < 12951) {
                if (code2 < 11035) {
                  if (code2 < 10548) {
                    if (10160 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                    if (10175 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (code2 < 11013) {
                      if (10548 <= code2 && code2 <= 10549) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (11013 <= code2 && code2 <= 11015) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  }
                } else {
                  if (code2 < 11093) {
                    if (code2 < 11088) {
                      if (11035 <= code2 && code2 <= 11036) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (11088 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 12336) {
                      if (11093 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (12336 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                      if (12349 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  }
                }
              } else {
                if (code2 < 127340) {
                  if (code2 < 126976) {
                    if (12951 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                    if (12953 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (code2 < 127245) {
                      if (126976 <= code2 && code2 <= 127231) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 127279) {
                        if (127245 <= code2 && code2 <= 127247) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (127279 === code2) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 127374) {
                    if (code2 < 127358) {
                      if (127340 <= code2 && code2 <= 127345) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (127358 <= code2 && code2 <= 127359) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 127377) {
                      if (127374 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 127405) {
                        if (127377 <= code2 && code2 <= 127386) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (127405 <= code2 && code2 <= 127461) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                }
              }
            } else {
              if (code2 < 128981) {
                if (code2 < 127561) {
                  if (code2 < 127535) {
                    if (code2 < 127514) {
                      if (127489 <= code2 && code2 <= 127503) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (127514 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 127538) {
                      if (127535 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 127548) {
                        if (127538 <= code2 && code2 <= 127546) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (127548 <= code2 && code2 <= 127551) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 128326) {
                    if (code2 < 128e3) {
                      if (127561 <= code2 && code2 <= 127994) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (128e3 <= code2 && code2 <= 128317) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 128640) {
                      if (128326 <= code2 && code2 <= 128591) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 128884) {
                        if (128640 <= code2 && code2 <= 128767) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (128884 <= code2 && code2 <= 128895) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 129198) {
                  if (code2 < 129096) {
                    if (code2 < 129036) {
                      if (128981 <= code2 && code2 <= 129023) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (129036 <= code2 && code2 <= 129039) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 129114) {
                      if (129096 <= code2 && code2 <= 129103) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 129160) {
                        if (129114 <= code2 && code2 <= 129119) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (129160 <= code2 && code2 <= 129167) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 129340) {
                    if (code2 < 129292) {
                      if (129198 <= code2 && code2 <= 129279) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (129292 <= code2 && code2 <= 129338) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 129351) {
                      if (129340 <= code2 && code2 <= 129349) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 130048) {
                        if (129351 <= code2 && code2 <= 129791) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (130048 <= code2 && code2 <= 131069) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          return boundaries_1.CLUSTER_BREAK.OTHER;
        }
      };
      exports.default = Graphemer;
    }
  });

  // node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/index.js
  var require_lib = __commonJS({
    "node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/index.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var Graphemer_1 = __importDefault(require_Graphemer());
      exports.default = Graphemer_1.default;
    }
  });

  // node_modules/.pnpm/@atproto+common-web@0.4.2/node_modules/@atproto/common-web/dist/strings.js
  var require_strings = __commonJS({
    "node_modules/.pnpm/@atproto+common-web@0.4.2/node_modules/@atproto/common-web/dist/strings.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
        var ownKeys = function(o) {
          ownKeys = Object.getOwnPropertyNames || function(o2) {
            var ar = [];
            for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
            return ar;
          };
          return ownKeys(o);
        };
        return function(mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      }();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateLanguage = exports.parseLanguage = exports.b64UrlToUtf8 = exports.utf8ToB64Url = exports.graphemeLen = exports.utf8Len = void 0;
      var graphemer_1 = __importDefault(require_lib());
      var ui8 = __importStar((init_src2(), __toCommonJS(src_exports)));
      var utf8Len = (str) => {
        return new TextEncoder().encode(str).byteLength;
      };
      exports.utf8Len = utf8Len;
      var graphemeLen = (str) => {
        const splitter = new graphemer_1.default();
        return splitter.countGraphemes(str);
      };
      exports.graphemeLen = graphemeLen;
      var utf8ToB64Url = (utf8) => {
        return ui8.toString(ui8.fromString(utf8, "utf8"), "base64url");
      };
      exports.utf8ToB64Url = utf8ToB64Url;
      var b64UrlToUtf8 = (b64) => {
        return ui8.toString(ui8.fromString(b64, "base64url"), "utf8");
      };
      exports.b64UrlToUtf8 = b64UrlToUtf8;
      var parseLanguage = (langTag) => {
        const parsed = langTag.match(bcp47Regexp);
        if (!parsed?.groups)
          return null;
        const parts = parsed.groups;
        return {
          grandfathered: parts.grandfathered,
          language: parts.language,
          extlang: parts.extlang,
          script: parts.script,
          region: parts.region,
          variant: parts.variant,
          extension: parts.extension,
          privateUse: parts.privateUseA || parts.privateUseB
        };
      };
      exports.parseLanguage = parseLanguage;
      var validateLanguage = (langTag) => {
        return bcp47Regexp.test(langTag);
      };
      exports.validateLanguage = validateLanguage;
      var bcp47Regexp = /^((?<grandfathered>(en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((?<language>([A-Za-z]{2,3}(-(?<extlang>[A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-(?<script>[A-Za-z]{4}))?(-(?<region>[A-Za-z]{2}|[0-9]{3}))?(-(?<variant>[A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-(?<extension>[0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8})+))*(-(?<privateUseA>x(-[A-Za-z0-9]{1,8})+))?)|(?<privateUseB>x(-[A-Za-z0-9]{1,8})+))$/;
    }
  });

  // node_modules/.pnpm/@atproto+common-web@0.4.2/node_modules/@atproto/common-web/dist/did-doc.js
  var require_did_doc = __commonJS({
    "node_modules/.pnpm/@atproto+common-web@0.4.2/node_modules/@atproto/common-web/dist/did-doc.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.didDocument = exports.getServiceEndpoint = exports.getNotifEndpoint = exports.getFeedGenEndpoint = exports.getPdsEndpoint = exports.getSigningDidKey = exports.getVerificationMaterial = exports.getSigningKey = exports.getHandle = exports.getDid = exports.isValidDidDoc = void 0;
      var zod_1 = require_cjs();
      var isValidDidDoc = (doc) => {
        return exports.didDocument.safeParse(doc).success;
      };
      exports.isValidDidDoc = isValidDidDoc;
      var getDid = (doc) => {
        const id = doc.id;
        if (typeof id !== "string") {
          throw new Error("No `id` on document");
        }
        return id;
      };
      exports.getDid = getDid;
      var getHandle = (doc) => {
        const aka = doc.alsoKnownAs;
        if (aka) {
          for (let i = 0; i < aka.length; i++) {
            const alias = aka[i];
            if (alias.startsWith("at://")) {
              return alias.slice(5);
            }
          }
        }
        return void 0;
      };
      exports.getHandle = getHandle;
      var getSigningKey = (doc) => {
        return (0, exports.getVerificationMaterial)(doc, "atproto");
      };
      exports.getSigningKey = getSigningKey;
      var getVerificationMaterial = (doc, keyId) => {
        const key = findItemById(doc, "verificationMethod", `#${keyId}`);
        if (!key) {
          return void 0;
        }
        if (!key.publicKeyMultibase) {
          return void 0;
        }
        return {
          type: key.type,
          publicKeyMultibase: key.publicKeyMultibase
        };
      };
      exports.getVerificationMaterial = getVerificationMaterial;
      var getSigningDidKey = (doc) => {
        const parsed = (0, exports.getSigningKey)(doc);
        if (!parsed)
          return;
        return `did:key:${parsed.publicKeyMultibase}`;
      };
      exports.getSigningDidKey = getSigningDidKey;
      var getPdsEndpoint = (doc) => {
        return (0, exports.getServiceEndpoint)(doc, {
          id: "#atproto_pds",
          type: "AtprotoPersonalDataServer"
        });
      };
      exports.getPdsEndpoint = getPdsEndpoint;
      var getFeedGenEndpoint = (doc) => {
        return (0, exports.getServiceEndpoint)(doc, {
          id: "#bsky_fg",
          type: "BskyFeedGenerator"
        });
      };
      exports.getFeedGenEndpoint = getFeedGenEndpoint;
      var getNotifEndpoint = (doc) => {
        return (0, exports.getServiceEndpoint)(doc, {
          id: "#bsky_notif",
          type: "BskyNotificationService"
        });
      };
      exports.getNotifEndpoint = getNotifEndpoint;
      var getServiceEndpoint = (doc, opts) => {
        const service2 = findItemById(doc, "service", opts.id);
        if (!service2) {
          return void 0;
        }
        if (opts.type && service2.type !== opts.type) {
          return void 0;
        }
        if (typeof service2.serviceEndpoint !== "string") {
          return void 0;
        }
        return validateUrl(service2.serviceEndpoint);
      };
      exports.getServiceEndpoint = getServiceEndpoint;
      function findItemById(doc, type, id) {
        const items = doc[type];
        if (items) {
          for (let i = 0; i < items.length; i++) {
            const item = items[i];
            const itemId = item.id;
            if (itemId[0] === "#" ? itemId === id : (
              // Optimized version of: itemId === `${doc.id}${id}`
              itemId.length === doc.id.length + id.length && itemId[doc.id.length] === "#" && itemId.endsWith(id) && itemId.startsWith(doc.id)
            )) {
              return item;
            }
          }
        }
        return void 0;
      }
      var validateUrl = (urlStr) => {
        if (!urlStr.startsWith("http://") && !urlStr.startsWith("https://")) {
          return void 0;
        }
        if (!canParseUrl(urlStr)) {
          return void 0;
        }
        return urlStr;
      };
      var canParseUrl = URL.canParse ?? // URL.canParse is not available in Node.js < 18.17.0
      ((urlStr) => {
        try {
          new URL(urlStr);
          return true;
        } catch {
          return false;
        }
      });
      var verificationMethod = zod_1.z.object({
        id: zod_1.z.string(),
        type: zod_1.z.string(),
        controller: zod_1.z.string(),
        publicKeyMultibase: zod_1.z.string().optional()
      });
      var service = zod_1.z.object({
        id: zod_1.z.string(),
        type: zod_1.z.string(),
        serviceEndpoint: zod_1.z.union([zod_1.z.string(), zod_1.z.record(zod_1.z.unknown())])
      });
      exports.didDocument = zod_1.z.object({
        id: zod_1.z.string(),
        alsoKnownAs: zod_1.z.array(zod_1.z.string()).optional(),
        verificationMethod: zod_1.z.array(verificationMethod).optional(),
        service: zod_1.z.array(service).optional()
      });
    }
  });

  // node_modules/.pnpm/@atproto+common-web@0.4.2/node_modules/@atproto/common-web/dist/index.js
  var require_dist16 = __commonJS({
    "node_modules/.pnpm/@atproto+common-web@0.4.2/node_modules/@atproto/common-web/dist/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
        var ownKeys = function(o) {
          ownKeys = Object.getOwnPropertyNames || function(o2) {
            var ar = [];
            for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
            return ar;
          };
          return ownKeys(o);
        };
        return function(mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      }();
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.util = exports.check = void 0;
      exports.check = __importStar(require_check());
      exports.util = __importStar(require_util13());
      __exportStar(require_arrays(), exports);
      __exportStar(require_async(), exports);
      __exportStar(require_util13(), exports);
      __exportStar(require_tid2(), exports);
      __exportStar(require_ipld(), exports);
      __exportStar(require_retry(), exports);
      __exportStar(require_types5(), exports);
      __exportStar(require_times(), exports);
      __exportStar(require_strings(), exports);
      __exportStar(require_did_doc(), exports);
    }
  });

  // node_modules/.pnpm/@atproto+lexicon@0.4.11/node_modules/@atproto/lexicon/dist/blob-refs.js
  var require_blob_refs = __commonJS({
    "node_modules/.pnpm/@atproto+lexicon@0.4.11/node_modules/@atproto/lexicon/dist/blob-refs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BlobRef = exports.jsonBlobRef = exports.untypedJsonBlobRef = exports.typedJsonBlobRef = void 0;
      var cid_1 = (init_cid(), __toCommonJS(cid_exports));
      var zod_1 = require_cjs();
      var common_web_1 = require_dist16();
      exports.typedJsonBlobRef = zod_1.z.object({
        $type: zod_1.z.literal("blob"),
        ref: common_web_1.schema.cid,
        mimeType: zod_1.z.string(),
        size: zod_1.z.number()
      }).strict();
      exports.untypedJsonBlobRef = zod_1.z.object({
        cid: zod_1.z.string(),
        mimeType: zod_1.z.string()
      }).strict();
      exports.jsonBlobRef = zod_1.z.union([exports.typedJsonBlobRef, exports.untypedJsonBlobRef]);
      var BlobRef = class _BlobRef {
        constructor(ref, mimeType, size, original) {
          Object.defineProperty(this, "ref", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ref
          });
          Object.defineProperty(this, "mimeType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: mimeType
          });
          Object.defineProperty(this, "size", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: size
          });
          Object.defineProperty(this, "original", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.original = original ?? {
            $type: "blob",
            ref,
            mimeType,
            size
          };
        }
        static asBlobRef(obj) {
          if (common_web_1.check.is(obj, exports.jsonBlobRef)) {
            return _BlobRef.fromJsonRef(obj);
          }
          return null;
        }
        static fromJsonRef(json) {
          if (common_web_1.check.is(json, exports.typedJsonBlobRef)) {
            return new _BlobRef(json.ref, json.mimeType, json.size);
          } else {
            return new _BlobRef(cid_1.CID.parse(json.cid), json.mimeType, -1, json);
          }
        }
        ipld() {
          return {
            $type: "blob",
            ref: this.ref,
            mimeType: this.mimeType,
            size: this.size
          };
        }
        toJSON() {
          return (0, common_web_1.ipldToJson)(this.ipld());
        }
      };
      exports.BlobRef = BlobRef;
    }
  });

  // node_modules/.pnpm/@atproto+lexicon@0.4.11/node_modules/@atproto/lexicon/dist/validators/blob.js
  var require_blob = __commonJS({
    "node_modules/.pnpm/@atproto+lexicon@0.4.11/node_modules/@atproto/lexicon/dist/validators/blob.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.blob = blob;
      var blob_refs_1 = require_blob_refs();
      var types_1 = require_types4();
      function blob(lexicons, path, def, value) {
        if (!value || !(value instanceof blob_refs_1.BlobRef)) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} should be a blob ref`)
          };
        }
        return { success: true, value };
      }
    }
  });

  // node_modules/.pnpm/iso-datestring-validator@2.2.2/node_modules/iso-datestring-validator/dist/index.js
  var require_dist17 = __commonJS({
    "node_modules/.pnpm/iso-datestring-validator@2.2.2/node_modules/iso-datestring-validator/dist/index.js"(exports) {
      (() => {
        "use strict";
        var e = { d: (t2, r2) => {
          for (var n2 in r2) e.o(r2, n2) && !e.o(t2, n2) && Object.defineProperty(t2, n2, { enumerable: true, get: r2[n2] });
        }, o: (e2, t2) => Object.prototype.hasOwnProperty.call(e2, t2), r: (e2) => {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
        } }, t = {};
        function r(e2, t2) {
          return void 0 === t2 && (t2 = "-"), new RegExp("^(?!0{4}" + t2 + "0{2}" + t2 + "0{2})((?=[0-9]{4}" + t2 + "(((0[^2])|1[0-2])|02(?=" + t2 + "(([0-1][0-9])|2[0-8])))" + t2 + "[0-9]{2})|(?=((([13579][26])|([2468][048])|(0[48]))0{2})|([0-9]{2}((((0|[2468])[48])|[2468][048])|([13579][26])))" + t2 + "02" + t2 + "29))([0-9]{4})" + t2 + "(?!((0[469])|11)" + t2 + "31)((0[1,3-9]|1[0-2])|(02(?!" + t2 + "3)))" + t2 + "(0[1-9]|[1-2][0-9]|3[0-1])$").test(e2);
        }
        function n(e2) {
          var t2 = /\D/.exec(e2);
          return t2 ? t2[0] : "";
        }
        function i(e2, t2, r2) {
          void 0 === t2 && (t2 = ":"), void 0 === r2 && (r2 = false);
          var i2 = new RegExp("^([0-1]|2(?=([0-3])|4" + t2 + "00))[0-9]" + t2 + "[0-5][0-9](" + t2 + "([0-5]|6(?=0))[0-9])?(.[0-9]{1,9})?$");
          if (!r2 || !/[Z+\-]/.test(e2)) return i2.test(e2);
          if (/Z$/.test(e2)) return i2.test(e2.replace("Z", ""));
          var o2 = e2.includes("+"), a2 = e2.split(/[+-]/), u2 = a2[0], d2 = a2[1];
          return i2.test(u2) && function(e3, t3, r3) {
            return void 0 === r3 && (r3 = ":"), new RegExp(t3 ? "^(0(?!(2" + r3 + "4)|0" + r3 + "3)|1(?=([0-1]|2(?=" + r3 + "[04])|[34](?=" + r3 + "0))))([03469](?=" + r3 + "[03])|[17](?=" + r3 + "0)|2(?=" + r3 + "[04])|5(?=" + r3 + "[034])|8(?=" + r3 + "[04]))" + r3 + "([03](?=0)|4(?=5))[05]$" : "^(0(?=[^0])|1(?=[0-2]))([39](?=" + r3 + "[03])|[0-24-8](?=" + r3 + "00))" + r3 + "[03]0$").test(e3);
          }(d2, o2, n(d2));
        }
        function o(e2) {
          var t2 = e2.split("T"), o2 = t2[0], a2 = t2[1], u2 = r(o2, n(o2));
          if (!a2) return false;
          var d2, s = (d2 = a2.match(/([^Z+\-\d])(?=\d+\1)/), Array.isArray(d2) ? d2[0] : "");
          return u2 && i(a2, s, true);
        }
        function a(e2, t2) {
          return void 0 === t2 && (t2 = "-"), new RegExp("^[0-9]{4}" + t2 + "(0(?=[^0])|1(?=[0-2]))[0-9]$").test(e2);
        }
        e.r(t), e.d(t, { isValidDate: () => r, isValidISODateString: () => o, isValidTime: () => i, isValidYearMonth: () => a });
        var u = exports;
        for (var d in t) u[d] = t[d];
        t.__esModule && Object.defineProperty(u, "__esModule", { value: true });
      })();
    }
  });

  // node_modules/.pnpm/@atproto+lexicon@0.4.11/node_modules/@atproto/lexicon/dist/validators/formats.js
  var require_formats = __commonJS({
    "node_modules/.pnpm/@atproto+lexicon@0.4.11/node_modules/@atproto/lexicon/dist/validators/formats.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.datetime = datetime;
      exports.uri = uri;
      exports.atUri = atUri;
      exports.did = did;
      exports.handle = handle;
      exports.atIdentifier = atIdentifier;
      exports.nsid = nsid;
      exports.cid = cid;
      exports.language = language;
      exports.tid = tid;
      exports.recordKey = recordKey;
      var iso_datestring_validator_1 = require_dist17();
      var cid_1 = (init_cid(), __toCommonJS(cid_exports));
      var common_web_1 = require_dist16();
      var syntax_1 = require_dist12();
      var types_1 = require_types4();
      function datetime(path, value) {
        try {
          if (!(0, iso_datestring_validator_1.isValidISODateString)(value)) {
            throw new Error();
          }
        } catch {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be an valid atproto datetime (both RFC-3339 and ISO-8601)`)
          };
        }
        return { success: true, value };
      }
      function uri(path, value) {
        const isUri = value.match(/^\w+:(?:\/\/)?[^\s/][^\s]*$/) !== null;
        if (!isUri) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a uri`)
          };
        }
        return { success: true, value };
      }
      function atUri(path, value) {
        try {
          (0, syntax_1.ensureValidAtUri)(value);
        } catch {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a valid at-uri`)
          };
        }
        return { success: true, value };
      }
      function did(path, value) {
        try {
          (0, syntax_1.ensureValidDid)(value);
        } catch {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a valid did`)
          };
        }
        return { success: true, value };
      }
      function handle(path, value) {
        try {
          (0, syntax_1.ensureValidHandle)(value);
        } catch {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a valid handle`)
          };
        }
        return { success: true, value };
      }
      function atIdentifier(path, value) {
        if (value.startsWith("did:")) {
          const didResult = did(path, value);
          if (didResult.success)
            return didResult;
        } else {
          const handleResult = handle(path, value);
          if (handleResult.success)
            return handleResult;
        }
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be a valid did or a handle`)
        };
      }
      function nsid(path, value) {
        try {
          (0, syntax_1.ensureValidNsid)(value);
        } catch {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a valid nsid`)
          };
        }
        return { success: true, value };
      }
      function cid(path, value) {
        try {
          cid_1.CID.parse(value);
        } catch {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a cid string`)
          };
        }
        return { success: true, value };
      }
      function language(path, value) {
        if ((0, common_web_1.validateLanguage)(value)) {
          return { success: true, value };
        }
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be a well-formed BCP 47 language tag`)
        };
      }
      function tid(path, value) {
        if ((0, syntax_1.isValidTid)(value)) {
          return { success: true, value };
        }
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be a valid TID`)
        };
      }
      function recordKey(path, value) {
        try {
          (0, syntax_1.ensureValidRecordKey)(value);
        } catch {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a valid Record Key`)
          };
        }
        return { success: true, value };
      }
    }
  });

  // node_modules/.pnpm/@atproto+lexicon@0.4.11/node_modules/@atproto/lexicon/dist/validators/primitives.js
  var require_primitives = __commonJS({
    "node_modules/.pnpm/@atproto+lexicon@0.4.11/node_modules/@atproto/lexicon/dist/validators/primitives.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
        var ownKeys = function(o) {
          ownKeys = Object.getOwnPropertyNames || function(o2) {
            var ar = [];
            for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
            return ar;
          };
          return ownKeys(o);
        };
        return function(mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      }();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validate = validate;
      var cid_1 = (init_cid(), __toCommonJS(cid_exports));
      var common_web_1 = require_dist16();
      var types_1 = require_types4();
      var formats = __importStar(require_formats());
      function validate(lexicons, path, def, value) {
        switch (def.type) {
          case "boolean":
            return boolean(lexicons, path, def, value);
          case "integer":
            return integer(lexicons, path, def, value);
          case "string":
            return string2(lexicons, path, def, value);
          case "bytes":
            return bytes(lexicons, path, def, value);
          case "cid-link":
            return cidLink(lexicons, path, def, value);
          case "unknown":
            return unknown(lexicons, path, def, value);
          default:
            return {
              success: false,
              error: new types_1.ValidationError(`Unexpected lexicon type: ${def.type}`)
            };
        }
      }
      function boolean(lexicons, path, def, value) {
        def = def;
        const type = typeof value;
        if (type === "undefined") {
          if (typeof def.default === "boolean") {
            return { success: true, value: def.default };
          }
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a boolean`)
          };
        } else if (type !== "boolean") {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a boolean`)
          };
        }
        if (typeof def.const === "boolean") {
          if (value !== def.const) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must be ${def.const}`)
            };
          }
        }
        return { success: true, value };
      }
      function integer(lexicons, path, def, value) {
        def = def;
        const type = typeof value;
        if (type === "undefined") {
          if (typeof def.default === "number") {
            return { success: true, value: def.default };
          }
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be an integer`)
          };
        } else if (!Number.isInteger(value)) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be an integer`)
          };
        }
        if (typeof def.const === "number") {
          if (value !== def.const) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must be ${def.const}`)
            };
          }
        }
        if (Array.isArray(def.enum)) {
          if (!def.enum.includes(value)) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must be one of (${def.enum.join("|")})`)
            };
          }
        }
        if (typeof def.maximum === "number") {
          if (value > def.maximum) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} can not be greater than ${def.maximum}`)
            };
          }
        }
        if (typeof def.minimum === "number") {
          if (value < def.minimum) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} can not be less than ${def.minimum}`)
            };
          }
        }
        return { success: true, value };
      }
      function string2(lexicons, path, def, value) {
        def = def;
        if (typeof value === "undefined") {
          if (typeof def.default === "string") {
            return { success: true, value: def.default };
          }
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a string`)
          };
        } else if (typeof value !== "string") {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a string`)
          };
        }
        if (typeof def.const === "string") {
          if (value !== def.const) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must be ${def.const}`)
            };
          }
        }
        if (Array.isArray(def.enum)) {
          if (!def.enum.includes(value)) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must be one of (${def.enum.join("|")})`)
            };
          }
        }
        if (typeof def.minLength === "number" || typeof def.maxLength === "number") {
          if (typeof def.minLength === "number" && value.length * 3 < def.minLength) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must not be shorter than ${def.minLength} characters`)
            };
          }
          let canSkipUtf8LenChecks = false;
          if (typeof def.minLength === "undefined" && typeof def.maxLength === "number" && value.length * 3 <= def.maxLength) {
            canSkipUtf8LenChecks = true;
          }
          if (!canSkipUtf8LenChecks) {
            const len = (0, common_web_1.utf8Len)(value);
            if (typeof def.maxLength === "number") {
              if (len > def.maxLength) {
                return {
                  success: false,
                  error: new types_1.ValidationError(`${path} must not be longer than ${def.maxLength} characters`)
                };
              }
            }
            if (typeof def.minLength === "number") {
              if (len < def.minLength) {
                return {
                  success: false,
                  error: new types_1.ValidationError(`${path} must not be shorter than ${def.minLength} characters`)
                };
              }
            }
          }
        }
        if (typeof def.maxGraphemes === "number" || typeof def.minGraphemes === "number") {
          let needsMaxGraphemesCheck = false;
          let needsMinGraphemesCheck = false;
          if (typeof def.maxGraphemes === "number") {
            if (value.length <= def.maxGraphemes) {
              needsMaxGraphemesCheck = false;
            } else {
              needsMaxGraphemesCheck = true;
            }
          }
          if (typeof def.minGraphemes === "number") {
            if (value.length < def.minGraphemes) {
              return {
                success: false,
                error: new types_1.ValidationError(`${path} must not be shorter than ${def.minGraphemes} graphemes`)
              };
            } else {
              needsMinGraphemesCheck = true;
            }
          }
          if (needsMaxGraphemesCheck || needsMinGraphemesCheck) {
            const len = (0, common_web_1.graphemeLen)(value);
            if (typeof def.maxGraphemes === "number") {
              if (len > def.maxGraphemes) {
                return {
                  success: false,
                  error: new types_1.ValidationError(`${path} must not be longer than ${def.maxGraphemes} graphemes`)
                };
              }
            }
            if (typeof def.minGraphemes === "number") {
              if (len < def.minGraphemes) {
                return {
                  success: false,
                  error: new types_1.ValidationError(`${path} must not be shorter than ${def.minGraphemes} graphemes`)
                };
              }
            }
          }
        }
        if (typeof def.format === "string") {
          switch (def.format) {
            case "datetime":
              return formats.datetime(path, value);
            case "uri":
              return formats.uri(path, value);
            case "at-uri":
              return formats.atUri(path, value);
            case "did":
              return formats.did(path, value);
            case "handle":
              return formats.handle(path, value);
            case "at-identifier":
              return formats.atIdentifier(path, value);
            case "nsid":
              return formats.nsid(path, value);
            case "cid":
              return formats.cid(path, value);
            case "language":
              return formats.language(path, value);
            case "tid":
              return formats.tid(path, value);
            case "record-key":
              return formats.recordKey(path, value);
          }
        }
        return { success: true, value };
      }
      function bytes(lexicons, path, def, value) {
        def = def;
        if (!value || !(value instanceof Uint8Array)) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a byte array`)
          };
        }
        if (typeof def.maxLength === "number") {
          if (value.byteLength > def.maxLength) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must not be larger than ${def.maxLength} bytes`)
            };
          }
        }
        if (typeof def.minLength === "number") {
          if (value.byteLength < def.minLength) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must not be smaller than ${def.minLength} bytes`)
            };
          }
        }
        return { success: true, value };
      }
      function cidLink(lexicons, path, def, value) {
        if (cid_1.CID.asCID(value) === null) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a CID`)
          };
        }
        return { success: true, value };
      }
      function unknown(lexicons, path, def, value) {
        if (!value || typeof value !== "object") {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be an object`)
          };
        }
        return { success: true, value };
      }
    }
  });

  // node_modules/.pnpm/@atproto+lexicon@0.4.11/node_modules/@atproto/lexicon/dist/validators/complex.js
  var require_complex = __commonJS({
    "node_modules/.pnpm/@atproto+lexicon@0.4.11/node_modules/@atproto/lexicon/dist/validators/complex.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validate = validate;
      exports.array = array;
      exports.object = object;
      exports.validateOneOf = validateOneOf;
      var types_1 = require_types4();
      var util_1 = require_util12();
      var blob_1 = require_blob();
      var primitives_1 = require_primitives();
      function validate(lexicons, path, def, value) {
        switch (def.type) {
          case "object":
            return object(lexicons, path, def, value);
          case "array":
            return array(lexicons, path, def, value);
          case "blob":
            return (0, blob_1.blob)(lexicons, path, def, value);
          default:
            return (0, primitives_1.validate)(lexicons, path, def, value);
        }
      }
      function array(lexicons, path, def, value) {
        if (!Array.isArray(value)) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be an array`)
          };
        }
        if (typeof def.maxLength === "number") {
          if (value.length > def.maxLength) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must not have more than ${def.maxLength} elements`)
            };
          }
        }
        if (typeof def.minLength === "number") {
          if (value.length < def.minLength) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must not have fewer than ${def.minLength} elements`)
            };
          }
        }
        const itemsDef = def.items;
        for (let i = 0; i < value.length; i++) {
          const itemValue = value[i];
          const itemPath = `${path}/${i}`;
          const res = validateOneOf(lexicons, itemPath, itemsDef, itemValue);
          if (!res.success) {
            return res;
          }
        }
        return { success: true, value };
      }
      function object(lexicons, path, def, value) {
        if (!(0, types_1.isObj)(value)) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be an object`)
          };
        }
        let resultValue = value;
        if ("properties" in def && def.properties != null) {
          for (const key in def.properties) {
            const keyValue = value[key];
            if (keyValue === null && def.nullable?.includes(key)) {
              continue;
            }
            const propDef = def.properties[key];
            if (keyValue === void 0 && !def.required?.includes(key)) {
              if (propDef.type === "integer" || propDef.type === "boolean" || propDef.type === "string") {
                if (propDef.default === void 0) {
                  continue;
                }
              } else {
                continue;
              }
            }
            const propPath = `${path}/${key}`;
            const validated = validateOneOf(lexicons, propPath, propDef, keyValue);
            const propValue = validated.success ? validated.value : keyValue;
            if (propValue === void 0) {
              if (def.required?.includes(key)) {
                return {
                  success: false,
                  error: new types_1.ValidationError(`${path} must have the property "${key}"`)
                };
              }
            } else {
              if (!validated.success) {
                return validated;
              }
            }
            if (propValue !== keyValue) {
              if (resultValue === value) {
                resultValue = { ...value };
              }
              resultValue[key] = propValue;
            }
          }
        }
        return { success: true, value: resultValue };
      }
      function validateOneOf(lexicons, path, def, value, mustBeObj = false) {
        let concreteDef;
        if (def.type === "union") {
          if (!(0, types_1.isDiscriminatedObject)(value)) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must be an object which includes the "$type" property`)
            };
          }
          if (!refsContainType(def.refs, value.$type)) {
            if (def.closed) {
              return {
                success: false,
                error: new types_1.ValidationError(`${path} $type must be one of ${def.refs.join(", ")}`)
              };
            }
            return { success: true, value };
          } else {
            concreteDef = lexicons.getDefOrThrow(value.$type);
          }
        } else if (def.type === "ref") {
          concreteDef = lexicons.getDefOrThrow(def.ref);
        } else {
          concreteDef = def;
        }
        return mustBeObj ? object(lexicons, path, concreteDef, value) : validate(lexicons, path, concreteDef, value);
      }
      var refsContainType = (refs, type) => {
        const lexUri = (0, util_1.toLexUri)(type);
        if (refs.includes(lexUri)) {
          return true;
        }
        if (lexUri.endsWith("#main")) {
          return refs.includes(lexUri.slice(0, -5));
        } else {
          return !lexUri.includes("#") && refs.includes(`${lexUri}#main`);
        }
      };
    }
  });

  // node_modules/.pnpm/@atproto+lexicon@0.4.11/node_modules/@atproto/lexicon/dist/validators/xrpc.js
  var require_xrpc = __commonJS({
    "node_modules/.pnpm/@atproto+lexicon@0.4.11/node_modules/@atproto/lexicon/dist/validators/xrpc.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
        var ownKeys = function(o) {
          ownKeys = Object.getOwnPropertyNames || function(o2) {
            var ar = [];
            for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
            return ar;
          };
          return ownKeys(o);
        };
        return function(mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      }();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.params = params;
      var types_1 = require_types4();
      var complex_1 = require_complex();
      var PrimitiveValidators = __importStar(require_primitives());
      function params(lexicons, path, def, val) {
        const value = val && typeof val === "object" ? val : {};
        const requiredProps = new Set(def.required ?? []);
        let resultValue = value;
        if (typeof def.properties === "object") {
          for (const key in def.properties) {
            const propDef = def.properties[key];
            const validated = propDef.type === "array" ? (0, complex_1.array)(lexicons, key, propDef, value[key]) : PrimitiveValidators.validate(lexicons, key, propDef, value[key]);
            const propValue = validated.success ? validated.value : value[key];
            const propIsUndefined = typeof propValue === "undefined";
            if (propIsUndefined && requiredProps.has(key)) {
              return {
                success: false,
                error: new types_1.ValidationError(`${path} must have the property "${key}"`)
              };
            } else if (!propIsUndefined && !validated.success) {
              return validated;
            }
            if (propValue !== value[key]) {
              if (resultValue === value) {
                resultValue = { ...value };
              }
              resultValue[key] = propValue;
            }
          }
        }
        return { success: true, value: resultValue };
      }
    }
  });

  // node_modules/.pnpm/@atproto+lexicon@0.4.11/node_modules/@atproto/lexicon/dist/validation.js
  var require_validation = __commonJS({
    "node_modules/.pnpm/@atproto+lexicon@0.4.11/node_modules/@atproto/lexicon/dist/validation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.assertValidRecord = assertValidRecord;
      exports.assertValidXrpcParams = assertValidXrpcParams;
      exports.assertValidXrpcInput = assertValidXrpcInput;
      exports.assertValidXrpcOutput = assertValidXrpcOutput;
      exports.assertValidXrpcMessage = assertValidXrpcMessage;
      var complex_1 = require_complex();
      var xrpc_1 = require_xrpc();
      function assertValidRecord(lexicons, def, value) {
        const res = (0, complex_1.object)(lexicons, "Record", def.record, value);
        if (!res.success)
          throw res.error;
        return res.value;
      }
      function assertValidXrpcParams(lexicons, def, value) {
        if (def.parameters) {
          const res = (0, xrpc_1.params)(lexicons, "Params", def.parameters, value);
          if (!res.success)
            throw res.error;
          return res.value;
        }
      }
      function assertValidXrpcInput(lexicons, def, value) {
        if (def.input?.schema) {
          return assertValidOneOf(lexicons, "Input", def.input.schema, value, true);
        }
      }
      function assertValidXrpcOutput(lexicons, def, value) {
        if (def.output?.schema) {
          return assertValidOneOf(lexicons, "Output", def.output.schema, value, true);
        }
      }
      function assertValidXrpcMessage(lexicons, def, value) {
        if (def.message?.schema) {
          return assertValidOneOf(lexicons, "Message", def.message.schema, value, true);
        }
      }
      function assertValidOneOf(lexicons, path, def, value, mustBeObj = false) {
        const res = (0, complex_1.validateOneOf)(lexicons, path, def, value, mustBeObj);
        if (!res.success)
          throw res.error;
        return res.value;
      }
    }
  });

  // node_modules/.pnpm/@atproto+lexicon@0.4.11/node_modules/@atproto/lexicon/dist/lexicons.js
  var require_lexicons = __commonJS({
    "node_modules/.pnpm/@atproto+lexicon@0.4.11/node_modules/@atproto/lexicon/dist/lexicons.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Lexicons = void 0;
      var types_1 = require_types4();
      var util_1 = require_util12();
      var validation_1 = require_validation();
      var complex_1 = require_complex();
      var Lexicons = class {
        constructor(docs) {
          Object.defineProperty(this, "docs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: /* @__PURE__ */ new Map()
          });
          Object.defineProperty(this, "defs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: /* @__PURE__ */ new Map()
          });
          if (docs) {
            for (const doc of docs) {
              this.add(doc);
            }
          }
        }
        /**
         * @example clone a lexicon:
         * ```ts
         * const clone = new Lexicons(originalLexicon)
         * ```
         *
         * @example get docs array:
         * ```ts
         * const docs = Array.from(lexicons)
         * ```
         */
        [Symbol.iterator]() {
          return this.docs.values();
        }
        /**
         * Add a lexicon doc.
         */
        add(doc) {
          const uri = (0, util_1.toLexUri)(doc.id);
          if (this.docs.has(uri)) {
            throw new Error(`${uri} has already been registered`);
          }
          resolveRefUris(doc, uri);
          this.docs.set(uri, doc);
          for (const [defUri, def] of iterDefs(doc)) {
            this.defs.set(defUri, def);
          }
        }
        /**
         * Remove a lexicon doc.
         */
        remove(uri) {
          uri = (0, util_1.toLexUri)(uri);
          const doc = this.docs.get(uri);
          if (!doc) {
            throw new Error(`Unable to remove "${uri}": does not exist`);
          }
          for (const [defUri, _def] of iterDefs(doc)) {
            this.defs.delete(defUri);
          }
          this.docs.delete(uri);
        }
        /**
         * Get a lexicon doc.
         */
        get(uri) {
          uri = (0, util_1.toLexUri)(uri);
          return this.docs.get(uri);
        }
        /**
         * Get a definition.
         */
        getDef(uri) {
          uri = (0, util_1.toLexUri)(uri);
          return this.defs.get(uri);
        }
        getDefOrThrow(uri, types2) {
          const def = this.getDef(uri);
          if (!def) {
            throw new types_1.LexiconDefNotFoundError(`Lexicon not found: ${uri}`);
          }
          if (types2 && !types2.includes(def.type)) {
            throw new types_1.InvalidLexiconError(`Not a ${types2.join(" or ")} lexicon: ${uri}`);
          }
          return def;
        }
        /**
         * Validate a record or object.
         */
        validate(lexUri, value) {
          if (!(0, types_1.isObj)(value)) {
            throw new types_1.ValidationError(`Value must be an object`);
          }
          const lexUriNormalized = (0, util_1.toLexUri)(lexUri);
          const def = this.getDefOrThrow(lexUriNormalized, ["record", "object"]);
          if (def.type === "record") {
            return (0, complex_1.object)(this, "Record", def.record, value);
          } else if (def.type === "object") {
            return (0, complex_1.object)(this, "Object", def, value);
          } else {
            throw new types_1.InvalidLexiconError("Definition must be a record or object");
          }
        }
        /**
         * Validate a record and throw on any error.
         */
        assertValidRecord(lexUri, value) {
          if (!(0, types_1.isObj)(value)) {
            throw new types_1.ValidationError(`Record must be an object`);
          }
          if (!("$type" in value)) {
            throw new types_1.ValidationError(`Record/$type must be a string`);
          }
          const { $type } = value;
          if (typeof $type !== "string") {
            throw new types_1.ValidationError(`Record/$type must be a string`);
          }
          const lexUriNormalized = (0, util_1.toLexUri)(lexUri);
          if ((0, util_1.toLexUri)($type) !== lexUriNormalized) {
            throw new types_1.ValidationError(`Invalid $type: must be ${lexUriNormalized}, got ${$type}`);
          }
          const def = this.getDefOrThrow(lexUriNormalized, ["record"]);
          return (0, validation_1.assertValidRecord)(this, def, value);
        }
        /**
         * Validate xrpc query params and throw on any error.
         */
        assertValidXrpcParams(lexUri, value) {
          lexUri = (0, util_1.toLexUri)(lexUri);
          const def = this.getDefOrThrow(lexUri, [
            "query",
            "procedure",
            "subscription"
          ]);
          return (0, validation_1.assertValidXrpcParams)(this, def, value);
        }
        /**
         * Validate xrpc input body and throw on any error.
         */
        assertValidXrpcInput(lexUri, value) {
          lexUri = (0, util_1.toLexUri)(lexUri);
          const def = this.getDefOrThrow(lexUri, ["procedure"]);
          return (0, validation_1.assertValidXrpcInput)(this, def, value);
        }
        /**
         * Validate xrpc output body and throw on any error.
         */
        assertValidXrpcOutput(lexUri, value) {
          lexUri = (0, util_1.toLexUri)(lexUri);
          const def = this.getDefOrThrow(lexUri, ["query", "procedure"]);
          return (0, validation_1.assertValidXrpcOutput)(this, def, value);
        }
        /**
         * Validate xrpc subscription message and throw on any error.
         */
        assertValidXrpcMessage(lexUri, value) {
          lexUri = (0, util_1.toLexUri)(lexUri);
          const def = this.getDefOrThrow(lexUri, ["subscription"]);
          return (0, validation_1.assertValidXrpcMessage)(this, def, value);
        }
        /**
         * Resolve a lex uri given a ref
         */
        resolveLexUri(lexUri, ref) {
          lexUri = (0, util_1.toLexUri)(lexUri);
          return (0, util_1.toLexUri)(ref, lexUri);
        }
      };
      exports.Lexicons = Lexicons;
      function* iterDefs(doc) {
        for (const defId in doc.defs) {
          yield [`lex:${doc.id}#${defId}`, doc.defs[defId]];
          if (defId === "main") {
            yield [`lex:${doc.id}`, doc.defs[defId]];
          }
        }
      }
      function resolveRefUris(obj, baseUri) {
        for (const k in obj) {
          if (obj.type === "ref") {
            obj.ref = (0, util_1.toLexUri)(obj.ref, baseUri);
          } else if (obj.type === "union") {
            obj.refs = obj.refs.map((ref) => (0, util_1.toLexUri)(ref, baseUri));
          } else if (Array.isArray(obj[k])) {
            obj[k] = obj[k].map((item) => {
              if (typeof item === "string") {
                return item.startsWith("#") ? (0, util_1.toLexUri)(item, baseUri) : item;
              } else if (item && typeof item === "object") {
                return resolveRefUris(item, baseUri);
              }
              return item;
            });
          } else if (obj[k] && typeof obj[k] === "object") {
            obj[k] = resolveRefUris(obj[k], baseUri);
          }
        }
        return obj;
      }
    }
  });

  // node_modules/.pnpm/@atproto+lexicon@0.4.11/node_modules/@atproto/lexicon/dist/serialize.js
  var require_serialize = __commonJS({
    "node_modules/.pnpm/@atproto+lexicon@0.4.11/node_modules/@atproto/lexicon/dist/serialize.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.jsonStringToLex = exports.jsonToLex = exports.stringifyLex = exports.lexToJson = exports.ipldToLex = exports.lexToIpld = void 0;
      var cid_1 = (init_cid(), __toCommonJS(cid_exports));
      var common_web_1 = require_dist16();
      var blob_refs_1 = require_blob_refs();
      var lexToIpld = (val) => {
        if (Array.isArray(val)) {
          return val.map((item) => (0, exports.lexToIpld)(item));
        }
        if (val && typeof val === "object") {
          if (val instanceof blob_refs_1.BlobRef) {
            return val.original;
          }
          if (cid_1.CID.asCID(val) || val instanceof Uint8Array) {
            return val;
          }
          const toReturn = {};
          for (const key of Object.keys(val)) {
            toReturn[key] = (0, exports.lexToIpld)(val[key]);
          }
          return toReturn;
        }
        return val;
      };
      exports.lexToIpld = lexToIpld;
      var ipldToLex = (val) => {
        if (Array.isArray(val)) {
          return val.map((item) => (0, exports.ipldToLex)(item));
        }
        if (val && typeof val === "object") {
          if ((val["$type"] === "blob" || typeof val["cid"] === "string" && typeof val["mimeType"] === "string") && common_web_1.check.is(val, blob_refs_1.jsonBlobRef)) {
            return blob_refs_1.BlobRef.fromJsonRef(val);
          }
          if (cid_1.CID.asCID(val) || val instanceof Uint8Array) {
            return val;
          }
          const toReturn = {};
          for (const key of Object.keys(val)) {
            toReturn[key] = (0, exports.ipldToLex)(val[key]);
          }
          return toReturn;
        }
        return val;
      };
      exports.ipldToLex = ipldToLex;
      var lexToJson = (val) => {
        return (0, common_web_1.ipldToJson)((0, exports.lexToIpld)(val));
      };
      exports.lexToJson = lexToJson;
      var stringifyLex = (val) => {
        return JSON.stringify((0, exports.lexToJson)(val));
      };
      exports.stringifyLex = stringifyLex;
      var jsonToLex = (val) => {
        return (0, exports.ipldToLex)((0, common_web_1.jsonToIpld)(val));
      };
      exports.jsonToLex = jsonToLex;
      var jsonStringToLex = (val) => {
        return (0, exports.jsonToLex)(JSON.parse(val));
      };
      exports.jsonStringToLex = jsonStringToLex;
    }
  });

  // node_modules/.pnpm/@atproto+lexicon@0.4.11/node_modules/@atproto/lexicon/dist/index.js
  var require_dist18 = __commonJS({
    "node_modules/.pnpm/@atproto+lexicon@0.4.11/node_modules/@atproto/lexicon/dist/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_types4(), exports);
      __exportStar(require_lexicons(), exports);
      __exportStar(require_blob_refs(), exports);
      __exportStar(require_serialize(), exports);
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/util.js
  var require_util14 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.is$typed = is$typed;
      exports.maybe$typed = maybe$typed;
      exports.asPredicate = asPredicate;
      function isObject2(v) {
        return v != null && typeof v === "object";
      }
      function is$type($type, id, hash) {
        return hash === "main" ? $type === id : (
          // $type === `${id}#${hash}`
          typeof $type === "string" && $type.length === id.length + 1 + hash.length && $type.charCodeAt(id.length) === 35 && $type.startsWith(id) && $type.endsWith(hash)
        );
      }
      function is$typed(v, id, hash) {
        return isObject2(v) && "$type" in v && is$type(v.$type, id, hash);
      }
      function maybe$typed(v, id, hash) {
        return isObject2(v) && ("$type" in v ? v.$type === void 0 || is$type(v.$type, id, hash) : true);
      }
      function asPredicate(validate) {
        return function(v) {
          return validate(v).success;
        };
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/lexicons.js
  var require_lexicons2 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/lexicons.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ids = exports.lexicons = exports.schemas = exports.schemaDict = void 0;
      exports.validate = validate;
      var lexicon_1 = require_dist18();
      var util_js_1 = require_util14();
      exports.schemaDict = {
        ComAtprotoAdminDefs: {
          lexicon: 1,
          id: "com.atproto.admin.defs",
          defs: {
            statusAttr: {
              type: "object",
              required: ["applied"],
              properties: {
                applied: {
                  type: "boolean"
                },
                ref: {
                  type: "string"
                }
              }
            },
            accountView: {
              type: "object",
              required: ["did", "handle", "indexedAt"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                email: {
                  type: "string"
                },
                relatedRecords: {
                  type: "array",
                  items: {
                    type: "unknown"
                  }
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                invitedBy: {
                  type: "ref",
                  ref: "lex:com.atproto.server.defs#inviteCode"
                },
                invites: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.server.defs#inviteCode"
                  }
                },
                invitesDisabled: {
                  type: "boolean"
                },
                emailConfirmedAt: {
                  type: "string",
                  format: "datetime"
                },
                inviteNote: {
                  type: "string"
                },
                deactivatedAt: {
                  type: "string",
                  format: "datetime"
                },
                threatSignatures: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.admin.defs#threatSignature"
                  }
                }
              }
            },
            repoRef: {
              type: "object",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                }
              }
            },
            repoBlobRef: {
              type: "object",
              required: ["did", "cid"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                recordUri: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            threatSignature: {
              type: "object",
              required: ["property", "value"],
              properties: {
                property: {
                  type: "string"
                },
                value: {
                  type: "string"
                }
              }
            }
          }
        },
        ComAtprotoAdminDeleteAccount: {
          lexicon: 1,
          id: "com.atproto.admin.deleteAccount",
          defs: {
            main: {
              type: "procedure",
              description: "Delete a user account as an administrator.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did"],
                  properties: {
                    did: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminDisableAccountInvites: {
          lexicon: 1,
          id: "com.atproto.admin.disableAccountInvites",
          defs: {
            main: {
              type: "procedure",
              description: "Disable an account from receiving new invite codes, but does not invalidate existing codes.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["account"],
                  properties: {
                    account: {
                      type: "string",
                      format: "did"
                    },
                    note: {
                      type: "string",
                      description: "Optional reason for disabled invites."
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminDisableInviteCodes: {
          lexicon: 1,
          id: "com.atproto.admin.disableInviteCodes",
          defs: {
            main: {
              type: "procedure",
              description: "Disable some set of codes and/or all codes associated with a set of users.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  properties: {
                    codes: {
                      type: "array",
                      items: {
                        type: "string"
                      }
                    },
                    accounts: {
                      type: "array",
                      items: {
                        type: "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminEnableAccountInvites: {
          lexicon: 1,
          id: "com.atproto.admin.enableAccountInvites",
          defs: {
            main: {
              type: "procedure",
              description: "Re-enable an account's ability to receive invite codes.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["account"],
                  properties: {
                    account: {
                      type: "string",
                      format: "did"
                    },
                    note: {
                      type: "string",
                      description: "Optional reason for enabled invites."
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminGetAccountInfo: {
          lexicon: 1,
          id: "com.atproto.admin.getAccountInfo",
          defs: {
            main: {
              type: "query",
              description: "Get details about an account.",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#accountView"
                }
              }
            }
          }
        },
        ComAtprotoAdminGetAccountInfos: {
          lexicon: 1,
          id: "com.atproto.admin.getAccountInfos",
          defs: {
            main: {
              type: "query",
              description: "Get details about some accounts.",
              parameters: {
                type: "params",
                required: ["dids"],
                properties: {
                  dids: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["infos"],
                  properties: {
                    infos: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#accountView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminGetInviteCodes: {
          lexicon: 1,
          id: "com.atproto.admin.getInviteCodes",
          defs: {
            main: {
              type: "query",
              description: "Get an admin view of invite codes.",
              parameters: {
                type: "params",
                properties: {
                  sort: {
                    type: "string",
                    knownValues: ["recent", "usage"],
                    default: "recent"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 500,
                    default: 100
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["codes"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    codes: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.server.defs#inviteCode"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminGetSubjectStatus: {
          lexicon: 1,
          id: "com.atproto.admin.getSubjectStatus",
          defs: {
            main: {
              type: "query",
              description: "Get the service-specific admin status of a subject (account, record, or blob).",
              parameters: {
                type: "params",
                properties: {
                  did: {
                    type: "string",
                    format: "did"
                  },
                  uri: {
                    type: "string",
                    format: "at-uri"
                  },
                  blob: {
                    type: "string",
                    format: "cid"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["subject"],
                  properties: {
                    subject: {
                      type: "union",
                      refs: [
                        "lex:com.atproto.admin.defs#repoRef",
                        "lex:com.atproto.repo.strongRef",
                        "lex:com.atproto.admin.defs#repoBlobRef"
                      ]
                    },
                    takedown: {
                      type: "ref",
                      ref: "lex:com.atproto.admin.defs#statusAttr"
                    },
                    deactivated: {
                      type: "ref",
                      ref: "lex:com.atproto.admin.defs#statusAttr"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminSearchAccounts: {
          lexicon: 1,
          id: "com.atproto.admin.searchAccounts",
          defs: {
            main: {
              type: "query",
              description: "Get list of accounts that matches your search query.",
              parameters: {
                type: "params",
                properties: {
                  email: {
                    type: "string"
                  },
                  cursor: {
                    type: "string"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["accounts"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    accounts: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#accountView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminSendEmail: {
          lexicon: 1,
          id: "com.atproto.admin.sendEmail",
          defs: {
            main: {
              type: "procedure",
              description: "Send email to a user's account email address.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["recipientDid", "content", "senderDid"],
                  properties: {
                    recipientDid: {
                      type: "string",
                      format: "did"
                    },
                    content: {
                      type: "string"
                    },
                    subject: {
                      type: "string"
                    },
                    senderDid: {
                      type: "string",
                      format: "did"
                    },
                    comment: {
                      type: "string",
                      description: "Additional comment by the sender that won't be used in the email itself but helpful to provide more context for moderators/reviewers"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["sent"],
                  properties: {
                    sent: {
                      type: "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminUpdateAccountEmail: {
          lexicon: 1,
          id: "com.atproto.admin.updateAccountEmail",
          defs: {
            main: {
              type: "procedure",
              description: "Administrative action to update an account's email.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["account", "email"],
                  properties: {
                    account: {
                      type: "string",
                      format: "at-identifier",
                      description: "The handle or DID of the repo."
                    },
                    email: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminUpdateAccountHandle: {
          lexicon: 1,
          id: "com.atproto.admin.updateAccountHandle",
          defs: {
            main: {
              type: "procedure",
              description: "Administrative action to update an account's handle.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did", "handle"],
                  properties: {
                    did: {
                      type: "string",
                      format: "did"
                    },
                    handle: {
                      type: "string",
                      format: "handle"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminUpdateAccountPassword: {
          lexicon: 1,
          id: "com.atproto.admin.updateAccountPassword",
          defs: {
            main: {
              type: "procedure",
              description: "Update the password for a user account as an administrator.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did", "password"],
                  properties: {
                    did: {
                      type: "string",
                      format: "did"
                    },
                    password: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminUpdateAccountSigningKey: {
          lexicon: 1,
          id: "com.atproto.admin.updateAccountSigningKey",
          defs: {
            main: {
              type: "procedure",
              description: "Administrative action to update an account's signing key in their Did document.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did", "signingKey"],
                  properties: {
                    did: {
                      type: "string",
                      format: "did"
                    },
                    signingKey: {
                      type: "string",
                      format: "did",
                      description: "Did-key formatted public key"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminUpdateSubjectStatus: {
          lexicon: 1,
          id: "com.atproto.admin.updateSubjectStatus",
          defs: {
            main: {
              type: "procedure",
              description: "Update the service-specific admin status of a subject (account, record, or blob).",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["subject"],
                  properties: {
                    subject: {
                      type: "union",
                      refs: [
                        "lex:com.atproto.admin.defs#repoRef",
                        "lex:com.atproto.repo.strongRef",
                        "lex:com.atproto.admin.defs#repoBlobRef"
                      ]
                    },
                    takedown: {
                      type: "ref",
                      ref: "lex:com.atproto.admin.defs#statusAttr"
                    },
                    deactivated: {
                      type: "ref",
                      ref: "lex:com.atproto.admin.defs#statusAttr"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["subject"],
                  properties: {
                    subject: {
                      type: "union",
                      refs: [
                        "lex:com.atproto.admin.defs#repoRef",
                        "lex:com.atproto.repo.strongRef",
                        "lex:com.atproto.admin.defs#repoBlobRef"
                      ]
                    },
                    takedown: {
                      type: "ref",
                      ref: "lex:com.atproto.admin.defs#statusAttr"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoIdentityDefs: {
          lexicon: 1,
          id: "com.atproto.identity.defs",
          defs: {
            identityInfo: {
              type: "object",
              required: ["did", "handle", "didDoc"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle",
                  description: "The validated handle of the account; or 'handle.invalid' if the handle did not bi-directionally match the DID document."
                },
                didDoc: {
                  type: "unknown",
                  description: "The complete DID document for the identity."
                }
              }
            }
          }
        },
        ComAtprotoIdentityGetRecommendedDidCredentials: {
          lexicon: 1,
          id: "com.atproto.identity.getRecommendedDidCredentials",
          defs: {
            main: {
              type: "query",
              description: "Describe the credentials that should be included in the DID doc of an account that is migrating to this service.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  properties: {
                    rotationKeys: {
                      description: "Recommended rotation keys for PLC dids. Should be undefined (or ignored) for did:webs.",
                      type: "array",
                      items: {
                        type: "string"
                      }
                    },
                    alsoKnownAs: {
                      type: "array",
                      items: {
                        type: "string"
                      }
                    },
                    verificationMethods: {
                      type: "unknown"
                    },
                    services: {
                      type: "unknown"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoIdentityRefreshIdentity: {
          lexicon: 1,
          id: "com.atproto.identity.refreshIdentity",
          defs: {
            main: {
              type: "procedure",
              description: "Request that the server re-resolve an identity (DID and handle). The server may ignore this request, or require authentication, depending on the role, implementation, and policy of the server.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["identifier"],
                  properties: {
                    identifier: {
                      type: "string",
                      format: "at-identifier"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:com.atproto.identity.defs#identityInfo"
                }
              },
              errors: [
                {
                  name: "HandleNotFound",
                  description: "The resolution process confirmed that the handle does not resolve to any DID."
                },
                {
                  name: "DidNotFound",
                  description: "The DID resolution process confirmed that there is no current DID."
                },
                {
                  name: "DidDeactivated",
                  description: "The DID previously existed, but has been deactivated."
                }
              ]
            }
          }
        },
        ComAtprotoIdentityRequestPlcOperationSignature: {
          lexicon: 1,
          id: "com.atproto.identity.requestPlcOperationSignature",
          defs: {
            main: {
              type: "procedure",
              description: "Request an email with a code to in order to request a signed PLC operation. Requires Auth."
            }
          }
        },
        ComAtprotoIdentityResolveDid: {
          lexicon: 1,
          id: "com.atproto.identity.resolveDid",
          defs: {
            main: {
              type: "query",
              description: "Resolves DID to DID document. Does not bi-directionally verify handle.",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "DID to resolve."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["didDoc"],
                  properties: {
                    didDoc: {
                      type: "unknown",
                      description: "The complete DID document for the identity."
                    }
                  }
                }
              },
              errors: [
                {
                  name: "DidNotFound",
                  description: "The DID resolution process confirmed that there is no current DID."
                },
                {
                  name: "DidDeactivated",
                  description: "The DID previously existed, but has been deactivated."
                }
              ]
            }
          }
        },
        ComAtprotoIdentityResolveHandle: {
          lexicon: 1,
          id: "com.atproto.identity.resolveHandle",
          defs: {
            main: {
              type: "query",
              description: "Resolves an atproto handle (hostname) to a DID. Does not necessarily bi-directionally verify against the the DID document.",
              parameters: {
                type: "params",
                required: ["handle"],
                properties: {
                  handle: {
                    type: "string",
                    format: "handle",
                    description: "The handle to resolve."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did"],
                  properties: {
                    did: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "HandleNotFound",
                  description: "The resolution process confirmed that the handle does not resolve to any DID."
                }
              ]
            }
          }
        },
        ComAtprotoIdentityResolveIdentity: {
          lexicon: 1,
          id: "com.atproto.identity.resolveIdentity",
          defs: {
            main: {
              type: "query",
              description: "Resolves an identity (DID or Handle) to a full identity (DID document and verified handle).",
              parameters: {
                type: "params",
                required: ["identifier"],
                properties: {
                  identifier: {
                    type: "string",
                    format: "at-identifier",
                    description: "Handle or DID to resolve."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:com.atproto.identity.defs#identityInfo"
                }
              },
              errors: [
                {
                  name: "HandleNotFound",
                  description: "The resolution process confirmed that the handle does not resolve to any DID."
                },
                {
                  name: "DidNotFound",
                  description: "The DID resolution process confirmed that there is no current DID."
                },
                {
                  name: "DidDeactivated",
                  description: "The DID previously existed, but has been deactivated."
                }
              ]
            }
          }
        },
        ComAtprotoIdentitySignPlcOperation: {
          lexicon: 1,
          id: "com.atproto.identity.signPlcOperation",
          defs: {
            main: {
              type: "procedure",
              description: "Signs a PLC operation to update some value(s) in the requesting DID's document.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  properties: {
                    token: {
                      description: "A token received through com.atproto.identity.requestPlcOperationSignature",
                      type: "string"
                    },
                    rotationKeys: {
                      type: "array",
                      items: {
                        type: "string"
                      }
                    },
                    alsoKnownAs: {
                      type: "array",
                      items: {
                        type: "string"
                      }
                    },
                    verificationMethods: {
                      type: "unknown"
                    },
                    services: {
                      type: "unknown"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["operation"],
                  properties: {
                    operation: {
                      type: "unknown",
                      description: "A signed DID PLC operation."
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoIdentitySubmitPlcOperation: {
          lexicon: 1,
          id: "com.atproto.identity.submitPlcOperation",
          defs: {
            main: {
              type: "procedure",
              description: "Validates a PLC operation to ensure that it doesn't violate a service's constraints or get the identity into a bad state, then submits it to the PLC registry",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["operation"],
                  properties: {
                    operation: {
                      type: "unknown"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoIdentityUpdateHandle: {
          lexicon: 1,
          id: "com.atproto.identity.updateHandle",
          defs: {
            main: {
              type: "procedure",
              description: "Updates the current account's handle. Verifies handle validity, and updates did:plc document if necessary. Implemented by PDS, and requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["handle"],
                  properties: {
                    handle: {
                      type: "string",
                      format: "handle",
                      description: "The new handle."
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoLabelDefs: {
          lexicon: 1,
          id: "com.atproto.label.defs",
          defs: {
            label: {
              type: "object",
              description: "Metadata tag on an atproto resource (eg, repo or record).",
              required: ["src", "uri", "val", "cts"],
              properties: {
                ver: {
                  type: "integer",
                  description: "The AT Protocol version of the label object."
                },
                src: {
                  type: "string",
                  format: "did",
                  description: "DID of the actor who created this label."
                },
                uri: {
                  type: "string",
                  format: "uri",
                  description: "AT URI of the record, repository (account), or other resource that this label applies to."
                },
                cid: {
                  type: "string",
                  format: "cid",
                  description: "Optionally, CID specifying the specific version of 'uri' resource this label applies to."
                },
                val: {
                  type: "string",
                  maxLength: 128,
                  description: "The short string name of the value or type of this label."
                },
                neg: {
                  type: "boolean",
                  description: "If true, this is a negation label, overwriting a previous label."
                },
                cts: {
                  type: "string",
                  format: "datetime",
                  description: "Timestamp when this label was created."
                },
                exp: {
                  type: "string",
                  format: "datetime",
                  description: "Timestamp at which this label expires (no longer applies)."
                },
                sig: {
                  type: "bytes",
                  description: "Signature of dag-cbor encoded label."
                }
              }
            },
            selfLabels: {
              type: "object",
              description: "Metadata tags on an atproto record, published by the author within the record.",
              required: ["values"],
              properties: {
                values: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#selfLabel"
                  },
                  maxLength: 10
                }
              }
            },
            selfLabel: {
              type: "object",
              description: "Metadata tag on an atproto record, published by the author within the record. Note that schemas should use #selfLabels, not #selfLabel.",
              required: ["val"],
              properties: {
                val: {
                  type: "string",
                  maxLength: 128,
                  description: "The short string name of the value or type of this label."
                }
              }
            },
            labelValueDefinition: {
              type: "object",
              description: "Declares a label value and its expected interpretations and behaviors.",
              required: ["identifier", "severity", "blurs", "locales"],
              properties: {
                identifier: {
                  type: "string",
                  description: "The value of the label being defined. Must only include lowercase ascii and the '-' character ([a-z-]+).",
                  maxLength: 100,
                  maxGraphemes: 100
                },
                severity: {
                  type: "string",
                  description: "How should a client visually convey this label? 'inform' means neutral and informational; 'alert' means negative and warning; 'none' means show nothing.",
                  knownValues: ["inform", "alert", "none"]
                },
                blurs: {
                  type: "string",
                  description: "What should this label hide in the UI, if applied? 'content' hides all of the target; 'media' hides the images/video/audio; 'none' hides nothing.",
                  knownValues: ["content", "media", "none"]
                },
                defaultSetting: {
                  type: "string",
                  description: "The default setting for this label.",
                  knownValues: ["ignore", "warn", "hide"],
                  default: "warn"
                },
                adultOnly: {
                  type: "boolean",
                  description: "Does the user need to have adult content enabled in order to configure this label?"
                },
                locales: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#labelValueDefinitionStrings"
                  }
                }
              }
            },
            labelValueDefinitionStrings: {
              type: "object",
              description: "Strings which describe the label in the UI, localized into a specific language.",
              required: ["lang", "name", "description"],
              properties: {
                lang: {
                  type: "string",
                  description: "The code of the language these strings are written in.",
                  format: "language"
                },
                name: {
                  type: "string",
                  description: "A short human-readable name for the label.",
                  maxGraphemes: 64,
                  maxLength: 640
                },
                description: {
                  type: "string",
                  description: "A longer description of what the label means and why it might be applied.",
                  maxGraphemes: 1e4,
                  maxLength: 1e5
                }
              }
            },
            labelValue: {
              type: "string",
              knownValues: [
                "!hide",
                "!no-promote",
                "!warn",
                "!no-unauthenticated",
                "dmca-violation",
                "doxxing",
                "porn",
                "sexual",
                "nudity",
                "nsfl",
                "gore"
              ]
            }
          }
        },
        ComAtprotoLabelQueryLabels: {
          lexicon: 1,
          id: "com.atproto.label.queryLabels",
          defs: {
            main: {
              type: "query",
              description: "Find labels relevant to the provided AT-URI patterns. Public endpoint for moderation services, though may return different or additional results with auth.",
              parameters: {
                type: "params",
                required: ["uriPatterns"],
                properties: {
                  uriPatterns: {
                    type: "array",
                    items: {
                      type: "string"
                    },
                    description: "List of AT URI patterns to match (boolean 'OR'). Each may be a prefix (ending with '*'; will match inclusive of the string leading to '*'), or a full URI."
                  },
                  sources: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "did"
                    },
                    description: "Optional list of label sources (DIDs) to filter on."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 250,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["labels"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    labels: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.label.defs#label"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoLabelSubscribeLabels: {
          lexicon: 1,
          id: "com.atproto.label.subscribeLabels",
          defs: {
            main: {
              type: "subscription",
              description: "Subscribe to stream of labels (and negations). Public endpoint implemented by mod services. Uses same sequencing scheme as repo event stream.",
              parameters: {
                type: "params",
                properties: {
                  cursor: {
                    type: "integer",
                    description: "The last known event seq number to backfill from."
                  }
                }
              },
              message: {
                schema: {
                  type: "union",
                  refs: [
                    "lex:com.atproto.label.subscribeLabels#labels",
                    "lex:com.atproto.label.subscribeLabels#info"
                  ]
                }
              },
              errors: [
                {
                  name: "FutureCursor"
                }
              ]
            },
            labels: {
              type: "object",
              required: ["seq", "labels"],
              properties: {
                seq: {
                  type: "integer"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                }
              }
            },
            info: {
              type: "object",
              required: ["name"],
              properties: {
                name: {
                  type: "string",
                  knownValues: ["OutdatedCursor"]
                },
                message: {
                  type: "string"
                }
              }
            }
          }
        },
        ComAtprotoLexiconSchema: {
          lexicon: 1,
          id: "com.atproto.lexicon.schema",
          defs: {
            main: {
              type: "record",
              description: "Representation of Lexicon schemas themselves, when published as atproto records. Note that the schema language is not defined in Lexicon; this meta schema currently only includes a single version field ('lexicon'). See the atproto specifications for description of the other expected top-level fields ('id', 'defs', etc).",
              key: "nsid",
              record: {
                type: "object",
                required: ["lexicon"],
                properties: {
                  lexicon: {
                    type: "integer",
                    description: "Indicates the 'version' of the Lexicon language. Must be '1' for the current atproto/Lexicon schema system."
                  }
                }
              }
            }
          }
        },
        ComAtprotoModerationCreateReport: {
          lexicon: 1,
          id: "com.atproto.moderation.createReport",
          defs: {
            main: {
              type: "procedure",
              description: "Submit a moderation report regarding an atproto account or record. Implemented by moderation services (with PDS proxying), and requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["reasonType", "subject"],
                  properties: {
                    reasonType: {
                      type: "ref",
                      description: "Indicates the broad category of violation the report is for.",
                      ref: "lex:com.atproto.moderation.defs#reasonType"
                    },
                    reason: {
                      type: "string",
                      maxGraphemes: 2e3,
                      maxLength: 2e4,
                      description: "Additional context about the content and violation."
                    },
                    subject: {
                      type: "union",
                      refs: [
                        "lex:com.atproto.admin.defs#repoRef",
                        "lex:com.atproto.repo.strongRef"
                      ]
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: [
                    "id",
                    "reasonType",
                    "subject",
                    "reportedBy",
                    "createdAt"
                  ],
                  properties: {
                    id: {
                      type: "integer"
                    },
                    reasonType: {
                      type: "ref",
                      ref: "lex:com.atproto.moderation.defs#reasonType"
                    },
                    reason: {
                      type: "string",
                      maxGraphemes: 2e3,
                      maxLength: 2e4
                    },
                    subject: {
                      type: "union",
                      refs: [
                        "lex:com.atproto.admin.defs#repoRef",
                        "lex:com.atproto.repo.strongRef"
                      ]
                    },
                    reportedBy: {
                      type: "string",
                      format: "did"
                    },
                    createdAt: {
                      type: "string",
                      format: "datetime"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoModerationDefs: {
          lexicon: 1,
          id: "com.atproto.moderation.defs",
          defs: {
            reasonType: {
              type: "string",
              knownValues: [
                "com.atproto.moderation.defs#reasonSpam",
                "com.atproto.moderation.defs#reasonViolation",
                "com.atproto.moderation.defs#reasonMisleading",
                "com.atproto.moderation.defs#reasonSexual",
                "com.atproto.moderation.defs#reasonRude",
                "com.atproto.moderation.defs#reasonOther",
                "com.atproto.moderation.defs#reasonAppeal"
              ]
            },
            reasonSpam: {
              type: "token",
              description: "Spam: frequent unwanted promotion, replies, mentions"
            },
            reasonViolation: {
              type: "token",
              description: "Direct violation of server rules, laws, terms of service"
            },
            reasonMisleading: {
              type: "token",
              description: "Misleading identity, affiliation, or content"
            },
            reasonSexual: {
              type: "token",
              description: "Unwanted or mislabeled sexual content"
            },
            reasonRude: {
              type: "token",
              description: "Rude, harassing, explicit, or otherwise unwelcoming behavior"
            },
            reasonOther: {
              type: "token",
              description: "Other: reports not falling under another report category"
            },
            reasonAppeal: {
              type: "token",
              description: "Appeal: appeal a previously taken moderation action"
            },
            subjectType: {
              type: "string",
              description: "Tag describing a type of subject that might be reported.",
              knownValues: ["account", "record", "chat"]
            }
          }
        },
        ComAtprotoRepoApplyWrites: {
          lexicon: 1,
          id: "com.atproto.repo.applyWrites",
          defs: {
            main: {
              type: "procedure",
              description: "Apply a batch transaction of repository creates, updates, and deletes. Requires auth, implemented by PDS.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["repo", "writes"],
                  properties: {
                    repo: {
                      type: "string",
                      format: "at-identifier",
                      description: "The handle or DID of the repo (aka, current account)."
                    },
                    validate: {
                      type: "boolean",
                      description: "Can be set to 'false' to skip Lexicon schema validation of record data across all operations, 'true' to require it, or leave unset to validate only for known Lexicons."
                    },
                    writes: {
                      type: "array",
                      items: {
                        type: "union",
                        refs: [
                          "lex:com.atproto.repo.applyWrites#create",
                          "lex:com.atproto.repo.applyWrites#update",
                          "lex:com.atproto.repo.applyWrites#delete"
                        ],
                        closed: true
                      }
                    },
                    swapCommit: {
                      type: "string",
                      description: "If provided, the entire operation will fail if the current repo commit CID does not match this value. Used to prevent conflicting repo mutations.",
                      format: "cid"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: [],
                  properties: {
                    commit: {
                      type: "ref",
                      ref: "lex:com.atproto.repo.defs#commitMeta"
                    },
                    results: {
                      type: "array",
                      items: {
                        type: "union",
                        refs: [
                          "lex:com.atproto.repo.applyWrites#createResult",
                          "lex:com.atproto.repo.applyWrites#updateResult",
                          "lex:com.atproto.repo.applyWrites#deleteResult"
                        ],
                        closed: true
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "InvalidSwap",
                  description: "Indicates that the 'swapCommit' parameter did not match current commit."
                }
              ]
            },
            create: {
              type: "object",
              description: "Operation which creates a new record.",
              required: ["collection", "value"],
              properties: {
                collection: {
                  type: "string",
                  format: "nsid"
                },
                rkey: {
                  type: "string",
                  maxLength: 512,
                  format: "record-key",
                  description: "NOTE: maxLength is redundant with record-key format. Keeping it temporarily to ensure backwards compatibility."
                },
                value: {
                  type: "unknown"
                }
              }
            },
            update: {
              type: "object",
              description: "Operation which updates an existing record.",
              required: ["collection", "rkey", "value"],
              properties: {
                collection: {
                  type: "string",
                  format: "nsid"
                },
                rkey: {
                  type: "string",
                  format: "record-key"
                },
                value: {
                  type: "unknown"
                }
              }
            },
            delete: {
              type: "object",
              description: "Operation which deletes an existing record.",
              required: ["collection", "rkey"],
              properties: {
                collection: {
                  type: "string",
                  format: "nsid"
                },
                rkey: {
                  type: "string",
                  format: "record-key"
                }
              }
            },
            createResult: {
              type: "object",
              required: ["uri", "cid"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                validationStatus: {
                  type: "string",
                  knownValues: ["valid", "unknown"]
                }
              }
            },
            updateResult: {
              type: "object",
              required: ["uri", "cid"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                validationStatus: {
                  type: "string",
                  knownValues: ["valid", "unknown"]
                }
              }
            },
            deleteResult: {
              type: "object",
              required: [],
              properties: {}
            }
          }
        },
        ComAtprotoRepoCreateRecord: {
          lexicon: 1,
          id: "com.atproto.repo.createRecord",
          defs: {
            main: {
              type: "procedure",
              description: "Create a single new repository record. Requires auth, implemented by PDS.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["repo", "collection", "record"],
                  properties: {
                    repo: {
                      type: "string",
                      format: "at-identifier",
                      description: "The handle or DID of the repo (aka, current account)."
                    },
                    collection: {
                      type: "string",
                      format: "nsid",
                      description: "The NSID of the record collection."
                    },
                    rkey: {
                      type: "string",
                      format: "record-key",
                      description: "The Record Key.",
                      maxLength: 512
                    },
                    validate: {
                      type: "boolean",
                      description: "Can be set to 'false' to skip Lexicon schema validation of record data, 'true' to require it, or leave unset to validate only for known Lexicons."
                    },
                    record: {
                      type: "unknown",
                      description: "The record itself. Must contain a $type field."
                    },
                    swapCommit: {
                      type: "string",
                      format: "cid",
                      description: "Compare and swap with the previous commit by CID."
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["uri", "cid"],
                  properties: {
                    uri: {
                      type: "string",
                      format: "at-uri"
                    },
                    cid: {
                      type: "string",
                      format: "cid"
                    },
                    commit: {
                      type: "ref",
                      ref: "lex:com.atproto.repo.defs#commitMeta"
                    },
                    validationStatus: {
                      type: "string",
                      knownValues: ["valid", "unknown"]
                    }
                  }
                }
              },
              errors: [
                {
                  name: "InvalidSwap",
                  description: "Indicates that 'swapCommit' didn't match current repo commit."
                }
              ]
            }
          }
        },
        ComAtprotoRepoDefs: {
          lexicon: 1,
          id: "com.atproto.repo.defs",
          defs: {
            commitMeta: {
              type: "object",
              required: ["cid", "rev"],
              properties: {
                cid: {
                  type: "string",
                  format: "cid"
                },
                rev: {
                  type: "string",
                  format: "tid"
                }
              }
            }
          }
        },
        ComAtprotoRepoDeleteRecord: {
          lexicon: 1,
          id: "com.atproto.repo.deleteRecord",
          defs: {
            main: {
              type: "procedure",
              description: "Delete a repository record, or ensure it doesn't exist. Requires auth, implemented by PDS.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["repo", "collection", "rkey"],
                  properties: {
                    repo: {
                      type: "string",
                      format: "at-identifier",
                      description: "The handle or DID of the repo (aka, current account)."
                    },
                    collection: {
                      type: "string",
                      format: "nsid",
                      description: "The NSID of the record collection."
                    },
                    rkey: {
                      type: "string",
                      format: "record-key",
                      description: "The Record Key."
                    },
                    swapRecord: {
                      type: "string",
                      format: "cid",
                      description: "Compare and swap with the previous record by CID."
                    },
                    swapCommit: {
                      type: "string",
                      format: "cid",
                      description: "Compare and swap with the previous commit by CID."
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  properties: {
                    commit: {
                      type: "ref",
                      ref: "lex:com.atproto.repo.defs#commitMeta"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "InvalidSwap"
                }
              ]
            }
          }
        },
        ComAtprotoRepoDescribeRepo: {
          lexicon: 1,
          id: "com.atproto.repo.describeRepo",
          defs: {
            main: {
              type: "query",
              description: "Get information about an account and repository, including the list of collections. Does not require auth.",
              parameters: {
                type: "params",
                required: ["repo"],
                properties: {
                  repo: {
                    type: "string",
                    format: "at-identifier",
                    description: "The handle or DID of the repo."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: [
                    "handle",
                    "did",
                    "didDoc",
                    "collections",
                    "handleIsCorrect"
                  ],
                  properties: {
                    handle: {
                      type: "string",
                      format: "handle"
                    },
                    did: {
                      type: "string",
                      format: "did"
                    },
                    didDoc: {
                      type: "unknown",
                      description: "The complete DID document for this account."
                    },
                    collections: {
                      type: "array",
                      description: "List of all the collections (NSIDs) for which this repo contains at least one record.",
                      items: {
                        type: "string",
                        format: "nsid"
                      }
                    },
                    handleIsCorrect: {
                      type: "boolean",
                      description: "Indicates if handle is currently valid (resolves bi-directionally)"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoRepoGetRecord: {
          lexicon: 1,
          id: "com.atproto.repo.getRecord",
          defs: {
            main: {
              type: "query",
              description: "Get a single record from a repository. Does not require auth.",
              parameters: {
                type: "params",
                required: ["repo", "collection", "rkey"],
                properties: {
                  repo: {
                    type: "string",
                    format: "at-identifier",
                    description: "The handle or DID of the repo."
                  },
                  collection: {
                    type: "string",
                    format: "nsid",
                    description: "The NSID of the record collection."
                  },
                  rkey: {
                    type: "string",
                    description: "The Record Key.",
                    format: "record-key"
                  },
                  cid: {
                    type: "string",
                    format: "cid",
                    description: "The CID of the version of the record. If not specified, then return the most recent version."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["uri", "value"],
                  properties: {
                    uri: {
                      type: "string",
                      format: "at-uri"
                    },
                    cid: {
                      type: "string",
                      format: "cid"
                    },
                    value: {
                      type: "unknown"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "RecordNotFound"
                }
              ]
            }
          }
        },
        ComAtprotoRepoImportRepo: {
          lexicon: 1,
          id: "com.atproto.repo.importRepo",
          defs: {
            main: {
              type: "procedure",
              description: "Import a repo in the form of a CAR file. Requires Content-Length HTTP header to be set.",
              input: {
                encoding: "application/vnd.ipld.car"
              }
            }
          }
        },
        ComAtprotoRepoListMissingBlobs: {
          lexicon: 1,
          id: "com.atproto.repo.listMissingBlobs",
          defs: {
            main: {
              type: "query",
              description: "Returns a list of missing blobs for the requesting account. Intended to be used in the account migration flow.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 1e3,
                    default: 500
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["blobs"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    blobs: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.repo.listMissingBlobs#recordBlob"
                      }
                    }
                  }
                }
              }
            },
            recordBlob: {
              type: "object",
              required: ["cid", "recordUri"],
              properties: {
                cid: {
                  type: "string",
                  format: "cid"
                },
                recordUri: {
                  type: "string",
                  format: "at-uri"
                }
              }
            }
          }
        },
        ComAtprotoRepoListRecords: {
          lexicon: 1,
          id: "com.atproto.repo.listRecords",
          defs: {
            main: {
              type: "query",
              description: "List a range of records in a repository, matching a specific collection. Does not require auth.",
              parameters: {
                type: "params",
                required: ["repo", "collection"],
                properties: {
                  repo: {
                    type: "string",
                    format: "at-identifier",
                    description: "The handle or DID of the repo."
                  },
                  collection: {
                    type: "string",
                    format: "nsid",
                    description: "The NSID of the record type."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50,
                    description: "The number of records to return."
                  },
                  cursor: {
                    type: "string"
                  },
                  reverse: {
                    type: "boolean",
                    description: "Flag to reverse the order of the returned records."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["records"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    records: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.repo.listRecords#record"
                      }
                    }
                  }
                }
              }
            },
            record: {
              type: "object",
              required: ["uri", "cid", "value"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                value: {
                  type: "unknown"
                }
              }
            }
          }
        },
        ComAtprotoRepoPutRecord: {
          lexicon: 1,
          id: "com.atproto.repo.putRecord",
          defs: {
            main: {
              type: "procedure",
              description: "Write a repository record, creating or updating it as needed. Requires auth, implemented by PDS.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["repo", "collection", "rkey", "record"],
                  nullable: ["swapRecord"],
                  properties: {
                    repo: {
                      type: "string",
                      format: "at-identifier",
                      description: "The handle or DID of the repo (aka, current account)."
                    },
                    collection: {
                      type: "string",
                      format: "nsid",
                      description: "The NSID of the record collection."
                    },
                    rkey: {
                      type: "string",
                      format: "record-key",
                      description: "The Record Key.",
                      maxLength: 512
                    },
                    validate: {
                      type: "boolean",
                      description: "Can be set to 'false' to skip Lexicon schema validation of record data, 'true' to require it, or leave unset to validate only for known Lexicons."
                    },
                    record: {
                      type: "unknown",
                      description: "The record to write."
                    },
                    swapRecord: {
                      type: "string",
                      format: "cid",
                      description: "Compare and swap with the previous record by CID. WARNING: nullable and optional field; may cause problems with golang implementation"
                    },
                    swapCommit: {
                      type: "string",
                      format: "cid",
                      description: "Compare and swap with the previous commit by CID."
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["uri", "cid"],
                  properties: {
                    uri: {
                      type: "string",
                      format: "at-uri"
                    },
                    cid: {
                      type: "string",
                      format: "cid"
                    },
                    commit: {
                      type: "ref",
                      ref: "lex:com.atproto.repo.defs#commitMeta"
                    },
                    validationStatus: {
                      type: "string",
                      knownValues: ["valid", "unknown"]
                    }
                  }
                }
              },
              errors: [
                {
                  name: "InvalidSwap"
                }
              ]
            }
          }
        },
        ComAtprotoRepoStrongRef: {
          lexicon: 1,
          id: "com.atproto.repo.strongRef",
          description: "A URI with a content-hash fingerprint.",
          defs: {
            main: {
              type: "object",
              required: ["uri", "cid"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                }
              }
            }
          }
        },
        ComAtprotoRepoUploadBlob: {
          lexicon: 1,
          id: "com.atproto.repo.uploadBlob",
          defs: {
            main: {
              type: "procedure",
              description: "Upload a new blob, to be referenced from a repository record. The blob will be deleted if it is not referenced within a time window (eg, minutes). Blob restrictions (mimetype, size, etc) are enforced when the reference is created. Requires auth, implemented by PDS.",
              input: {
                encoding: "*/*"
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["blob"],
                  properties: {
                    blob: {
                      type: "blob"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerActivateAccount: {
          lexicon: 1,
          id: "com.atproto.server.activateAccount",
          defs: {
            main: {
              type: "procedure",
              description: "Activates a currently deactivated account. Used to finalize account migration after the account's repo is imported and identity is setup."
            }
          }
        },
        ComAtprotoServerCheckAccountStatus: {
          lexicon: 1,
          id: "com.atproto.server.checkAccountStatus",
          defs: {
            main: {
              type: "query",
              description: "Returns the status of an account, especially as pertaining to import or recovery. Can be called many times over the course of an account migration. Requires auth and can only be called pertaining to oneself.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: [
                    "activated",
                    "validDid",
                    "repoCommit",
                    "repoRev",
                    "repoBlocks",
                    "indexedRecords",
                    "privateStateValues",
                    "expectedBlobs",
                    "importedBlobs"
                  ],
                  properties: {
                    activated: {
                      type: "boolean"
                    },
                    validDid: {
                      type: "boolean"
                    },
                    repoCommit: {
                      type: "string",
                      format: "cid"
                    },
                    repoRev: {
                      type: "string"
                    },
                    repoBlocks: {
                      type: "integer"
                    },
                    indexedRecords: {
                      type: "integer"
                    },
                    privateStateValues: {
                      type: "integer"
                    },
                    expectedBlobs: {
                      type: "integer"
                    },
                    importedBlobs: {
                      type: "integer"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerConfirmEmail: {
          lexicon: 1,
          id: "com.atproto.server.confirmEmail",
          defs: {
            main: {
              type: "procedure",
              description: "Confirm an email using a token from com.atproto.server.requestEmailConfirmation.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["email", "token"],
                  properties: {
                    email: {
                      type: "string"
                    },
                    token: {
                      type: "string"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "AccountNotFound"
                },
                {
                  name: "ExpiredToken"
                },
                {
                  name: "InvalidToken"
                },
                {
                  name: "InvalidEmail"
                }
              ]
            }
          }
        },
        ComAtprotoServerCreateAccount: {
          lexicon: 1,
          id: "com.atproto.server.createAccount",
          defs: {
            main: {
              type: "procedure",
              description: "Create an account. Implemented by PDS.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["handle"],
                  properties: {
                    email: {
                      type: "string"
                    },
                    handle: {
                      type: "string",
                      format: "handle",
                      description: "Requested handle for the account."
                    },
                    did: {
                      type: "string",
                      format: "did",
                      description: "Pre-existing atproto DID, being imported to a new account."
                    },
                    inviteCode: {
                      type: "string"
                    },
                    verificationCode: {
                      type: "string"
                    },
                    verificationPhone: {
                      type: "string"
                    },
                    password: {
                      type: "string",
                      description: "Initial account password. May need to meet instance-specific password strength requirements."
                    },
                    recoveryKey: {
                      type: "string",
                      description: "DID PLC rotation key (aka, recovery key) to be included in PLC creation operation."
                    },
                    plcOp: {
                      type: "unknown",
                      description: "A signed DID PLC operation to be submitted as part of importing an existing account to this instance. NOTE: this optional field may be updated when full account migration is implemented."
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  description: "Account login session returned on successful account creation.",
                  required: ["accessJwt", "refreshJwt", "handle", "did"],
                  properties: {
                    accessJwt: {
                      type: "string"
                    },
                    refreshJwt: {
                      type: "string"
                    },
                    handle: {
                      type: "string",
                      format: "handle"
                    },
                    did: {
                      type: "string",
                      format: "did",
                      description: "The DID of the new account."
                    },
                    didDoc: {
                      type: "unknown",
                      description: "Complete DID document."
                    }
                  }
                }
              },
              errors: [
                {
                  name: "InvalidHandle"
                },
                {
                  name: "InvalidPassword"
                },
                {
                  name: "InvalidInviteCode"
                },
                {
                  name: "HandleNotAvailable"
                },
                {
                  name: "UnsupportedDomain"
                },
                {
                  name: "UnresolvableDid"
                },
                {
                  name: "IncompatibleDidDoc"
                }
              ]
            }
          }
        },
        ComAtprotoServerCreateAppPassword: {
          lexicon: 1,
          id: "com.atproto.server.createAppPassword",
          defs: {
            main: {
              type: "procedure",
              description: "Create an App Password.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["name"],
                  properties: {
                    name: {
                      type: "string",
                      description: "A short name for the App Password, to help distinguish them."
                    },
                    privileged: {
                      type: "boolean",
                      description: "If an app password has 'privileged' access to possibly sensitive account state. Meant for use with trusted clients."
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:com.atproto.server.createAppPassword#appPassword"
                }
              },
              errors: [
                {
                  name: "AccountTakedown"
                }
              ]
            },
            appPassword: {
              type: "object",
              required: ["name", "password", "createdAt"],
              properties: {
                name: {
                  type: "string"
                },
                password: {
                  type: "string"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                privileged: {
                  type: "boolean"
                }
              }
            }
          }
        },
        ComAtprotoServerCreateInviteCode: {
          lexicon: 1,
          id: "com.atproto.server.createInviteCode",
          defs: {
            main: {
              type: "procedure",
              description: "Create an invite code.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["useCount"],
                  properties: {
                    useCount: {
                      type: "integer"
                    },
                    forAccount: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["code"],
                  properties: {
                    code: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerCreateInviteCodes: {
          lexicon: 1,
          id: "com.atproto.server.createInviteCodes",
          defs: {
            main: {
              type: "procedure",
              description: "Create invite codes.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["codeCount", "useCount"],
                  properties: {
                    codeCount: {
                      type: "integer",
                      default: 1
                    },
                    useCount: {
                      type: "integer"
                    },
                    forAccounts: {
                      type: "array",
                      items: {
                        type: "string",
                        format: "did"
                      }
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["codes"],
                  properties: {
                    codes: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.server.createInviteCodes#accountCodes"
                      }
                    }
                  }
                }
              }
            },
            accountCodes: {
              type: "object",
              required: ["account", "codes"],
              properties: {
                account: {
                  type: "string"
                },
                codes: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerCreateSession: {
          lexicon: 1,
          id: "com.atproto.server.createSession",
          defs: {
            main: {
              type: "procedure",
              description: "Create an authentication session.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["identifier", "password"],
                  properties: {
                    identifier: {
                      type: "string",
                      description: "Handle or other identifier supported by the server for the authenticating user."
                    },
                    password: {
                      type: "string"
                    },
                    authFactorToken: {
                      type: "string"
                    },
                    allowTakendown: {
                      type: "boolean",
                      description: "When true, instead of throwing error for takendown accounts, a valid response with a narrow scoped token will be returned"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["accessJwt", "refreshJwt", "handle", "did"],
                  properties: {
                    accessJwt: {
                      type: "string"
                    },
                    refreshJwt: {
                      type: "string"
                    },
                    handle: {
                      type: "string",
                      format: "handle"
                    },
                    did: {
                      type: "string",
                      format: "did"
                    },
                    didDoc: {
                      type: "unknown"
                    },
                    email: {
                      type: "string"
                    },
                    emailConfirmed: {
                      type: "boolean"
                    },
                    emailAuthFactor: {
                      type: "boolean"
                    },
                    active: {
                      type: "boolean"
                    },
                    status: {
                      type: "string",
                      description: "If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.",
                      knownValues: ["takendown", "suspended", "deactivated"]
                    }
                  }
                }
              },
              errors: [
                {
                  name: "AccountTakedown"
                },
                {
                  name: "AuthFactorTokenRequired"
                }
              ]
            }
          }
        },
        ComAtprotoServerDeactivateAccount: {
          lexicon: 1,
          id: "com.atproto.server.deactivateAccount",
          defs: {
            main: {
              type: "procedure",
              description: "Deactivates a currently active account. Stops serving of repo, and future writes to repo until reactivated. Used to finalize account migration with the old host after the account has been activated on the new host.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  properties: {
                    deleteAfter: {
                      type: "string",
                      format: "datetime",
                      description: "A recommendation to server as to how long they should hold onto the deactivated account before deleting."
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerDefs: {
          lexicon: 1,
          id: "com.atproto.server.defs",
          defs: {
            inviteCode: {
              type: "object",
              required: [
                "code",
                "available",
                "disabled",
                "forAccount",
                "createdBy",
                "createdAt",
                "uses"
              ],
              properties: {
                code: {
                  type: "string"
                },
                available: {
                  type: "integer"
                },
                disabled: {
                  type: "boolean"
                },
                forAccount: {
                  type: "string"
                },
                createdBy: {
                  type: "string"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                uses: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.server.defs#inviteCodeUse"
                  }
                }
              }
            },
            inviteCodeUse: {
              type: "object",
              required: ["usedBy", "usedAt"],
              properties: {
                usedBy: {
                  type: "string",
                  format: "did"
                },
                usedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            }
          }
        },
        ComAtprotoServerDeleteAccount: {
          lexicon: 1,
          id: "com.atproto.server.deleteAccount",
          defs: {
            main: {
              type: "procedure",
              description: "Delete an actor's account with a token and password. Can only be called after requesting a deletion token. Requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did", "password", "token"],
                  properties: {
                    did: {
                      type: "string",
                      format: "did"
                    },
                    password: {
                      type: "string"
                    },
                    token: {
                      type: "string"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "ExpiredToken"
                },
                {
                  name: "InvalidToken"
                }
              ]
            }
          }
        },
        ComAtprotoServerDeleteSession: {
          lexicon: 1,
          id: "com.atproto.server.deleteSession",
          defs: {
            main: {
              type: "procedure",
              description: "Delete the current session. Requires auth."
            }
          }
        },
        ComAtprotoServerDescribeServer: {
          lexicon: 1,
          id: "com.atproto.server.describeServer",
          defs: {
            main: {
              type: "query",
              description: "Describes the server's account creation requirements and capabilities. Implemented by PDS.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did", "availableUserDomains"],
                  properties: {
                    inviteCodeRequired: {
                      type: "boolean",
                      description: "If true, an invite code must be supplied to create an account on this instance."
                    },
                    phoneVerificationRequired: {
                      type: "boolean",
                      description: "If true, a phone verification token must be supplied to create an account on this instance."
                    },
                    availableUserDomains: {
                      type: "array",
                      description: "List of domain suffixes that can be used in account handles.",
                      items: {
                        type: "string"
                      }
                    },
                    links: {
                      type: "ref",
                      description: "URLs of service policy documents.",
                      ref: "lex:com.atproto.server.describeServer#links"
                    },
                    contact: {
                      type: "ref",
                      description: "Contact information",
                      ref: "lex:com.atproto.server.describeServer#contact"
                    },
                    did: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              }
            },
            links: {
              type: "object",
              properties: {
                privacyPolicy: {
                  type: "string",
                  format: "uri"
                },
                termsOfService: {
                  type: "string",
                  format: "uri"
                }
              }
            },
            contact: {
              type: "object",
              properties: {
                email: {
                  type: "string"
                }
              }
            }
          }
        },
        ComAtprotoServerGetAccountInviteCodes: {
          lexicon: 1,
          id: "com.atproto.server.getAccountInviteCodes",
          defs: {
            main: {
              type: "query",
              description: "Get all invite codes for the current account. Requires auth.",
              parameters: {
                type: "params",
                properties: {
                  includeUsed: {
                    type: "boolean",
                    default: true
                  },
                  createAvailable: {
                    type: "boolean",
                    default: true,
                    description: "Controls whether any new 'earned' but not 'created' invites should be created."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["codes"],
                  properties: {
                    codes: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.server.defs#inviteCode"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "DuplicateCreate"
                }
              ]
            }
          }
        },
        ComAtprotoServerGetServiceAuth: {
          lexicon: 1,
          id: "com.atproto.server.getServiceAuth",
          defs: {
            main: {
              type: "query",
              description: "Get a signed token on behalf of the requesting DID for the requested service.",
              parameters: {
                type: "params",
                required: ["aud"],
                properties: {
                  aud: {
                    type: "string",
                    format: "did",
                    description: "The DID of the service that the token will be used to authenticate with"
                  },
                  exp: {
                    type: "integer",
                    description: "The time in Unix Epoch seconds that the JWT expires. Defaults to 60 seconds in the future. The service may enforce certain time bounds on tokens depending on the requested scope."
                  },
                  lxm: {
                    type: "string",
                    format: "nsid",
                    description: "Lexicon (XRPC) method to bind the requested token to"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["token"],
                  properties: {
                    token: {
                      type: "string"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "BadExpiration",
                  description: "Indicates that the requested expiration date is not a valid. May be in the past or may be reliant on the requested scopes."
                }
              ]
            }
          }
        },
        ComAtprotoServerGetSession: {
          lexicon: 1,
          id: "com.atproto.server.getSession",
          defs: {
            main: {
              type: "query",
              description: "Get information about the current auth session. Requires auth.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["handle", "did"],
                  properties: {
                    handle: {
                      type: "string",
                      format: "handle"
                    },
                    did: {
                      type: "string",
                      format: "did"
                    },
                    email: {
                      type: "string"
                    },
                    emailConfirmed: {
                      type: "boolean"
                    },
                    emailAuthFactor: {
                      type: "boolean"
                    },
                    didDoc: {
                      type: "unknown"
                    },
                    active: {
                      type: "boolean"
                    },
                    status: {
                      type: "string",
                      description: "If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.",
                      knownValues: ["takendown", "suspended", "deactivated"]
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerListAppPasswords: {
          lexicon: 1,
          id: "com.atproto.server.listAppPasswords",
          defs: {
            main: {
              type: "query",
              description: "List all App Passwords.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["passwords"],
                  properties: {
                    passwords: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.server.listAppPasswords#appPassword"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "AccountTakedown"
                }
              ]
            },
            appPassword: {
              type: "object",
              required: ["name", "createdAt"],
              properties: {
                name: {
                  type: "string"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                privileged: {
                  type: "boolean"
                }
              }
            }
          }
        },
        ComAtprotoServerRefreshSession: {
          lexicon: 1,
          id: "com.atproto.server.refreshSession",
          defs: {
            main: {
              type: "procedure",
              description: "Refresh an authentication session. Requires auth using the 'refreshJwt' (not the 'accessJwt').",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["accessJwt", "refreshJwt", "handle", "did"],
                  properties: {
                    accessJwt: {
                      type: "string"
                    },
                    refreshJwt: {
                      type: "string"
                    },
                    handle: {
                      type: "string",
                      format: "handle"
                    },
                    did: {
                      type: "string",
                      format: "did"
                    },
                    didDoc: {
                      type: "unknown"
                    },
                    active: {
                      type: "boolean"
                    },
                    status: {
                      type: "string",
                      description: "Hosting status of the account. If not specified, then assume 'active'.",
                      knownValues: ["takendown", "suspended", "deactivated"]
                    }
                  }
                }
              },
              errors: [
                {
                  name: "AccountTakedown"
                }
              ]
            }
          }
        },
        ComAtprotoServerRequestAccountDelete: {
          lexicon: 1,
          id: "com.atproto.server.requestAccountDelete",
          defs: {
            main: {
              type: "procedure",
              description: "Initiate a user account deletion via email."
            }
          }
        },
        ComAtprotoServerRequestEmailConfirmation: {
          lexicon: 1,
          id: "com.atproto.server.requestEmailConfirmation",
          defs: {
            main: {
              type: "procedure",
              description: "Request an email with a code to confirm ownership of email."
            }
          }
        },
        ComAtprotoServerRequestEmailUpdate: {
          lexicon: 1,
          id: "com.atproto.server.requestEmailUpdate",
          defs: {
            main: {
              type: "procedure",
              description: "Request a token in order to update email.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["tokenRequired"],
                  properties: {
                    tokenRequired: {
                      type: "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerRequestPasswordReset: {
          lexicon: 1,
          id: "com.atproto.server.requestPasswordReset",
          defs: {
            main: {
              type: "procedure",
              description: "Initiate a user account password reset via email.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["email"],
                  properties: {
                    email: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerReserveSigningKey: {
          lexicon: 1,
          id: "com.atproto.server.reserveSigningKey",
          defs: {
            main: {
              type: "procedure",
              description: "Reserve a repo signing key, for use with account creation. Necessary so that a DID PLC update operation can be constructed during an account migraiton. Public and does not require auth; implemented by PDS. NOTE: this endpoint may change when full account migration is implemented.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  properties: {
                    did: {
                      type: "string",
                      format: "did",
                      description: "The DID to reserve a key for."
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["signingKey"],
                  properties: {
                    signingKey: {
                      type: "string",
                      description: "The public key for the reserved signing key, in did:key serialization."
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerResetPassword: {
          lexicon: 1,
          id: "com.atproto.server.resetPassword",
          defs: {
            main: {
              type: "procedure",
              description: "Reset a user account password using a token.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["token", "password"],
                  properties: {
                    token: {
                      type: "string"
                    },
                    password: {
                      type: "string"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "ExpiredToken"
                },
                {
                  name: "InvalidToken"
                }
              ]
            }
          }
        },
        ComAtprotoServerRevokeAppPassword: {
          lexicon: 1,
          id: "com.atproto.server.revokeAppPassword",
          defs: {
            main: {
              type: "procedure",
              description: "Revoke an App Password by name.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["name"],
                  properties: {
                    name: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerUpdateEmail: {
          lexicon: 1,
          id: "com.atproto.server.updateEmail",
          defs: {
            main: {
              type: "procedure",
              description: "Update an account's email.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["email"],
                  properties: {
                    email: {
                      type: "string"
                    },
                    emailAuthFactor: {
                      type: "boolean"
                    },
                    token: {
                      type: "string",
                      description: "Requires a token from com.atproto.sever.requestEmailUpdate if the account's email has been confirmed."
                    }
                  }
                }
              },
              errors: [
                {
                  name: "ExpiredToken"
                },
                {
                  name: "InvalidToken"
                },
                {
                  name: "TokenRequired"
                }
              ]
            }
          }
        },
        ComAtprotoSyncDefs: {
          lexicon: 1,
          id: "com.atproto.sync.defs",
          defs: {
            hostStatus: {
              type: "string",
              knownValues: ["active", "idle", "offline", "throttled", "banned"]
            }
          }
        },
        ComAtprotoSyncGetBlob: {
          lexicon: 1,
          id: "com.atproto.sync.getBlob",
          defs: {
            main: {
              type: "query",
              description: "Get a blob associated with a given account. Returns the full blob as originally uploaded. Does not require auth; implemented by PDS.",
              parameters: {
                type: "params",
                required: ["did", "cid"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the account."
                  },
                  cid: {
                    type: "string",
                    format: "cid",
                    description: "The CID of the blob to fetch"
                  }
                }
              },
              output: {
                encoding: "*/*"
              },
              errors: [
                {
                  name: "BlobNotFound"
                },
                {
                  name: "RepoNotFound"
                },
                {
                  name: "RepoTakendown"
                },
                {
                  name: "RepoSuspended"
                },
                {
                  name: "RepoDeactivated"
                }
              ]
            }
          }
        },
        ComAtprotoSyncGetBlocks: {
          lexicon: 1,
          id: "com.atproto.sync.getBlocks",
          defs: {
            main: {
              type: "query",
              description: "Get data blocks from a given repo, by CID. For example, intermediate MST nodes, or records. Does not require auth; implemented by PDS.",
              parameters: {
                type: "params",
                required: ["did", "cids"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  },
                  cids: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "cid"
                    }
                  }
                }
              },
              output: {
                encoding: "application/vnd.ipld.car"
              },
              errors: [
                {
                  name: "BlockNotFound"
                },
                {
                  name: "RepoNotFound"
                },
                {
                  name: "RepoTakendown"
                },
                {
                  name: "RepoSuspended"
                },
                {
                  name: "RepoDeactivated"
                }
              ]
            }
          }
        },
        ComAtprotoSyncGetCheckout: {
          lexicon: 1,
          id: "com.atproto.sync.getCheckout",
          defs: {
            main: {
              type: "query",
              description: "DEPRECATED - please use com.atproto.sync.getRepo instead",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  }
                }
              },
              output: {
                encoding: "application/vnd.ipld.car"
              }
            }
          }
        },
        ComAtprotoSyncGetHead: {
          lexicon: 1,
          id: "com.atproto.sync.getHead",
          defs: {
            main: {
              type: "query",
              description: "DEPRECATED - please use com.atproto.sync.getLatestCommit instead",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["root"],
                  properties: {
                    root: {
                      type: "string",
                      format: "cid"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "HeadNotFound"
                }
              ]
            }
          }
        },
        ComAtprotoSyncGetHostStatus: {
          lexicon: 1,
          id: "com.atproto.sync.getHostStatus",
          defs: {
            main: {
              type: "query",
              description: "Returns information about a specified upstream host, as consumed by the server. Implemented by relays.",
              parameters: {
                type: "params",
                required: ["hostname"],
                properties: {
                  hostname: {
                    type: "string",
                    description: "Hostname of the host (eg, PDS or relay) being queried."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["hostname"],
                  properties: {
                    hostname: {
                      type: "string"
                    },
                    seq: {
                      type: "integer",
                      description: "Recent repo stream event sequence number. May be delayed from actual stream processing (eg, persisted cursor not in-memory cursor)."
                    },
                    accountCount: {
                      type: "integer",
                      description: "Number of accounts on the server which are associated with the upstream host. Note that the upstream may actually have more accounts."
                    },
                    status: {
                      type: "ref",
                      ref: "lex:com.atproto.sync.defs#hostStatus"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "HostNotFound"
                }
              ]
            }
          }
        },
        ComAtprotoSyncGetLatestCommit: {
          lexicon: 1,
          id: "com.atproto.sync.getLatestCommit",
          defs: {
            main: {
              type: "query",
              description: "Get the current commit CID & revision of the specified repo. Does not require auth.",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["cid", "rev"],
                  properties: {
                    cid: {
                      type: "string",
                      format: "cid"
                    },
                    rev: {
                      type: "string",
                      format: "tid"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "RepoNotFound"
                },
                {
                  name: "RepoTakendown"
                },
                {
                  name: "RepoSuspended"
                },
                {
                  name: "RepoDeactivated"
                }
              ]
            }
          }
        },
        ComAtprotoSyncGetRecord: {
          lexicon: 1,
          id: "com.atproto.sync.getRecord",
          defs: {
            main: {
              type: "query",
              description: "Get data blocks needed to prove the existence or non-existence of record in the current version of repo. Does not require auth.",
              parameters: {
                type: "params",
                required: ["did", "collection", "rkey"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  },
                  collection: {
                    type: "string",
                    format: "nsid"
                  },
                  rkey: {
                    type: "string",
                    description: "Record Key",
                    format: "record-key"
                  }
                }
              },
              output: {
                encoding: "application/vnd.ipld.car"
              },
              errors: [
                {
                  name: "RecordNotFound"
                },
                {
                  name: "RepoNotFound"
                },
                {
                  name: "RepoTakendown"
                },
                {
                  name: "RepoSuspended"
                },
                {
                  name: "RepoDeactivated"
                }
              ]
            }
          }
        },
        ComAtprotoSyncGetRepo: {
          lexicon: 1,
          id: "com.atproto.sync.getRepo",
          defs: {
            main: {
              type: "query",
              description: "Download a repository export as CAR file. Optionally only a 'diff' since a previous revision. Does not require auth; implemented by PDS.",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  },
                  since: {
                    type: "string",
                    format: "tid",
                    description: "The revision ('rev') of the repo to create a diff from."
                  }
                }
              },
              output: {
                encoding: "application/vnd.ipld.car"
              },
              errors: [
                {
                  name: "RepoNotFound"
                },
                {
                  name: "RepoTakendown"
                },
                {
                  name: "RepoSuspended"
                },
                {
                  name: "RepoDeactivated"
                }
              ]
            }
          }
        },
        ComAtprotoSyncGetRepoStatus: {
          lexicon: 1,
          id: "com.atproto.sync.getRepoStatus",
          defs: {
            main: {
              type: "query",
              description: "Get the hosting status for a repository, on this server. Expected to be implemented by PDS and Relay.",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did", "active"],
                  properties: {
                    did: {
                      type: "string",
                      format: "did"
                    },
                    active: {
                      type: "boolean"
                    },
                    status: {
                      type: "string",
                      description: "If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.",
                      knownValues: [
                        "takendown",
                        "suspended",
                        "deleted",
                        "deactivated",
                        "desynchronized",
                        "throttled"
                      ]
                    },
                    rev: {
                      type: "string",
                      format: "tid",
                      description: "Optional field, the current rev of the repo, if active=true"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "RepoNotFound"
                }
              ]
            }
          }
        },
        ComAtprotoSyncListBlobs: {
          lexicon: 1,
          id: "com.atproto.sync.listBlobs",
          defs: {
            main: {
              type: "query",
              description: "List blob CIDs for an account, since some repo revision. Does not require auth; implemented by PDS.",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  },
                  since: {
                    type: "string",
                    format: "tid",
                    description: "Optional revision of the repo to list blobs since."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 1e3,
                    default: 500
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["cids"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    cids: {
                      type: "array",
                      items: {
                        type: "string",
                        format: "cid"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "RepoNotFound"
                },
                {
                  name: "RepoTakendown"
                },
                {
                  name: "RepoSuspended"
                },
                {
                  name: "RepoDeactivated"
                }
              ]
            }
          }
        },
        ComAtprotoSyncListHosts: {
          lexicon: 1,
          id: "com.atproto.sync.listHosts",
          defs: {
            main: {
              type: "query",
              description: "Enumerates upstream hosts (eg, PDS or relay instances) that this service consumes from. Implemented by relays.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 1e3,
                    default: 200
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["hosts"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    hosts: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.sync.listHosts#host"
                      },
                      description: "Sort order is not formally specified. Recommended order is by time host was first seen by the server, with oldest first."
                    }
                  }
                }
              }
            },
            host: {
              type: "object",
              required: ["hostname"],
              properties: {
                hostname: {
                  type: "string",
                  description: "hostname of server; not a URL (no scheme)"
                },
                seq: {
                  type: "integer",
                  description: "Recent repo stream event sequence number. May be delayed from actual stream processing (eg, persisted cursor not in-memory cursor)."
                },
                accountCount: {
                  type: "integer"
                },
                status: {
                  type: "ref",
                  ref: "lex:com.atproto.sync.defs#hostStatus"
                }
              }
            }
          }
        },
        ComAtprotoSyncListRepos: {
          lexicon: 1,
          id: "com.atproto.sync.listRepos",
          defs: {
            main: {
              type: "query",
              description: "Enumerates all the DID, rev, and commit CID for all repos hosted by this service. Does not require auth; implemented by PDS and Relay.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 1e3,
                    default: 500
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["repos"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    repos: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.sync.listRepos#repo"
                      }
                    }
                  }
                }
              }
            },
            repo: {
              type: "object",
              required: ["did", "head", "rev"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                head: {
                  type: "string",
                  format: "cid",
                  description: "Current repo commit CID"
                },
                rev: {
                  type: "string",
                  format: "tid"
                },
                active: {
                  type: "boolean"
                },
                status: {
                  type: "string",
                  description: "If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.",
                  knownValues: [
                    "takendown",
                    "suspended",
                    "deleted",
                    "deactivated",
                    "desynchronized",
                    "throttled"
                  ]
                }
              }
            }
          }
        },
        ComAtprotoSyncListReposByCollection: {
          lexicon: 1,
          id: "com.atproto.sync.listReposByCollection",
          defs: {
            main: {
              type: "query",
              description: "Enumerates all the DIDs which have records with the given collection NSID.",
              parameters: {
                type: "params",
                required: ["collection"],
                properties: {
                  collection: {
                    type: "string",
                    format: "nsid"
                  },
                  limit: {
                    type: "integer",
                    description: "Maximum size of response set. Recommend setting a large maximum (1000+) when enumerating large DID lists.",
                    minimum: 1,
                    maximum: 2e3,
                    default: 500
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["repos"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    repos: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.sync.listReposByCollection#repo"
                      }
                    }
                  }
                }
              }
            },
            repo: {
              type: "object",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                }
              }
            }
          }
        },
        ComAtprotoSyncNotifyOfUpdate: {
          lexicon: 1,
          id: "com.atproto.sync.notifyOfUpdate",
          defs: {
            main: {
              type: "procedure",
              description: "Notify a crawling service of a recent update, and that crawling should resume. Intended use is after a gap between repo stream events caused the crawling service to disconnect. Does not require auth; implemented by Relay. DEPRECATED: just use com.atproto.sync.requestCrawl",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["hostname"],
                  properties: {
                    hostname: {
                      type: "string",
                      description: "Hostname of the current service (usually a PDS) that is notifying of update."
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoSyncRequestCrawl: {
          lexicon: 1,
          id: "com.atproto.sync.requestCrawl",
          defs: {
            main: {
              type: "procedure",
              description: "Request a service to persistently crawl hosted repos. Expected use is new PDS instances declaring their existence to Relays. Does not require auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["hostname"],
                  properties: {
                    hostname: {
                      type: "string",
                      description: "Hostname of the current service (eg, PDS) that is requesting to be crawled."
                    }
                  }
                }
              },
              errors: [
                {
                  name: "HostBanned"
                }
              ]
            }
          }
        },
        ComAtprotoSyncSubscribeRepos: {
          lexicon: 1,
          id: "com.atproto.sync.subscribeRepos",
          defs: {
            main: {
              type: "subscription",
              description: "Repository event stream, aka Firehose endpoint. Outputs repo commits with diff data, and identity update events, for all repositories on the current server. See the atproto specifications for details around stream sequencing, repo versioning, CAR diff format, and more. Public and does not require auth; implemented by PDS and Relay.",
              parameters: {
                type: "params",
                properties: {
                  cursor: {
                    type: "integer",
                    description: "The last known event seq number to backfill from."
                  }
                }
              },
              message: {
                schema: {
                  type: "union",
                  refs: [
                    "lex:com.atproto.sync.subscribeRepos#commit",
                    "lex:com.atproto.sync.subscribeRepos#sync",
                    "lex:com.atproto.sync.subscribeRepos#identity",
                    "lex:com.atproto.sync.subscribeRepos#account",
                    "lex:com.atproto.sync.subscribeRepos#info"
                  ]
                }
              },
              errors: [
                {
                  name: "FutureCursor"
                },
                {
                  name: "ConsumerTooSlow",
                  description: "If the consumer of the stream can not keep up with events, and a backlog gets too large, the server will drop the connection."
                }
              ]
            },
            commit: {
              type: "object",
              description: "Represents an update of repository state. Note that empty commits are allowed, which include no repo data changes, but an update to rev and signature.",
              required: [
                "seq",
                "rebase",
                "tooBig",
                "repo",
                "commit",
                "rev",
                "since",
                "blocks",
                "ops",
                "blobs",
                "time"
              ],
              nullable: ["since"],
              properties: {
                seq: {
                  type: "integer",
                  description: "The stream sequence number of this message."
                },
                rebase: {
                  type: "boolean",
                  description: "DEPRECATED -- unused"
                },
                tooBig: {
                  type: "boolean",
                  description: "DEPRECATED -- replaced by #sync event and data limits. Indicates that this commit contained too many ops, or data size was too large. Consumers will need to make a separate request to get missing data."
                },
                repo: {
                  type: "string",
                  format: "did",
                  description: "The repo this event comes from. Note that all other message types name this field 'did'."
                },
                commit: {
                  type: "cid-link",
                  description: "Repo commit object CID."
                },
                rev: {
                  type: "string",
                  format: "tid",
                  description: "The rev of the emitted commit. Note that this information is also in the commit object included in blocks, unless this is a tooBig event."
                },
                since: {
                  type: "string",
                  format: "tid",
                  description: "The rev of the last emitted commit from this repo (if any)."
                },
                blocks: {
                  type: "bytes",
                  description: "CAR file containing relevant blocks, as a diff since the previous repo state. The commit must be included as a block, and the commit block CID must be the first entry in the CAR header 'roots' list.",
                  maxLength: 2e6
                },
                ops: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.sync.subscribeRepos#repoOp",
                    description: "List of repo mutation operations in this commit (eg, records created, updated, or deleted)."
                  },
                  maxLength: 200
                },
                blobs: {
                  type: "array",
                  items: {
                    type: "cid-link",
                    description: "DEPRECATED -- will soon always be empty. List of new blobs (by CID) referenced by records in this commit."
                  }
                },
                prevData: {
                  type: "cid-link",
                  description: "The root CID of the MST tree for the previous commit from this repo (indicated by the 'since' revision field in this message). Corresponds to the 'data' field in the repo commit object. NOTE: this field is effectively required for the 'inductive' version of firehose."
                },
                time: {
                  type: "string",
                  format: "datetime",
                  description: "Timestamp of when this message was originally broadcast."
                }
              }
            },
            sync: {
              type: "object",
              description: "Updates the repo to a new state, without necessarily including that state on the firehose. Used to recover from broken commit streams, data loss incidents, or in situations where upstream host does not know recent state of the repository.",
              required: ["seq", "did", "blocks", "rev", "time"],
              properties: {
                seq: {
                  type: "integer",
                  description: "The stream sequence number of this message."
                },
                did: {
                  type: "string",
                  format: "did",
                  description: "The account this repo event corresponds to. Must match that in the commit object."
                },
                blocks: {
                  type: "bytes",
                  description: "CAR file containing the commit, as a block. The CAR header must include the commit block CID as the first 'root'.",
                  maxLength: 1e4
                },
                rev: {
                  type: "string",
                  description: "The rev of the commit. This value must match that in the commit object."
                },
                time: {
                  type: "string",
                  format: "datetime",
                  description: "Timestamp of when this message was originally broadcast."
                }
              }
            },
            identity: {
              type: "object",
              description: "Represents a change to an account's identity. Could be an updated handle, signing key, or pds hosting endpoint. Serves as a prod to all downstream services to refresh their identity cache.",
              required: ["seq", "did", "time"],
              properties: {
                seq: {
                  type: "integer"
                },
                did: {
                  type: "string",
                  format: "did"
                },
                time: {
                  type: "string",
                  format: "datetime"
                },
                handle: {
                  type: "string",
                  format: "handle",
                  description: "The current handle for the account, or 'handle.invalid' if validation fails. This field is optional, might have been validated or passed-through from an upstream source. Semantics and behaviors for PDS vs Relay may evolve in the future; see atproto specs for more details."
                }
              }
            },
            account: {
              type: "object",
              description: "Represents a change to an account's status on a host (eg, PDS or Relay). The semantics of this event are that the status is at the host which emitted the event, not necessarily that at the currently active PDS. Eg, a Relay takedown would emit a takedown with active=false, even if the PDS is still active.",
              required: ["seq", "did", "time", "active"],
              properties: {
                seq: {
                  type: "integer"
                },
                did: {
                  type: "string",
                  format: "did"
                },
                time: {
                  type: "string",
                  format: "datetime"
                },
                active: {
                  type: "boolean",
                  description: "Indicates that the account has a repository which can be fetched from the host that emitted this event."
                },
                status: {
                  type: "string",
                  description: "If active=false, this optional field indicates a reason for why the account is not active.",
                  knownValues: [
                    "takendown",
                    "suspended",
                    "deleted",
                    "deactivated",
                    "desynchronized",
                    "throttled"
                  ]
                }
              }
            },
            info: {
              type: "object",
              required: ["name"],
              properties: {
                name: {
                  type: "string",
                  knownValues: ["OutdatedCursor"]
                },
                message: {
                  type: "string"
                }
              }
            },
            repoOp: {
              type: "object",
              description: "A repo operation, ie a mutation of a single record.",
              required: ["action", "path", "cid"],
              nullable: ["cid"],
              properties: {
                action: {
                  type: "string",
                  knownValues: ["create", "update", "delete"]
                },
                path: {
                  type: "string"
                },
                cid: {
                  type: "cid-link",
                  description: "For creates and updates, the new record CID. For deletions, null."
                },
                prev: {
                  type: "cid-link",
                  description: "For updates and deletes, the previous record CID (required for inductive firehose). For creations, field should not be defined."
                }
              }
            }
          }
        },
        ComAtprotoTempAddReservedHandle: {
          lexicon: 1,
          id: "com.atproto.temp.addReservedHandle",
          defs: {
            main: {
              type: "procedure",
              description: "Add a handle to the set of reserved handles.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["handle"],
                  properties: {
                    handle: {
                      type: "string"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  properties: {}
                }
              }
            }
          }
        },
        ComAtprotoTempCheckSignupQueue: {
          lexicon: 1,
          id: "com.atproto.temp.checkSignupQueue",
          defs: {
            main: {
              type: "query",
              description: "Check accounts location in signup queue.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["activated"],
                  properties: {
                    activated: {
                      type: "boolean"
                    },
                    placeInQueue: {
                      type: "integer"
                    },
                    estimatedTimeMs: {
                      type: "integer"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoTempFetchLabels: {
          lexicon: 1,
          id: "com.atproto.temp.fetchLabels",
          defs: {
            main: {
              type: "query",
              description: "DEPRECATED: use queryLabels or subscribeLabels instead -- Fetch all labels from a labeler created after a certain date.",
              parameters: {
                type: "params",
                properties: {
                  since: {
                    type: "integer"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 250,
                    default: 50
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["labels"],
                  properties: {
                    labels: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.label.defs#label"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoTempRequestPhoneVerification: {
          lexicon: 1,
          id: "com.atproto.temp.requestPhoneVerification",
          defs: {
            main: {
              type: "procedure",
              description: "Request a verification code to be sent to the supplied phone number",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["phoneNumber"],
                  properties: {
                    phoneNumber: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyActorDefs: {
          lexicon: 1,
          id: "app.bsky.actor.defs",
          defs: {
            profileViewBasic: {
              type: "object",
              required: ["did", "handle"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                displayName: {
                  type: "string",
                  maxGraphemes: 64,
                  maxLength: 640
                },
                avatar: {
                  type: "string",
                  format: "uri"
                },
                associated: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileAssociated"
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#viewerState"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                verification: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#verificationState"
                },
                status: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#statusView"
                }
              }
            },
            profileView: {
              type: "object",
              required: ["did", "handle"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                displayName: {
                  type: "string",
                  maxGraphemes: 64,
                  maxLength: 640
                },
                description: {
                  type: "string",
                  maxGraphemes: 256,
                  maxLength: 2560
                },
                avatar: {
                  type: "string",
                  format: "uri"
                },
                associated: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileAssociated"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#viewerState"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                verification: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#verificationState"
                },
                status: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#statusView"
                }
              }
            },
            profileViewDetailed: {
              type: "object",
              required: ["did", "handle"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                displayName: {
                  type: "string",
                  maxGraphemes: 64,
                  maxLength: 640
                },
                description: {
                  type: "string",
                  maxGraphemes: 256,
                  maxLength: 2560
                },
                avatar: {
                  type: "string",
                  format: "uri"
                },
                banner: {
                  type: "string",
                  format: "uri"
                },
                followersCount: {
                  type: "integer"
                },
                followsCount: {
                  type: "integer"
                },
                postsCount: {
                  type: "integer"
                },
                associated: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileAssociated"
                },
                joinedViaStarterPack: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#starterPackViewBasic"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#viewerState"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                pinnedPost: {
                  type: "ref",
                  ref: "lex:com.atproto.repo.strongRef"
                },
                verification: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#verificationState"
                },
                status: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#statusView"
                }
              }
            },
            profileAssociated: {
              type: "object",
              properties: {
                lists: {
                  type: "integer"
                },
                feedgens: {
                  type: "integer"
                },
                starterPacks: {
                  type: "integer"
                },
                labeler: {
                  type: "boolean"
                },
                chat: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileAssociatedChat"
                }
              }
            },
            profileAssociatedChat: {
              type: "object",
              required: ["allowIncoming"],
              properties: {
                allowIncoming: {
                  type: "string",
                  knownValues: ["all", "none", "following"]
                }
              }
            },
            viewerState: {
              type: "object",
              description: "Metadata about the requesting account's relationship with the subject account. Only has meaningful content for authed requests.",
              properties: {
                muted: {
                  type: "boolean"
                },
                mutedByList: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#listViewBasic"
                },
                blockedBy: {
                  type: "boolean"
                },
                blocking: {
                  type: "string",
                  format: "at-uri"
                },
                blockingByList: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#listViewBasic"
                },
                following: {
                  type: "string",
                  format: "at-uri"
                },
                followedBy: {
                  type: "string",
                  format: "at-uri"
                },
                knownFollowers: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#knownFollowers"
                }
              }
            },
            knownFollowers: {
              type: "object",
              description: "The subject's followers whom you also follow",
              required: ["count", "followers"],
              properties: {
                count: {
                  type: "integer"
                },
                followers: {
                  type: "array",
                  minLength: 0,
                  maxLength: 5,
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#profileViewBasic"
                  }
                }
              }
            },
            verificationState: {
              type: "object",
              description: "Represents the verification information about the user this object is attached to.",
              required: ["verifications", "verifiedStatus", "trustedVerifierStatus"],
              properties: {
                verifications: {
                  type: "array",
                  description: "All verifications issued by trusted verifiers on behalf of this user. Verifications by untrusted verifiers are not included.",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#verificationView"
                  }
                },
                verifiedStatus: {
                  type: "string",
                  description: "The user's status as a verified account.",
                  knownValues: ["valid", "invalid", "none"]
                },
                trustedVerifierStatus: {
                  type: "string",
                  description: "The user's status as a trusted verifier.",
                  knownValues: ["valid", "invalid", "none"]
                }
              }
            },
            verificationView: {
              type: "object",
              description: "An individual verification for an associated subject.",
              required: ["issuer", "uri", "isValid", "createdAt"],
              properties: {
                issuer: {
                  type: "string",
                  description: "The user who issued this verification.",
                  format: "did"
                },
                uri: {
                  type: "string",
                  description: "The AT-URI of the verification record.",
                  format: "at-uri"
                },
                isValid: {
                  type: "boolean",
                  description: "True if the verification passes validation, otherwise false."
                },
                createdAt: {
                  type: "string",
                  description: "Timestamp when the verification was created.",
                  format: "datetime"
                }
              }
            },
            preferences: {
              type: "array",
              items: {
                type: "union",
                refs: [
                  "lex:app.bsky.actor.defs#adultContentPref",
                  "lex:app.bsky.actor.defs#contentLabelPref",
                  "lex:app.bsky.actor.defs#savedFeedsPref",
                  "lex:app.bsky.actor.defs#savedFeedsPrefV2",
                  "lex:app.bsky.actor.defs#personalDetailsPref",
                  "lex:app.bsky.actor.defs#feedViewPref",
                  "lex:app.bsky.actor.defs#threadViewPref",
                  "lex:app.bsky.actor.defs#interestsPref",
                  "lex:app.bsky.actor.defs#mutedWordsPref",
                  "lex:app.bsky.actor.defs#hiddenPostsPref",
                  "lex:app.bsky.actor.defs#bskyAppStatePref",
                  "lex:app.bsky.actor.defs#labelersPref",
                  "lex:app.bsky.actor.defs#postInteractionSettingsPref",
                  "lex:app.bsky.actor.defs#verificationPrefs"
                ]
              }
            },
            adultContentPref: {
              type: "object",
              required: ["enabled"],
              properties: {
                enabled: {
                  type: "boolean",
                  default: false
                }
              }
            },
            contentLabelPref: {
              type: "object",
              required: ["label", "visibility"],
              properties: {
                labelerDid: {
                  type: "string",
                  description: "Which labeler does this preference apply to? If undefined, applies globally.",
                  format: "did"
                },
                label: {
                  type: "string"
                },
                visibility: {
                  type: "string",
                  knownValues: ["ignore", "show", "warn", "hide"]
                }
              }
            },
            savedFeed: {
              type: "object",
              required: ["id", "type", "value", "pinned"],
              properties: {
                id: {
                  type: "string"
                },
                type: {
                  type: "string",
                  knownValues: ["feed", "list", "timeline"]
                },
                value: {
                  type: "string"
                },
                pinned: {
                  type: "boolean"
                }
              }
            },
            savedFeedsPrefV2: {
              type: "object",
              required: ["items"],
              properties: {
                items: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#savedFeed"
                  }
                }
              }
            },
            savedFeedsPref: {
              type: "object",
              required: ["pinned", "saved"],
              properties: {
                pinned: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "at-uri"
                  }
                },
                saved: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "at-uri"
                  }
                },
                timelineIndex: {
                  type: "integer"
                }
              }
            },
            personalDetailsPref: {
              type: "object",
              properties: {
                birthDate: {
                  type: "string",
                  format: "datetime",
                  description: "The birth date of account owner."
                }
              }
            },
            feedViewPref: {
              type: "object",
              required: ["feed"],
              properties: {
                feed: {
                  type: "string",
                  description: "The URI of the feed, or an identifier which describes the feed."
                },
                hideReplies: {
                  type: "boolean",
                  description: "Hide replies in the feed."
                },
                hideRepliesByUnfollowed: {
                  type: "boolean",
                  description: "Hide replies in the feed if they are not by followed users.",
                  default: true
                },
                hideRepliesByLikeCount: {
                  type: "integer",
                  description: "Hide replies in the feed if they do not have this number of likes."
                },
                hideReposts: {
                  type: "boolean",
                  description: "Hide reposts in the feed."
                },
                hideQuotePosts: {
                  type: "boolean",
                  description: "Hide quote posts in the feed."
                }
              }
            },
            threadViewPref: {
              type: "object",
              properties: {
                sort: {
                  type: "string",
                  description: "Sorting mode for threads.",
                  knownValues: [
                    "oldest",
                    "newest",
                    "most-likes",
                    "random",
                    "hotness"
                  ]
                },
                prioritizeFollowedUsers: {
                  type: "boolean",
                  description: "Show followed users at the top of all replies."
                }
              }
            },
            interestsPref: {
              type: "object",
              required: ["tags"],
              properties: {
                tags: {
                  type: "array",
                  maxLength: 100,
                  items: {
                    type: "string",
                    maxLength: 640,
                    maxGraphemes: 64
                  },
                  description: "A list of tags which describe the account owner's interests gathered during onboarding."
                }
              }
            },
            mutedWordTarget: {
              type: "string",
              knownValues: ["content", "tag"],
              maxLength: 640,
              maxGraphemes: 64
            },
            mutedWord: {
              type: "object",
              description: "A word that the account owner has muted.",
              required: ["value", "targets"],
              properties: {
                id: {
                  type: "string"
                },
                value: {
                  type: "string",
                  description: "The muted word itself.",
                  maxLength: 1e4,
                  maxGraphemes: 1e3
                },
                targets: {
                  type: "array",
                  description: "The intended targets of the muted word.",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#mutedWordTarget"
                  }
                },
                actorTarget: {
                  type: "string",
                  description: "Groups of users to apply the muted word to. If undefined, applies to all users.",
                  knownValues: ["all", "exclude-following"],
                  default: "all"
                },
                expiresAt: {
                  type: "string",
                  format: "datetime",
                  description: "The date and time at which the muted word will expire and no longer be applied."
                }
              }
            },
            mutedWordsPref: {
              type: "object",
              required: ["items"],
              properties: {
                items: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#mutedWord"
                  },
                  description: "A list of words the account owner has muted."
                }
              }
            },
            hiddenPostsPref: {
              type: "object",
              required: ["items"],
              properties: {
                items: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "at-uri"
                  },
                  description: "A list of URIs of posts the account owner has hidden."
                }
              }
            },
            labelersPref: {
              type: "object",
              required: ["labelers"],
              properties: {
                labelers: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#labelerPrefItem"
                  }
                }
              }
            },
            labelerPrefItem: {
              type: "object",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                }
              }
            },
            bskyAppStatePref: {
              description: "A grab bag of state that's specific to the bsky.app program. Third-party apps shouldn't use this.",
              type: "object",
              properties: {
                activeProgressGuide: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#bskyAppProgressGuide"
                },
                queuedNudges: {
                  description: "An array of tokens which identify nudges (modals, popups, tours, highlight dots) that should be shown to the user.",
                  type: "array",
                  maxLength: 1e3,
                  items: {
                    type: "string",
                    maxLength: 100
                  }
                },
                nuxs: {
                  description: "Storage for NUXs the user has encountered.",
                  type: "array",
                  maxLength: 100,
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#nux"
                  }
                }
              }
            },
            bskyAppProgressGuide: {
              description: "If set, an active progress guide. Once completed, can be set to undefined. Should have unspecced fields tracking progress.",
              type: "object",
              required: ["guide"],
              properties: {
                guide: {
                  type: "string",
                  maxLength: 100
                }
              }
            },
            nux: {
              type: "object",
              description: "A new user experiences (NUX) storage object",
              required: ["id", "completed"],
              properties: {
                id: {
                  type: "string",
                  maxLength: 100
                },
                completed: {
                  type: "boolean",
                  default: false
                },
                data: {
                  description: "Arbitrary data for the NUX. The structure is defined by the NUX itself. Limited to 300 characters.",
                  type: "string",
                  maxLength: 3e3,
                  maxGraphemes: 300
                },
                expiresAt: {
                  type: "string",
                  format: "datetime",
                  description: "The date and time at which the NUX will expire and should be considered completed."
                }
              }
            },
            verificationPrefs: {
              type: "object",
              description: "Preferences for how verified accounts appear in the app.",
              required: [],
              properties: {
                hideBadges: {
                  description: "Hide the blue check badges for verified accounts and trusted verifiers.",
                  type: "boolean",
                  default: false
                }
              }
            },
            postInteractionSettingsPref: {
              type: "object",
              description: "Default post interaction settings for the account. These values should be applied as default values when creating new posts. These refs should mirror the threadgate and postgate records exactly.",
              required: [],
              properties: {
                threadgateAllowRules: {
                  description: "Matches threadgate record. List of rules defining who can reply to this users posts. If value is an empty array, no one can reply. If value is undefined, anyone can reply.",
                  type: "array",
                  maxLength: 5,
                  items: {
                    type: "union",
                    refs: [
                      "lex:app.bsky.feed.threadgate#mentionRule",
                      "lex:app.bsky.feed.threadgate#followerRule",
                      "lex:app.bsky.feed.threadgate#followingRule",
                      "lex:app.bsky.feed.threadgate#listRule"
                    ]
                  }
                },
                postgateEmbeddingRules: {
                  description: "Matches postgate record. List of rules defining who can embed this users posts. If value is an empty array or is undefined, no particular rules apply and anyone can embed.",
                  type: "array",
                  maxLength: 5,
                  items: {
                    type: "union",
                    refs: ["lex:app.bsky.feed.postgate#disableRule"]
                  }
                }
              }
            },
            statusView: {
              type: "object",
              required: ["status", "record"],
              properties: {
                status: {
                  type: "string",
                  description: "The status for the account.",
                  knownValues: ["app.bsky.actor.status#live"]
                },
                record: {
                  type: "unknown"
                },
                embed: {
                  type: "union",
                  description: "An optional embed associated with the status.",
                  refs: ["lex:app.bsky.embed.external#view"]
                },
                expiresAt: {
                  type: "string",
                  description: "The date when this status will expire. The application might choose to no longer return the status after expiration.",
                  format: "datetime"
                },
                isActive: {
                  type: "boolean",
                  description: "True if the status is not expired, false if it is expired. Only present if expiration was set."
                }
              }
            }
          }
        },
        AppBskyActorGetPreferences: {
          lexicon: 1,
          id: "app.bsky.actor.getPreferences",
          defs: {
            main: {
              type: "query",
              description: "Get private preferences attached to the current account. Expected use is synchronization between multiple devices, and import/export during account migration. Requires auth.",
              parameters: {
                type: "params",
                properties: {}
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["preferences"],
                  properties: {
                    preferences: {
                      type: "ref",
                      ref: "lex:app.bsky.actor.defs#preferences"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyActorGetProfile: {
          lexicon: 1,
          id: "app.bsky.actor.getProfile",
          defs: {
            main: {
              type: "query",
              description: "Get detailed profile view of an actor. Does not require auth, but contains relevant metadata with auth.",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier",
                    description: "Handle or DID of account to fetch profile of."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileViewDetailed"
                }
              }
            }
          }
        },
        AppBskyActorGetProfiles: {
          lexicon: 1,
          id: "app.bsky.actor.getProfiles",
          defs: {
            main: {
              type: "query",
              description: "Get detailed profile views of multiple actors.",
              parameters: {
                type: "params",
                required: ["actors"],
                properties: {
                  actors: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "at-identifier"
                    },
                    maxLength: 25
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["profiles"],
                  properties: {
                    profiles: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileViewDetailed"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyActorGetSuggestions: {
          lexicon: 1,
          id: "app.bsky.actor.getSuggestions",
          defs: {
            main: {
              type: "query",
              description: "Get a list of suggested actors. Expected use is discovery of accounts to follow during new account onboarding.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["actors"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    actors: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    },
                    recId: {
                      type: "integer",
                      description: "Snowflake for this recommendation, use when submitting recommendation events."
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyActorProfile: {
          lexicon: 1,
          id: "app.bsky.actor.profile",
          defs: {
            main: {
              type: "record",
              description: "A declaration of a Bluesky account profile.",
              key: "literal:self",
              record: {
                type: "object",
                properties: {
                  displayName: {
                    type: "string",
                    maxGraphemes: 64,
                    maxLength: 640
                  },
                  description: {
                    type: "string",
                    description: "Free-form profile description text.",
                    maxGraphemes: 256,
                    maxLength: 2560
                  },
                  avatar: {
                    type: "blob",
                    description: "Small image to be displayed next to posts from account. AKA, 'profile picture'",
                    accept: ["image/png", "image/jpeg"],
                    maxSize: 1e6
                  },
                  banner: {
                    type: "blob",
                    description: "Larger horizontal image to display behind profile view.",
                    accept: ["image/png", "image/jpeg"],
                    maxSize: 1e6
                  },
                  labels: {
                    type: "union",
                    description: "Self-label values, specific to the Bluesky application, on the overall account.",
                    refs: ["lex:com.atproto.label.defs#selfLabels"]
                  },
                  joinedViaStarterPack: {
                    type: "ref",
                    ref: "lex:com.atproto.repo.strongRef"
                  },
                  pinnedPost: {
                    type: "ref",
                    ref: "lex:com.atproto.repo.strongRef"
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyActorPutPreferences: {
          lexicon: 1,
          id: "app.bsky.actor.putPreferences",
          defs: {
            main: {
              type: "procedure",
              description: "Set the private preferences attached to the account.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["preferences"],
                  properties: {
                    preferences: {
                      type: "ref",
                      ref: "lex:app.bsky.actor.defs#preferences"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyActorSearchActors: {
          lexicon: 1,
          id: "app.bsky.actor.searchActors",
          defs: {
            main: {
              type: "query",
              description: "Find actors (profiles) matching search criteria. Does not require auth.",
              parameters: {
                type: "params",
                properties: {
                  term: {
                    type: "string",
                    description: "DEPRECATED: use 'q' instead."
                  },
                  q: {
                    type: "string",
                    description: "Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 25
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["actors"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    actors: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyActorSearchActorsTypeahead: {
          lexicon: 1,
          id: "app.bsky.actor.searchActorsTypeahead",
          defs: {
            main: {
              type: "query",
              description: "Find actor suggestions for a prefix search term. Expected use is for auto-completion during text field entry. Does not require auth.",
              parameters: {
                type: "params",
                properties: {
                  term: {
                    type: "string",
                    description: "DEPRECATED: use 'q' instead."
                  },
                  q: {
                    type: "string",
                    description: "Search query prefix; not a full query string."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 10
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["actors"],
                  properties: {
                    actors: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileViewBasic"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyActorStatus: {
          lexicon: 1,
          id: "app.bsky.actor.status",
          defs: {
            main: {
              type: "record",
              description: "A declaration of a Bluesky account status.",
              key: "literal:self",
              record: {
                type: "object",
                required: ["status", "createdAt"],
                properties: {
                  status: {
                    type: "string",
                    description: "The status for the account.",
                    knownValues: ["app.bsky.actor.status#live"]
                  },
                  embed: {
                    type: "union",
                    description: "An optional embed associated with the status.",
                    refs: ["lex:app.bsky.embed.external"]
                  },
                  durationMinutes: {
                    type: "integer",
                    description: "The duration of the status in minutes. Applications can choose to impose minimum and maximum limits.",
                    minimum: 1
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            },
            live: {
              type: "token",
              description: "Advertises an account as currently offering live content."
            }
          }
        },
        AppBskyEmbedDefs: {
          lexicon: 1,
          id: "app.bsky.embed.defs",
          defs: {
            aspectRatio: {
              type: "object",
              description: "width:height represents an aspect ratio. It may be approximate, and may not correspond to absolute dimensions in any given unit.",
              required: ["width", "height"],
              properties: {
                width: {
                  type: "integer",
                  minimum: 1
                },
                height: {
                  type: "integer",
                  minimum: 1
                }
              }
            }
          }
        },
        AppBskyEmbedExternal: {
          lexicon: 1,
          id: "app.bsky.embed.external",
          defs: {
            main: {
              type: "object",
              description: "A representation of some externally linked content (eg, a URL and 'card'), embedded in a Bluesky record (eg, a post).",
              required: ["external"],
              properties: {
                external: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.external#external"
                }
              }
            },
            external: {
              type: "object",
              required: ["uri", "title", "description"],
              properties: {
                uri: {
                  type: "string",
                  format: "uri"
                },
                title: {
                  type: "string"
                },
                description: {
                  type: "string"
                },
                thumb: {
                  type: "blob",
                  accept: ["image/*"],
                  maxSize: 1e6
                }
              }
            },
            view: {
              type: "object",
              required: ["external"],
              properties: {
                external: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.external#viewExternal"
                }
              }
            },
            viewExternal: {
              type: "object",
              required: ["uri", "title", "description"],
              properties: {
                uri: {
                  type: "string",
                  format: "uri"
                },
                title: {
                  type: "string"
                },
                description: {
                  type: "string"
                },
                thumb: {
                  type: "string",
                  format: "uri"
                }
              }
            }
          }
        },
        AppBskyEmbedImages: {
          lexicon: 1,
          id: "app.bsky.embed.images",
          description: "A set of images embedded in a Bluesky record (eg, a post).",
          defs: {
            main: {
              type: "object",
              required: ["images"],
              properties: {
                images: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.embed.images#image"
                  },
                  maxLength: 4
                }
              }
            },
            image: {
              type: "object",
              required: ["image", "alt"],
              properties: {
                image: {
                  type: "blob",
                  accept: ["image/*"],
                  maxSize: 1e6
                },
                alt: {
                  type: "string",
                  description: "Alt text description of the image, for accessibility."
                },
                aspectRatio: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.defs#aspectRatio"
                }
              }
            },
            view: {
              type: "object",
              required: ["images"],
              properties: {
                images: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.embed.images#viewImage"
                  },
                  maxLength: 4
                }
              }
            },
            viewImage: {
              type: "object",
              required: ["thumb", "fullsize", "alt"],
              properties: {
                thumb: {
                  type: "string",
                  format: "uri",
                  description: "Fully-qualified URL where a thumbnail of the image can be fetched. For example, CDN location provided by the App View."
                },
                fullsize: {
                  type: "string",
                  format: "uri",
                  description: "Fully-qualified URL where a large version of the image can be fetched. May or may not be the exact original blob. For example, CDN location provided by the App View."
                },
                alt: {
                  type: "string",
                  description: "Alt text description of the image, for accessibility."
                },
                aspectRatio: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.defs#aspectRatio"
                }
              }
            }
          }
        },
        AppBskyEmbedRecord: {
          lexicon: 1,
          id: "app.bsky.embed.record",
          description: "A representation of a record embedded in a Bluesky record (eg, a post). For example, a quote-post, or sharing a feed generator record.",
          defs: {
            main: {
              type: "object",
              required: ["record"],
              properties: {
                record: {
                  type: "ref",
                  ref: "lex:com.atproto.repo.strongRef"
                }
              }
            },
            view: {
              type: "object",
              required: ["record"],
              properties: {
                record: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.embed.record#viewRecord",
                    "lex:app.bsky.embed.record#viewNotFound",
                    "lex:app.bsky.embed.record#viewBlocked",
                    "lex:app.bsky.embed.record#viewDetached",
                    "lex:app.bsky.feed.defs#generatorView",
                    "lex:app.bsky.graph.defs#listView",
                    "lex:app.bsky.labeler.defs#labelerView",
                    "lex:app.bsky.graph.defs#starterPackViewBasic"
                  ]
                }
              }
            },
            viewRecord: {
              type: "object",
              required: ["uri", "cid", "author", "value", "indexedAt"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                author: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileViewBasic"
                },
                value: {
                  type: "unknown",
                  description: "The record data itself."
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                replyCount: {
                  type: "integer"
                },
                repostCount: {
                  type: "integer"
                },
                likeCount: {
                  type: "integer"
                },
                quoteCount: {
                  type: "integer"
                },
                embeds: {
                  type: "array",
                  items: {
                    type: "union",
                    refs: [
                      "lex:app.bsky.embed.images#view",
                      "lex:app.bsky.embed.video#view",
                      "lex:app.bsky.embed.external#view",
                      "lex:app.bsky.embed.record#view",
                      "lex:app.bsky.embed.recordWithMedia#view"
                    ]
                  }
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            viewNotFound: {
              type: "object",
              required: ["uri", "notFound"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                notFound: {
                  type: "boolean",
                  const: true
                }
              }
            },
            viewBlocked: {
              type: "object",
              required: ["uri", "blocked", "author"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                blocked: {
                  type: "boolean",
                  const: true
                },
                author: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#blockedAuthor"
                }
              }
            },
            viewDetached: {
              type: "object",
              required: ["uri", "detached"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                detached: {
                  type: "boolean",
                  const: true
                }
              }
            }
          }
        },
        AppBskyEmbedRecordWithMedia: {
          lexicon: 1,
          id: "app.bsky.embed.recordWithMedia",
          description: "A representation of a record embedded in a Bluesky record (eg, a post), alongside other compatible embeds. For example, a quote post and image, or a quote post and external URL card.",
          defs: {
            main: {
              type: "object",
              required: ["record", "media"],
              properties: {
                record: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.record"
                },
                media: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.embed.images",
                    "lex:app.bsky.embed.video",
                    "lex:app.bsky.embed.external"
                  ]
                }
              }
            },
            view: {
              type: "object",
              required: ["record", "media"],
              properties: {
                record: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.record#view"
                },
                media: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.embed.images#view",
                    "lex:app.bsky.embed.video#view",
                    "lex:app.bsky.embed.external#view"
                  ]
                }
              }
            }
          }
        },
        AppBskyEmbedVideo: {
          lexicon: 1,
          id: "app.bsky.embed.video",
          description: "A video embedded in a Bluesky record (eg, a post).",
          defs: {
            main: {
              type: "object",
              required: ["video"],
              properties: {
                video: {
                  type: "blob",
                  description: "The mp4 video file. May be up to 100mb, formerly limited to 50mb.",
                  accept: ["video/mp4"],
                  maxSize: 1e8
                },
                captions: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.embed.video#caption"
                  },
                  maxLength: 20
                },
                alt: {
                  type: "string",
                  description: "Alt text description of the video, for accessibility.",
                  maxGraphemes: 1e3,
                  maxLength: 1e4
                },
                aspectRatio: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.defs#aspectRatio"
                }
              }
            },
            caption: {
              type: "object",
              required: ["lang", "file"],
              properties: {
                lang: {
                  type: "string",
                  format: "language"
                },
                file: {
                  type: "blob",
                  accept: ["text/vtt"],
                  maxSize: 2e4
                }
              }
            },
            view: {
              type: "object",
              required: ["cid", "playlist"],
              properties: {
                cid: {
                  type: "string",
                  format: "cid"
                },
                playlist: {
                  type: "string",
                  format: "uri"
                },
                thumbnail: {
                  type: "string",
                  format: "uri"
                },
                alt: {
                  type: "string",
                  maxGraphemes: 1e3,
                  maxLength: 1e4
                },
                aspectRatio: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.defs#aspectRatio"
                }
              }
            }
          }
        },
        AppBskyFeedDefs: {
          lexicon: 1,
          id: "app.bsky.feed.defs",
          defs: {
            postView: {
              type: "object",
              required: ["uri", "cid", "author", "record", "indexedAt"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                author: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileViewBasic"
                },
                record: {
                  type: "unknown"
                },
                embed: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.embed.images#view",
                    "lex:app.bsky.embed.video#view",
                    "lex:app.bsky.embed.external#view",
                    "lex:app.bsky.embed.record#view",
                    "lex:app.bsky.embed.recordWithMedia#view"
                  ]
                },
                replyCount: {
                  type: "integer"
                },
                repostCount: {
                  type: "integer"
                },
                likeCount: {
                  type: "integer"
                },
                quoteCount: {
                  type: "integer"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#viewerState"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                threadgate: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#threadgateView"
                }
              }
            },
            viewerState: {
              type: "object",
              description: "Metadata about the requesting account's relationship with the subject content. Only has meaningful content for authed requests.",
              properties: {
                repost: {
                  type: "string",
                  format: "at-uri"
                },
                like: {
                  type: "string",
                  format: "at-uri"
                },
                threadMuted: {
                  type: "boolean"
                },
                replyDisabled: {
                  type: "boolean"
                },
                embeddingDisabled: {
                  type: "boolean"
                },
                pinned: {
                  type: "boolean"
                }
              }
            },
            threadContext: {
              type: "object",
              description: "Metadata about this post within the context of the thread it is in.",
              properties: {
                rootAuthorLike: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            feedViewPost: {
              type: "object",
              required: ["post"],
              properties: {
                post: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#postView"
                },
                reply: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#replyRef"
                },
                reason: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.feed.defs#reasonRepost",
                    "lex:app.bsky.feed.defs#reasonPin"
                  ]
                },
                feedContext: {
                  type: "string",
                  description: "Context provided by feed generator that may be passed back alongside interactions.",
                  maxLength: 2e3
                },
                reqId: {
                  type: "string",
                  description: "Unique identifier per request that may be passed back alongside interactions.",
                  maxLength: 100
                }
              }
            },
            replyRef: {
              type: "object",
              required: ["root", "parent"],
              properties: {
                root: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.feed.defs#postView",
                    "lex:app.bsky.feed.defs#notFoundPost",
                    "lex:app.bsky.feed.defs#blockedPost"
                  ]
                },
                parent: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.feed.defs#postView",
                    "lex:app.bsky.feed.defs#notFoundPost",
                    "lex:app.bsky.feed.defs#blockedPost"
                  ]
                },
                grandparentAuthor: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileViewBasic",
                  description: "When parent is a reply to another post, this is the author of that post."
                }
              }
            },
            reasonRepost: {
              type: "object",
              required: ["by", "indexedAt"],
              properties: {
                by: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileViewBasic"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            reasonPin: {
              type: "object",
              properties: {}
            },
            threadViewPost: {
              type: "object",
              required: ["post"],
              properties: {
                post: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#postView"
                },
                parent: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.feed.defs#threadViewPost",
                    "lex:app.bsky.feed.defs#notFoundPost",
                    "lex:app.bsky.feed.defs#blockedPost"
                  ]
                },
                replies: {
                  type: "array",
                  items: {
                    type: "union",
                    refs: [
                      "lex:app.bsky.feed.defs#threadViewPost",
                      "lex:app.bsky.feed.defs#notFoundPost",
                      "lex:app.bsky.feed.defs#blockedPost"
                    ]
                  }
                },
                threadContext: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#threadContext"
                }
              }
            },
            notFoundPost: {
              type: "object",
              required: ["uri", "notFound"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                notFound: {
                  type: "boolean",
                  const: true
                }
              }
            },
            blockedPost: {
              type: "object",
              required: ["uri", "blocked", "author"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                blocked: {
                  type: "boolean",
                  const: true
                },
                author: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#blockedAuthor"
                }
              }
            },
            blockedAuthor: {
              type: "object",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#viewerState"
                }
              }
            },
            generatorView: {
              type: "object",
              required: ["uri", "cid", "did", "creator", "displayName", "indexedAt"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                did: {
                  type: "string",
                  format: "did"
                },
                creator: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                },
                displayName: {
                  type: "string"
                },
                description: {
                  type: "string",
                  maxGraphemes: 300,
                  maxLength: 3e3
                },
                descriptionFacets: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.richtext.facet"
                  }
                },
                avatar: {
                  type: "string",
                  format: "uri"
                },
                likeCount: {
                  type: "integer",
                  minimum: 0
                },
                acceptsInteractions: {
                  type: "boolean"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#generatorViewerState"
                },
                contentMode: {
                  type: "string",
                  knownValues: [
                    "app.bsky.feed.defs#contentModeUnspecified",
                    "app.bsky.feed.defs#contentModeVideo"
                  ]
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            generatorViewerState: {
              type: "object",
              properties: {
                like: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            skeletonFeedPost: {
              type: "object",
              required: ["post"],
              properties: {
                post: {
                  type: "string",
                  format: "at-uri"
                },
                reason: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.feed.defs#skeletonReasonRepost",
                    "lex:app.bsky.feed.defs#skeletonReasonPin"
                  ]
                },
                feedContext: {
                  type: "string",
                  description: "Context that will be passed through to client and may be passed to feed generator back alongside interactions.",
                  maxLength: 2e3
                }
              }
            },
            skeletonReasonRepost: {
              type: "object",
              required: ["repost"],
              properties: {
                repost: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            skeletonReasonPin: {
              type: "object",
              properties: {}
            },
            threadgateView: {
              type: "object",
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                record: {
                  type: "unknown"
                },
                lists: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.graph.defs#listViewBasic"
                  }
                }
              }
            },
            interaction: {
              type: "object",
              properties: {
                item: {
                  type: "string",
                  format: "at-uri"
                },
                event: {
                  type: "string",
                  knownValues: [
                    "app.bsky.feed.defs#requestLess",
                    "app.bsky.feed.defs#requestMore",
                    "app.bsky.feed.defs#clickthroughItem",
                    "app.bsky.feed.defs#clickthroughAuthor",
                    "app.bsky.feed.defs#clickthroughReposter",
                    "app.bsky.feed.defs#clickthroughEmbed",
                    "app.bsky.feed.defs#interactionSeen",
                    "app.bsky.feed.defs#interactionLike",
                    "app.bsky.feed.defs#interactionRepost",
                    "app.bsky.feed.defs#interactionReply",
                    "app.bsky.feed.defs#interactionQuote",
                    "app.bsky.feed.defs#interactionShare"
                  ]
                },
                feedContext: {
                  type: "string",
                  description: "Context on a feed item that was originally supplied by the feed generator on getFeedSkeleton.",
                  maxLength: 2e3
                },
                reqId: {
                  type: "string",
                  description: "Unique identifier per request that may be passed back alongside interactions.",
                  maxLength: 100
                }
              }
            },
            requestLess: {
              type: "token",
              description: "Request that less content like the given feed item be shown in the feed"
            },
            requestMore: {
              type: "token",
              description: "Request that more content like the given feed item be shown in the feed"
            },
            clickthroughItem: {
              type: "token",
              description: "User clicked through to the feed item"
            },
            clickthroughAuthor: {
              type: "token",
              description: "User clicked through to the author of the feed item"
            },
            clickthroughReposter: {
              type: "token",
              description: "User clicked through to the reposter of the feed item"
            },
            clickthroughEmbed: {
              type: "token",
              description: "User clicked through to the embedded content of the feed item"
            },
            contentModeUnspecified: {
              type: "token",
              description: "Declares the feed generator returns any types of posts."
            },
            contentModeVideo: {
              type: "token",
              description: "Declares the feed generator returns posts containing app.bsky.embed.video embeds."
            },
            interactionSeen: {
              type: "token",
              description: "Feed item was seen by user"
            },
            interactionLike: {
              type: "token",
              description: "User liked the feed item"
            },
            interactionRepost: {
              type: "token",
              description: "User reposted the feed item"
            },
            interactionReply: {
              type: "token",
              description: "User replied to the feed item"
            },
            interactionQuote: {
              type: "token",
              description: "User quoted the feed item"
            },
            interactionShare: {
              type: "token",
              description: "User shared the feed item"
            }
          }
        },
        AppBskyFeedDescribeFeedGenerator: {
          lexicon: 1,
          id: "app.bsky.feed.describeFeedGenerator",
          defs: {
            main: {
              type: "query",
              description: "Get information about a feed generator, including policies and offered feed URIs. Does not require auth; implemented by Feed Generator services (not App View).",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did", "feeds"],
                  properties: {
                    did: {
                      type: "string",
                      format: "did"
                    },
                    feeds: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.describeFeedGenerator#feed"
                      }
                    },
                    links: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.describeFeedGenerator#links"
                    }
                  }
                }
              }
            },
            feed: {
              type: "object",
              required: ["uri"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            links: {
              type: "object",
              properties: {
                privacyPolicy: {
                  type: "string"
                },
                termsOfService: {
                  type: "string"
                }
              }
            }
          }
        },
        AppBskyFeedGenerator: {
          lexicon: 1,
          id: "app.bsky.feed.generator",
          defs: {
            main: {
              type: "record",
              description: "Record declaring of the existence of a feed generator, and containing metadata about it. The record can exist in any repository.",
              key: "any",
              record: {
                type: "object",
                required: ["did", "displayName", "createdAt"],
                properties: {
                  did: {
                    type: "string",
                    format: "did"
                  },
                  displayName: {
                    type: "string",
                    maxGraphemes: 24,
                    maxLength: 240
                  },
                  description: {
                    type: "string",
                    maxGraphemes: 300,
                    maxLength: 3e3
                  },
                  descriptionFacets: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.richtext.facet"
                    }
                  },
                  avatar: {
                    type: "blob",
                    accept: ["image/png", "image/jpeg"],
                    maxSize: 1e6
                  },
                  acceptsInteractions: {
                    type: "boolean",
                    description: "Declaration that a feed accepts feedback interactions from a client through app.bsky.feed.sendInteractions"
                  },
                  labels: {
                    type: "union",
                    description: "Self-label values",
                    refs: ["lex:com.atproto.label.defs#selfLabels"]
                  },
                  contentMode: {
                    type: "string",
                    knownValues: [
                      "app.bsky.feed.defs#contentModeUnspecified",
                      "app.bsky.feed.defs#contentModeVideo"
                    ]
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetActorFeeds: {
          lexicon: 1,
          id: "app.bsky.feed.getActorFeeds",
          defs: {
            main: {
              type: "query",
              description: "Get a list of feeds (feed generator records) created by the actor (in the actor's repo).",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feeds"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feeds: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#generatorView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetActorLikes: {
          lexicon: 1,
          id: "app.bsky.feed.getActorLikes",
          defs: {
            main: {
              type: "query",
              description: "Get a list of posts liked by an actor. Requires auth, actor must be the requesting account.",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feed"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feed: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#feedViewPost"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "BlockedActor"
                },
                {
                  name: "BlockedByActor"
                }
              ]
            }
          }
        },
        AppBskyFeedGetAuthorFeed: {
          lexicon: 1,
          id: "app.bsky.feed.getAuthorFeed",
          defs: {
            main: {
              type: "query",
              description: "Get a view of an actor's 'author feed' (post and reposts by the author). Does not require auth.",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  },
                  filter: {
                    type: "string",
                    description: "Combinations of post/repost types to include in response.",
                    knownValues: [
                      "posts_with_replies",
                      "posts_no_replies",
                      "posts_with_media",
                      "posts_and_author_threads",
                      "posts_with_video"
                    ],
                    default: "posts_with_replies"
                  },
                  includePins: {
                    type: "boolean",
                    default: false
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feed"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feed: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#feedViewPost"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "BlockedActor"
                },
                {
                  name: "BlockedByActor"
                }
              ]
            }
          }
        },
        AppBskyFeedGetFeed: {
          lexicon: 1,
          id: "app.bsky.feed.getFeed",
          defs: {
            main: {
              type: "query",
              description: "Get a hydrated feed from an actor's selected feed generator. Implemented by App View.",
              parameters: {
                type: "params",
                required: ["feed"],
                properties: {
                  feed: {
                    type: "string",
                    format: "at-uri"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feed"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feed: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#feedViewPost"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "UnknownFeed"
                }
              ]
            }
          }
        },
        AppBskyFeedGetFeedGenerator: {
          lexicon: 1,
          id: "app.bsky.feed.getFeedGenerator",
          defs: {
            main: {
              type: "query",
              description: "Get information about a feed generator. Implemented by AppView.",
              parameters: {
                type: "params",
                required: ["feed"],
                properties: {
                  feed: {
                    type: "string",
                    format: "at-uri",
                    description: "AT-URI of the feed generator record."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["view", "isOnline", "isValid"],
                  properties: {
                    view: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.defs#generatorView"
                    },
                    isOnline: {
                      type: "boolean",
                      description: "Indicates whether the feed generator service has been online recently, or else seems to be inactive."
                    },
                    isValid: {
                      type: "boolean",
                      description: "Indicates whether the feed generator service is compatible with the record declaration."
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetFeedGenerators: {
          lexicon: 1,
          id: "app.bsky.feed.getFeedGenerators",
          defs: {
            main: {
              type: "query",
              description: "Get information about a list of feed generators.",
              parameters: {
                type: "params",
                required: ["feeds"],
                properties: {
                  feeds: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "at-uri"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feeds"],
                  properties: {
                    feeds: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#generatorView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetFeedSkeleton: {
          lexicon: 1,
          id: "app.bsky.feed.getFeedSkeleton",
          defs: {
            main: {
              type: "query",
              description: "Get a skeleton of a feed provided by a feed generator. Auth is optional, depending on provider requirements, and provides the DID of the requester. Implemented by Feed Generator Service.",
              parameters: {
                type: "params",
                required: ["feed"],
                properties: {
                  feed: {
                    type: "string",
                    format: "at-uri",
                    description: "Reference to feed generator record describing the specific feed being requested."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feed"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feed: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#skeletonFeedPost"
                      }
                    },
                    reqId: {
                      type: "string",
                      description: "Unique identifier per request that may be passed back alongside interactions.",
                      maxLength: 100
                    }
                  }
                }
              },
              errors: [
                {
                  name: "UnknownFeed"
                }
              ]
            }
          }
        },
        AppBskyFeedGetLikes: {
          lexicon: 1,
          id: "app.bsky.feed.getLikes",
          defs: {
            main: {
              type: "query",
              description: "Get like records which reference a subject (by AT-URI and CID).",
              parameters: {
                type: "params",
                required: ["uri"],
                properties: {
                  uri: {
                    type: "string",
                    format: "at-uri",
                    description: "AT-URI of the subject (eg, a post record)."
                  },
                  cid: {
                    type: "string",
                    format: "cid",
                    description: "CID of the subject record (aka, specific version of record), to filter likes."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["uri", "likes"],
                  properties: {
                    uri: {
                      type: "string",
                      format: "at-uri"
                    },
                    cid: {
                      type: "string",
                      format: "cid"
                    },
                    cursor: {
                      type: "string"
                    },
                    likes: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.getLikes#like"
                      }
                    }
                  }
                }
              }
            },
            like: {
              type: "object",
              required: ["indexedAt", "createdAt", "actor"],
              properties: {
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                actor: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                }
              }
            }
          }
        },
        AppBskyFeedGetListFeed: {
          lexicon: 1,
          id: "app.bsky.feed.getListFeed",
          defs: {
            main: {
              type: "query",
              description: "Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.",
              parameters: {
                type: "params",
                required: ["list"],
                properties: {
                  list: {
                    type: "string",
                    format: "at-uri",
                    description: "Reference (AT-URI) to the list record."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feed"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feed: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#feedViewPost"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "UnknownList"
                }
              ]
            }
          }
        },
        AppBskyFeedGetPosts: {
          lexicon: 1,
          id: "app.bsky.feed.getPosts",
          defs: {
            main: {
              type: "query",
              description: "Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as 'hydrating' a 'feed skeleton'.",
              parameters: {
                type: "params",
                required: ["uris"],
                properties: {
                  uris: {
                    type: "array",
                    description: "List of post AT-URIs to return hydrated views for.",
                    items: {
                      type: "string",
                      format: "at-uri"
                    },
                    maxLength: 25
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["posts"],
                  properties: {
                    posts: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#postView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetPostThread: {
          lexicon: 1,
          id: "app.bsky.feed.getPostThread",
          defs: {
            main: {
              type: "query",
              description: "Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.",
              parameters: {
                type: "params",
                required: ["uri"],
                properties: {
                  uri: {
                    type: "string",
                    format: "at-uri",
                    description: "Reference (AT-URI) to post record."
                  },
                  depth: {
                    type: "integer",
                    description: "How many levels of reply depth should be included in response.",
                    default: 6,
                    minimum: 0,
                    maximum: 1e3
                  },
                  parentHeight: {
                    type: "integer",
                    description: "How many levels of parent (and grandparent, etc) post to include.",
                    default: 80,
                    minimum: 0,
                    maximum: 1e3
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["thread"],
                  properties: {
                    thread: {
                      type: "union",
                      refs: [
                        "lex:app.bsky.feed.defs#threadViewPost",
                        "lex:app.bsky.feed.defs#notFoundPost",
                        "lex:app.bsky.feed.defs#blockedPost"
                      ]
                    },
                    threadgate: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.defs#threadgateView"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "NotFound"
                }
              ]
            }
          }
        },
        AppBskyFeedGetQuotes: {
          lexicon: 1,
          id: "app.bsky.feed.getQuotes",
          defs: {
            main: {
              type: "query",
              description: "Get a list of quotes for a given post.",
              parameters: {
                type: "params",
                required: ["uri"],
                properties: {
                  uri: {
                    type: "string",
                    format: "at-uri",
                    description: "Reference (AT-URI) of post record"
                  },
                  cid: {
                    type: "string",
                    format: "cid",
                    description: "If supplied, filters to quotes of specific version (by CID) of the post record."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["uri", "posts"],
                  properties: {
                    uri: {
                      type: "string",
                      format: "at-uri"
                    },
                    cid: {
                      type: "string",
                      format: "cid"
                    },
                    cursor: {
                      type: "string"
                    },
                    posts: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#postView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetRepostedBy: {
          lexicon: 1,
          id: "app.bsky.feed.getRepostedBy",
          defs: {
            main: {
              type: "query",
              description: "Get a list of reposts for a given post.",
              parameters: {
                type: "params",
                required: ["uri"],
                properties: {
                  uri: {
                    type: "string",
                    format: "at-uri",
                    description: "Reference (AT-URI) of post record"
                  },
                  cid: {
                    type: "string",
                    format: "cid",
                    description: "If supplied, filters to reposts of specific version (by CID) of the post record."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["uri", "repostedBy"],
                  properties: {
                    uri: {
                      type: "string",
                      format: "at-uri"
                    },
                    cid: {
                      type: "string",
                      format: "cid"
                    },
                    cursor: {
                      type: "string"
                    },
                    repostedBy: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetSuggestedFeeds: {
          lexicon: 1,
          id: "app.bsky.feed.getSuggestedFeeds",
          defs: {
            main: {
              type: "query",
              description: "Get a list of suggested feeds (feed generators) for the requesting account.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feeds"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feeds: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#generatorView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetTimeline: {
          lexicon: 1,
          id: "app.bsky.feed.getTimeline",
          defs: {
            main: {
              type: "query",
              description: "Get a view of the requesting account's home timeline. This is expected to be some form of reverse-chronological feed.",
              parameters: {
                type: "params",
                properties: {
                  algorithm: {
                    type: "string",
                    description: "Variant 'algorithm' for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feed"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feed: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#feedViewPost"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedLike: {
          lexicon: 1,
          id: "app.bsky.feed.like",
          defs: {
            main: {
              type: "record",
              description: "Record declaring a 'like' of a piece of subject content.",
              key: "tid",
              record: {
                type: "object",
                required: ["subject", "createdAt"],
                properties: {
                  subject: {
                    type: "ref",
                    ref: "lex:com.atproto.repo.strongRef"
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyFeedPost: {
          lexicon: 1,
          id: "app.bsky.feed.post",
          defs: {
            main: {
              type: "record",
              description: "Record containing a Bluesky post.",
              key: "tid",
              record: {
                type: "object",
                required: ["text", "createdAt"],
                properties: {
                  text: {
                    type: "string",
                    maxLength: 3e3,
                    maxGraphemes: 300,
                    description: "The primary post content. May be an empty string, if there are embeds."
                  },
                  entities: {
                    type: "array",
                    description: "DEPRECATED: replaced by app.bsky.richtext.facet.",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.post#entity"
                    }
                  },
                  facets: {
                    type: "array",
                    description: "Annotations of text (mentions, URLs, hashtags, etc)",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.richtext.facet"
                    }
                  },
                  reply: {
                    type: "ref",
                    ref: "lex:app.bsky.feed.post#replyRef"
                  },
                  embed: {
                    type: "union",
                    refs: [
                      "lex:app.bsky.embed.images",
                      "lex:app.bsky.embed.video",
                      "lex:app.bsky.embed.external",
                      "lex:app.bsky.embed.record",
                      "lex:app.bsky.embed.recordWithMedia"
                    ]
                  },
                  langs: {
                    type: "array",
                    description: "Indicates human language of post primary text content.",
                    maxLength: 3,
                    items: {
                      type: "string",
                      format: "language"
                    }
                  },
                  labels: {
                    type: "union",
                    description: "Self-label values for this post. Effectively content warnings.",
                    refs: ["lex:com.atproto.label.defs#selfLabels"]
                  },
                  tags: {
                    type: "array",
                    description: "Additional hashtags, in addition to any included in post text and facets.",
                    maxLength: 8,
                    items: {
                      type: "string",
                      maxLength: 640,
                      maxGraphemes: 64
                    }
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime",
                    description: "Client-declared timestamp when this post was originally created."
                  }
                }
              }
            },
            replyRef: {
              type: "object",
              required: ["root", "parent"],
              properties: {
                root: {
                  type: "ref",
                  ref: "lex:com.atproto.repo.strongRef"
                },
                parent: {
                  type: "ref",
                  ref: "lex:com.atproto.repo.strongRef"
                }
              }
            },
            entity: {
              type: "object",
              description: "Deprecated: use facets instead.",
              required: ["index", "type", "value"],
              properties: {
                index: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.post#textSlice"
                },
                type: {
                  type: "string",
                  description: "Expected values are 'mention' and 'link'."
                },
                value: {
                  type: "string"
                }
              }
            },
            textSlice: {
              type: "object",
              description: "Deprecated. Use app.bsky.richtext instead -- A text segment. Start is inclusive, end is exclusive. Indices are for utf16-encoded strings.",
              required: ["start", "end"],
              properties: {
                start: {
                  type: "integer",
                  minimum: 0
                },
                end: {
                  type: "integer",
                  minimum: 0
                }
              }
            }
          }
        },
        AppBskyFeedPostgate: {
          lexicon: 1,
          id: "app.bsky.feed.postgate",
          defs: {
            main: {
              type: "record",
              key: "tid",
              description: "Record defining interaction rules for a post. The record key (rkey) of the postgate record must match the record key of the post, and that record must be in the same repository.",
              record: {
                type: "object",
                required: ["post", "createdAt"],
                properties: {
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  },
                  post: {
                    type: "string",
                    format: "at-uri",
                    description: "Reference (AT-URI) to the post record."
                  },
                  detachedEmbeddingUris: {
                    type: "array",
                    maxLength: 50,
                    items: {
                      type: "string",
                      format: "at-uri"
                    },
                    description: "List of AT-URIs embedding this post that the author has detached from."
                  },
                  embeddingRules: {
                    description: "List of rules defining who can embed this post. If value is an empty array or is undefined, no particular rules apply and anyone can embed.",
                    type: "array",
                    maxLength: 5,
                    items: {
                      type: "union",
                      refs: ["lex:app.bsky.feed.postgate#disableRule"]
                    }
                  }
                }
              }
            },
            disableRule: {
              type: "object",
              description: "Disables embedding of this post.",
              properties: {}
            }
          }
        },
        AppBskyFeedRepost: {
          lexicon: 1,
          id: "app.bsky.feed.repost",
          defs: {
            main: {
              description: "Record representing a 'repost' of an existing Bluesky post.",
              type: "record",
              key: "tid",
              record: {
                type: "object",
                required: ["subject", "createdAt"],
                properties: {
                  subject: {
                    type: "ref",
                    ref: "lex:com.atproto.repo.strongRef"
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyFeedSearchPosts: {
          lexicon: 1,
          id: "app.bsky.feed.searchPosts",
          defs: {
            main: {
              type: "query",
              description: "Find posts matching search criteria, returning views of those posts.",
              parameters: {
                type: "params",
                required: ["q"],
                properties: {
                  q: {
                    type: "string",
                    description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended."
                  },
                  sort: {
                    type: "string",
                    knownValues: ["top", "latest"],
                    default: "latest",
                    description: "Specifies the ranking order of results."
                  },
                  since: {
                    type: "string",
                    description: "Filter results for posts after the indicated datetime (inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYYY-MM-DD)."
                  },
                  until: {
                    type: "string",
                    description: "Filter results for posts before the indicated datetime (not inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYY-MM-DD)."
                  },
                  mentions: {
                    type: "string",
                    format: "at-identifier",
                    description: "Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions."
                  },
                  author: {
                    type: "string",
                    format: "at-identifier",
                    description: "Filter to posts by the given account. Handles are resolved to DID before query-time."
                  },
                  lang: {
                    type: "string",
                    format: "language",
                    description: "Filter to posts in the given language. Expected to be based on post language field, though server may override language detection."
                  },
                  domain: {
                    type: "string",
                    description: "Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization."
                  },
                  url: {
                    type: "string",
                    format: "uri",
                    description: "Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching."
                  },
                  tag: {
                    type: "array",
                    items: {
                      type: "string",
                      maxLength: 640,
                      maxGraphemes: 64
                    },
                    description: "Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with 'AND' matching."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 25
                  },
                  cursor: {
                    type: "string",
                    description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["posts"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    hitsTotal: {
                      type: "integer",
                      description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits."
                    },
                    posts: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#postView"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "BadQueryString"
                }
              ]
            }
          }
        },
        AppBskyFeedSendInteractions: {
          lexicon: 1,
          id: "app.bsky.feed.sendInteractions",
          defs: {
            main: {
              type: "procedure",
              description: "Send information about interactions with feed items back to the feed generator that served them.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["interactions"],
                  properties: {
                    interactions: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#interaction"
                      }
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  properties: {}
                }
              }
            }
          }
        },
        AppBskyFeedThreadgate: {
          lexicon: 1,
          id: "app.bsky.feed.threadgate",
          defs: {
            main: {
              type: "record",
              key: "tid",
              description: "Record defining interaction gating rules for a thread (aka, reply controls). The record key (rkey) of the threadgate record must match the record key of the thread's root post, and that record must be in the same repository.",
              record: {
                type: "object",
                required: ["post", "createdAt"],
                properties: {
                  post: {
                    type: "string",
                    format: "at-uri",
                    description: "Reference (AT-URI) to the post record."
                  },
                  allow: {
                    description: "List of rules defining who can reply to this post. If value is an empty array, no one can reply. If value is undefined, anyone can reply.",
                    type: "array",
                    maxLength: 5,
                    items: {
                      type: "union",
                      refs: [
                        "lex:app.bsky.feed.threadgate#mentionRule",
                        "lex:app.bsky.feed.threadgate#followerRule",
                        "lex:app.bsky.feed.threadgate#followingRule",
                        "lex:app.bsky.feed.threadgate#listRule"
                      ]
                    }
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  },
                  hiddenReplies: {
                    type: "array",
                    maxLength: 50,
                    items: {
                      type: "string",
                      format: "at-uri"
                    },
                    description: "List of hidden reply URIs."
                  }
                }
              }
            },
            mentionRule: {
              type: "object",
              description: "Allow replies from actors mentioned in your post.",
              properties: {}
            },
            followerRule: {
              type: "object",
              description: "Allow replies from actors who follow you.",
              properties: {}
            },
            followingRule: {
              type: "object",
              description: "Allow replies from actors you follow.",
              properties: {}
            },
            listRule: {
              type: "object",
              description: "Allow replies from actors on a list.",
              required: ["list"],
              properties: {
                list: {
                  type: "string",
                  format: "at-uri"
                }
              }
            }
          }
        },
        AppBskyGraphBlock: {
          lexicon: 1,
          id: "app.bsky.graph.block",
          defs: {
            main: {
              type: "record",
              description: "Record declaring a 'block' relationship against another account. NOTE: blocks are public in Bluesky; see blog posts for details.",
              key: "tid",
              record: {
                type: "object",
                required: ["subject", "createdAt"],
                properties: {
                  subject: {
                    type: "string",
                    format: "did",
                    description: "DID of the account to be blocked."
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyGraphDefs: {
          lexicon: 1,
          id: "app.bsky.graph.defs",
          defs: {
            listViewBasic: {
              type: "object",
              required: ["uri", "cid", "name", "purpose"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                name: {
                  type: "string",
                  maxLength: 64,
                  minLength: 1
                },
                purpose: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#listPurpose"
                },
                avatar: {
                  type: "string",
                  format: "uri"
                },
                listItemCount: {
                  type: "integer",
                  minimum: 0
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#listViewerState"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            listView: {
              type: "object",
              required: ["uri", "cid", "creator", "name", "purpose", "indexedAt"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                creator: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                },
                name: {
                  type: "string",
                  maxLength: 64,
                  minLength: 1
                },
                purpose: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#listPurpose"
                },
                description: {
                  type: "string",
                  maxGraphemes: 300,
                  maxLength: 3e3
                },
                descriptionFacets: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.richtext.facet"
                  }
                },
                avatar: {
                  type: "string",
                  format: "uri"
                },
                listItemCount: {
                  type: "integer",
                  minimum: 0
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#listViewerState"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            listItemView: {
              type: "object",
              required: ["uri", "subject"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                subject: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                }
              }
            },
            starterPackView: {
              type: "object",
              required: ["uri", "cid", "record", "creator", "indexedAt"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                record: {
                  type: "unknown"
                },
                creator: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileViewBasic"
                },
                list: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#listViewBasic"
                },
                listItemsSample: {
                  type: "array",
                  maxLength: 12,
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.graph.defs#listItemView"
                  }
                },
                feeds: {
                  type: "array",
                  maxLength: 3,
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.feed.defs#generatorView"
                  }
                },
                joinedWeekCount: {
                  type: "integer",
                  minimum: 0
                },
                joinedAllTimeCount: {
                  type: "integer",
                  minimum: 0
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            starterPackViewBasic: {
              type: "object",
              required: ["uri", "cid", "record", "creator", "indexedAt"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                record: {
                  type: "unknown"
                },
                creator: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileViewBasic"
                },
                listItemCount: {
                  type: "integer",
                  minimum: 0
                },
                joinedWeekCount: {
                  type: "integer",
                  minimum: 0
                },
                joinedAllTimeCount: {
                  type: "integer",
                  minimum: 0
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            listPurpose: {
              type: "string",
              knownValues: [
                "app.bsky.graph.defs#modlist",
                "app.bsky.graph.defs#curatelist",
                "app.bsky.graph.defs#referencelist"
              ]
            },
            modlist: {
              type: "token",
              description: "A list of actors to apply an aggregate moderation action (mute/block) on."
            },
            curatelist: {
              type: "token",
              description: "A list of actors used for curation purposes such as list feeds or interaction gating."
            },
            referencelist: {
              type: "token",
              description: "A list of actors used for only for reference purposes such as within a starter pack."
            },
            listViewerState: {
              type: "object",
              properties: {
                muted: {
                  type: "boolean"
                },
                blocked: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            notFoundActor: {
              type: "object",
              description: "indicates that a handle or DID could not be resolved",
              required: ["actor", "notFound"],
              properties: {
                actor: {
                  type: "string",
                  format: "at-identifier"
                },
                notFound: {
                  type: "boolean",
                  const: true
                }
              }
            },
            relationship: {
              type: "object",
              description: "lists the bi-directional graph relationships between one actor (not indicated in the object), and the target actors (the DID included in the object)",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                following: {
                  type: "string",
                  format: "at-uri",
                  description: "if the actor follows this DID, this is the AT-URI of the follow record"
                },
                followedBy: {
                  type: "string",
                  format: "at-uri",
                  description: "if the actor is followed by this DID, contains the AT-URI of the follow record"
                }
              }
            }
          }
        },
        AppBskyGraphFollow: {
          lexicon: 1,
          id: "app.bsky.graph.follow",
          defs: {
            main: {
              type: "record",
              description: "Record declaring a social 'follow' relationship of another account. Duplicate follows will be ignored by the AppView.",
              key: "tid",
              record: {
                type: "object",
                required: ["subject", "createdAt"],
                properties: {
                  subject: {
                    type: "string",
                    format: "did"
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetActorStarterPacks: {
          lexicon: 1,
          id: "app.bsky.graph.getActorStarterPacks",
          defs: {
            main: {
              type: "query",
              description: "Get a list of starter packs created by the actor.",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["starterPacks"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    starterPacks: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.graph.defs#starterPackViewBasic"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetBlocks: {
          lexicon: 1,
          id: "app.bsky.graph.getBlocks",
          defs: {
            main: {
              type: "query",
              description: "Enumerates which accounts the requesting account is currently blocking. Requires auth.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["blocks"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    blocks: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetFollowers: {
          lexicon: 1,
          id: "app.bsky.graph.getFollowers",
          defs: {
            main: {
              type: "query",
              description: "Enumerates accounts which follow a specified account (actor).",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["subject", "followers"],
                  properties: {
                    subject: {
                      type: "ref",
                      ref: "lex:app.bsky.actor.defs#profileView"
                    },
                    cursor: {
                      type: "string"
                    },
                    followers: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetFollows: {
          lexicon: 1,
          id: "app.bsky.graph.getFollows",
          defs: {
            main: {
              type: "query",
              description: "Enumerates accounts which a specified account (actor) follows.",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["subject", "follows"],
                  properties: {
                    subject: {
                      type: "ref",
                      ref: "lex:app.bsky.actor.defs#profileView"
                    },
                    cursor: {
                      type: "string"
                    },
                    follows: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetKnownFollowers: {
          lexicon: 1,
          id: "app.bsky.graph.getKnownFollowers",
          defs: {
            main: {
              type: "query",
              description: "Enumerates accounts which follow a specified account (actor) and are followed by the viewer.",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["subject", "followers"],
                  properties: {
                    subject: {
                      type: "ref",
                      ref: "lex:app.bsky.actor.defs#profileView"
                    },
                    cursor: {
                      type: "string"
                    },
                    followers: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetList: {
          lexicon: 1,
          id: "app.bsky.graph.getList",
          defs: {
            main: {
              type: "query",
              description: "Gets a 'view' (with additional context) of a specified list.",
              parameters: {
                type: "params",
                required: ["list"],
                properties: {
                  list: {
                    type: "string",
                    format: "at-uri",
                    description: "Reference (AT-URI) of the list record to hydrate."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["list", "items"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    list: {
                      type: "ref",
                      ref: "lex:app.bsky.graph.defs#listView"
                    },
                    items: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.graph.defs#listItemView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetListBlocks: {
          lexicon: 1,
          id: "app.bsky.graph.getListBlocks",
          defs: {
            main: {
              type: "query",
              description: "Get mod lists that the requesting account (actor) is blocking. Requires auth.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["lists"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    lists: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.graph.defs#listView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetListMutes: {
          lexicon: 1,
          id: "app.bsky.graph.getListMutes",
          defs: {
            main: {
              type: "query",
              description: "Enumerates mod lists that the requesting account (actor) currently has muted. Requires auth.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["lists"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    lists: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.graph.defs#listView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetLists: {
          lexicon: 1,
          id: "app.bsky.graph.getLists",
          defs: {
            main: {
              type: "query",
              description: "Enumerates the lists created by a specified account (actor).",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier",
                    description: "The account (actor) to enumerate lists from."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["lists"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    lists: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.graph.defs#listView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetMutes: {
          lexicon: 1,
          id: "app.bsky.graph.getMutes",
          defs: {
            main: {
              type: "query",
              description: "Enumerates accounts that the requesting account (actor) currently has muted. Requires auth.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["mutes"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    mutes: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetRelationships: {
          lexicon: 1,
          id: "app.bsky.graph.getRelationships",
          defs: {
            main: {
              type: "query",
              description: "Enumerates public relationships between one account, and a list of other accounts. Does not require auth.",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier",
                    description: "Primary account requesting relationships for."
                  },
                  others: {
                    type: "array",
                    description: "List of 'other' accounts to be related back to the primary.",
                    maxLength: 30,
                    items: {
                      type: "string",
                      format: "at-identifier"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["relationships"],
                  properties: {
                    actor: {
                      type: "string",
                      format: "did"
                    },
                    relationships: {
                      type: "array",
                      items: {
                        type: "union",
                        refs: [
                          "lex:app.bsky.graph.defs#relationship",
                          "lex:app.bsky.graph.defs#notFoundActor"
                        ]
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "ActorNotFound",
                  description: "the primary actor at-identifier could not be resolved"
                }
              ]
            }
          }
        },
        AppBskyGraphGetStarterPack: {
          lexicon: 1,
          id: "app.bsky.graph.getStarterPack",
          defs: {
            main: {
              type: "query",
              description: "Gets a view of a starter pack.",
              parameters: {
                type: "params",
                required: ["starterPack"],
                properties: {
                  starterPack: {
                    type: "string",
                    format: "at-uri",
                    description: "Reference (AT-URI) of the starter pack record."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["starterPack"],
                  properties: {
                    starterPack: {
                      type: "ref",
                      ref: "lex:app.bsky.graph.defs#starterPackView"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetStarterPacks: {
          lexicon: 1,
          id: "app.bsky.graph.getStarterPacks",
          defs: {
            main: {
              type: "query",
              description: "Get views for a list of starter packs.",
              parameters: {
                type: "params",
                required: ["uris"],
                properties: {
                  uris: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "at-uri"
                    },
                    maxLength: 25
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["starterPacks"],
                  properties: {
                    starterPacks: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.graph.defs#starterPackViewBasic"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetSuggestedFollowsByActor: {
          lexicon: 1,
          id: "app.bsky.graph.getSuggestedFollowsByActor",
          defs: {
            main: {
              type: "query",
              description: "Enumerates follows similar to a given account (actor). Expected use is to recommend additional accounts immediately after following one account.",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["suggestions"],
                  properties: {
                    suggestions: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    },
                    isFallback: {
                      type: "boolean",
                      description: "If true, response has fallen-back to generic results, and is not scoped using relativeToDid",
                      default: false
                    },
                    recId: {
                      type: "integer",
                      description: "Snowflake for this recommendation, use when submitting recommendation events."
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphList: {
          lexicon: 1,
          id: "app.bsky.graph.list",
          defs: {
            main: {
              type: "record",
              description: "Record representing a list of accounts (actors). Scope includes both moderation-oriented lists and curration-oriented lists.",
              key: "tid",
              record: {
                type: "object",
                required: ["name", "purpose", "createdAt"],
                properties: {
                  purpose: {
                    type: "ref",
                    description: "Defines the purpose of the list (aka, moderation-oriented or curration-oriented)",
                    ref: "lex:app.bsky.graph.defs#listPurpose"
                  },
                  name: {
                    type: "string",
                    maxLength: 64,
                    minLength: 1,
                    description: "Display name for list; can not be empty."
                  },
                  description: {
                    type: "string",
                    maxGraphemes: 300,
                    maxLength: 3e3
                  },
                  descriptionFacets: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.richtext.facet"
                    }
                  },
                  avatar: {
                    type: "blob",
                    accept: ["image/png", "image/jpeg"],
                    maxSize: 1e6
                  },
                  labels: {
                    type: "union",
                    refs: ["lex:com.atproto.label.defs#selfLabels"]
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyGraphListblock: {
          lexicon: 1,
          id: "app.bsky.graph.listblock",
          defs: {
            main: {
              type: "record",
              description: "Record representing a block relationship against an entire an entire list of accounts (actors).",
              key: "tid",
              record: {
                type: "object",
                required: ["subject", "createdAt"],
                properties: {
                  subject: {
                    type: "string",
                    format: "at-uri",
                    description: "Reference (AT-URI) to the mod list record."
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyGraphListitem: {
          lexicon: 1,
          id: "app.bsky.graph.listitem",
          defs: {
            main: {
              type: "record",
              description: "Record representing an account's inclusion on a specific list. The AppView will ignore duplicate listitem records.",
              key: "tid",
              record: {
                type: "object",
                required: ["subject", "list", "createdAt"],
                properties: {
                  subject: {
                    type: "string",
                    format: "did",
                    description: "The account which is included on the list."
                  },
                  list: {
                    type: "string",
                    format: "at-uri",
                    description: "Reference (AT-URI) to the list record (app.bsky.graph.list)."
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyGraphMuteActor: {
          lexicon: 1,
          id: "app.bsky.graph.muteActor",
          defs: {
            main: {
              type: "procedure",
              description: "Creates a mute relationship for the specified account. Mutes are private in Bluesky. Requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["actor"],
                  properties: {
                    actor: {
                      type: "string",
                      format: "at-identifier"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphMuteActorList: {
          lexicon: 1,
          id: "app.bsky.graph.muteActorList",
          defs: {
            main: {
              type: "procedure",
              description: "Creates a mute relationship for the specified list of accounts. Mutes are private in Bluesky. Requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["list"],
                  properties: {
                    list: {
                      type: "string",
                      format: "at-uri"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphMuteThread: {
          lexicon: 1,
          id: "app.bsky.graph.muteThread",
          defs: {
            main: {
              type: "procedure",
              description: "Mutes a thread preventing notifications from the thread and any of its children. Mutes are private in Bluesky. Requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["root"],
                  properties: {
                    root: {
                      type: "string",
                      format: "at-uri"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphSearchStarterPacks: {
          lexicon: 1,
          id: "app.bsky.graph.searchStarterPacks",
          defs: {
            main: {
              type: "query",
              description: "Find starter packs matching search criteria. Does not require auth.",
              parameters: {
                type: "params",
                required: ["q"],
                properties: {
                  q: {
                    type: "string",
                    description: "Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 25
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["starterPacks"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    starterPacks: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.graph.defs#starterPackViewBasic"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphStarterpack: {
          lexicon: 1,
          id: "app.bsky.graph.starterpack",
          defs: {
            main: {
              type: "record",
              description: "Record defining a starter pack of actors and feeds for new users.",
              key: "tid",
              record: {
                type: "object",
                required: ["name", "list", "createdAt"],
                properties: {
                  name: {
                    type: "string",
                    maxGraphemes: 50,
                    maxLength: 500,
                    minLength: 1,
                    description: "Display name for starter pack; can not be empty."
                  },
                  description: {
                    type: "string",
                    maxGraphemes: 300,
                    maxLength: 3e3
                  },
                  descriptionFacets: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.richtext.facet"
                    }
                  },
                  list: {
                    type: "string",
                    format: "at-uri",
                    description: "Reference (AT-URI) to the list record."
                  },
                  feeds: {
                    type: "array",
                    maxLength: 3,
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.graph.starterpack#feedItem"
                    }
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            },
            feedItem: {
              type: "object",
              required: ["uri"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                }
              }
            }
          }
        },
        AppBskyGraphUnmuteActor: {
          lexicon: 1,
          id: "app.bsky.graph.unmuteActor",
          defs: {
            main: {
              type: "procedure",
              description: "Unmutes the specified account. Requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["actor"],
                  properties: {
                    actor: {
                      type: "string",
                      format: "at-identifier"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphUnmuteActorList: {
          lexicon: 1,
          id: "app.bsky.graph.unmuteActorList",
          defs: {
            main: {
              type: "procedure",
              description: "Unmutes the specified list of accounts. Requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["list"],
                  properties: {
                    list: {
                      type: "string",
                      format: "at-uri"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphUnmuteThread: {
          lexicon: 1,
          id: "app.bsky.graph.unmuteThread",
          defs: {
            main: {
              type: "procedure",
              description: "Unmutes the specified thread. Requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["root"],
                  properties: {
                    root: {
                      type: "string",
                      format: "at-uri"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphVerification: {
          lexicon: 1,
          id: "app.bsky.graph.verification",
          defs: {
            main: {
              type: "record",
              description: "Record declaring a verification relationship between two accounts. Verifications are only considered valid by an app if issued by an account the app considers trusted.",
              key: "tid",
              record: {
                type: "object",
                required: ["subject", "handle", "displayName", "createdAt"],
                properties: {
                  subject: {
                    description: "DID of the subject the verification applies to.",
                    type: "string",
                    format: "did"
                  },
                  handle: {
                    description: "Handle of the subject the verification applies to at the moment of verifying, which might not be the same at the time of viewing. The verification is only valid if the current handle matches the one at the time of verifying.",
                    type: "string",
                    format: "handle"
                  },
                  displayName: {
                    description: "Display name of the subject the verification applies to at the moment of verifying, which might not be the same at the time of viewing. The verification is only valid if the current displayName matches the one at the time of verifying.",
                    type: "string"
                  },
                  createdAt: {
                    description: "Date of when the verification was created.",
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyLabelerDefs: {
          lexicon: 1,
          id: "app.bsky.labeler.defs",
          defs: {
            labelerView: {
              type: "object",
              required: ["uri", "cid", "creator", "indexedAt"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                creator: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                },
                likeCount: {
                  type: "integer",
                  minimum: 0
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.labeler.defs#labelerViewerState"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                }
              }
            },
            labelerViewDetailed: {
              type: "object",
              required: ["uri", "cid", "creator", "policies", "indexedAt"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                creator: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                },
                policies: {
                  type: "ref",
                  ref: "lex:app.bsky.labeler.defs#labelerPolicies"
                },
                likeCount: {
                  type: "integer",
                  minimum: 0
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.labeler.defs#labelerViewerState"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                reasonTypes: {
                  description: "The set of report reason 'codes' which are in-scope for this service to review and action. These usually align to policy categories. If not defined (distinct from empty array), all reason types are allowed.",
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.moderation.defs#reasonType"
                  }
                },
                subjectTypes: {
                  description: "The set of subject types (account, record, etc) this service accepts reports on.",
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.moderation.defs#subjectType"
                  }
                },
                subjectCollections: {
                  type: "array",
                  description: "Set of record types (collection NSIDs) which can be reported to this service. If not defined (distinct from empty array), default is any record type.",
                  items: {
                    type: "string",
                    format: "nsid"
                  }
                }
              }
            },
            labelerViewerState: {
              type: "object",
              properties: {
                like: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            labelerPolicies: {
              type: "object",
              required: ["labelValues"],
              properties: {
                labelValues: {
                  type: "array",
                  description: "The label values which this labeler publishes. May include global or custom labels.",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#labelValue"
                  }
                },
                labelValueDefinitions: {
                  type: "array",
                  description: "Label values created by this labeler and scoped exclusively to it. Labels defined here will override global label definitions for this labeler.",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#labelValueDefinition"
                  }
                }
              }
            }
          }
        },
        AppBskyLabelerGetServices: {
          lexicon: 1,
          id: "app.bsky.labeler.getServices",
          defs: {
            main: {
              type: "query",
              description: "Get information about a list of labeler services.",
              parameters: {
                type: "params",
                required: ["dids"],
                properties: {
                  dids: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "did"
                    }
                  },
                  detailed: {
                    type: "boolean",
                    default: false
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["views"],
                  properties: {
                    views: {
                      type: "array",
                      items: {
                        type: "union",
                        refs: [
                          "lex:app.bsky.labeler.defs#labelerView",
                          "lex:app.bsky.labeler.defs#labelerViewDetailed"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyLabelerService: {
          lexicon: 1,
          id: "app.bsky.labeler.service",
          defs: {
            main: {
              type: "record",
              description: "A declaration of the existence of labeler service.",
              key: "literal:self",
              record: {
                type: "object",
                required: ["policies", "createdAt"],
                properties: {
                  policies: {
                    type: "ref",
                    ref: "lex:app.bsky.labeler.defs#labelerPolicies"
                  },
                  labels: {
                    type: "union",
                    refs: ["lex:com.atproto.label.defs#selfLabels"]
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  },
                  reasonTypes: {
                    description: "The set of report reason 'codes' which are in-scope for this service to review and action. These usually align to policy categories. If not defined (distinct from empty array), all reason types are allowed.",
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:com.atproto.moderation.defs#reasonType"
                    }
                  },
                  subjectTypes: {
                    description: "The set of subject types (account, record, etc) this service accepts reports on.",
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:com.atproto.moderation.defs#subjectType"
                    }
                  },
                  subjectCollections: {
                    type: "array",
                    description: "Set of record types (collection NSIDs) which can be reported to this service. If not defined (distinct from empty array), default is any record type.",
                    items: {
                      type: "string",
                      format: "nsid"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyNotificationDefs: {
          lexicon: 1,
          id: "app.bsky.notification.defs",
          defs: {
            recordDeleted: {
              type: "object",
              properties: {}
            }
          }
        },
        AppBskyNotificationGetUnreadCount: {
          lexicon: 1,
          id: "app.bsky.notification.getUnreadCount",
          defs: {
            main: {
              type: "query",
              description: "Count the number of unread notifications for the requesting account. Requires auth.",
              parameters: {
                type: "params",
                properties: {
                  priority: {
                    type: "boolean"
                  },
                  seenAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["count"],
                  properties: {
                    count: {
                      type: "integer"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyNotificationListNotifications: {
          lexicon: 1,
          id: "app.bsky.notification.listNotifications",
          defs: {
            main: {
              type: "query",
              description: "Enumerate notifications for the requesting account. Requires auth.",
              parameters: {
                type: "params",
                properties: {
                  reasons: {
                    description: "Notification reasons to include in response.",
                    type: "array",
                    items: {
                      type: "string",
                      description: "A reason that matches the reason property of #notification."
                    }
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  priority: {
                    type: "boolean"
                  },
                  cursor: {
                    type: "string"
                  },
                  seenAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["notifications"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    notifications: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.notification.listNotifications#notification"
                      }
                    },
                    priority: {
                      type: "boolean"
                    },
                    seenAt: {
                      type: "string",
                      format: "datetime"
                    }
                  }
                }
              }
            },
            notification: {
              type: "object",
              required: [
                "uri",
                "cid",
                "author",
                "reason",
                "record",
                "isRead",
                "indexedAt"
              ],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                author: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                },
                reason: {
                  type: "string",
                  description: "Expected values are 'like', 'repost', 'follow', 'mention', 'reply', 'quote', 'starterpack-joined', 'verified', and 'unverified'.",
                  knownValues: [
                    "like",
                    "repost",
                    "follow",
                    "mention",
                    "reply",
                    "quote",
                    "starterpack-joined",
                    "verified",
                    "unverified"
                  ]
                },
                reasonSubject: {
                  type: "string",
                  format: "at-uri"
                },
                record: {
                  type: "unknown"
                },
                isRead: {
                  type: "boolean"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                }
              }
            }
          }
        },
        AppBskyNotificationPutPreferences: {
          lexicon: 1,
          id: "app.bsky.notification.putPreferences",
          defs: {
            main: {
              type: "procedure",
              description: "Set notification-related preferences for an account. Requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["priority"],
                  properties: {
                    priority: {
                      type: "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyNotificationRegisterPush: {
          lexicon: 1,
          id: "app.bsky.notification.registerPush",
          defs: {
            main: {
              type: "procedure",
              description: "Register to receive push notifications, via a specified service, for the requesting account. Requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["serviceDid", "token", "platform", "appId"],
                  properties: {
                    serviceDid: {
                      type: "string",
                      format: "did"
                    },
                    token: {
                      type: "string"
                    },
                    platform: {
                      type: "string",
                      knownValues: ["ios", "android", "web"]
                    },
                    appId: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyNotificationUpdateSeen: {
          lexicon: 1,
          id: "app.bsky.notification.updateSeen",
          defs: {
            main: {
              type: "procedure",
              description: "Notify server that the requesting account has seen notifications. Requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["seenAt"],
                  properties: {
                    seenAt: {
                      type: "string",
                      format: "datetime"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyRichtextFacet: {
          lexicon: 1,
          id: "app.bsky.richtext.facet",
          defs: {
            main: {
              type: "object",
              description: "Annotation of a sub-string within rich text.",
              required: ["index", "features"],
              properties: {
                index: {
                  type: "ref",
                  ref: "lex:app.bsky.richtext.facet#byteSlice"
                },
                features: {
                  type: "array",
                  items: {
                    type: "union",
                    refs: [
                      "lex:app.bsky.richtext.facet#mention",
                      "lex:app.bsky.richtext.facet#link",
                      "lex:app.bsky.richtext.facet#tag"
                    ]
                  }
                }
              }
            },
            mention: {
              type: "object",
              description: "Facet feature for mention of another account. The text is usually a handle, including a '@' prefix, but the facet reference is a DID.",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                }
              }
            },
            link: {
              type: "object",
              description: "Facet feature for a URL. The text URL may have been simplified or truncated, but the facet reference should be a complete URL.",
              required: ["uri"],
              properties: {
                uri: {
                  type: "string",
                  format: "uri"
                }
              }
            },
            tag: {
              type: "object",
              description: "Facet feature for a hashtag. The text usually includes a '#' prefix, but the facet reference should not (except in the case of 'double hash tags').",
              required: ["tag"],
              properties: {
                tag: {
                  type: "string",
                  maxLength: 640,
                  maxGraphemes: 64
                }
              }
            },
            byteSlice: {
              type: "object",
              description: "Specifies the sub-string range a facet feature applies to. Start index is inclusive, end index is exclusive. Indices are zero-indexed, counting bytes of the UTF-8 encoded text. NOTE: some languages, like Javascript, use UTF-16 or Unicode codepoints for string slice indexing; in these languages, convert to byte arrays before working with facets.",
              required: ["byteStart", "byteEnd"],
              properties: {
                byteStart: {
                  type: "integer",
                  minimum: 0
                },
                byteEnd: {
                  type: "integer",
                  minimum: 0
                }
              }
            }
          }
        },
        AppBskyUnspeccedDefs: {
          lexicon: 1,
          id: "app.bsky.unspecced.defs",
          defs: {
            skeletonSearchPost: {
              type: "object",
              required: ["uri"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            skeletonSearchActor: {
              type: "object",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                }
              }
            },
            skeletonSearchStarterPack: {
              type: "object",
              required: ["uri"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            trendingTopic: {
              type: "object",
              required: ["topic", "link"],
              properties: {
                topic: {
                  type: "string"
                },
                displayName: {
                  type: "string"
                },
                description: {
                  type: "string"
                },
                link: {
                  type: "string"
                }
              }
            },
            skeletonTrend: {
              type: "object",
              required: [
                "topic",
                "displayName",
                "link",
                "startedAt",
                "postCount",
                "dids"
              ],
              properties: {
                topic: {
                  type: "string"
                },
                displayName: {
                  type: "string"
                },
                link: {
                  type: "string"
                },
                startedAt: {
                  type: "string",
                  format: "datetime"
                },
                postCount: {
                  type: "integer"
                },
                status: {
                  type: "string",
                  knownValues: ["hot"]
                },
                category: {
                  type: "string"
                },
                dids: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "did"
                  }
                }
              }
            },
            trendView: {
              type: "object",
              required: [
                "topic",
                "displayName",
                "link",
                "startedAt",
                "postCount",
                "actors"
              ],
              properties: {
                topic: {
                  type: "string"
                },
                displayName: {
                  type: "string"
                },
                link: {
                  type: "string"
                },
                startedAt: {
                  type: "string",
                  format: "datetime"
                },
                postCount: {
                  type: "integer"
                },
                status: {
                  type: "string",
                  knownValues: ["hot"]
                },
                category: {
                  type: "string"
                },
                actors: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#profileViewBasic"
                  }
                }
              }
            }
          }
        },
        AppBskyUnspeccedGetConfig: {
          lexicon: 1,
          id: "app.bsky.unspecced.getConfig",
          defs: {
            main: {
              type: "query",
              description: "Get miscellaneous runtime configuration.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: [],
                  properties: {
                    checkEmailConfirmed: {
                      type: "boolean"
                    },
                    liveNow: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.unspecced.getConfig#liveNowConfig"
                      }
                    }
                  }
                }
              }
            },
            liveNowConfig: {
              type: "object",
              required: ["did", "domains"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                domains: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                }
              }
            }
          }
        },
        AppBskyUnspeccedGetPopularFeedGenerators: {
          lexicon: 1,
          id: "app.bsky.unspecced.getPopularFeedGenerators",
          defs: {
            main: {
              type: "query",
              description: "An unspecced view of globally popular feed generators.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  },
                  query: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feeds"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feeds: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#generatorView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyUnspeccedGetSuggestedFeeds: {
          lexicon: 1,
          id: "app.bsky.unspecced.getSuggestedFeeds",
          defs: {
            main: {
              type: "query",
              description: "Get a list of suggested feeds",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 25,
                    default: 10
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feeds"],
                  properties: {
                    feeds: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#generatorView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyUnspeccedGetSuggestedFeedsSkeleton: {
          lexicon: 1,
          id: "app.bsky.unspecced.getSuggestedFeedsSkeleton",
          defs: {
            main: {
              type: "query",
              description: "Get a skeleton of suggested feeds. Intended to be called and hydrated by app.bsky.unspecced.getSuggestedFeeds",
              parameters: {
                type: "params",
                properties: {
                  viewer: {
                    type: "string",
                    format: "did",
                    description: "DID of the account making the request (not included for public/unauthenticated queries)."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 25,
                    default: 10
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feeds"],
                  properties: {
                    feeds: {
                      type: "array",
                      items: {
                        type: "string",
                        format: "at-uri"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyUnspeccedGetSuggestedStarterPacks: {
          lexicon: 1,
          id: "app.bsky.unspecced.getSuggestedStarterPacks",
          defs: {
            main: {
              type: "query",
              description: "Get a list of suggested starterpacks",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 25,
                    default: 10
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["starterPacks"],
                  properties: {
                    starterPacks: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.graph.defs#starterPackView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyUnspeccedGetSuggestedStarterPacksSkeleton: {
          lexicon: 1,
          id: "app.bsky.unspecced.getSuggestedStarterPacksSkeleton",
          defs: {
            main: {
              type: "query",
              description: "Get a skeleton of suggested starterpacks. Intended to be called and hydrated by app.bsky.unspecced.getSuggestedStarterpacks",
              parameters: {
                type: "params",
                properties: {
                  viewer: {
                    type: "string",
                    format: "did",
                    description: "DID of the account making the request (not included for public/unauthenticated queries)."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 25,
                    default: 10
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["starterPacks"],
                  properties: {
                    starterPacks: {
                      type: "array",
                      items: {
                        type: "string",
                        format: "at-uri"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyUnspeccedGetSuggestedUsers: {
          lexicon: 1,
          id: "app.bsky.unspecced.getSuggestedUsers",
          defs: {
            main: {
              type: "query",
              description: "Get a list of suggested users",
              parameters: {
                type: "params",
                properties: {
                  category: {
                    type: "string",
                    description: "Category of users to get suggestions for."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 50,
                    default: 25
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["actors"],
                  properties: {
                    actors: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyUnspeccedGetSuggestedUsersSkeleton: {
          lexicon: 1,
          id: "app.bsky.unspecced.getSuggestedUsersSkeleton",
          defs: {
            main: {
              type: "query",
              description: "Get a skeleton of suggested users. Intended to be called and hydrated by app.bsky.unspecced.getSuggestedUsers",
              parameters: {
                type: "params",
                properties: {
                  viewer: {
                    type: "string",
                    format: "did",
                    description: "DID of the account making the request (not included for public/unauthenticated queries)."
                  },
                  category: {
                    type: "string",
                    description: "Category of users to get suggestions for."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 50,
                    default: 25
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["dids"],
                  properties: {
                    dids: {
                      type: "array",
                      items: {
                        type: "string",
                        format: "did"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyUnspeccedGetSuggestionsSkeleton: {
          lexicon: 1,
          id: "app.bsky.unspecced.getSuggestionsSkeleton",
          defs: {
            main: {
              type: "query",
              description: "Get a skeleton of suggested actors. Intended to be called and then hydrated through app.bsky.actor.getSuggestions",
              parameters: {
                type: "params",
                properties: {
                  viewer: {
                    type: "string",
                    format: "did",
                    description: "DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  },
                  relativeToDid: {
                    type: "string",
                    format: "did",
                    description: "DID of the account to get suggestions relative to. If not provided, suggestions will be based on the viewer."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["actors"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    actors: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.unspecced.defs#skeletonSearchActor"
                      }
                    },
                    relativeToDid: {
                      type: "string",
                      format: "did",
                      description: "DID of the account these suggestions are relative to. If this is returned undefined, suggestions are based on the viewer."
                    },
                    recId: {
                      type: "integer",
                      description: "Snowflake for this recommendation, use when submitting recommendation events."
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyUnspeccedGetTaggedSuggestions: {
          lexicon: 1,
          id: "app.bsky.unspecced.getTaggedSuggestions",
          defs: {
            main: {
              type: "query",
              description: "Get a list of suggestions (feeds and users) tagged with categories",
              parameters: {
                type: "params",
                properties: {}
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["suggestions"],
                  properties: {
                    suggestions: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.unspecced.getTaggedSuggestions#suggestion"
                      }
                    }
                  }
                }
              }
            },
            suggestion: {
              type: "object",
              required: ["tag", "subjectType", "subject"],
              properties: {
                tag: {
                  type: "string"
                },
                subjectType: {
                  type: "string",
                  knownValues: ["actor", "feed"]
                },
                subject: {
                  type: "string",
                  format: "uri"
                }
              }
            }
          }
        },
        AppBskyUnspeccedGetTrendingTopics: {
          lexicon: 1,
          id: "app.bsky.unspecced.getTrendingTopics",
          defs: {
            main: {
              type: "query",
              description: "Get a list of trending topics",
              parameters: {
                type: "params",
                properties: {
                  viewer: {
                    type: "string",
                    format: "did",
                    description: "DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 25,
                    default: 10
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["topics", "suggested"],
                  properties: {
                    topics: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.unspecced.defs#trendingTopic"
                      }
                    },
                    suggested: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.unspecced.defs#trendingTopic"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyUnspeccedGetTrends: {
          lexicon: 1,
          id: "app.bsky.unspecced.getTrends",
          defs: {
            main: {
              type: "query",
              description: "Get the current trends on the network",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 25,
                    default: 10
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["trends"],
                  properties: {
                    trends: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.unspecced.defs#trendView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyUnspeccedGetTrendsSkeleton: {
          lexicon: 1,
          id: "app.bsky.unspecced.getTrendsSkeleton",
          defs: {
            main: {
              type: "query",
              description: "Get the skeleton of trends on the network. Intended to be called and then hydrated through app.bsky.unspecced.getTrends",
              parameters: {
                type: "params",
                properties: {
                  viewer: {
                    type: "string",
                    format: "did",
                    description: "DID of the account making the request (not included for public/unauthenticated queries)."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 25,
                    default: 10
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["trends"],
                  properties: {
                    trends: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.unspecced.defs#skeletonTrend"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyUnspeccedSearchActorsSkeleton: {
          lexicon: 1,
          id: "app.bsky.unspecced.searchActorsSkeleton",
          defs: {
            main: {
              type: "query",
              description: "Backend Actors (profile) search, returns only skeleton.",
              parameters: {
                type: "params",
                required: ["q"],
                properties: {
                  q: {
                    type: "string",
                    description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. For typeahead search, only simple term match is supported, not full syntax."
                  },
                  viewer: {
                    type: "string",
                    format: "did",
                    description: "DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking."
                  },
                  typeahead: {
                    type: "boolean",
                    description: "If true, acts as fast/simple 'typeahead' query."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 25
                  },
                  cursor: {
                    type: "string",
                    description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["actors"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    hitsTotal: {
                      type: "integer",
                      description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits."
                    },
                    actors: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.unspecced.defs#skeletonSearchActor"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "BadQueryString"
                }
              ]
            }
          }
        },
        AppBskyUnspeccedSearchPostsSkeleton: {
          lexicon: 1,
          id: "app.bsky.unspecced.searchPostsSkeleton",
          defs: {
            main: {
              type: "query",
              description: "Backend Posts search, returns only skeleton",
              parameters: {
                type: "params",
                required: ["q"],
                properties: {
                  q: {
                    type: "string",
                    description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended."
                  },
                  sort: {
                    type: "string",
                    knownValues: ["top", "latest"],
                    default: "latest",
                    description: "Specifies the ranking order of results."
                  },
                  since: {
                    type: "string",
                    description: "Filter results for posts after the indicated datetime (inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYYY-MM-DD)."
                  },
                  until: {
                    type: "string",
                    description: "Filter results for posts before the indicated datetime (not inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYY-MM-DD)."
                  },
                  mentions: {
                    type: "string",
                    format: "at-identifier",
                    description: "Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions."
                  },
                  author: {
                    type: "string",
                    format: "at-identifier",
                    description: "Filter to posts by the given account. Handles are resolved to DID before query-time."
                  },
                  lang: {
                    type: "string",
                    format: "language",
                    description: "Filter to posts in the given language. Expected to be based on post language field, though server may override language detection."
                  },
                  domain: {
                    type: "string",
                    description: "Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization."
                  },
                  url: {
                    type: "string",
                    format: "uri",
                    description: "Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching."
                  },
                  tag: {
                    type: "array",
                    items: {
                      type: "string",
                      maxLength: 640,
                      maxGraphemes: 64
                    },
                    description: "Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with 'AND' matching."
                  },
                  viewer: {
                    type: "string",
                    format: "did",
                    description: "DID of the account making the request (not included for public/unauthenticated queries). Used for 'from:me' queries."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 25
                  },
                  cursor: {
                    type: "string",
                    description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["posts"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    hitsTotal: {
                      type: "integer",
                      description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits."
                    },
                    posts: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.unspecced.defs#skeletonSearchPost"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "BadQueryString"
                }
              ]
            }
          }
        },
        AppBskyUnspeccedSearchStarterPacksSkeleton: {
          lexicon: 1,
          id: "app.bsky.unspecced.searchStarterPacksSkeleton",
          defs: {
            main: {
              type: "query",
              description: "Backend Starter Pack search, returns only skeleton.",
              parameters: {
                type: "params",
                required: ["q"],
                properties: {
                  q: {
                    type: "string",
                    description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended."
                  },
                  viewer: {
                    type: "string",
                    format: "did",
                    description: "DID of the account making the request (not included for public/unauthenticated queries)."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 25
                  },
                  cursor: {
                    type: "string",
                    description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["starterPacks"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    hitsTotal: {
                      type: "integer",
                      description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits."
                    },
                    starterPacks: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.unspecced.defs#skeletonSearchStarterPack"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "BadQueryString"
                }
              ]
            }
          }
        },
        AppBskyVideoDefs: {
          lexicon: 1,
          id: "app.bsky.video.defs",
          defs: {
            jobStatus: {
              type: "object",
              required: ["jobId", "did", "state"],
              properties: {
                jobId: {
                  type: "string"
                },
                did: {
                  type: "string",
                  format: "did"
                },
                state: {
                  type: "string",
                  description: "The state of the video processing job. All values not listed as a known value indicate that the job is in process.",
                  knownValues: ["JOB_STATE_COMPLETED", "JOB_STATE_FAILED"]
                },
                progress: {
                  type: "integer",
                  minimum: 0,
                  maximum: 100,
                  description: "Progress within the current processing state."
                },
                blob: {
                  type: "blob"
                },
                error: {
                  type: "string"
                },
                message: {
                  type: "string"
                }
              }
            }
          }
        },
        AppBskyVideoGetJobStatus: {
          lexicon: 1,
          id: "app.bsky.video.getJobStatus",
          defs: {
            main: {
              type: "query",
              description: "Get status details for a video processing job.",
              parameters: {
                type: "params",
                required: ["jobId"],
                properties: {
                  jobId: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["jobStatus"],
                  properties: {
                    jobStatus: {
                      type: "ref",
                      ref: "lex:app.bsky.video.defs#jobStatus"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyVideoGetUploadLimits: {
          lexicon: 1,
          id: "app.bsky.video.getUploadLimits",
          defs: {
            main: {
              type: "query",
              description: "Get video upload limits for the authenticated user.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["canUpload"],
                  properties: {
                    canUpload: {
                      type: "boolean"
                    },
                    remainingDailyVideos: {
                      type: "integer"
                    },
                    remainingDailyBytes: {
                      type: "integer"
                    },
                    message: {
                      type: "string"
                    },
                    error: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyVideoUploadVideo: {
          lexicon: 1,
          id: "app.bsky.video.uploadVideo",
          defs: {
            main: {
              type: "procedure",
              description: "Upload a video to be processed then stored on the PDS.",
              input: {
                encoding: "video/mp4"
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["jobStatus"],
                  properties: {
                    jobStatus: {
                      type: "ref",
                      ref: "lex:app.bsky.video.defs#jobStatus"
                    }
                  }
                }
              }
            }
          }
        },
        ChatBskyActorDeclaration: {
          lexicon: 1,
          id: "chat.bsky.actor.declaration",
          defs: {
            main: {
              type: "record",
              description: "A declaration of a Bluesky chat account.",
              key: "literal:self",
              record: {
                type: "object",
                required: ["allowIncoming"],
                properties: {
                  allowIncoming: {
                    type: "string",
                    knownValues: ["all", "none", "following"]
                  }
                }
              }
            }
          }
        },
        ChatBskyActorDefs: {
          lexicon: 1,
          id: "chat.bsky.actor.defs",
          defs: {
            profileViewBasic: {
              type: "object",
              required: ["did", "handle"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                displayName: {
                  type: "string",
                  maxGraphemes: 64,
                  maxLength: 640
                },
                avatar: {
                  type: "string",
                  format: "uri"
                },
                associated: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileAssociated"
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#viewerState"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                chatDisabled: {
                  type: "boolean",
                  description: "Set to true when the actor cannot actively participate in conversations"
                },
                verification: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#verificationState"
                }
              }
            }
          }
        },
        ChatBskyActorDeleteAccount: {
          lexicon: 1,
          id: "chat.bsky.actor.deleteAccount",
          defs: {
            main: {
              type: "procedure",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  properties: {}
                }
              }
            }
          }
        },
        ChatBskyActorExportAccountData: {
          lexicon: 1,
          id: "chat.bsky.actor.exportAccountData",
          defs: {
            main: {
              type: "query",
              output: {
                encoding: "application/jsonl"
              }
            }
          }
        },
        ChatBskyConvoAcceptConvo: {
          lexicon: 1,
          id: "chat.bsky.convo.acceptConvo",
          defs: {
            main: {
              type: "procedure",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["convoId"],
                  properties: {
                    convoId: {
                      type: "string"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  properties: {
                    rev: {
                      description: "Rev when the convo was accepted. If not present, the convo was already accepted.",
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ChatBskyConvoAddReaction: {
          lexicon: 1,
          id: "chat.bsky.convo.addReaction",
          defs: {
            main: {
              type: "procedure",
              description: "Adds an emoji reaction to a message. Requires authentication. It is idempotent, so multiple calls from the same user with the same emoji result in a single reaction.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["convoId", "messageId", "value"],
                  properties: {
                    convoId: {
                      type: "string"
                    },
                    messageId: {
                      type: "string"
                    },
                    value: {
                      type: "string",
                      minLength: 1,
                      maxLength: 64,
                      minGraphemes: 1,
                      maxGraphemes: 1
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["message"],
                  properties: {
                    message: {
                      type: "ref",
                      ref: "lex:chat.bsky.convo.defs#messageView"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "ReactionMessageDeleted",
                  description: "Indicates that the message has been deleted and reactions can no longer be added/removed."
                },
                {
                  name: "ReactionLimitReached",
                  description: "Indicates that the message has the maximum number of reactions allowed for a single user, and the requested reaction wasn't yet present. If it was already present, the request will not fail since it is idempotent."
                },
                {
                  name: "ReactionInvalidValue",
                  description: "Indicates the value for the reaction is not acceptable. In general, this means it is not an emoji."
                }
              ]
            }
          }
        },
        ChatBskyConvoDefs: {
          lexicon: 1,
          id: "chat.bsky.convo.defs",
          defs: {
            messageRef: {
              type: "object",
              required: ["did", "messageId", "convoId"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                convoId: {
                  type: "string"
                },
                messageId: {
                  type: "string"
                }
              }
            },
            messageInput: {
              type: "object",
              required: ["text"],
              properties: {
                text: {
                  type: "string",
                  maxLength: 1e4,
                  maxGraphemes: 1e3
                },
                facets: {
                  type: "array",
                  description: "Annotations of text (mentions, URLs, hashtags, etc)",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.richtext.facet"
                  }
                },
                embed: {
                  type: "union",
                  refs: ["lex:app.bsky.embed.record"]
                }
              }
            },
            messageView: {
              type: "object",
              required: ["id", "rev", "text", "sender", "sentAt"],
              properties: {
                id: {
                  type: "string"
                },
                rev: {
                  type: "string"
                },
                text: {
                  type: "string",
                  maxLength: 1e4,
                  maxGraphemes: 1e3
                },
                facets: {
                  type: "array",
                  description: "Annotations of text (mentions, URLs, hashtags, etc)",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.richtext.facet"
                  }
                },
                embed: {
                  type: "union",
                  refs: ["lex:app.bsky.embed.record#view"]
                },
                reactions: {
                  type: "array",
                  description: "Reactions to this message, in ascending order of creation time.",
                  items: {
                    type: "ref",
                    ref: "lex:chat.bsky.convo.defs#reactionView"
                  }
                },
                sender: {
                  type: "ref",
                  ref: "lex:chat.bsky.convo.defs#messageViewSender"
                },
                sentAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            deletedMessageView: {
              type: "object",
              required: ["id", "rev", "sender", "sentAt"],
              properties: {
                id: {
                  type: "string"
                },
                rev: {
                  type: "string"
                },
                sender: {
                  type: "ref",
                  ref: "lex:chat.bsky.convo.defs#messageViewSender"
                },
                sentAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            messageViewSender: {
              type: "object",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                }
              }
            },
            reactionView: {
              type: "object",
              required: ["value", "sender", "createdAt"],
              properties: {
                value: {
                  type: "string"
                },
                sender: {
                  type: "ref",
                  ref: "lex:chat.bsky.convo.defs#reactionViewSender"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            reactionViewSender: {
              type: "object",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                }
              }
            },
            messageAndReactionView: {
              type: "object",
              required: ["message", "reaction"],
              properties: {
                message: {
                  type: "ref",
                  ref: "lex:chat.bsky.convo.defs#messageView"
                },
                reaction: {
                  type: "ref",
                  ref: "lex:chat.bsky.convo.defs#reactionView"
                }
              }
            },
            convoView: {
              type: "object",
              required: ["id", "rev", "members", "muted", "unreadCount"],
              properties: {
                id: {
                  type: "string"
                },
                rev: {
                  type: "string"
                },
                members: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:chat.bsky.actor.defs#profileViewBasic"
                  }
                },
                lastMessage: {
                  type: "union",
                  refs: [
                    "lex:chat.bsky.convo.defs#messageView",
                    "lex:chat.bsky.convo.defs#deletedMessageView"
                  ]
                },
                lastReaction: {
                  type: "union",
                  refs: ["lex:chat.bsky.convo.defs#messageAndReactionView"]
                },
                muted: {
                  type: "boolean"
                },
                status: {
                  type: "string",
                  knownValues: ["request", "accepted"]
                },
                unreadCount: {
                  type: "integer"
                }
              }
            },
            logBeginConvo: {
              type: "object",
              required: ["rev", "convoId"],
              properties: {
                rev: {
                  type: "string"
                },
                convoId: {
                  type: "string"
                }
              }
            },
            logAcceptConvo: {
              type: "object",
              required: ["rev", "convoId"],
              properties: {
                rev: {
                  type: "string"
                },
                convoId: {
                  type: "string"
                }
              }
            },
            logLeaveConvo: {
              type: "object",
              required: ["rev", "convoId"],
              properties: {
                rev: {
                  type: "string"
                },
                convoId: {
                  type: "string"
                }
              }
            },
            logMuteConvo: {
              type: "object",
              required: ["rev", "convoId"],
              properties: {
                rev: {
                  type: "string"
                },
                convoId: {
                  type: "string"
                }
              }
            },
            logUnmuteConvo: {
              type: "object",
              required: ["rev", "convoId"],
              properties: {
                rev: {
                  type: "string"
                },
                convoId: {
                  type: "string"
                }
              }
            },
            logCreateMessage: {
              type: "object",
              required: ["rev", "convoId", "message"],
              properties: {
                rev: {
                  type: "string"
                },
                convoId: {
                  type: "string"
                },
                message: {
                  type: "union",
                  refs: [
                    "lex:chat.bsky.convo.defs#messageView",
                    "lex:chat.bsky.convo.defs#deletedMessageView"
                  ]
                }
              }
            },
            logDeleteMessage: {
              type: "object",
              required: ["rev", "convoId", "message"],
              properties: {
                rev: {
                  type: "string"
                },
                convoId: {
                  type: "string"
                },
                message: {
                  type: "union",
                  refs: [
                    "lex:chat.bsky.convo.defs#messageView",
                    "lex:chat.bsky.convo.defs#deletedMessageView"
                  ]
                }
              }
            },
            logReadMessage: {
              type: "object",
              required: ["rev", "convoId", "message"],
              properties: {
                rev: {
                  type: "string"
                },
                convoId: {
                  type: "string"
                },
                message: {
                  type: "union",
                  refs: [
                    "lex:chat.bsky.convo.defs#messageView",
                    "lex:chat.bsky.convo.defs#deletedMessageView"
                  ]
                }
              }
            },
            logAddReaction: {
              type: "object",
              required: ["rev", "convoId", "message", "reaction"],
              properties: {
                rev: {
                  type: "string"
                },
                convoId: {
                  type: "string"
                },
                message: {
                  type: "union",
                  refs: [
                    "lex:chat.bsky.convo.defs#messageView",
                    "lex:chat.bsky.convo.defs#deletedMessageView"
                  ]
                },
                reaction: {
                  type: "ref",
                  ref: "lex:chat.bsky.convo.defs#reactionView"
                }
              }
            },
            logRemoveReaction: {
              type: "object",
              required: ["rev", "convoId", "message", "reaction"],
              properties: {
                rev: {
                  type: "string"
                },
                convoId: {
                  type: "string"
                },
                message: {
                  type: "union",
                  refs: [
                    "lex:chat.bsky.convo.defs#messageView",
                    "lex:chat.bsky.convo.defs#deletedMessageView"
                  ]
                },
                reaction: {
                  type: "ref",
                  ref: "lex:chat.bsky.convo.defs#reactionView"
                }
              }
            }
          }
        },
        ChatBskyConvoDeleteMessageForSelf: {
          lexicon: 1,
          id: "chat.bsky.convo.deleteMessageForSelf",
          defs: {
            main: {
              type: "procedure",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["convoId", "messageId"],
                  properties: {
                    convoId: {
                      type: "string"
                    },
                    messageId: {
                      type: "string"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:chat.bsky.convo.defs#deletedMessageView"
                }
              }
            }
          }
        },
        ChatBskyConvoGetConvo: {
          lexicon: 1,
          id: "chat.bsky.convo.getConvo",
          defs: {
            main: {
              type: "query",
              parameters: {
                type: "params",
                required: ["convoId"],
                properties: {
                  convoId: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["convo"],
                  properties: {
                    convo: {
                      type: "ref",
                      ref: "lex:chat.bsky.convo.defs#convoView"
                    }
                  }
                }
              }
            }
          }
        },
        ChatBskyConvoGetConvoAvailability: {
          lexicon: 1,
          id: "chat.bsky.convo.getConvoAvailability",
          defs: {
            main: {
              type: "query",
              description: "Get whether the requester and the other members can chat. If an existing convo is found for these members, it is returned.",
              parameters: {
                type: "params",
                required: ["members"],
                properties: {
                  members: {
                    type: "array",
                    minLength: 1,
                    maxLength: 10,
                    items: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["canChat"],
                  properties: {
                    canChat: {
                      type: "boolean"
                    },
                    convo: {
                      type: "ref",
                      ref: "lex:chat.bsky.convo.defs#convoView"
                    }
                  }
                }
              }
            }
          }
        },
        ChatBskyConvoGetConvoForMembers: {
          lexicon: 1,
          id: "chat.bsky.convo.getConvoForMembers",
          defs: {
            main: {
              type: "query",
              parameters: {
                type: "params",
                required: ["members"],
                properties: {
                  members: {
                    type: "array",
                    minLength: 1,
                    maxLength: 10,
                    items: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["convo"],
                  properties: {
                    convo: {
                      type: "ref",
                      ref: "lex:chat.bsky.convo.defs#convoView"
                    }
                  }
                }
              }
            }
          }
        },
        ChatBskyConvoGetLog: {
          lexicon: 1,
          id: "chat.bsky.convo.getLog",
          defs: {
            main: {
              type: "query",
              parameters: {
                type: "params",
                required: [],
                properties: {
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["logs"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    logs: {
                      type: "array",
                      items: {
                        type: "union",
                        refs: [
                          "lex:chat.bsky.convo.defs#logBeginConvo",
                          "lex:chat.bsky.convo.defs#logAcceptConvo",
                          "lex:chat.bsky.convo.defs#logLeaveConvo",
                          "lex:chat.bsky.convo.defs#logMuteConvo",
                          "lex:chat.bsky.convo.defs#logUnmuteConvo",
                          "lex:chat.bsky.convo.defs#logCreateMessage",
                          "lex:chat.bsky.convo.defs#logDeleteMessage",
                          "lex:chat.bsky.convo.defs#logReadMessage",
                          "lex:chat.bsky.convo.defs#logAddReaction",
                          "lex:chat.bsky.convo.defs#logRemoveReaction"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ChatBskyConvoGetMessages: {
          lexicon: 1,
          id: "chat.bsky.convo.getMessages",
          defs: {
            main: {
              type: "query",
              parameters: {
                type: "params",
                required: ["convoId"],
                properties: {
                  convoId: {
                    type: "string"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["messages"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    messages: {
                      type: "array",
                      items: {
                        type: "union",
                        refs: [
                          "lex:chat.bsky.convo.defs#messageView",
                          "lex:chat.bsky.convo.defs#deletedMessageView"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ChatBskyConvoLeaveConvo: {
          lexicon: 1,
          id: "chat.bsky.convo.leaveConvo",
          defs: {
            main: {
              type: "procedure",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["convoId"],
                  properties: {
                    convoId: {
                      type: "string"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["convoId", "rev"],
                  properties: {
                    convoId: {
                      type: "string"
                    },
                    rev: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ChatBskyConvoListConvos: {
          lexicon: 1,
          id: "chat.bsky.convo.listConvos",
          defs: {
            main: {
              type: "query",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  },
                  readState: {
                    type: "string",
                    knownValues: ["unread"]
                  },
                  status: {
                    type: "string",
                    knownValues: ["request", "accepted"]
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["convos"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    convos: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:chat.bsky.convo.defs#convoView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ChatBskyConvoMuteConvo: {
          lexicon: 1,
          id: "chat.bsky.convo.muteConvo",
          defs: {
            main: {
              type: "procedure",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["convoId"],
                  properties: {
                    convoId: {
                      type: "string"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["convo"],
                  properties: {
                    convo: {
                      type: "ref",
                      ref: "lex:chat.bsky.convo.defs#convoView"
                    }
                  }
                }
              }
            }
          }
        },
        ChatBskyConvoRemoveReaction: {
          lexicon: 1,
          id: "chat.bsky.convo.removeReaction",
          defs: {
            main: {
              type: "procedure",
              description: "Removes an emoji reaction from a message. Requires authentication. It is idempotent, so multiple calls from the same user with the same emoji result in that reaction not being present, even if it already wasn't.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["convoId", "messageId", "value"],
                  properties: {
                    convoId: {
                      type: "string"
                    },
                    messageId: {
                      type: "string"
                    },
                    value: {
                      type: "string",
                      minLength: 1,
                      maxLength: 64,
                      minGraphemes: 1,
                      maxGraphemes: 1
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["message"],
                  properties: {
                    message: {
                      type: "ref",
                      ref: "lex:chat.bsky.convo.defs#messageView"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "ReactionMessageDeleted",
                  description: "Indicates that the message has been deleted and reactions can no longer be added/removed."
                },
                {
                  name: "ReactionInvalidValue",
                  description: "Indicates the value for the reaction is not acceptable. In general, this means it is not an emoji."
                }
              ]
            }
          }
        },
        ChatBskyConvoSendMessage: {
          lexicon: 1,
          id: "chat.bsky.convo.sendMessage",
          defs: {
            main: {
              type: "procedure",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["convoId", "message"],
                  properties: {
                    convoId: {
                      type: "string"
                    },
                    message: {
                      type: "ref",
                      ref: "lex:chat.bsky.convo.defs#messageInput"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:chat.bsky.convo.defs#messageView"
                }
              }
            }
          }
        },
        ChatBskyConvoSendMessageBatch: {
          lexicon: 1,
          id: "chat.bsky.convo.sendMessageBatch",
          defs: {
            main: {
              type: "procedure",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["items"],
                  properties: {
                    items: {
                      type: "array",
                      maxLength: 100,
                      items: {
                        type: "ref",
                        ref: "lex:chat.bsky.convo.sendMessageBatch#batchItem"
                      }
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["items"],
                  properties: {
                    items: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:chat.bsky.convo.defs#messageView"
                      }
                    }
                  }
                }
              }
            },
            batchItem: {
              type: "object",
              required: ["convoId", "message"],
              properties: {
                convoId: {
                  type: "string"
                },
                message: {
                  type: "ref",
                  ref: "lex:chat.bsky.convo.defs#messageInput"
                }
              }
            }
          }
        },
        ChatBskyConvoUnmuteConvo: {
          lexicon: 1,
          id: "chat.bsky.convo.unmuteConvo",
          defs: {
            main: {
              type: "procedure",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["convoId"],
                  properties: {
                    convoId: {
                      type: "string"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["convo"],
                  properties: {
                    convo: {
                      type: "ref",
                      ref: "lex:chat.bsky.convo.defs#convoView"
                    }
                  }
                }
              }
            }
          }
        },
        ChatBskyConvoUpdateAllRead: {
          lexicon: 1,
          id: "chat.bsky.convo.updateAllRead",
          defs: {
            main: {
              type: "procedure",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  properties: {
                    status: {
                      type: "string",
                      knownValues: ["request", "accepted"]
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["updatedCount"],
                  properties: {
                    updatedCount: {
                      description: "The count of updated convos.",
                      type: "integer"
                    }
                  }
                }
              }
            }
          }
        },
        ChatBskyConvoUpdateRead: {
          lexicon: 1,
          id: "chat.bsky.convo.updateRead",
          defs: {
            main: {
              type: "procedure",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["convoId"],
                  properties: {
                    convoId: {
                      type: "string"
                    },
                    messageId: {
                      type: "string"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["convo"],
                  properties: {
                    convo: {
                      type: "ref",
                      ref: "lex:chat.bsky.convo.defs#convoView"
                    }
                  }
                }
              }
            }
          }
        },
        ChatBskyModerationGetActorMetadata: {
          lexicon: 1,
          id: "chat.bsky.moderation.getActorMetadata",
          defs: {
            main: {
              type: "query",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "did"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["day", "month", "all"],
                  properties: {
                    day: {
                      type: "ref",
                      ref: "lex:chat.bsky.moderation.getActorMetadata#metadata"
                    },
                    month: {
                      type: "ref",
                      ref: "lex:chat.bsky.moderation.getActorMetadata#metadata"
                    },
                    all: {
                      type: "ref",
                      ref: "lex:chat.bsky.moderation.getActorMetadata#metadata"
                    }
                  }
                }
              }
            },
            metadata: {
              type: "object",
              required: [
                "messagesSent",
                "messagesReceived",
                "convos",
                "convosStarted"
              ],
              properties: {
                messagesSent: {
                  type: "integer"
                },
                messagesReceived: {
                  type: "integer"
                },
                convos: {
                  type: "integer"
                },
                convosStarted: {
                  type: "integer"
                }
              }
            }
          }
        },
        ChatBskyModerationGetMessageContext: {
          lexicon: 1,
          id: "chat.bsky.moderation.getMessageContext",
          defs: {
            main: {
              type: "query",
              parameters: {
                type: "params",
                required: ["messageId"],
                properties: {
                  convoId: {
                    type: "string",
                    description: "Conversation that the message is from. NOTE: this field will eventually be required."
                  },
                  messageId: {
                    type: "string"
                  },
                  before: {
                    type: "integer",
                    default: 5
                  },
                  after: {
                    type: "integer",
                    default: 5
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["messages"],
                  properties: {
                    messages: {
                      type: "array",
                      items: {
                        type: "union",
                        refs: [
                          "lex:chat.bsky.convo.defs#messageView",
                          "lex:chat.bsky.convo.defs#deletedMessageView"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ChatBskyModerationUpdateActorAccess: {
          lexicon: 1,
          id: "chat.bsky.moderation.updateActorAccess",
          defs: {
            main: {
              type: "procedure",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["actor", "allowAccess"],
                  properties: {
                    actor: {
                      type: "string",
                      format: "did"
                    },
                    allowAccess: {
                      type: "boolean"
                    },
                    ref: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ToolsOzoneCommunicationCreateTemplate: {
          lexicon: 1,
          id: "tools.ozone.communication.createTemplate",
          defs: {
            main: {
              type: "procedure",
              description: "Administrative action to create a new, re-usable communication (email for now) template.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["subject", "contentMarkdown", "name"],
                  properties: {
                    name: {
                      type: "string",
                      description: "Name of the template."
                    },
                    contentMarkdown: {
                      type: "string",
                      description: "Content of the template, markdown supported, can contain variable placeholders."
                    },
                    subject: {
                      type: "string",
                      description: "Subject of the message, used in emails."
                    },
                    lang: {
                      type: "string",
                      format: "language",
                      description: "Message language."
                    },
                    createdBy: {
                      type: "string",
                      format: "did",
                      description: "DID of the user who is creating the template."
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:tools.ozone.communication.defs#templateView"
                }
              },
              errors: [
                {
                  name: "DuplicateTemplateName"
                }
              ]
            }
          }
        },
        ToolsOzoneCommunicationDefs: {
          lexicon: 1,
          id: "tools.ozone.communication.defs",
          defs: {
            templateView: {
              type: "object",
              required: [
                "id",
                "name",
                "contentMarkdown",
                "disabled",
                "lastUpdatedBy",
                "createdAt",
                "updatedAt"
              ],
              properties: {
                id: {
                  type: "string"
                },
                name: {
                  type: "string",
                  description: "Name of the template."
                },
                subject: {
                  type: "string",
                  description: "Content of the template, can contain markdown and variable placeholders."
                },
                contentMarkdown: {
                  type: "string",
                  description: "Subject of the message, used in emails."
                },
                disabled: {
                  type: "boolean"
                },
                lang: {
                  type: "string",
                  format: "language",
                  description: "Message language."
                },
                lastUpdatedBy: {
                  type: "string",
                  format: "did",
                  description: "DID of the user who last updated the template."
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                updatedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            }
          }
        },
        ToolsOzoneCommunicationDeleteTemplate: {
          lexicon: 1,
          id: "tools.ozone.communication.deleteTemplate",
          defs: {
            main: {
              type: "procedure",
              description: "Delete a communication template.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["id"],
                  properties: {
                    id: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ToolsOzoneCommunicationListTemplates: {
          lexicon: 1,
          id: "tools.ozone.communication.listTemplates",
          defs: {
            main: {
              type: "query",
              description: "Get list of all communication templates.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["communicationTemplates"],
                  properties: {
                    communicationTemplates: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:tools.ozone.communication.defs#templateView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ToolsOzoneCommunicationUpdateTemplate: {
          lexicon: 1,
          id: "tools.ozone.communication.updateTemplate",
          defs: {
            main: {
              type: "procedure",
              description: "Administrative action to update an existing communication template. Allows passing partial fields to patch specific fields only.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["id"],
                  properties: {
                    id: {
                      type: "string",
                      description: "ID of the template to be updated."
                    },
                    name: {
                      type: "string",
                      description: "Name of the template."
                    },
                    lang: {
                      type: "string",
                      format: "language",
                      description: "Message language."
                    },
                    contentMarkdown: {
                      type: "string",
                      description: "Content of the template, markdown supported, can contain variable placeholders."
                    },
                    subject: {
                      type: "string",
                      description: "Subject of the message, used in emails."
                    },
                    updatedBy: {
                      type: "string",
                      format: "did",
                      description: "DID of the user who is updating the template."
                    },
                    disabled: {
                      type: "boolean"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:tools.ozone.communication.defs#templateView"
                }
              },
              errors: [
                {
                  name: "DuplicateTemplateName"
                }
              ]
            }
          }
        },
        ToolsOzoneHostingGetAccountHistory: {
          lexicon: 1,
          id: "tools.ozone.hosting.getAccountHistory",
          defs: {
            main: {
              type: "query",
              description: "Get account history, e.g. log of updated email addresses or other identity information.",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did"
                  },
                  events: {
                    type: "array",
                    items: {
                      type: "string",
                      knownValues: [
                        "accountCreated",
                        "emailUpdated",
                        "emailConfirmed",
                        "passwordUpdated",
                        "handleUpdated"
                      ]
                    }
                  },
                  cursor: {
                    type: "string"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["events"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    events: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:tools.ozone.hosting.getAccountHistory#event"
                      }
                    }
                  }
                }
              }
            },
            event: {
              type: "object",
              required: ["details", "createdBy", "createdAt"],
              properties: {
                details: {
                  type: "union",
                  refs: [
                    "lex:tools.ozone.hosting.getAccountHistory#accountCreated",
                    "lex:tools.ozone.hosting.getAccountHistory#emailUpdated",
                    "lex:tools.ozone.hosting.getAccountHistory#emailConfirmed",
                    "lex:tools.ozone.hosting.getAccountHistory#passwordUpdated",
                    "lex:tools.ozone.hosting.getAccountHistory#handleUpdated"
                  ]
                },
                createdBy: {
                  type: "string"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            accountCreated: {
              type: "object",
              required: [],
              properties: {
                email: {
                  type: "string"
                },
                handle: {
                  type: "string",
                  format: "handle"
                }
              }
            },
            emailUpdated: {
              type: "object",
              required: ["email"],
              properties: {
                email: {
                  type: "string"
                }
              }
            },
            emailConfirmed: {
              type: "object",
              required: ["email"],
              properties: {
                email: {
                  type: "string"
                }
              }
            },
            passwordUpdated: {
              type: "object",
              required: [],
              properties: {}
            },
            handleUpdated: {
              type: "object",
              required: ["handle"],
              properties: {
                handle: {
                  type: "string",
                  format: "handle"
                }
              }
            }
          }
        },
        ToolsOzoneModerationDefs: {
          lexicon: 1,
          id: "tools.ozone.moderation.defs",
          defs: {
            modEventView: {
              type: "object",
              required: [
                "id",
                "event",
                "subject",
                "subjectBlobCids",
                "createdBy",
                "createdAt"
              ],
              properties: {
                id: {
                  type: "integer"
                },
                event: {
                  type: "union",
                  refs: [
                    "lex:tools.ozone.moderation.defs#modEventTakedown",
                    "lex:tools.ozone.moderation.defs#modEventReverseTakedown",
                    "lex:tools.ozone.moderation.defs#modEventComment",
                    "lex:tools.ozone.moderation.defs#modEventReport",
                    "lex:tools.ozone.moderation.defs#modEventLabel",
                    "lex:tools.ozone.moderation.defs#modEventAcknowledge",
                    "lex:tools.ozone.moderation.defs#modEventEscalate",
                    "lex:tools.ozone.moderation.defs#modEventMute",
                    "lex:tools.ozone.moderation.defs#modEventUnmute",
                    "lex:tools.ozone.moderation.defs#modEventMuteReporter",
                    "lex:tools.ozone.moderation.defs#modEventUnmuteReporter",
                    "lex:tools.ozone.moderation.defs#modEventEmail",
                    "lex:tools.ozone.moderation.defs#modEventResolveAppeal",
                    "lex:tools.ozone.moderation.defs#modEventDivert",
                    "lex:tools.ozone.moderation.defs#modEventTag",
                    "lex:tools.ozone.moderation.defs#accountEvent",
                    "lex:tools.ozone.moderation.defs#identityEvent",
                    "lex:tools.ozone.moderation.defs#recordEvent",
                    "lex:tools.ozone.moderation.defs#modEventPriorityScore"
                  ]
                },
                subject: {
                  type: "union",
                  refs: [
                    "lex:com.atproto.admin.defs#repoRef",
                    "lex:com.atproto.repo.strongRef",
                    "lex:chat.bsky.convo.defs#messageRef"
                  ]
                },
                subjectBlobCids: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                },
                createdBy: {
                  type: "string",
                  format: "did"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                creatorHandle: {
                  type: "string"
                },
                subjectHandle: {
                  type: "string"
                }
              }
            },
            modEventViewDetail: {
              type: "object",
              required: [
                "id",
                "event",
                "subject",
                "subjectBlobs",
                "createdBy",
                "createdAt"
              ],
              properties: {
                id: {
                  type: "integer"
                },
                event: {
                  type: "union",
                  refs: [
                    "lex:tools.ozone.moderation.defs#modEventTakedown",
                    "lex:tools.ozone.moderation.defs#modEventReverseTakedown",
                    "lex:tools.ozone.moderation.defs#modEventComment",
                    "lex:tools.ozone.moderation.defs#modEventReport",
                    "lex:tools.ozone.moderation.defs#modEventLabel",
                    "lex:tools.ozone.moderation.defs#modEventAcknowledge",
                    "lex:tools.ozone.moderation.defs#modEventEscalate",
                    "lex:tools.ozone.moderation.defs#modEventMute",
                    "lex:tools.ozone.moderation.defs#modEventUnmute",
                    "lex:tools.ozone.moderation.defs#modEventMuteReporter",
                    "lex:tools.ozone.moderation.defs#modEventUnmuteReporter",
                    "lex:tools.ozone.moderation.defs#modEventEmail",
                    "lex:tools.ozone.moderation.defs#modEventResolveAppeal",
                    "lex:tools.ozone.moderation.defs#modEventDivert",
                    "lex:tools.ozone.moderation.defs#modEventTag",
                    "lex:tools.ozone.moderation.defs#accountEvent",
                    "lex:tools.ozone.moderation.defs#identityEvent",
                    "lex:tools.ozone.moderation.defs#recordEvent",
                    "lex:tools.ozone.moderation.defs#modEventPriorityScore"
                  ]
                },
                subject: {
                  type: "union",
                  refs: [
                    "lex:tools.ozone.moderation.defs#repoView",
                    "lex:tools.ozone.moderation.defs#repoViewNotFound",
                    "lex:tools.ozone.moderation.defs#recordView",
                    "lex:tools.ozone.moderation.defs#recordViewNotFound"
                  ]
                },
                subjectBlobs: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:tools.ozone.moderation.defs#blobView"
                  }
                },
                createdBy: {
                  type: "string",
                  format: "did"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            subjectStatusView: {
              type: "object",
              required: ["id", "subject", "createdAt", "updatedAt", "reviewState"],
              properties: {
                id: {
                  type: "integer"
                },
                subject: {
                  type: "union",
                  refs: [
                    "lex:com.atproto.admin.defs#repoRef",
                    "lex:com.atproto.repo.strongRef"
                  ]
                },
                hosting: {
                  type: "union",
                  refs: [
                    "lex:tools.ozone.moderation.defs#accountHosting",
                    "lex:tools.ozone.moderation.defs#recordHosting"
                  ]
                },
                subjectBlobCids: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "cid"
                  }
                },
                subjectRepoHandle: {
                  type: "string"
                },
                updatedAt: {
                  type: "string",
                  format: "datetime",
                  description: "Timestamp referencing when the last update was made to the moderation status of the subject"
                },
                createdAt: {
                  type: "string",
                  format: "datetime",
                  description: "Timestamp referencing the first moderation status impacting event was emitted on the subject"
                },
                reviewState: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#subjectReviewState"
                },
                comment: {
                  type: "string",
                  description: "Sticky comment on the subject."
                },
                priorityScore: {
                  type: "integer",
                  description: "Numeric value representing the level of priority. Higher score means higher priority.",
                  minimum: 0,
                  maximum: 100
                },
                muteUntil: {
                  type: "string",
                  format: "datetime"
                },
                muteReportingUntil: {
                  type: "string",
                  format: "datetime"
                },
                lastReviewedBy: {
                  type: "string",
                  format: "did"
                },
                lastReviewedAt: {
                  type: "string",
                  format: "datetime"
                },
                lastReportedAt: {
                  type: "string",
                  format: "datetime"
                },
                lastAppealedAt: {
                  type: "string",
                  format: "datetime",
                  description: "Timestamp referencing when the author of the subject appealed a moderation action"
                },
                takendown: {
                  type: "boolean"
                },
                appealed: {
                  type: "boolean",
                  description: "True indicates that the a previously taken moderator action was appealed against, by the author of the content. False indicates last appeal was resolved by moderators."
                },
                suspendUntil: {
                  type: "string",
                  format: "datetime"
                },
                tags: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                },
                accountStats: {
                  description: "Statistics related to the account subject",
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#accountStats"
                },
                recordsStats: {
                  description: "Statistics related to the record subjects authored by the subject's account",
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#recordsStats"
                }
              }
            },
            subjectView: {
              description: "Detailed view of a subject. For record subjects, the author's repo and profile will be returned.",
              type: "object",
              required: ["type", "subject"],
              properties: {
                type: {
                  type: "ref",
                  ref: "lex:com.atproto.moderation.defs#subjectType"
                },
                subject: {
                  type: "string"
                },
                status: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#subjectStatusView"
                },
                repo: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#repoViewDetail"
                },
                profile: {
                  type: "union",
                  refs: []
                },
                record: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#recordViewDetail"
                }
              }
            },
            accountStats: {
              description: "Statistics about a particular account subject",
              type: "object",
              properties: {
                reportCount: {
                  description: "Total number of reports on the account",
                  type: "integer"
                },
                appealCount: {
                  description: "Total number of appeals against a moderation action on the account",
                  type: "integer"
                },
                suspendCount: {
                  description: "Number of times the account was suspended",
                  type: "integer"
                },
                escalateCount: {
                  description: "Number of times the account was escalated",
                  type: "integer"
                },
                takedownCount: {
                  description: "Number of times the account was taken down",
                  type: "integer"
                }
              }
            },
            recordsStats: {
              description: "Statistics about a set of record subject items",
              type: "object",
              properties: {
                totalReports: {
                  description: "Cumulative sum of the number of reports on the items in the set",
                  type: "integer"
                },
                reportedCount: {
                  description: "Number of items that were reported at least once",
                  type: "integer"
                },
                escalatedCount: {
                  description: "Number of items that were escalated at least once",
                  type: "integer"
                },
                appealedCount: {
                  description: "Number of items that were appealed at least once",
                  type: "integer"
                },
                subjectCount: {
                  description: "Total number of item in the set",
                  type: "integer"
                },
                pendingCount: {
                  description: 'Number of item currently in "reviewOpen" or "reviewEscalated" state',
                  type: "integer"
                },
                processedCount: {
                  description: 'Number of item currently in "reviewNone" or "reviewClosed" state',
                  type: "integer"
                },
                takendownCount: {
                  description: "Number of item currently taken down",
                  type: "integer"
                }
              }
            },
            subjectReviewState: {
              type: "string",
              knownValues: [
                "lex:tools.ozone.moderation.defs#reviewOpen",
                "lex:tools.ozone.moderation.defs#reviewEscalated",
                "lex:tools.ozone.moderation.defs#reviewClosed",
                "lex:tools.ozone.moderation.defs#reviewNone"
              ]
            },
            reviewOpen: {
              type: "token",
              description: "Moderator review status of a subject: Open. Indicates that the subject needs to be reviewed by a moderator"
            },
            reviewEscalated: {
              type: "token",
              description: "Moderator review status of a subject: Escalated. Indicates that the subject was escalated for review by a moderator"
            },
            reviewClosed: {
              type: "token",
              description: "Moderator review status of a subject: Closed. Indicates that the subject was already reviewed and resolved by a moderator"
            },
            reviewNone: {
              type: "token",
              description: "Moderator review status of a subject: Unnecessary. Indicates that the subject does not need a review at the moment but there is probably some moderation related metadata available for it"
            },
            modEventTakedown: {
              type: "object",
              description: "Take down a subject permanently or temporarily",
              properties: {
                comment: {
                  type: "string"
                },
                durationInHours: {
                  type: "integer",
                  description: "Indicates how long the takedown should be in effect before automatically expiring."
                },
                acknowledgeAccountSubjects: {
                  type: "boolean",
                  description: "If true, all other reports on content authored by this account will be resolved (acknowledged)."
                },
                policies: {
                  type: "array",
                  maxLength: 5,
                  items: {
                    type: "string"
                  },
                  description: "Names/Keywords of the policies that drove the decision."
                }
              }
            },
            modEventReverseTakedown: {
              type: "object",
              description: "Revert take down action on a subject",
              properties: {
                comment: {
                  type: "string",
                  description: "Describe reasoning behind the reversal."
                }
              }
            },
            modEventResolveAppeal: {
              type: "object",
              description: "Resolve appeal on a subject",
              properties: {
                comment: {
                  type: "string",
                  description: "Describe resolution."
                }
              }
            },
            modEventComment: {
              type: "object",
              description: "Add a comment to a subject. An empty comment will clear any previously set sticky comment.",
              properties: {
                comment: {
                  type: "string"
                },
                sticky: {
                  type: "boolean",
                  description: "Make the comment persistent on the subject"
                }
              }
            },
            modEventReport: {
              type: "object",
              description: "Report a subject",
              required: ["reportType"],
              properties: {
                comment: {
                  type: "string"
                },
                isReporterMuted: {
                  type: "boolean",
                  description: "Set to true if the reporter was muted from reporting at the time of the event. These reports won't impact the reviewState of the subject."
                },
                reportType: {
                  type: "ref",
                  ref: "lex:com.atproto.moderation.defs#reasonType"
                }
              }
            },
            modEventLabel: {
              type: "object",
              description: "Apply/Negate labels on a subject",
              required: ["createLabelVals", "negateLabelVals"],
              properties: {
                comment: {
                  type: "string"
                },
                createLabelVals: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                },
                negateLabelVals: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                },
                durationInHours: {
                  type: "integer",
                  description: "Indicates how long the label will remain on the subject. Only applies on labels that are being added."
                }
              }
            },
            modEventPriorityScore: {
              type: "object",
              description: "Set priority score of the subject. Higher score means higher priority.",
              required: ["score"],
              properties: {
                comment: {
                  type: "string"
                },
                score: {
                  type: "integer",
                  minimum: 0,
                  maximum: 100
                }
              }
            },
            modEventAcknowledge: {
              type: "object",
              properties: {
                comment: {
                  type: "string"
                },
                acknowledgeAccountSubjects: {
                  type: "boolean",
                  description: "If true, all other reports on content authored by this account will be resolved (acknowledged)."
                }
              }
            },
            modEventEscalate: {
              type: "object",
              properties: {
                comment: {
                  type: "string"
                }
              }
            },
            modEventMute: {
              type: "object",
              description: "Mute incoming reports on a subject",
              required: ["durationInHours"],
              properties: {
                comment: {
                  type: "string"
                },
                durationInHours: {
                  type: "integer",
                  description: "Indicates how long the subject should remain muted."
                }
              }
            },
            modEventUnmute: {
              type: "object",
              description: "Unmute action on a subject",
              properties: {
                comment: {
                  type: "string",
                  description: "Describe reasoning behind the reversal."
                }
              }
            },
            modEventMuteReporter: {
              type: "object",
              description: "Mute incoming reports from an account",
              properties: {
                comment: {
                  type: "string"
                },
                durationInHours: {
                  type: "integer",
                  description: "Indicates how long the account should remain muted. Falsy value here means a permanent mute."
                }
              }
            },
            modEventUnmuteReporter: {
              type: "object",
              description: "Unmute incoming reports from an account",
              properties: {
                comment: {
                  type: "string",
                  description: "Describe reasoning behind the reversal."
                }
              }
            },
            modEventEmail: {
              type: "object",
              description: "Keep a log of outgoing email to a user",
              required: ["subjectLine"],
              properties: {
                subjectLine: {
                  type: "string",
                  description: "The subject line of the email sent to the user."
                },
                content: {
                  type: "string",
                  description: "The content of the email sent to the user."
                },
                comment: {
                  type: "string",
                  description: "Additional comment about the outgoing comm."
                }
              }
            },
            modEventDivert: {
              type: "object",
              description: "Divert a record's blobs to a 3rd party service for further scanning/tagging",
              properties: {
                comment: {
                  type: "string"
                }
              }
            },
            modEventTag: {
              type: "object",
              description: "Add/Remove a tag on a subject",
              required: ["add", "remove"],
              properties: {
                add: {
                  type: "array",
                  items: {
                    type: "string"
                  },
                  description: "Tags to be added to the subject. If already exists, won't be duplicated."
                },
                remove: {
                  type: "array",
                  items: {
                    type: "string"
                  },
                  description: "Tags to be removed to the subject. Ignores a tag If it doesn't exist, won't be duplicated."
                },
                comment: {
                  type: "string",
                  description: "Additional comment about added/removed tags."
                }
              }
            },
            accountEvent: {
              type: "object",
              description: "Logs account status related events on a repo subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.",
              required: ["timestamp", "active"],
              properties: {
                comment: {
                  type: "string"
                },
                active: {
                  type: "boolean",
                  description: "Indicates that the account has a repository which can be fetched from the host that emitted this event."
                },
                status: {
                  type: "string",
                  knownValues: [
                    "unknown",
                    "deactivated",
                    "deleted",
                    "takendown",
                    "suspended",
                    "tombstoned"
                  ]
                },
                timestamp: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            identityEvent: {
              type: "object",
              description: "Logs identity related events on a repo subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.",
              required: ["timestamp"],
              properties: {
                comment: {
                  type: "string"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                pdsHost: {
                  type: "string",
                  format: "uri"
                },
                tombstone: {
                  type: "boolean"
                },
                timestamp: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            recordEvent: {
              type: "object",
              description: "Logs lifecycle event on a record subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.",
              required: ["timestamp", "op"],
              properties: {
                comment: {
                  type: "string"
                },
                op: {
                  type: "string",
                  knownValues: ["create", "update", "delete"]
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                timestamp: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            repoView: {
              type: "object",
              required: [
                "did",
                "handle",
                "relatedRecords",
                "indexedAt",
                "moderation"
              ],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                email: {
                  type: "string"
                },
                relatedRecords: {
                  type: "array",
                  items: {
                    type: "unknown"
                  }
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                moderation: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#moderation"
                },
                invitedBy: {
                  type: "ref",
                  ref: "lex:com.atproto.server.defs#inviteCode"
                },
                invitesDisabled: {
                  type: "boolean"
                },
                inviteNote: {
                  type: "string"
                },
                deactivatedAt: {
                  type: "string",
                  format: "datetime"
                },
                threatSignatures: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.admin.defs#threatSignature"
                  }
                }
              }
            },
            repoViewDetail: {
              type: "object",
              required: [
                "did",
                "handle",
                "relatedRecords",
                "indexedAt",
                "moderation"
              ],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                email: {
                  type: "string"
                },
                relatedRecords: {
                  type: "array",
                  items: {
                    type: "unknown"
                  }
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                moderation: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#moderationDetail"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                invitedBy: {
                  type: "ref",
                  ref: "lex:com.atproto.server.defs#inviteCode"
                },
                invites: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.server.defs#inviteCode"
                  }
                },
                invitesDisabled: {
                  type: "boolean"
                },
                inviteNote: {
                  type: "string"
                },
                emailConfirmedAt: {
                  type: "string",
                  format: "datetime"
                },
                deactivatedAt: {
                  type: "string",
                  format: "datetime"
                },
                threatSignatures: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.admin.defs#threatSignature"
                  }
                }
              }
            },
            repoViewNotFound: {
              type: "object",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                }
              }
            },
            recordView: {
              type: "object",
              required: [
                "uri",
                "cid",
                "value",
                "blobCids",
                "indexedAt",
                "moderation",
                "repo"
              ],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                value: {
                  type: "unknown"
                },
                blobCids: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "cid"
                  }
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                moderation: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#moderation"
                },
                repo: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#repoView"
                }
              }
            },
            recordViewDetail: {
              type: "object",
              required: [
                "uri",
                "cid",
                "value",
                "blobs",
                "indexedAt",
                "moderation",
                "repo"
              ],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                value: {
                  type: "unknown"
                },
                blobs: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:tools.ozone.moderation.defs#blobView"
                  }
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                moderation: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#moderationDetail"
                },
                repo: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#repoView"
                }
              }
            },
            recordViewNotFound: {
              type: "object",
              required: ["uri"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            moderation: {
              type: "object",
              properties: {
                subjectStatus: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#subjectStatusView"
                }
              }
            },
            moderationDetail: {
              type: "object",
              properties: {
                subjectStatus: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#subjectStatusView"
                }
              }
            },
            blobView: {
              type: "object",
              required: ["cid", "mimeType", "size", "createdAt"],
              properties: {
                cid: {
                  type: "string",
                  format: "cid"
                },
                mimeType: {
                  type: "string"
                },
                size: {
                  type: "integer"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                details: {
                  type: "union",
                  refs: [
                    "lex:tools.ozone.moderation.defs#imageDetails",
                    "lex:tools.ozone.moderation.defs#videoDetails"
                  ]
                },
                moderation: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#moderation"
                }
              }
            },
            imageDetails: {
              type: "object",
              required: ["width", "height"],
              properties: {
                width: {
                  type: "integer"
                },
                height: {
                  type: "integer"
                }
              }
            },
            videoDetails: {
              type: "object",
              required: ["width", "height", "length"],
              properties: {
                width: {
                  type: "integer"
                },
                height: {
                  type: "integer"
                },
                length: {
                  type: "integer"
                }
              }
            },
            accountHosting: {
              type: "object",
              required: ["status"],
              properties: {
                status: {
                  type: "string",
                  knownValues: [
                    "takendown",
                    "suspended",
                    "deleted",
                    "deactivated",
                    "unknown"
                  ]
                },
                updatedAt: {
                  type: "string",
                  format: "datetime"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                deletedAt: {
                  type: "string",
                  format: "datetime"
                },
                deactivatedAt: {
                  type: "string",
                  format: "datetime"
                },
                reactivatedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            recordHosting: {
              type: "object",
              required: ["status"],
              properties: {
                status: {
                  type: "string",
                  knownValues: ["deleted", "unknown"]
                },
                updatedAt: {
                  type: "string",
                  format: "datetime"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                deletedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            reporterStats: {
              type: "object",
              required: [
                "did",
                "accountReportCount",
                "recordReportCount",
                "reportedAccountCount",
                "reportedRecordCount",
                "takendownAccountCount",
                "takendownRecordCount",
                "labeledAccountCount",
                "labeledRecordCount"
              ],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                accountReportCount: {
                  type: "integer",
                  description: "The total number of reports made by the user on accounts."
                },
                recordReportCount: {
                  type: "integer",
                  description: "The total number of reports made by the user on records."
                },
                reportedAccountCount: {
                  type: "integer",
                  description: "The total number of accounts reported by the user."
                },
                reportedRecordCount: {
                  type: "integer",
                  description: "The total number of records reported by the user."
                },
                takendownAccountCount: {
                  type: "integer",
                  description: "The total number of accounts taken down as a result of the user's reports."
                },
                takendownRecordCount: {
                  type: "integer",
                  description: "The total number of records taken down as a result of the user's reports."
                },
                labeledAccountCount: {
                  type: "integer",
                  description: "The total number of accounts labeled as a result of the user's reports."
                },
                labeledRecordCount: {
                  type: "integer",
                  description: "The total number of records labeled as a result of the user's reports."
                }
              }
            }
          }
        },
        ToolsOzoneModerationEmitEvent: {
          lexicon: 1,
          id: "tools.ozone.moderation.emitEvent",
          defs: {
            main: {
              type: "procedure",
              description: "Take a moderation action on an actor.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["event", "subject", "createdBy"],
                  properties: {
                    event: {
                      type: "union",
                      refs: [
                        "lex:tools.ozone.moderation.defs#modEventTakedown",
                        "lex:tools.ozone.moderation.defs#modEventAcknowledge",
                        "lex:tools.ozone.moderation.defs#modEventEscalate",
                        "lex:tools.ozone.moderation.defs#modEventComment",
                        "lex:tools.ozone.moderation.defs#modEventLabel",
                        "lex:tools.ozone.moderation.defs#modEventReport",
                        "lex:tools.ozone.moderation.defs#modEventMute",
                        "lex:tools.ozone.moderation.defs#modEventUnmute",
                        "lex:tools.ozone.moderation.defs#modEventMuteReporter",
                        "lex:tools.ozone.moderation.defs#modEventUnmuteReporter",
                        "lex:tools.ozone.moderation.defs#modEventReverseTakedown",
                        "lex:tools.ozone.moderation.defs#modEventResolveAppeal",
                        "lex:tools.ozone.moderation.defs#modEventEmail",
                        "lex:tools.ozone.moderation.defs#modEventDivert",
                        "lex:tools.ozone.moderation.defs#modEventTag",
                        "lex:tools.ozone.moderation.defs#accountEvent",
                        "lex:tools.ozone.moderation.defs#identityEvent",
                        "lex:tools.ozone.moderation.defs#recordEvent",
                        "lex:tools.ozone.moderation.defs#modEventPriorityScore"
                      ]
                    },
                    subject: {
                      type: "union",
                      refs: [
                        "lex:com.atproto.admin.defs#repoRef",
                        "lex:com.atproto.repo.strongRef"
                      ]
                    },
                    subjectBlobCids: {
                      type: "array",
                      items: {
                        type: "string",
                        format: "cid"
                      }
                    },
                    createdBy: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#modEventView"
                }
              },
              errors: [
                {
                  name: "SubjectHasAction"
                }
              ]
            }
          }
        },
        ToolsOzoneModerationGetEvent: {
          lexicon: 1,
          id: "tools.ozone.moderation.getEvent",
          defs: {
            main: {
              type: "query",
              description: "Get details about a moderation event.",
              parameters: {
                type: "params",
                required: ["id"],
                properties: {
                  id: {
                    type: "integer"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#modEventViewDetail"
                }
              }
            }
          }
        },
        ToolsOzoneModerationGetRecord: {
          lexicon: 1,
          id: "tools.ozone.moderation.getRecord",
          defs: {
            main: {
              type: "query",
              description: "Get details about a record.",
              parameters: {
                type: "params",
                required: ["uri"],
                properties: {
                  uri: {
                    type: "string",
                    format: "at-uri"
                  },
                  cid: {
                    type: "string",
                    format: "cid"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#recordViewDetail"
                }
              },
              errors: [
                {
                  name: "RecordNotFound"
                }
              ]
            }
          }
        },
        ToolsOzoneModerationGetRecords: {
          lexicon: 1,
          id: "tools.ozone.moderation.getRecords",
          defs: {
            main: {
              type: "query",
              description: "Get details about some records.",
              parameters: {
                type: "params",
                required: ["uris"],
                properties: {
                  uris: {
                    type: "array",
                    maxLength: 100,
                    items: {
                      type: "string",
                      format: "at-uri"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["records"],
                  properties: {
                    records: {
                      type: "array",
                      items: {
                        type: "union",
                        refs: [
                          "lex:tools.ozone.moderation.defs#recordViewDetail",
                          "lex:tools.ozone.moderation.defs#recordViewNotFound"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ToolsOzoneModerationGetRepo: {
          lexicon: 1,
          id: "tools.ozone.moderation.getRepo",
          defs: {
            main: {
              type: "query",
              description: "Get details about a repository.",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#repoViewDetail"
                }
              },
              errors: [
                {
                  name: "RepoNotFound"
                }
              ]
            }
          }
        },
        ToolsOzoneModerationGetReporterStats: {
          lexicon: 1,
          id: "tools.ozone.moderation.getReporterStats",
          defs: {
            main: {
              type: "query",
              description: "Get reporter stats for a list of users.",
              parameters: {
                type: "params",
                required: ["dids"],
                properties: {
                  dids: {
                    type: "array",
                    maxLength: 100,
                    items: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["stats"],
                  properties: {
                    stats: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:tools.ozone.moderation.defs#reporterStats"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ToolsOzoneModerationGetRepos: {
          lexicon: 1,
          id: "tools.ozone.moderation.getRepos",
          defs: {
            main: {
              type: "query",
              description: "Get details about some repositories.",
              parameters: {
                type: "params",
                required: ["dids"],
                properties: {
                  dids: {
                    type: "array",
                    maxLength: 100,
                    items: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["repos"],
                  properties: {
                    repos: {
                      type: "array",
                      items: {
                        type: "union",
                        refs: [
                          "lex:tools.ozone.moderation.defs#repoViewDetail",
                          "lex:tools.ozone.moderation.defs#repoViewNotFound"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ToolsOzoneModerationGetSubjects: {
          lexicon: 1,
          id: "tools.ozone.moderation.getSubjects",
          defs: {
            main: {
              type: "query",
              description: "Get details about subjects.",
              parameters: {
                type: "params",
                required: ["subjects"],
                properties: {
                  subjects: {
                    type: "array",
                    maxLength: 100,
                    minLength: 1,
                    items: {
                      type: "string"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["subjects"],
                  properties: {
                    subjects: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:tools.ozone.moderation.defs#subjectView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ToolsOzoneModerationQueryEvents: {
          lexicon: 1,
          id: "tools.ozone.moderation.queryEvents",
          defs: {
            main: {
              type: "query",
              description: "List moderation events related to a subject.",
              parameters: {
                type: "params",
                properties: {
                  types: {
                    type: "array",
                    items: {
                      type: "string"
                    },
                    description: "The types of events (fully qualified string in the format of tools.ozone.moderation.defs#modEvent<name>) to filter by. If not specified, all events are returned."
                  },
                  createdBy: {
                    type: "string",
                    format: "did"
                  },
                  sortDirection: {
                    type: "string",
                    default: "desc",
                    enum: ["asc", "desc"],
                    description: "Sort direction for the events. Defaults to descending order of created at timestamp."
                  },
                  createdAfter: {
                    type: "string",
                    format: "datetime",
                    description: "Retrieve events created after a given timestamp"
                  },
                  createdBefore: {
                    type: "string",
                    format: "datetime",
                    description: "Retrieve events created before a given timestamp"
                  },
                  subject: {
                    type: "string",
                    format: "uri"
                  },
                  collections: {
                    type: "array",
                    maxLength: 20,
                    description: "If specified, only events where the subject belongs to the given collections will be returned. When subjectType is set to 'account', this will be ignored.",
                    items: {
                      type: "string",
                      format: "nsid"
                    }
                  },
                  subjectType: {
                    type: "string",
                    description: "If specified, only events where the subject is of the given type (account or record) will be returned. When this is set to 'account' the 'collections' parameter will be ignored. When includeAllUserRecords or subject is set, this will be ignored.",
                    knownValues: ["account", "record"]
                  },
                  includeAllUserRecords: {
                    type: "boolean",
                    default: false,
                    description: "If true, events on all record types (posts, lists, profile etc.) or records from given 'collections' param, owned by the did are returned."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  hasComment: {
                    type: "boolean",
                    description: "If true, only events with comments are returned"
                  },
                  comment: {
                    type: "string",
                    description: "If specified, only events with comments containing the keyword are returned. Apply || separator to use multiple keywords and match using OR condition."
                  },
                  addedLabels: {
                    type: "array",
                    items: {
                      type: "string"
                    },
                    description: "If specified, only events where all of these labels were added are returned"
                  },
                  removedLabels: {
                    type: "array",
                    items: {
                      type: "string"
                    },
                    description: "If specified, only events where all of these labels were removed are returned"
                  },
                  addedTags: {
                    type: "array",
                    items: {
                      type: "string"
                    },
                    description: "If specified, only events where all of these tags were added are returned"
                  },
                  removedTags: {
                    type: "array",
                    items: {
                      type: "string"
                    },
                    description: "If specified, only events where all of these tags were removed are returned"
                  },
                  reportTypes: {
                    type: "array",
                    items: {
                      type: "string"
                    }
                  },
                  policies: {
                    type: "array",
                    items: {
                      type: "string",
                      description: "If specified, only events where the action policies match any of the given policies are returned"
                    }
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["events"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    events: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:tools.ozone.moderation.defs#modEventView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ToolsOzoneModerationQueryStatuses: {
          lexicon: 1,
          id: "tools.ozone.moderation.queryStatuses",
          defs: {
            main: {
              type: "query",
              description: "View moderation statuses of subjects (record or repo).",
              parameters: {
                type: "params",
                properties: {
                  queueCount: {
                    type: "integer",
                    description: "Number of queues being used by moderators. Subjects will be split among all queues."
                  },
                  queueIndex: {
                    type: "integer",
                    description: "Index of the queue to fetch subjects from. Works only when queueCount value is specified."
                  },
                  queueSeed: {
                    type: "string",
                    description: "A seeder to shuffle/balance the queue items."
                  },
                  includeAllUserRecords: {
                    type: "boolean",
                    description: "All subjects, or subjects from given 'collections' param, belonging to the account specified in the 'subject' param will be returned."
                  },
                  subject: {
                    type: "string",
                    format: "uri",
                    description: "The subject to get the status for."
                  },
                  comment: {
                    type: "string",
                    description: "Search subjects by keyword from comments"
                  },
                  reportedAfter: {
                    type: "string",
                    format: "datetime",
                    description: "Search subjects reported after a given timestamp"
                  },
                  reportedBefore: {
                    type: "string",
                    format: "datetime",
                    description: "Search subjects reported before a given timestamp"
                  },
                  reviewedAfter: {
                    type: "string",
                    format: "datetime",
                    description: "Search subjects reviewed after a given timestamp"
                  },
                  hostingDeletedAfter: {
                    type: "string",
                    format: "datetime",
                    description: "Search subjects where the associated record/account was deleted after a given timestamp"
                  },
                  hostingDeletedBefore: {
                    type: "string",
                    format: "datetime",
                    description: "Search subjects where the associated record/account was deleted before a given timestamp"
                  },
                  hostingUpdatedAfter: {
                    type: "string",
                    format: "datetime",
                    description: "Search subjects where the associated record/account was updated after a given timestamp"
                  },
                  hostingUpdatedBefore: {
                    type: "string",
                    format: "datetime",
                    description: "Search subjects where the associated record/account was updated before a given timestamp"
                  },
                  hostingStatuses: {
                    type: "array",
                    items: {
                      type: "string"
                    },
                    description: "Search subjects by the status of the associated record/account"
                  },
                  reviewedBefore: {
                    type: "string",
                    format: "datetime",
                    description: "Search subjects reviewed before a given timestamp"
                  },
                  includeMuted: {
                    type: "boolean",
                    description: "By default, we don't include muted subjects in the results. Set this to true to include them."
                  },
                  onlyMuted: {
                    type: "boolean",
                    description: "When set to true, only muted subjects and reporters will be returned."
                  },
                  reviewState: {
                    type: "string",
                    description: "Specify when fetching subjects in a certain state"
                  },
                  ignoreSubjects: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "uri"
                    }
                  },
                  lastReviewedBy: {
                    type: "string",
                    format: "did",
                    description: "Get all subject statuses that were reviewed by a specific moderator"
                  },
                  sortField: {
                    type: "string",
                    default: "lastReportedAt",
                    enum: [
                      "lastReviewedAt",
                      "lastReportedAt",
                      "reportedRecordsCount",
                      "takendownRecordsCount",
                      "priorityScore"
                    ]
                  },
                  sortDirection: {
                    type: "string",
                    default: "desc",
                    enum: ["asc", "desc"]
                  },
                  takendown: {
                    type: "boolean",
                    description: "Get subjects that were taken down"
                  },
                  appealed: {
                    type: "boolean",
                    description: "Get subjects in unresolved appealed status"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  tags: {
                    type: "array",
                    maxLength: 25,
                    items: {
                      type: "string",
                      description: "Items in this array are applied with OR filters. To apply AND filter, put all tags in the same string and separate using && characters"
                    }
                  },
                  excludeTags: {
                    type: "array",
                    items: {
                      type: "string"
                    }
                  },
                  cursor: {
                    type: "string"
                  },
                  collections: {
                    type: "array",
                    maxLength: 20,
                    description: "If specified, subjects belonging to the given collections will be returned. When subjectType is set to 'account', this will be ignored.",
                    items: {
                      type: "string",
                      format: "nsid"
                    }
                  },
                  subjectType: {
                    type: "string",
                    description: "If specified, subjects of the given type (account or record) will be returned. When this is set to 'account' the 'collections' parameter will be ignored. When includeAllUserRecords or subject is set, this will be ignored.",
                    knownValues: ["account", "record"]
                  },
                  minAccountSuspendCount: {
                    type: "integer",
                    description: "If specified, only subjects that belong to an account that has at least this many suspensions will be returned."
                  },
                  minReportedRecordsCount: {
                    type: "integer",
                    description: "If specified, only subjects that belong to an account that has at least this many reported records will be returned."
                  },
                  minTakendownRecordsCount: {
                    type: "integer",
                    description: "If specified, only subjects that belong to an account that has at least this many taken down records will be returned."
                  },
                  minPriorityScore: {
                    minimum: 0,
                    maximum: 100,
                    type: "integer",
                    description: "If specified, only subjects that have priority score value above the given value will be returned."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["subjectStatuses"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    subjectStatuses: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:tools.ozone.moderation.defs#subjectStatusView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ToolsOzoneModerationSearchRepos: {
          lexicon: 1,
          id: "tools.ozone.moderation.searchRepos",
          defs: {
            main: {
              type: "query",
              description: "Find repositories based on a search term.",
              parameters: {
                type: "params",
                properties: {
                  term: {
                    type: "string",
                    description: "DEPRECATED: use 'q' instead"
                  },
                  q: {
                    type: "string"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["repos"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    repos: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:tools.ozone.moderation.defs#repoView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ToolsOzoneServerGetConfig: {
          lexicon: 1,
          id: "tools.ozone.server.getConfig",
          defs: {
            main: {
              type: "query",
              description: "Get details about ozone's server configuration.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  properties: {
                    appview: {
                      type: "ref",
                      ref: "lex:tools.ozone.server.getConfig#serviceConfig"
                    },
                    pds: {
                      type: "ref",
                      ref: "lex:tools.ozone.server.getConfig#serviceConfig"
                    },
                    blobDivert: {
                      type: "ref",
                      ref: "lex:tools.ozone.server.getConfig#serviceConfig"
                    },
                    chat: {
                      type: "ref",
                      ref: "lex:tools.ozone.server.getConfig#serviceConfig"
                    },
                    viewer: {
                      type: "ref",
                      ref: "lex:tools.ozone.server.getConfig#viewerConfig"
                    },
                    verifierDid: {
                      type: "string",
                      format: "did",
                      description: "The did of the verifier used for verification."
                    }
                  }
                }
              }
            },
            serviceConfig: {
              type: "object",
              properties: {
                url: {
                  type: "string",
                  format: "uri"
                }
              }
            },
            viewerConfig: {
              type: "object",
              properties: {
                role: {
                  type: "string",
                  knownValues: [
                    "tools.ozone.team.defs#roleAdmin",
                    "tools.ozone.team.defs#roleModerator",
                    "tools.ozone.team.defs#roleTriage",
                    "tools.ozone.team.defs#roleVerifier"
                  ]
                }
              }
            }
          }
        },
        ToolsOzoneSetAddValues: {
          lexicon: 1,
          id: "tools.ozone.set.addValues",
          defs: {
            main: {
              type: "procedure",
              description: "Add values to a specific set. Attempting to add values to a set that does not exist will result in an error.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["name", "values"],
                  properties: {
                    name: {
                      type: "string",
                      description: "Name of the set to add values to"
                    },
                    values: {
                      type: "array",
                      minLength: 1,
                      maxLength: 1e3,
                      items: {
                        type: "string"
                      },
                      description: "Array of string values to add to the set"
                    }
                  }
                }
              }
            }
          }
        },
        ToolsOzoneSetDefs: {
          lexicon: 1,
          id: "tools.ozone.set.defs",
          defs: {
            set: {
              type: "object",
              required: ["name"],
              properties: {
                name: {
                  type: "string",
                  minLength: 3,
                  maxLength: 128
                },
                description: {
                  type: "string",
                  maxGraphemes: 1024,
                  maxLength: 10240
                }
              }
            },
            setView: {
              type: "object",
              required: ["name", "setSize", "createdAt", "updatedAt"],
              properties: {
                name: {
                  type: "string",
                  minLength: 3,
                  maxLength: 128
                },
                description: {
                  type: "string",
                  maxGraphemes: 1024,
                  maxLength: 10240
                },
                setSize: {
                  type: "integer"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                updatedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            }
          }
        },
        ToolsOzoneSetDeleteSet: {
          lexicon: 1,
          id: "tools.ozone.set.deleteSet",
          defs: {
            main: {
              type: "procedure",
              description: "Delete an entire set. Attempting to delete a set that does not exist will result in an error.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["name"],
                  properties: {
                    name: {
                      type: "string",
                      description: "Name of the set to delete"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  properties: {}
                }
              },
              errors: [
                {
                  name: "SetNotFound",
                  description: "set with the given name does not exist"
                }
              ]
            }
          }
        },
        ToolsOzoneSetDeleteValues: {
          lexicon: 1,
          id: "tools.ozone.set.deleteValues",
          defs: {
            main: {
              type: "procedure",
              description: "Delete values from a specific set. Attempting to delete values that are not in the set will not result in an error",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["name", "values"],
                  properties: {
                    name: {
                      type: "string",
                      description: "Name of the set to delete values from"
                    },
                    values: {
                      type: "array",
                      minLength: 1,
                      items: {
                        type: "string"
                      },
                      description: "Array of string values to delete from the set"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "SetNotFound",
                  description: "set with the given name does not exist"
                }
              ]
            }
          }
        },
        ToolsOzoneSetGetValues: {
          lexicon: 1,
          id: "tools.ozone.set.getValues",
          defs: {
            main: {
              type: "query",
              description: "Get a specific set and its values",
              parameters: {
                type: "params",
                required: ["name"],
                properties: {
                  name: {
                    type: "string"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 1e3,
                    default: 100
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["set", "values"],
                  properties: {
                    set: {
                      type: "ref",
                      ref: "lex:tools.ozone.set.defs#setView"
                    },
                    values: {
                      type: "array",
                      items: {
                        type: "string"
                      }
                    },
                    cursor: {
                      type: "string"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "SetNotFound",
                  description: "set with the given name does not exist"
                }
              ]
            }
          }
        },
        ToolsOzoneSetQuerySets: {
          lexicon: 1,
          id: "tools.ozone.set.querySets",
          defs: {
            main: {
              type: "query",
              description: "Query available sets",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  },
                  namePrefix: {
                    type: "string"
                  },
                  sortBy: {
                    type: "string",
                    enum: ["name", "createdAt", "updatedAt"],
                    default: "name"
                  },
                  sortDirection: {
                    type: "string",
                    default: "asc",
                    enum: ["asc", "desc"],
                    description: "Defaults to ascending order of name field."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["sets"],
                  properties: {
                    sets: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:tools.ozone.set.defs#setView"
                      }
                    },
                    cursor: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ToolsOzoneSetUpsertSet: {
          lexicon: 1,
          id: "tools.ozone.set.upsertSet",
          defs: {
            main: {
              type: "procedure",
              description: "Create or update set metadata",
              input: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:tools.ozone.set.defs#set"
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:tools.ozone.set.defs#setView"
                }
              }
            }
          }
        },
        ToolsOzoneSettingDefs: {
          lexicon: 1,
          id: "tools.ozone.setting.defs",
          defs: {
            option: {
              type: "object",
              required: [
                "key",
                "value",
                "did",
                "scope",
                "createdBy",
                "lastUpdatedBy"
              ],
              properties: {
                key: {
                  type: "string",
                  format: "nsid"
                },
                did: {
                  type: "string",
                  format: "did"
                },
                value: {
                  type: "unknown"
                },
                description: {
                  type: "string",
                  maxGraphemes: 1024,
                  maxLength: 10240
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                updatedAt: {
                  type: "string",
                  format: "datetime"
                },
                managerRole: {
                  type: "string",
                  knownValues: [
                    "tools.ozone.team.defs#roleModerator",
                    "tools.ozone.team.defs#roleTriage",
                    "tools.ozone.team.defs#roleAdmin",
                    "tools.ozone.team.defs#roleVerifier"
                  ]
                },
                scope: {
                  type: "string",
                  knownValues: ["instance", "personal"]
                },
                createdBy: {
                  type: "string",
                  format: "did"
                },
                lastUpdatedBy: {
                  type: "string",
                  format: "did"
                }
              }
            }
          }
        },
        ToolsOzoneSettingListOptions: {
          lexicon: 1,
          id: "tools.ozone.setting.listOptions",
          defs: {
            main: {
              type: "query",
              description: "List settings with optional filtering",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  },
                  scope: {
                    type: "string",
                    knownValues: ["instance", "personal"],
                    default: "instance"
                  },
                  prefix: {
                    type: "string",
                    description: "Filter keys by prefix"
                  },
                  keys: {
                    type: "array",
                    maxLength: 100,
                    items: {
                      type: "string",
                      format: "nsid"
                    },
                    description: "Filter for only the specified keys. Ignored if prefix is provided"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["options"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    options: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:tools.ozone.setting.defs#option"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ToolsOzoneSettingRemoveOptions: {
          lexicon: 1,
          id: "tools.ozone.setting.removeOptions",
          defs: {
            main: {
              type: "procedure",
              description: "Delete settings by key",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["keys", "scope"],
                  properties: {
                    keys: {
                      type: "array",
                      minLength: 1,
                      maxLength: 200,
                      items: {
                        type: "string",
                        format: "nsid"
                      }
                    },
                    scope: {
                      type: "string",
                      knownValues: ["instance", "personal"]
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  properties: {}
                }
              }
            }
          }
        },
        ToolsOzoneSettingUpsertOption: {
          lexicon: 1,
          id: "tools.ozone.setting.upsertOption",
          defs: {
            main: {
              type: "procedure",
              description: "Create or update setting option",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["key", "scope", "value"],
                  properties: {
                    key: {
                      type: "string",
                      format: "nsid"
                    },
                    scope: {
                      type: "string",
                      knownValues: ["instance", "personal"]
                    },
                    value: {
                      type: "unknown"
                    },
                    description: {
                      type: "string",
                      maxLength: 2e3
                    },
                    managerRole: {
                      type: "string",
                      knownValues: [
                        "tools.ozone.team.defs#roleModerator",
                        "tools.ozone.team.defs#roleTriage",
                        "tools.ozone.team.defs#roleVerifier",
                        "tools.ozone.team.defs#roleAdmin"
                      ]
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["option"],
                  properties: {
                    option: {
                      type: "ref",
                      ref: "lex:tools.ozone.setting.defs#option"
                    }
                  }
                }
              }
            }
          }
        },
        ToolsOzoneSignatureDefs: {
          lexicon: 1,
          id: "tools.ozone.signature.defs",
          defs: {
            sigDetail: {
              type: "object",
              required: ["property", "value"],
              properties: {
                property: {
                  type: "string"
                },
                value: {
                  type: "string"
                }
              }
            }
          }
        },
        ToolsOzoneSignatureFindCorrelation: {
          lexicon: 1,
          id: "tools.ozone.signature.findCorrelation",
          defs: {
            main: {
              type: "query",
              description: "Find all correlated threat signatures between 2 or more accounts.",
              parameters: {
                type: "params",
                required: ["dids"],
                properties: {
                  dids: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["details"],
                  properties: {
                    details: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:tools.ozone.signature.defs#sigDetail"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ToolsOzoneSignatureFindRelatedAccounts: {
          lexicon: 1,
          id: "tools.ozone.signature.findRelatedAccounts",
          defs: {
            main: {
              type: "query",
              description: "Get accounts that share some matching threat signatures with the root account.",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did"
                  },
                  cursor: {
                    type: "string"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["accounts"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    accounts: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:tools.ozone.signature.findRelatedAccounts#relatedAccount"
                      }
                    }
                  }
                }
              }
            },
            relatedAccount: {
              type: "object",
              required: ["account"],
              properties: {
                account: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#accountView"
                },
                similarities: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:tools.ozone.signature.defs#sigDetail"
                  }
                }
              }
            }
          }
        },
        ToolsOzoneSignatureSearchAccounts: {
          lexicon: 1,
          id: "tools.ozone.signature.searchAccounts",
          defs: {
            main: {
              type: "query",
              description: "Search for accounts that match one or more threat signature values.",
              parameters: {
                type: "params",
                required: ["values"],
                properties: {
                  values: {
                    type: "array",
                    items: {
                      type: "string"
                    }
                  },
                  cursor: {
                    type: "string"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["accounts"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    accounts: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#accountView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ToolsOzoneTeamAddMember: {
          lexicon: 1,
          id: "tools.ozone.team.addMember",
          defs: {
            main: {
              type: "procedure",
              description: "Add a member to the ozone team. Requires admin role.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did", "role"],
                  properties: {
                    did: {
                      type: "string",
                      format: "did"
                    },
                    role: {
                      type: "string",
                      knownValues: [
                        "tools.ozone.team.defs#roleAdmin",
                        "tools.ozone.team.defs#roleModerator",
                        "tools.ozone.team.defs#roleVerifier",
                        "tools.ozone.team.defs#roleTriage"
                      ]
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:tools.ozone.team.defs#member"
                }
              },
              errors: [
                {
                  name: "MemberAlreadyExists",
                  description: "Member already exists in the team."
                }
              ]
            }
          }
        },
        ToolsOzoneTeamDefs: {
          lexicon: 1,
          id: "tools.ozone.team.defs",
          defs: {
            member: {
              type: "object",
              required: ["did", "role"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                disabled: {
                  type: "boolean"
                },
                profile: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileViewDetailed"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                updatedAt: {
                  type: "string",
                  format: "datetime"
                },
                lastUpdatedBy: {
                  type: "string"
                },
                role: {
                  type: "string",
                  knownValues: [
                    "lex:tools.ozone.team.defs#roleAdmin",
                    "lex:tools.ozone.team.defs#roleModerator",
                    "lex:tools.ozone.team.defs#roleTriage",
                    "lex:tools.ozone.team.defs#roleVerifier"
                  ]
                }
              }
            },
            roleAdmin: {
              type: "token",
              description: "Admin role. Highest level of access, can perform all actions."
            },
            roleModerator: {
              type: "token",
              description: "Moderator role. Can perform most actions."
            },
            roleTriage: {
              type: "token",
              description: "Triage role. Mostly intended for monitoring and escalating issues."
            },
            roleVerifier: {
              type: "token",
              description: "Verifier role. Only allowed to issue verifications."
            }
          }
        },
        ToolsOzoneTeamDeleteMember: {
          lexicon: 1,
          id: "tools.ozone.team.deleteMember",
          defs: {
            main: {
              type: "procedure",
              description: "Delete a member from ozone team. Requires admin role.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did"],
                  properties: {
                    did: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "MemberNotFound",
                  description: "The member being deleted does not exist"
                },
                {
                  name: "CannotDeleteSelf",
                  description: "You can not delete yourself from the team"
                }
              ]
            }
          }
        },
        ToolsOzoneTeamListMembers: {
          lexicon: 1,
          id: "tools.ozone.team.listMembers",
          defs: {
            main: {
              type: "query",
              description: "List all members with access to the ozone service.",
              parameters: {
                type: "params",
                properties: {
                  q: {
                    type: "string"
                  },
                  disabled: {
                    type: "boolean"
                  },
                  roles: {
                    type: "array",
                    items: {
                      type: "string"
                    }
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["members"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    members: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:tools.ozone.team.defs#member"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ToolsOzoneTeamUpdateMember: {
          lexicon: 1,
          id: "tools.ozone.team.updateMember",
          defs: {
            main: {
              type: "procedure",
              description: "Update a member in the ozone service. Requires admin role.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did"],
                  properties: {
                    did: {
                      type: "string",
                      format: "did"
                    },
                    disabled: {
                      type: "boolean"
                    },
                    role: {
                      type: "string",
                      knownValues: [
                        "tools.ozone.team.defs#roleAdmin",
                        "tools.ozone.team.defs#roleModerator",
                        "tools.ozone.team.defs#roleVerifier",
                        "tools.ozone.team.defs#roleTriage"
                      ]
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:tools.ozone.team.defs#member"
                }
              },
              errors: [
                {
                  name: "MemberNotFound",
                  description: "The member being updated does not exist in the team"
                }
              ]
            }
          }
        },
        ToolsOzoneVerificationDefs: {
          lexicon: 1,
          id: "tools.ozone.verification.defs",
          defs: {
            verificationView: {
              type: "object",
              description: "Verification data for the associated subject.",
              required: [
                "issuer",
                "uri",
                "subject",
                "handle",
                "displayName",
                "createdAt"
              ],
              properties: {
                issuer: {
                  type: "string",
                  description: "The user who issued this verification.",
                  format: "did"
                },
                uri: {
                  type: "string",
                  description: "The AT-URI of the verification record.",
                  format: "at-uri"
                },
                subject: {
                  type: "string",
                  format: "did",
                  description: "The subject of the verification."
                },
                handle: {
                  type: "string",
                  description: "Handle of the subject the verification applies to at the moment of verifying, which might not be the same at the time of viewing. The verification is only valid if the current handle matches the one at the time of verifying.",
                  format: "handle"
                },
                displayName: {
                  type: "string",
                  description: "Display name of the subject the verification applies to at the moment of verifying, which might not be the same at the time of viewing. The verification is only valid if the current displayName matches the one at the time of verifying."
                },
                createdAt: {
                  type: "string",
                  description: "Timestamp when the verification was created.",
                  format: "datetime"
                },
                revokeReason: {
                  type: "string",
                  description: "Describes the reason for revocation, also indicating that the verification is no longer valid."
                },
                revokedAt: {
                  type: "string",
                  description: "Timestamp when the verification was revoked.",
                  format: "datetime"
                },
                revokedBy: {
                  type: "string",
                  description: "The user who revoked this verification.",
                  format: "did"
                },
                subjectProfile: {
                  type: "union",
                  refs: []
                },
                issuerProfile: {
                  type: "union",
                  refs: []
                },
                subjectRepo: {
                  type: "union",
                  refs: [
                    "lex:tools.ozone.moderation.defs#repoViewDetail",
                    "lex:tools.ozone.moderation.defs#repoViewNotFound"
                  ]
                },
                issuerRepo: {
                  type: "union",
                  refs: [
                    "lex:tools.ozone.moderation.defs#repoViewDetail",
                    "lex:tools.ozone.moderation.defs#repoViewNotFound"
                  ]
                }
              }
            }
          }
        },
        ToolsOzoneVerificationGrantVerifications: {
          lexicon: 1,
          id: "tools.ozone.verification.grantVerifications",
          defs: {
            main: {
              type: "procedure",
              description: "Grant verifications to multiple subjects. Allows batch processing of up to 100 verifications at once.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["verifications"],
                  properties: {
                    verifications: {
                      type: "array",
                      description: "Array of verification requests to process",
                      maxLength: 100,
                      items: {
                        type: "ref",
                        ref: "lex:tools.ozone.verification.grantVerifications#verificationInput"
                      }
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["verifications", "failedVerifications"],
                  properties: {
                    verifications: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:tools.ozone.verification.defs#verificationView"
                      }
                    },
                    failedVerifications: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:tools.ozone.verification.grantVerifications#grantError"
                      }
                    }
                  }
                }
              }
            },
            verificationInput: {
              type: "object",
              required: ["subject", "handle", "displayName"],
              properties: {
                subject: {
                  type: "string",
                  description: "The did of the subject being verified",
                  format: "did"
                },
                handle: {
                  type: "string",
                  description: "Handle of the subject the verification applies to at the moment of verifying.",
                  format: "handle"
                },
                displayName: {
                  type: "string",
                  description: "Display name of the subject the verification applies to at the moment of verifying."
                },
                createdAt: {
                  type: "string",
                  description: "Timestamp for verification record. Defaults to current time when not specified."
                }
              }
            },
            grantError: {
              type: "object",
              description: "Error object for failed verifications.",
              required: ["error", "subject"],
              properties: {
                error: {
                  type: "string",
                  description: "Error message describing the reason for failure."
                },
                subject: {
                  type: "string",
                  description: "The did of the subject being verified",
                  format: "did"
                }
              }
            }
          }
        },
        ToolsOzoneVerificationListVerifications: {
          lexicon: 1,
          id: "tools.ozone.verification.listVerifications",
          defs: {
            main: {
              type: "query",
              description: "List verifications",
              parameters: {
                type: "params",
                properties: {
                  cursor: {
                    type: "string",
                    description: "Pagination cursor"
                  },
                  limit: {
                    type: "integer",
                    description: "Maximum number of results to return",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  createdAfter: {
                    type: "string",
                    format: "datetime",
                    description: "Filter to verifications created after this timestamp"
                  },
                  createdBefore: {
                    type: "string",
                    format: "datetime",
                    description: "Filter to verifications created before this timestamp"
                  },
                  issuers: {
                    type: "array",
                    maxLength: 100,
                    description: "Filter to verifications from specific issuers",
                    items: {
                      type: "string",
                      format: "did"
                    }
                  },
                  subjects: {
                    type: "array",
                    description: "Filter to specific verified DIDs",
                    maxLength: 100,
                    items: {
                      type: "string",
                      format: "did"
                    }
                  },
                  sortDirection: {
                    type: "string",
                    description: "Sort direction for creation date",
                    enum: ["asc", "desc"],
                    default: "desc"
                  },
                  isRevoked: {
                    type: "boolean",
                    description: "Filter to verifications that are revoked or not. By default, includes both."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["verifications"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    verifications: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:tools.ozone.verification.defs#verificationView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ToolsOzoneVerificationRevokeVerifications: {
          lexicon: 1,
          id: "tools.ozone.verification.revokeVerifications",
          defs: {
            main: {
              type: "procedure",
              description: "Revoke previously granted verifications in batches of up to 100.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["uris"],
                  properties: {
                    uris: {
                      type: "array",
                      description: "Array of verification record uris to revoke",
                      maxLength: 100,
                      items: {
                        type: "string",
                        description: "The AT-URI of the verification record to revoke.",
                        format: "at-uri"
                      }
                    },
                    revokeReason: {
                      type: "string",
                      description: "Reason for revoking the verification. This is optional and can be omitted if not needed.",
                      maxLength: 1e3
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["revokedVerifications", "failedRevocations"],
                  properties: {
                    revokedVerifications: {
                      type: "array",
                      description: "List of verification uris successfully revoked",
                      items: {
                        type: "string",
                        format: "at-uri"
                      }
                    },
                    failedRevocations: {
                      type: "array",
                      description: "List of verification uris that couldn't be revoked, including failure reasons",
                      items: {
                        type: "ref",
                        ref: "lex:tools.ozone.verification.revokeVerifications#revokeError"
                      }
                    }
                  }
                }
              }
            },
            revokeError: {
              type: "object",
              description: "Error object for failed revocations",
              required: ["uri", "error"],
              properties: {
                uri: {
                  type: "string",
                  description: "The AT-URI of the verification record that failed to revoke.",
                  format: "at-uri"
                },
                error: {
                  type: "string",
                  description: "Description of the error that occurred during revocation."
                }
              }
            }
          }
        }
      };
      exports.schemas = Object.values(exports.schemaDict);
      exports.lexicons = new lexicon_1.Lexicons(exports.schemas);
      function validate(v, id, hash, requiredType) {
        return (requiredType ? util_js_1.is$typed : util_js_1.maybe$typed)(v, id, hash) ? exports.lexicons.validate(`${id}#${hash}`, v) : {
          success: false,
          error: new lexicon_1.ValidationError(`Must be an object with "${hash === "main" ? id : `${id}#${hash}`}" $type property`)
        };
      }
      exports.ids = {
        ComAtprotoAdminDefs: "com.atproto.admin.defs",
        ComAtprotoAdminDeleteAccount: "com.atproto.admin.deleteAccount",
        ComAtprotoAdminDisableAccountInvites: "com.atproto.admin.disableAccountInvites",
        ComAtprotoAdminDisableInviteCodes: "com.atproto.admin.disableInviteCodes",
        ComAtprotoAdminEnableAccountInvites: "com.atproto.admin.enableAccountInvites",
        ComAtprotoAdminGetAccountInfo: "com.atproto.admin.getAccountInfo",
        ComAtprotoAdminGetAccountInfos: "com.atproto.admin.getAccountInfos",
        ComAtprotoAdminGetInviteCodes: "com.atproto.admin.getInviteCodes",
        ComAtprotoAdminGetSubjectStatus: "com.atproto.admin.getSubjectStatus",
        ComAtprotoAdminSearchAccounts: "com.atproto.admin.searchAccounts",
        ComAtprotoAdminSendEmail: "com.atproto.admin.sendEmail",
        ComAtprotoAdminUpdateAccountEmail: "com.atproto.admin.updateAccountEmail",
        ComAtprotoAdminUpdateAccountHandle: "com.atproto.admin.updateAccountHandle",
        ComAtprotoAdminUpdateAccountPassword: "com.atproto.admin.updateAccountPassword",
        ComAtprotoAdminUpdateAccountSigningKey: "com.atproto.admin.updateAccountSigningKey",
        ComAtprotoAdminUpdateSubjectStatus: "com.atproto.admin.updateSubjectStatus",
        ComAtprotoIdentityDefs: "com.atproto.identity.defs",
        ComAtprotoIdentityGetRecommendedDidCredentials: "com.atproto.identity.getRecommendedDidCredentials",
        ComAtprotoIdentityRefreshIdentity: "com.atproto.identity.refreshIdentity",
        ComAtprotoIdentityRequestPlcOperationSignature: "com.atproto.identity.requestPlcOperationSignature",
        ComAtprotoIdentityResolveDid: "com.atproto.identity.resolveDid",
        ComAtprotoIdentityResolveHandle: "com.atproto.identity.resolveHandle",
        ComAtprotoIdentityResolveIdentity: "com.atproto.identity.resolveIdentity",
        ComAtprotoIdentitySignPlcOperation: "com.atproto.identity.signPlcOperation",
        ComAtprotoIdentitySubmitPlcOperation: "com.atproto.identity.submitPlcOperation",
        ComAtprotoIdentityUpdateHandle: "com.atproto.identity.updateHandle",
        ComAtprotoLabelDefs: "com.atproto.label.defs",
        ComAtprotoLabelQueryLabels: "com.atproto.label.queryLabels",
        ComAtprotoLabelSubscribeLabels: "com.atproto.label.subscribeLabels",
        ComAtprotoLexiconSchema: "com.atproto.lexicon.schema",
        ComAtprotoModerationCreateReport: "com.atproto.moderation.createReport",
        ComAtprotoModerationDefs: "com.atproto.moderation.defs",
        ComAtprotoRepoApplyWrites: "com.atproto.repo.applyWrites",
        ComAtprotoRepoCreateRecord: "com.atproto.repo.createRecord",
        ComAtprotoRepoDefs: "com.atproto.repo.defs",
        ComAtprotoRepoDeleteRecord: "com.atproto.repo.deleteRecord",
        ComAtprotoRepoDescribeRepo: "com.atproto.repo.describeRepo",
        ComAtprotoRepoGetRecord: "com.atproto.repo.getRecord",
        ComAtprotoRepoImportRepo: "com.atproto.repo.importRepo",
        ComAtprotoRepoListMissingBlobs: "com.atproto.repo.listMissingBlobs",
        ComAtprotoRepoListRecords: "com.atproto.repo.listRecords",
        ComAtprotoRepoPutRecord: "com.atproto.repo.putRecord",
        ComAtprotoRepoStrongRef: "com.atproto.repo.strongRef",
        ComAtprotoRepoUploadBlob: "com.atproto.repo.uploadBlob",
        ComAtprotoServerActivateAccount: "com.atproto.server.activateAccount",
        ComAtprotoServerCheckAccountStatus: "com.atproto.server.checkAccountStatus",
        ComAtprotoServerConfirmEmail: "com.atproto.server.confirmEmail",
        ComAtprotoServerCreateAccount: "com.atproto.server.createAccount",
        ComAtprotoServerCreateAppPassword: "com.atproto.server.createAppPassword",
        ComAtprotoServerCreateInviteCode: "com.atproto.server.createInviteCode",
        ComAtprotoServerCreateInviteCodes: "com.atproto.server.createInviteCodes",
        ComAtprotoServerCreateSession: "com.atproto.server.createSession",
        ComAtprotoServerDeactivateAccount: "com.atproto.server.deactivateAccount",
        ComAtprotoServerDefs: "com.atproto.server.defs",
        ComAtprotoServerDeleteAccount: "com.atproto.server.deleteAccount",
        ComAtprotoServerDeleteSession: "com.atproto.server.deleteSession",
        ComAtprotoServerDescribeServer: "com.atproto.server.describeServer",
        ComAtprotoServerGetAccountInviteCodes: "com.atproto.server.getAccountInviteCodes",
        ComAtprotoServerGetServiceAuth: "com.atproto.server.getServiceAuth",
        ComAtprotoServerGetSession: "com.atproto.server.getSession",
        ComAtprotoServerListAppPasswords: "com.atproto.server.listAppPasswords",
        ComAtprotoServerRefreshSession: "com.atproto.server.refreshSession",
        ComAtprotoServerRequestAccountDelete: "com.atproto.server.requestAccountDelete",
        ComAtprotoServerRequestEmailConfirmation: "com.atproto.server.requestEmailConfirmation",
        ComAtprotoServerRequestEmailUpdate: "com.atproto.server.requestEmailUpdate",
        ComAtprotoServerRequestPasswordReset: "com.atproto.server.requestPasswordReset",
        ComAtprotoServerReserveSigningKey: "com.atproto.server.reserveSigningKey",
        ComAtprotoServerResetPassword: "com.atproto.server.resetPassword",
        ComAtprotoServerRevokeAppPassword: "com.atproto.server.revokeAppPassword",
        ComAtprotoServerUpdateEmail: "com.atproto.server.updateEmail",
        ComAtprotoSyncDefs: "com.atproto.sync.defs",
        ComAtprotoSyncGetBlob: "com.atproto.sync.getBlob",
        ComAtprotoSyncGetBlocks: "com.atproto.sync.getBlocks",
        ComAtprotoSyncGetCheckout: "com.atproto.sync.getCheckout",
        ComAtprotoSyncGetHead: "com.atproto.sync.getHead",
        ComAtprotoSyncGetHostStatus: "com.atproto.sync.getHostStatus",
        ComAtprotoSyncGetLatestCommit: "com.atproto.sync.getLatestCommit",
        ComAtprotoSyncGetRecord: "com.atproto.sync.getRecord",
        ComAtprotoSyncGetRepo: "com.atproto.sync.getRepo",
        ComAtprotoSyncGetRepoStatus: "com.atproto.sync.getRepoStatus",
        ComAtprotoSyncListBlobs: "com.atproto.sync.listBlobs",
        ComAtprotoSyncListHosts: "com.atproto.sync.listHosts",
        ComAtprotoSyncListRepos: "com.atproto.sync.listRepos",
        ComAtprotoSyncListReposByCollection: "com.atproto.sync.listReposByCollection",
        ComAtprotoSyncNotifyOfUpdate: "com.atproto.sync.notifyOfUpdate",
        ComAtprotoSyncRequestCrawl: "com.atproto.sync.requestCrawl",
        ComAtprotoSyncSubscribeRepos: "com.atproto.sync.subscribeRepos",
        ComAtprotoTempAddReservedHandle: "com.atproto.temp.addReservedHandle",
        ComAtprotoTempCheckSignupQueue: "com.atproto.temp.checkSignupQueue",
        ComAtprotoTempFetchLabels: "com.atproto.temp.fetchLabels",
        ComAtprotoTempRequestPhoneVerification: "com.atproto.temp.requestPhoneVerification",
        AppBskyActorDefs: "app.bsky.actor.defs",
        AppBskyActorGetPreferences: "app.bsky.actor.getPreferences",
        AppBskyActorGetProfile: "app.bsky.actor.getProfile",
        AppBskyActorGetProfiles: "app.bsky.actor.getProfiles",
        AppBskyActorGetSuggestions: "app.bsky.actor.getSuggestions",
        AppBskyActorProfile: "app.bsky.actor.profile",
        AppBskyActorPutPreferences: "app.bsky.actor.putPreferences",
        AppBskyActorSearchActors: "app.bsky.actor.searchActors",
        AppBskyActorSearchActorsTypeahead: "app.bsky.actor.searchActorsTypeahead",
        AppBskyActorStatus: "app.bsky.actor.status",
        AppBskyEmbedDefs: "app.bsky.embed.defs",
        AppBskyEmbedExternal: "app.bsky.embed.external",
        AppBskyEmbedImages: "app.bsky.embed.images",
        AppBskyEmbedRecord: "app.bsky.embed.record",
        AppBskyEmbedRecordWithMedia: "app.bsky.embed.recordWithMedia",
        AppBskyEmbedVideo: "app.bsky.embed.video",
        AppBskyFeedDefs: "app.bsky.feed.defs",
        AppBskyFeedDescribeFeedGenerator: "app.bsky.feed.describeFeedGenerator",
        AppBskyFeedGenerator: "app.bsky.feed.generator",
        AppBskyFeedGetActorFeeds: "app.bsky.feed.getActorFeeds",
        AppBskyFeedGetActorLikes: "app.bsky.feed.getActorLikes",
        AppBskyFeedGetAuthorFeed: "app.bsky.feed.getAuthorFeed",
        AppBskyFeedGetFeed: "app.bsky.feed.getFeed",
        AppBskyFeedGetFeedGenerator: "app.bsky.feed.getFeedGenerator",
        AppBskyFeedGetFeedGenerators: "app.bsky.feed.getFeedGenerators",
        AppBskyFeedGetFeedSkeleton: "app.bsky.feed.getFeedSkeleton",
        AppBskyFeedGetLikes: "app.bsky.feed.getLikes",
        AppBskyFeedGetListFeed: "app.bsky.feed.getListFeed",
        AppBskyFeedGetPosts: "app.bsky.feed.getPosts",
        AppBskyFeedGetPostThread: "app.bsky.feed.getPostThread",
        AppBskyFeedGetQuotes: "app.bsky.feed.getQuotes",
        AppBskyFeedGetRepostedBy: "app.bsky.feed.getRepostedBy",
        AppBskyFeedGetSuggestedFeeds: "app.bsky.feed.getSuggestedFeeds",
        AppBskyFeedGetTimeline: "app.bsky.feed.getTimeline",
        AppBskyFeedLike: "app.bsky.feed.like",
        AppBskyFeedPost: "app.bsky.feed.post",
        AppBskyFeedPostgate: "app.bsky.feed.postgate",
        AppBskyFeedRepost: "app.bsky.feed.repost",
        AppBskyFeedSearchPosts: "app.bsky.feed.searchPosts",
        AppBskyFeedSendInteractions: "app.bsky.feed.sendInteractions",
        AppBskyFeedThreadgate: "app.bsky.feed.threadgate",
        AppBskyGraphBlock: "app.bsky.graph.block",
        AppBskyGraphDefs: "app.bsky.graph.defs",
        AppBskyGraphFollow: "app.bsky.graph.follow",
        AppBskyGraphGetActorStarterPacks: "app.bsky.graph.getActorStarterPacks",
        AppBskyGraphGetBlocks: "app.bsky.graph.getBlocks",
        AppBskyGraphGetFollowers: "app.bsky.graph.getFollowers",
        AppBskyGraphGetFollows: "app.bsky.graph.getFollows",
        AppBskyGraphGetKnownFollowers: "app.bsky.graph.getKnownFollowers",
        AppBskyGraphGetList: "app.bsky.graph.getList",
        AppBskyGraphGetListBlocks: "app.bsky.graph.getListBlocks",
        AppBskyGraphGetListMutes: "app.bsky.graph.getListMutes",
        AppBskyGraphGetLists: "app.bsky.graph.getLists",
        AppBskyGraphGetMutes: "app.bsky.graph.getMutes",
        AppBskyGraphGetRelationships: "app.bsky.graph.getRelationships",
        AppBskyGraphGetStarterPack: "app.bsky.graph.getStarterPack",
        AppBskyGraphGetStarterPacks: "app.bsky.graph.getStarterPacks",
        AppBskyGraphGetSuggestedFollowsByActor: "app.bsky.graph.getSuggestedFollowsByActor",
        AppBskyGraphList: "app.bsky.graph.list",
        AppBskyGraphListblock: "app.bsky.graph.listblock",
        AppBskyGraphListitem: "app.bsky.graph.listitem",
        AppBskyGraphMuteActor: "app.bsky.graph.muteActor",
        AppBskyGraphMuteActorList: "app.bsky.graph.muteActorList",
        AppBskyGraphMuteThread: "app.bsky.graph.muteThread",
        AppBskyGraphSearchStarterPacks: "app.bsky.graph.searchStarterPacks",
        AppBskyGraphStarterpack: "app.bsky.graph.starterpack",
        AppBskyGraphUnmuteActor: "app.bsky.graph.unmuteActor",
        AppBskyGraphUnmuteActorList: "app.bsky.graph.unmuteActorList",
        AppBskyGraphUnmuteThread: "app.bsky.graph.unmuteThread",
        AppBskyGraphVerification: "app.bsky.graph.verification",
        AppBskyLabelerDefs: "app.bsky.labeler.defs",
        AppBskyLabelerGetServices: "app.bsky.labeler.getServices",
        AppBskyLabelerService: "app.bsky.labeler.service",
        AppBskyNotificationDefs: "app.bsky.notification.defs",
        AppBskyNotificationGetUnreadCount: "app.bsky.notification.getUnreadCount",
        AppBskyNotificationListNotifications: "app.bsky.notification.listNotifications",
        AppBskyNotificationPutPreferences: "app.bsky.notification.putPreferences",
        AppBskyNotificationRegisterPush: "app.bsky.notification.registerPush",
        AppBskyNotificationUpdateSeen: "app.bsky.notification.updateSeen",
        AppBskyRichtextFacet: "app.bsky.richtext.facet",
        AppBskyUnspeccedDefs: "app.bsky.unspecced.defs",
        AppBskyUnspeccedGetConfig: "app.bsky.unspecced.getConfig",
        AppBskyUnspeccedGetPopularFeedGenerators: "app.bsky.unspecced.getPopularFeedGenerators",
        AppBskyUnspeccedGetSuggestedFeeds: "app.bsky.unspecced.getSuggestedFeeds",
        AppBskyUnspeccedGetSuggestedFeedsSkeleton: "app.bsky.unspecced.getSuggestedFeedsSkeleton",
        AppBskyUnspeccedGetSuggestedStarterPacks: "app.bsky.unspecced.getSuggestedStarterPacks",
        AppBskyUnspeccedGetSuggestedStarterPacksSkeleton: "app.bsky.unspecced.getSuggestedStarterPacksSkeleton",
        AppBskyUnspeccedGetSuggestedUsers: "app.bsky.unspecced.getSuggestedUsers",
        AppBskyUnspeccedGetSuggestedUsersSkeleton: "app.bsky.unspecced.getSuggestedUsersSkeleton",
        AppBskyUnspeccedGetSuggestionsSkeleton: "app.bsky.unspecced.getSuggestionsSkeleton",
        AppBskyUnspeccedGetTaggedSuggestions: "app.bsky.unspecced.getTaggedSuggestions",
        AppBskyUnspeccedGetTrendingTopics: "app.bsky.unspecced.getTrendingTopics",
        AppBskyUnspeccedGetTrends: "app.bsky.unspecced.getTrends",
        AppBskyUnspeccedGetTrendsSkeleton: "app.bsky.unspecced.getTrendsSkeleton",
        AppBskyUnspeccedSearchActorsSkeleton: "app.bsky.unspecced.searchActorsSkeleton",
        AppBskyUnspeccedSearchPostsSkeleton: "app.bsky.unspecced.searchPostsSkeleton",
        AppBskyUnspeccedSearchStarterPacksSkeleton: "app.bsky.unspecced.searchStarterPacksSkeleton",
        AppBskyVideoDefs: "app.bsky.video.defs",
        AppBskyVideoGetJobStatus: "app.bsky.video.getJobStatus",
        AppBskyVideoGetUploadLimits: "app.bsky.video.getUploadLimits",
        AppBskyVideoUploadVideo: "app.bsky.video.uploadVideo",
        ChatBskyActorDeclaration: "chat.bsky.actor.declaration",
        ChatBskyActorDefs: "chat.bsky.actor.defs",
        ChatBskyActorDeleteAccount: "chat.bsky.actor.deleteAccount",
        ChatBskyActorExportAccountData: "chat.bsky.actor.exportAccountData",
        ChatBskyConvoAcceptConvo: "chat.bsky.convo.acceptConvo",
        ChatBskyConvoAddReaction: "chat.bsky.convo.addReaction",
        ChatBskyConvoDefs: "chat.bsky.convo.defs",
        ChatBskyConvoDeleteMessageForSelf: "chat.bsky.convo.deleteMessageForSelf",
        ChatBskyConvoGetConvo: "chat.bsky.convo.getConvo",
        ChatBskyConvoGetConvoAvailability: "chat.bsky.convo.getConvoAvailability",
        ChatBskyConvoGetConvoForMembers: "chat.bsky.convo.getConvoForMembers",
        ChatBskyConvoGetLog: "chat.bsky.convo.getLog",
        ChatBskyConvoGetMessages: "chat.bsky.convo.getMessages",
        ChatBskyConvoLeaveConvo: "chat.bsky.convo.leaveConvo",
        ChatBskyConvoListConvos: "chat.bsky.convo.listConvos",
        ChatBskyConvoMuteConvo: "chat.bsky.convo.muteConvo",
        ChatBskyConvoRemoveReaction: "chat.bsky.convo.removeReaction",
        ChatBskyConvoSendMessage: "chat.bsky.convo.sendMessage",
        ChatBskyConvoSendMessageBatch: "chat.bsky.convo.sendMessageBatch",
        ChatBskyConvoUnmuteConvo: "chat.bsky.convo.unmuteConvo",
        ChatBskyConvoUpdateAllRead: "chat.bsky.convo.updateAllRead",
        ChatBskyConvoUpdateRead: "chat.bsky.convo.updateRead",
        ChatBskyModerationGetActorMetadata: "chat.bsky.moderation.getActorMetadata",
        ChatBskyModerationGetMessageContext: "chat.bsky.moderation.getMessageContext",
        ChatBskyModerationUpdateActorAccess: "chat.bsky.moderation.updateActorAccess",
        ToolsOzoneCommunicationCreateTemplate: "tools.ozone.communication.createTemplate",
        ToolsOzoneCommunicationDefs: "tools.ozone.communication.defs",
        ToolsOzoneCommunicationDeleteTemplate: "tools.ozone.communication.deleteTemplate",
        ToolsOzoneCommunicationListTemplates: "tools.ozone.communication.listTemplates",
        ToolsOzoneCommunicationUpdateTemplate: "tools.ozone.communication.updateTemplate",
        ToolsOzoneHostingGetAccountHistory: "tools.ozone.hosting.getAccountHistory",
        ToolsOzoneModerationDefs: "tools.ozone.moderation.defs",
        ToolsOzoneModerationEmitEvent: "tools.ozone.moderation.emitEvent",
        ToolsOzoneModerationGetEvent: "tools.ozone.moderation.getEvent",
        ToolsOzoneModerationGetRecord: "tools.ozone.moderation.getRecord",
        ToolsOzoneModerationGetRecords: "tools.ozone.moderation.getRecords",
        ToolsOzoneModerationGetRepo: "tools.ozone.moderation.getRepo",
        ToolsOzoneModerationGetReporterStats: "tools.ozone.moderation.getReporterStats",
        ToolsOzoneModerationGetRepos: "tools.ozone.moderation.getRepos",
        ToolsOzoneModerationGetSubjects: "tools.ozone.moderation.getSubjects",
        ToolsOzoneModerationQueryEvents: "tools.ozone.moderation.queryEvents",
        ToolsOzoneModerationQueryStatuses: "tools.ozone.moderation.queryStatuses",
        ToolsOzoneModerationSearchRepos: "tools.ozone.moderation.searchRepos",
        ToolsOzoneServerGetConfig: "tools.ozone.server.getConfig",
        ToolsOzoneSetAddValues: "tools.ozone.set.addValues",
        ToolsOzoneSetDefs: "tools.ozone.set.defs",
        ToolsOzoneSetDeleteSet: "tools.ozone.set.deleteSet",
        ToolsOzoneSetDeleteValues: "tools.ozone.set.deleteValues",
        ToolsOzoneSetGetValues: "tools.ozone.set.getValues",
        ToolsOzoneSetQuerySets: "tools.ozone.set.querySets",
        ToolsOzoneSetUpsertSet: "tools.ozone.set.upsertSet",
        ToolsOzoneSettingDefs: "tools.ozone.setting.defs",
        ToolsOzoneSettingListOptions: "tools.ozone.setting.listOptions",
        ToolsOzoneSettingRemoveOptions: "tools.ozone.setting.removeOptions",
        ToolsOzoneSettingUpsertOption: "tools.ozone.setting.upsertOption",
        ToolsOzoneSignatureDefs: "tools.ozone.signature.defs",
        ToolsOzoneSignatureFindCorrelation: "tools.ozone.signature.findCorrelation",
        ToolsOzoneSignatureFindRelatedAccounts: "tools.ozone.signature.findRelatedAccounts",
        ToolsOzoneSignatureSearchAccounts: "tools.ozone.signature.searchAccounts",
        ToolsOzoneTeamAddMember: "tools.ozone.team.addMember",
        ToolsOzoneTeamDefs: "tools.ozone.team.defs",
        ToolsOzoneTeamDeleteMember: "tools.ozone.team.deleteMember",
        ToolsOzoneTeamListMembers: "tools.ozone.team.listMembers",
        ToolsOzoneTeamUpdateMember: "tools.ozone.team.updateMember",
        ToolsOzoneVerificationDefs: "tools.ozone.verification.defs",
        ToolsOzoneVerificationGrantVerifications: "tools.ozone.verification.grantVerifications",
        ToolsOzoneVerificationListVerifications: "tools.ozone.verification.listVerifications",
        ToolsOzoneVerificationRevokeVerifications: "tools.ozone.verification.revokeVerifications"
      };
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/types.js
  var require_types6 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/const.js
  var require_const = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/const.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BSKY_LABELER_DID = void 0;
      exports.BSKY_LABELER_DID = "did:plc:ar7c4by46qjdydhdevvrndac";
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/util.js
  var require_util15 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.nuxSchema = exports.asDid = exports.isDid = void 0;
      exports.sanitizeMutedWordValue = sanitizeMutedWordValue;
      exports.savedFeedsToUriArrays = savedFeedsToUriArrays;
      exports.getSavedFeedType = getSavedFeedType;
      exports.validateSavedFeed = validateSavedFeed;
      exports.validateNux = validateNux;
      var zod_1 = require_cjs();
      var common_web_1 = require_dist16();
      var syntax_1 = require_dist12();
      function sanitizeMutedWordValue(value) {
        return value.trim().replace(/^#(?!\ufe0f)/, "").replace(/[\r\n\u00AD\u2060\u200D\u200C\u200B]+/, "");
      }
      function savedFeedsToUriArrays(savedFeeds) {
        const pinned = [];
        const saved = [];
        for (const feed of savedFeeds) {
          if (feed.pinned) {
            pinned.push(feed.value);
            saved.push(feed.value);
          } else {
            saved.push(feed.value);
          }
        }
        return {
          pinned,
          saved
        };
      }
      function getSavedFeedType(uri) {
        const urip = new syntax_1.AtUri(uri);
        switch (urip.collection) {
          case "app.bsky.feed.generator":
            return "feed";
          case "app.bsky.graph.list":
            return "list";
          default:
            return "unknown";
        }
      }
      function validateSavedFeed(savedFeed) {
        new common_web_1.TID(savedFeed.id);
        if (["feed", "list"].includes(savedFeed.type)) {
          const uri = new syntax_1.AtUri(savedFeed.value);
          const isFeed = uri.collection === "app.bsky.feed.generator";
          const isList = uri.collection === "app.bsky.graph.list";
          if (savedFeed.type === "feed" && !isFeed) {
            throw new Error(`Saved feed of type 'feed' must be a feed, got ${uri.collection}`);
          }
          if (savedFeed.type === "list" && !isList) {
            throw new Error(`Saved feed of type 'list' must be a list, got ${uri.collection}`);
          }
        }
      }
      var isDid = (str) => typeof str === "string" && str.startsWith("did:") && str.includes(":", 4) && str.length > 8 && str.length <= 2048;
      exports.isDid = isDid;
      var asDid = (value) => {
        if ((0, exports.isDid)(value))
          return value;
        throw new TypeError(`Invalid DID: ${value}`);
      };
      exports.asDid = asDid;
      exports.nuxSchema = zod_1.z.object({
        id: zod_1.z.string().max(64),
        completed: zod_1.z.boolean(),
        data: zod_1.z.string().max(300).optional(),
        expiresAt: zod_1.z.string().datetime().optional()
      }).strict();
      function validateNux(nux) {
        exports.nuxSchema.parse(nux);
      }
    }
  });

  // node_modules/.pnpm/@atproto+xrpc@0.7.0/node_modules/@atproto/xrpc/dist/types.js
  var require_types7 = __commonJS({
    "node_modules/.pnpm/@atproto+xrpc@0.7.0/node_modules/@atproto/xrpc/dist/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.XRPCInvalidResponseError = exports.XRPCError = exports.XRPCResponse = exports.ResponseTypeStrings = exports.ResponseType = exports.errorResponseBody = void 0;
      exports.httpResponseCodeToEnum = httpResponseCodeToEnum;
      exports.httpResponseCodeToName = httpResponseCodeToName;
      exports.httpResponseCodeToString = httpResponseCodeToString;
      var zod_1 = require_cjs();
      exports.errorResponseBody = zod_1.z.object({
        error: zod_1.z.string().optional(),
        message: zod_1.z.string().optional()
      });
      var ResponseType;
      (function(ResponseType2) {
        ResponseType2[ResponseType2["Unknown"] = 1] = "Unknown";
        ResponseType2[ResponseType2["InvalidResponse"] = 2] = "InvalidResponse";
        ResponseType2[ResponseType2["Success"] = 200] = "Success";
        ResponseType2[ResponseType2["InvalidRequest"] = 400] = "InvalidRequest";
        ResponseType2[ResponseType2["AuthenticationRequired"] = 401] = "AuthenticationRequired";
        ResponseType2[ResponseType2["Forbidden"] = 403] = "Forbidden";
        ResponseType2[ResponseType2["XRPCNotSupported"] = 404] = "XRPCNotSupported";
        ResponseType2[ResponseType2["NotAcceptable"] = 406] = "NotAcceptable";
        ResponseType2[ResponseType2["PayloadTooLarge"] = 413] = "PayloadTooLarge";
        ResponseType2[ResponseType2["UnsupportedMediaType"] = 415] = "UnsupportedMediaType";
        ResponseType2[ResponseType2["RateLimitExceeded"] = 429] = "RateLimitExceeded";
        ResponseType2[ResponseType2["InternalServerError"] = 500] = "InternalServerError";
        ResponseType2[ResponseType2["MethodNotImplemented"] = 501] = "MethodNotImplemented";
        ResponseType2[ResponseType2["UpstreamFailure"] = 502] = "UpstreamFailure";
        ResponseType2[ResponseType2["NotEnoughResources"] = 503] = "NotEnoughResources";
        ResponseType2[ResponseType2["UpstreamTimeout"] = 504] = "UpstreamTimeout";
      })(ResponseType || (exports.ResponseType = ResponseType = {}));
      function httpResponseCodeToEnum(status) {
        if (status in ResponseType) {
          return status;
        } else if (status >= 100 && status < 200) {
          return ResponseType.XRPCNotSupported;
        } else if (status >= 200 && status < 300) {
          return ResponseType.Success;
        } else if (status >= 300 && status < 400) {
          return ResponseType.XRPCNotSupported;
        } else if (status >= 400 && status < 500) {
          return ResponseType.InvalidRequest;
        } else {
          return ResponseType.InternalServerError;
        }
      }
      function httpResponseCodeToName(status) {
        return ResponseType[httpResponseCodeToEnum(status)];
      }
      exports.ResponseTypeStrings = {
        [ResponseType.Unknown]: "Unknown",
        [ResponseType.InvalidResponse]: "Invalid Response",
        [ResponseType.Success]: "Success",
        [ResponseType.InvalidRequest]: "Invalid Request",
        [ResponseType.AuthenticationRequired]: "Authentication Required",
        [ResponseType.Forbidden]: "Forbidden",
        [ResponseType.XRPCNotSupported]: "XRPC Not Supported",
        [ResponseType.NotAcceptable]: "Not Acceptable",
        [ResponseType.PayloadTooLarge]: "Payload Too Large",
        [ResponseType.UnsupportedMediaType]: "Unsupported Media Type",
        [ResponseType.RateLimitExceeded]: "Rate Limit Exceeded",
        [ResponseType.InternalServerError]: "Internal Server Error",
        [ResponseType.MethodNotImplemented]: "Method Not Implemented",
        [ResponseType.UpstreamFailure]: "Upstream Failure",
        [ResponseType.NotEnoughResources]: "Not Enough Resources",
        [ResponseType.UpstreamTimeout]: "Upstream Timeout"
      };
      function httpResponseCodeToString(status) {
        return exports.ResponseTypeStrings[httpResponseCodeToEnum(status)];
      }
      var XRPCResponse = class {
        constructor(data, headers) {
          Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: data
          });
          Object.defineProperty(this, "headers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: headers
          });
          Object.defineProperty(this, "success", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
          });
        }
      };
      exports.XRPCResponse = XRPCResponse;
      var XRPCError = class _XRPCError extends Error {
        constructor(statusCode, error = httpResponseCodeToName(statusCode), message2, headers, options) {
          super(message2 || error || httpResponseCodeToString(statusCode), options);
          Object.defineProperty(this, "error", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: error
          });
          Object.defineProperty(this, "headers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: headers
          });
          Object.defineProperty(this, "success", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
          });
          Object.defineProperty(this, "status", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.status = httpResponseCodeToEnum(statusCode);
          const cause = options?.cause;
          if (this.cause === void 0 && cause !== void 0) {
            this.cause = cause;
          }
        }
        static from(cause, fallbackStatus) {
          if (cause instanceof _XRPCError) {
            return cause;
          }
          const causeErr = cause instanceof Error ? cause : void 0;
          const causeResponse = cause instanceof Response ? cause : cause?.["response"] instanceof Response ? cause["response"] : void 0;
          const statusCode = (
            // Extract status code from "http-errors" like errors
            causeErr?.["statusCode"] ?? causeErr?.["status"] ?? // Use the status code from the response object as fallback
            causeResponse?.status
          );
          const status = typeof statusCode === "number" ? httpResponseCodeToEnum(statusCode) : fallbackStatus ?? ResponseType.Unknown;
          const message2 = causeErr?.message ?? String(cause);
          const headers = causeResponse ? Object.fromEntries(causeResponse.headers.entries()) : void 0;
          return new _XRPCError(status, void 0, message2, headers, { cause });
        }
      };
      exports.XRPCError = XRPCError;
      var XRPCInvalidResponseError = class extends XRPCError {
        constructor(lexiconNsid, validationError, responseBody) {
          super(
            ResponseType.InvalidResponse,
            // @NOTE: This is probably wrong and should use ResponseTypeNames instead.
            // But it would mean a breaking change.
            exports.ResponseTypeStrings[ResponseType.InvalidResponse],
            `The server gave an invalid response and may be out of date.`,
            void 0,
            { cause: validationError }
          );
          Object.defineProperty(this, "lexiconNsid", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: lexiconNsid
          });
          Object.defineProperty(this, "validationError", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: validationError
          });
          Object.defineProperty(this, "responseBody", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: responseBody
          });
        }
      };
      exports.XRPCInvalidResponseError = XRPCInvalidResponseError;
    }
  });

  // node_modules/.pnpm/@atproto+xrpc@0.7.0/node_modules/@atproto/xrpc/dist/util.js
  var require_util16 = __commonJS({
    "node_modules/.pnpm/@atproto+xrpc@0.7.0/node_modules/@atproto/xrpc/dist/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isErrorResponseBody = isErrorResponseBody;
      exports.getMethodSchemaHTTPMethod = getMethodSchemaHTTPMethod;
      exports.constructMethodCallUri = constructMethodCallUri;
      exports.constructMethodCallUrl = constructMethodCallUrl;
      exports.encodeQueryParam = encodeQueryParam;
      exports.constructMethodCallHeaders = constructMethodCallHeaders;
      exports.combineHeaders = combineHeaders;
      exports.isBodyInit = isBodyInit;
      exports.isIterable = isIterable;
      exports.encodeMethodCallBody = encodeMethodCallBody;
      exports.httpResponseBodyParse = httpResponseBodyParse;
      var lexicon_1 = require_dist18();
      var types_1 = require_types7();
      var ReadableStream = globalThis.ReadableStream || class {
        constructor() {
          throw new Error("ReadableStream is not supported in this environment");
        }
      };
      function isErrorResponseBody(v) {
        return types_1.errorResponseBody.safeParse(v).success;
      }
      function getMethodSchemaHTTPMethod(schema) {
        if (schema.type === "procedure") {
          return "post";
        }
        return "get";
      }
      function constructMethodCallUri(nsid, schema, serviceUri, params) {
        const uri = new URL(constructMethodCallUrl(nsid, schema, params), serviceUri);
        return uri.toString();
      }
      function constructMethodCallUrl(nsid, schema, params) {
        const pathname = `/xrpc/${encodeURIComponent(nsid)}`;
        if (!params)
          return pathname;
        const searchParams = [];
        for (const [key, value] of Object.entries(params)) {
          const paramSchema = schema.parameters?.properties?.[key];
          if (!paramSchema) {
            throw new Error(`Invalid query parameter: ${key}`);
          }
          if (value !== void 0) {
            if (paramSchema.type === "array") {
              const values = Array.isArray(value) ? value : [value];
              for (const val of values) {
                searchParams.push([
                  key,
                  encodeQueryParam(paramSchema.items.type, val)
                ]);
              }
            } else {
              searchParams.push([key, encodeQueryParam(paramSchema.type, value)]);
            }
          }
        }
        if (!searchParams.length)
          return pathname;
        return `${pathname}?${new URLSearchParams(searchParams).toString()}`;
      }
      function encodeQueryParam(type, value) {
        if (type === "string" || type === "unknown") {
          return String(value);
        }
        if (type === "float") {
          return String(Number(value));
        } else if (type === "integer") {
          return String(Number(value) | 0);
        } else if (type === "boolean") {
          return value ? "true" : "false";
        } else if (type === "datetime") {
          if (value instanceof Date) {
            return value.toISOString();
          }
          return String(value);
        }
        throw new Error(`Unsupported query param type: ${type}`);
      }
      function constructMethodCallHeaders(schema, data, opts) {
        const headers = new Headers();
        if (opts?.headers) {
          for (const name2 in opts.headers) {
            if (headers.has(name2)) {
              throw new TypeError(`Duplicate header: ${name2}`);
            }
            const value = opts.headers[name2];
            if (value != null) {
              headers.set(name2, value);
            }
          }
        }
        if (schema.type === "procedure") {
          if (opts?.encoding) {
            headers.set("content-type", opts.encoding);
          } else if (!headers.has("content-type") && typeof data !== "undefined") {
            if (data instanceof ArrayBuffer || data instanceof ReadableStream || ArrayBuffer.isView(data)) {
              headers.set("content-type", "application/octet-stream");
            } else if (data instanceof FormData) {
              headers.set("content-type", "multipart/form-data");
            } else if (data instanceof URLSearchParams) {
              headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
            } else if (isBlobLike(data)) {
              headers.set("content-type", data.type || "application/octet-stream");
            } else if (typeof data === "string") {
              headers.set("content-type", "text/plain;charset=UTF-8");
            } else if (isIterable(data)) {
              headers.set("content-type", "application/octet-stream");
            } else if (typeof data === "boolean" || typeof data === "number" || typeof data === "string" || typeof data === "object") {
              headers.set("content-type", "application/json");
            } else {
              throw new types_1.XRPCError(types_1.ResponseType.InvalidRequest, `Unsupported data type: ${typeof data}`);
            }
          }
        }
        return headers;
      }
      function combineHeaders(headersInit, defaultHeaders) {
        if (!defaultHeaders)
          return headersInit;
        let headers = void 0;
        for (const [name2, definition] of defaultHeaders) {
          if (definition === void 0)
            continue;
          headers ?? (headers = new Headers(headersInit));
          if (headers.has(name2))
            continue;
          const value = typeof definition === "function" ? definition() : definition;
          if (typeof value === "string")
            headers.set(name2, value);
          else if (value === null)
            headers.delete(name2);
          else
            throw new TypeError(`Invalid "${name2}" header value: ${typeof value}`);
        }
        return headers ?? headersInit;
      }
      function isBlobLike(value) {
        if (value == null)
          return false;
        if (typeof value !== "object")
          return false;
        if (typeof Blob === "function" && value instanceof Blob)
          return true;
        const tag2 = value[Symbol.toStringTag];
        if (tag2 === "Blob" || tag2 === "File") {
          return "stream" in value && typeof value.stream === "function";
        }
        return false;
      }
      function isBodyInit(value) {
        switch (typeof value) {
          case "string":
            return true;
          case "object":
            return value instanceof ArrayBuffer || value instanceof FormData || value instanceof URLSearchParams || value instanceof ReadableStream || ArrayBuffer.isView(value) || isBlobLike(value);
          default:
            return false;
        }
      }
      function isIterable(value) {
        return value != null && typeof value === "object" && (Symbol.iterator in value || Symbol.asyncIterator in value);
      }
      function encodeMethodCallBody(headers, data) {
        const contentType = headers.get("content-type");
        if (!contentType) {
          return void 0;
        }
        if (typeof data === "undefined") {
          throw new types_1.XRPCError(types_1.ResponseType.InvalidRequest, `A request body is expected but none was provided`);
        }
        if (isBodyInit(data)) {
          if (data instanceof FormData && contentType === "multipart/form-data") {
            headers.delete("content-type");
          }
          return data;
        }
        if (isIterable(data)) {
          return iterableToReadableStream(data);
        }
        if (contentType.startsWith("text/")) {
          return new TextEncoder().encode(String(data));
        }
        if (contentType.startsWith("application/json")) {
          const json = (0, lexicon_1.stringifyLex)(data);
          if (json === void 0) {
            throw new types_1.XRPCError(types_1.ResponseType.InvalidRequest, `Failed to encode request body as JSON`);
          }
          return new TextEncoder().encode(json);
        }
        const type = !data || typeof data !== "object" ? typeof data : data.constructor !== Object && typeof data.constructor === "function" && typeof data.constructor?.name === "string" ? data.constructor.name : "object";
        throw new types_1.XRPCError(types_1.ResponseType.InvalidRequest, `Unable to encode ${type} as ${contentType} data`);
      }
      function iterableToReadableStream(iterable) {
        if ("from" in ReadableStream && typeof ReadableStream.from === "function") {
          return ReadableStream.from(iterable);
        }
        throw new TypeError("ReadableStream.from() is not supported in this environment. It is required to support using iterables as the request body. Consider using a polyfill or re-write your code to use a different body type.");
      }
      function httpResponseBodyParse(mimeType, data) {
        try {
          if (mimeType) {
            if (mimeType.includes("application/json")) {
              const str = new TextDecoder().decode(data);
              return (0, lexicon_1.jsonStringToLex)(str);
            }
            if (mimeType.startsWith("text/")) {
              return new TextDecoder().decode(data);
            }
          }
          if (data instanceof ArrayBuffer) {
            return new Uint8Array(data);
          }
          return data;
        } catch (cause) {
          throw new types_1.XRPCError(types_1.ResponseType.InvalidResponse, void 0, `Failed to parse response body: ${String(cause)}`, void 0, { cause });
        }
      }
    }
  });

  // node_modules/.pnpm/@atproto+xrpc@0.7.0/node_modules/@atproto/xrpc/dist/fetch-handler.js
  var require_fetch_handler = __commonJS({
    "node_modules/.pnpm/@atproto+xrpc@0.7.0/node_modules/@atproto/xrpc/dist/fetch-handler.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.buildFetchHandler = buildFetchHandler;
      var util_1 = require_util16();
      function buildFetchHandler(options) {
        if (typeof options === "function")
          return options;
        if (typeof options === "object" && "fetchHandler" in options) {
          return options.fetchHandler.bind(options);
        }
        const { service, headers: defaultHeaders = void 0, fetch: fetch2 = globalThis.fetch } = typeof options === "string" || options instanceof URL ? { service: options } : options;
        if (typeof fetch2 !== "function") {
          throw new TypeError("XrpcDispatcher requires fetch() to be available in your environment.");
        }
        const defaultHeadersEntries = defaultHeaders != null ? Object.entries(defaultHeaders) : void 0;
        return async function(url, init) {
          const base3 = typeof service === "function" ? service() : service;
          const fullUrl = new URL(url, base3);
          const headers = (0, util_1.combineHeaders)(init.headers, defaultHeadersEntries);
          return fetch2(fullUrl, { ...init, headers });
        };
      }
    }
  });

  // node_modules/.pnpm/@atproto+xrpc@0.7.0/node_modules/@atproto/xrpc/dist/xrpc-client.js
  var require_xrpc_client = __commonJS({
    "node_modules/.pnpm/@atproto+xrpc@0.7.0/node_modules/@atproto/xrpc/dist/xrpc-client.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.XrpcClient = void 0;
      var lexicon_1 = require_dist18();
      var fetch_handler_1 = require_fetch_handler();
      var types_1 = require_types7();
      var util_1 = require_util16();
      var XrpcClient = class {
        constructor(fetchHandlerOpts, lex) {
          Object.defineProperty(this, "fetchHandler", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "headers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: /* @__PURE__ */ new Map()
          });
          Object.defineProperty(this, "lex", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.fetchHandler = (0, fetch_handler_1.buildFetchHandler)(fetchHandlerOpts);
          this.lex = lex instanceof lexicon_1.Lexicons ? lex : new lexicon_1.Lexicons(lex);
        }
        setHeader(key, value) {
          this.headers.set(key.toLowerCase(), value);
        }
        unsetHeader(key) {
          this.headers.delete(key.toLowerCase());
        }
        clearHeaders() {
          this.headers.clear();
        }
        async call(methodNsid, params, data, opts) {
          const def = this.lex.getDefOrThrow(methodNsid);
          if (!def || def.type !== "query" && def.type !== "procedure") {
            throw new TypeError(`Invalid lexicon: ${methodNsid}. Must be a query or procedure.`);
          }
          const reqUrl = (0, util_1.constructMethodCallUrl)(methodNsid, def, params);
          const reqMethod = (0, util_1.getMethodSchemaHTTPMethod)(def);
          const reqHeaders = (0, util_1.constructMethodCallHeaders)(def, data, opts);
          const reqBody = (0, util_1.encodeMethodCallBody)(reqHeaders, data);
          const init = {
            method: reqMethod,
            headers: (0, util_1.combineHeaders)(reqHeaders, this.headers),
            body: reqBody,
            duplex: "half",
            signal: opts?.signal
          };
          try {
            const response = await this.fetchHandler.call(void 0, reqUrl, init);
            const resStatus = response.status;
            const resHeaders = Object.fromEntries(response.headers.entries());
            const resBodyBytes = await response.arrayBuffer();
            const resBody = (0, util_1.httpResponseBodyParse)(response.headers.get("content-type"), resBodyBytes);
            const resCode = (0, types_1.httpResponseCodeToEnum)(resStatus);
            if (resCode !== types_1.ResponseType.Success) {
              const { error = void 0, message: message2 = void 0 } = resBody && (0, util_1.isErrorResponseBody)(resBody) ? resBody : {};
              throw new types_1.XRPCError(resCode, error, message2, resHeaders);
            }
            try {
              this.lex.assertValidXrpcOutput(methodNsid, resBody);
            } catch (e) {
              if (e instanceof lexicon_1.ValidationError) {
                throw new types_1.XRPCInvalidResponseError(methodNsid, e, resBody);
              }
              throw e;
            }
            return new types_1.XRPCResponse(resBody, resHeaders);
          } catch (err) {
            throw types_1.XRPCError.from(err);
          }
        }
      };
      exports.XrpcClient = XrpcClient;
    }
  });

  // node_modules/.pnpm/@atproto+xrpc@0.7.0/node_modules/@atproto/xrpc/dist/client.js
  var require_client2 = __commonJS({
    "node_modules/.pnpm/@atproto+xrpc@0.7.0/node_modules/@atproto/xrpc/dist/client.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ServiceClient = exports.Client = void 0;
      var lexicon_1 = require_dist18();
      var util_1 = require_util16();
      var xrpc_client_1 = require_xrpc_client();
      var Client = class {
        constructor() {
          Object.defineProperty(this, "lex", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new lexicon_1.Lexicons()
          });
        }
        /** @deprecated */
        get fetch() {
          throw new Error("Client.fetch is no longer supported. Use an XrpcClient instead.");
        }
        /** @deprecated */
        set fetch(_) {
          throw new Error("Client.fetch is no longer supported. Use an XrpcClient instead.");
        }
        // method calls
        //
        async call(serviceUri, methodNsid, params, data, opts) {
          return this.service(serviceUri).call(methodNsid, params, data, opts);
        }
        service(serviceUri) {
          return new ServiceClient(this, serviceUri);
        }
        // schemas
        // =
        addLexicon(doc) {
          this.lex.add(doc);
        }
        addLexicons(docs) {
          for (const doc of docs) {
            this.addLexicon(doc);
          }
        }
        removeLexicon(uri) {
          this.lex.remove(uri);
        }
      };
      exports.Client = Client;
      var ServiceClient = class extends xrpc_client_1.XrpcClient {
        constructor(baseClient, serviceUri) {
          super(async (input, init) => {
            const headers = (0, util_1.combineHeaders)(init.headers, Object.entries(this.headers));
            return fetch(new URL(input, this.uri), { ...init, headers });
          }, baseClient.lex);
          Object.defineProperty(this, "baseClient", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: baseClient
          });
          Object.defineProperty(this, "uri", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.uri = typeof serviceUri === "string" ? new URL(serviceUri) : serviceUri;
        }
      };
      exports.ServiceClient = ServiceClient;
    }
  });

  // node_modules/.pnpm/@atproto+xrpc@0.7.0/node_modules/@atproto/xrpc/dist/index.js
  var require_dist19 = __commonJS({
    "node_modules/.pnpm/@atproto+xrpc@0.7.0/node_modules/@atproto/xrpc/dist/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_client2(), exports);
      __exportStar(require_fetch_handler(), exports);
      __exportStar(require_types7(), exports);
      __exportStar(require_util16(), exports);
      __exportStar(require_xrpc_client(), exports);
      var client_1 = require_client2();
      var defaultInst = new client_1.Client();
      exports.default = defaultInst;
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/identity/refreshIdentity.js
  var require_refreshIdentity = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/identity/refreshIdentity.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DidDeactivatedError = exports.DidNotFoundError = exports.HandleNotFoundError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var HandleNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.HandleNotFoundError = HandleNotFoundError;
      var DidNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.DidNotFoundError = DidNotFoundError;
      var DidDeactivatedError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.DidDeactivatedError = DidDeactivatedError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "HandleNotFound")
            return new HandleNotFoundError(e);
          if (e.error === "DidNotFound")
            return new DidNotFoundError(e);
          if (e.error === "DidDeactivated")
            return new DidDeactivatedError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/identity/resolveDid.js
  var require_resolveDid = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/identity/resolveDid.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DidDeactivatedError = exports.DidNotFoundError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var DidNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.DidNotFoundError = DidNotFoundError;
      var DidDeactivatedError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.DidDeactivatedError = DidDeactivatedError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "DidNotFound")
            return new DidNotFoundError(e);
          if (e.error === "DidDeactivated")
            return new DidDeactivatedError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/identity/resolveHandle.js
  var require_resolveHandle = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/identity/resolveHandle.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.HandleNotFoundError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var HandleNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.HandleNotFoundError = HandleNotFoundError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "HandleNotFound")
            return new HandleNotFoundError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/identity/resolveIdentity.js
  var require_resolveIdentity = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/identity/resolveIdentity.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DidDeactivatedError = exports.DidNotFoundError = exports.HandleNotFoundError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var HandleNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.HandleNotFoundError = HandleNotFoundError;
      var DidNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.DidNotFoundError = DidNotFoundError;
      var DidDeactivatedError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.DidDeactivatedError = DidDeactivatedError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "HandleNotFound")
            return new HandleNotFoundError(e);
          if (e.error === "DidNotFound")
            return new DidNotFoundError(e);
          if (e.error === "DidDeactivated")
            return new DidDeactivatedError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/repo/applyWrites.js
  var require_applyWrites = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/repo/applyWrites.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InvalidSwapError = void 0;
      exports.toKnownErr = toKnownErr;
      exports.isCreate = isCreate;
      exports.validateCreate = validateCreate;
      exports.isUpdate = isUpdate;
      exports.validateUpdate = validateUpdate;
      exports.isDelete = isDelete;
      exports.validateDelete = validateDelete;
      exports.isCreateResult = isCreateResult;
      exports.validateCreateResult = validateCreateResult;
      exports.isUpdateResult = isUpdateResult;
      exports.validateUpdateResult = validateUpdateResult;
      exports.isDeleteResult = isDeleteResult;
      exports.validateDeleteResult = validateDeleteResult;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "com.atproto.repo.applyWrites";
      var InvalidSwapError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.InvalidSwapError = InvalidSwapError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "InvalidSwap")
            return new InvalidSwapError(e);
        }
        return e;
      }
      var hashCreate = "create";
      function isCreate(v) {
        return is$typed(v, id, hashCreate);
      }
      function validateCreate(v) {
        return validate(v, id, hashCreate);
      }
      var hashUpdate = "update";
      function isUpdate(v) {
        return is$typed(v, id, hashUpdate);
      }
      function validateUpdate(v) {
        return validate(v, id, hashUpdate);
      }
      var hashDelete = "delete";
      function isDelete(v) {
        return is$typed(v, id, hashDelete);
      }
      function validateDelete(v) {
        return validate(v, id, hashDelete);
      }
      var hashCreateResult = "createResult";
      function isCreateResult(v) {
        return is$typed(v, id, hashCreateResult);
      }
      function validateCreateResult(v) {
        return validate(v, id, hashCreateResult);
      }
      var hashUpdateResult = "updateResult";
      function isUpdateResult(v) {
        return is$typed(v, id, hashUpdateResult);
      }
      function validateUpdateResult(v) {
        return validate(v, id, hashUpdateResult);
      }
      var hashDeleteResult = "deleteResult";
      function isDeleteResult(v) {
        return is$typed(v, id, hashDeleteResult);
      }
      function validateDeleteResult(v) {
        return validate(v, id, hashDeleteResult);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/repo/createRecord.js
  var require_createRecord = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/repo/createRecord.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InvalidSwapError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var InvalidSwapError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.InvalidSwapError = InvalidSwapError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "InvalidSwap")
            return new InvalidSwapError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/repo/deleteRecord.js
  var require_deleteRecord = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/repo/deleteRecord.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InvalidSwapError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var InvalidSwapError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.InvalidSwapError = InvalidSwapError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "InvalidSwap")
            return new InvalidSwapError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/repo/getRecord.js
  var require_getRecord = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/repo/getRecord.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RecordNotFoundError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var RecordNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RecordNotFoundError = RecordNotFoundError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "RecordNotFound")
            return new RecordNotFoundError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/repo/putRecord.js
  var require_putRecord = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/repo/putRecord.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InvalidSwapError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var InvalidSwapError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.InvalidSwapError = InvalidSwapError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "InvalidSwap")
            return new InvalidSwapError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/confirmEmail.js
  var require_confirmEmail = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/confirmEmail.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InvalidEmailError = exports.InvalidTokenError = exports.ExpiredTokenError = exports.AccountNotFoundError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var AccountNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.AccountNotFoundError = AccountNotFoundError;
      var ExpiredTokenError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.ExpiredTokenError = ExpiredTokenError;
      var InvalidTokenError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.InvalidTokenError = InvalidTokenError;
      var InvalidEmailError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.InvalidEmailError = InvalidEmailError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "AccountNotFound")
            return new AccountNotFoundError(e);
          if (e.error === "ExpiredToken")
            return new ExpiredTokenError(e);
          if (e.error === "InvalidToken")
            return new InvalidTokenError(e);
          if (e.error === "InvalidEmail")
            return new InvalidEmailError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/createAccount.js
  var require_createAccount = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/createAccount.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.IncompatibleDidDocError = exports.UnresolvableDidError = exports.UnsupportedDomainError = exports.HandleNotAvailableError = exports.InvalidInviteCodeError = exports.InvalidPasswordError = exports.InvalidHandleError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var InvalidHandleError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.InvalidHandleError = InvalidHandleError;
      var InvalidPasswordError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.InvalidPasswordError = InvalidPasswordError;
      var InvalidInviteCodeError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.InvalidInviteCodeError = InvalidInviteCodeError;
      var HandleNotAvailableError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.HandleNotAvailableError = HandleNotAvailableError;
      var UnsupportedDomainError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.UnsupportedDomainError = UnsupportedDomainError;
      var UnresolvableDidError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.UnresolvableDidError = UnresolvableDidError;
      var IncompatibleDidDocError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.IncompatibleDidDocError = IncompatibleDidDocError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "InvalidHandle")
            return new InvalidHandleError(e);
          if (e.error === "InvalidPassword")
            return new InvalidPasswordError(e);
          if (e.error === "InvalidInviteCode")
            return new InvalidInviteCodeError(e);
          if (e.error === "HandleNotAvailable")
            return new HandleNotAvailableError(e);
          if (e.error === "UnsupportedDomain")
            return new UnsupportedDomainError(e);
          if (e.error === "UnresolvableDid")
            return new UnresolvableDidError(e);
          if (e.error === "IncompatibleDidDoc")
            return new IncompatibleDidDocError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/createAppPassword.js
  var require_createAppPassword = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/createAppPassword.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AccountTakedownError = void 0;
      exports.toKnownErr = toKnownErr;
      exports.isAppPassword = isAppPassword;
      exports.validateAppPassword = validateAppPassword;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "com.atproto.server.createAppPassword";
      var AccountTakedownError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.AccountTakedownError = AccountTakedownError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "AccountTakedown")
            return new AccountTakedownError(e);
        }
        return e;
      }
      var hashAppPassword = "appPassword";
      function isAppPassword(v) {
        return is$typed(v, id, hashAppPassword);
      }
      function validateAppPassword(v) {
        return validate(v, id, hashAppPassword);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/createSession.js
  var require_createSession = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/createSession.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AuthFactorTokenRequiredError = exports.AccountTakedownError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var AccountTakedownError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.AccountTakedownError = AccountTakedownError;
      var AuthFactorTokenRequiredError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.AuthFactorTokenRequiredError = AuthFactorTokenRequiredError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "AccountTakedown")
            return new AccountTakedownError(e);
          if (e.error === "AuthFactorTokenRequired")
            return new AuthFactorTokenRequiredError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/deleteAccount.js
  var require_deleteAccount = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/deleteAccount.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InvalidTokenError = exports.ExpiredTokenError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var ExpiredTokenError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.ExpiredTokenError = ExpiredTokenError;
      var InvalidTokenError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.InvalidTokenError = InvalidTokenError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "ExpiredToken")
            return new ExpiredTokenError(e);
          if (e.error === "InvalidToken")
            return new InvalidTokenError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/getAccountInviteCodes.js
  var require_getAccountInviteCodes = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/getAccountInviteCodes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DuplicateCreateError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var DuplicateCreateError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.DuplicateCreateError = DuplicateCreateError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "DuplicateCreate")
            return new DuplicateCreateError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/getServiceAuth.js
  var require_getServiceAuth = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/getServiceAuth.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BadExpirationError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var BadExpirationError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.BadExpirationError = BadExpirationError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "BadExpiration")
            return new BadExpirationError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/listAppPasswords.js
  var require_listAppPasswords = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/listAppPasswords.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AccountTakedownError = void 0;
      exports.toKnownErr = toKnownErr;
      exports.isAppPassword = isAppPassword;
      exports.validateAppPassword = validateAppPassword;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "com.atproto.server.listAppPasswords";
      var AccountTakedownError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.AccountTakedownError = AccountTakedownError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "AccountTakedown")
            return new AccountTakedownError(e);
        }
        return e;
      }
      var hashAppPassword = "appPassword";
      function isAppPassword(v) {
        return is$typed(v, id, hashAppPassword);
      }
      function validateAppPassword(v) {
        return validate(v, id, hashAppPassword);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/refreshSession.js
  var require_refreshSession = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/refreshSession.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AccountTakedownError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var AccountTakedownError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.AccountTakedownError = AccountTakedownError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "AccountTakedown")
            return new AccountTakedownError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/resetPassword.js
  var require_resetPassword = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/resetPassword.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InvalidTokenError = exports.ExpiredTokenError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var ExpiredTokenError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.ExpiredTokenError = ExpiredTokenError;
      var InvalidTokenError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.InvalidTokenError = InvalidTokenError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "ExpiredToken")
            return new ExpiredTokenError(e);
          if (e.error === "InvalidToken")
            return new InvalidTokenError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/updateEmail.js
  var require_updateEmail = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/updateEmail.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TokenRequiredError = exports.InvalidTokenError = exports.ExpiredTokenError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var ExpiredTokenError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.ExpiredTokenError = ExpiredTokenError;
      var InvalidTokenError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.InvalidTokenError = InvalidTokenError;
      var TokenRequiredError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.TokenRequiredError = TokenRequiredError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "ExpiredToken")
            return new ExpiredTokenError(e);
          if (e.error === "InvalidToken")
            return new InvalidTokenError(e);
          if (e.error === "TokenRequired")
            return new TokenRequiredError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getBlob.js
  var require_getBlob = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getBlob.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RepoDeactivatedError = exports.RepoSuspendedError = exports.RepoTakendownError = exports.RepoNotFoundError = exports.BlobNotFoundError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var BlobNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.BlobNotFoundError = BlobNotFoundError;
      var RepoNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RepoNotFoundError = RepoNotFoundError;
      var RepoTakendownError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RepoTakendownError = RepoTakendownError;
      var RepoSuspendedError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RepoSuspendedError = RepoSuspendedError;
      var RepoDeactivatedError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RepoDeactivatedError = RepoDeactivatedError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "BlobNotFound")
            return new BlobNotFoundError(e);
          if (e.error === "RepoNotFound")
            return new RepoNotFoundError(e);
          if (e.error === "RepoTakendown")
            return new RepoTakendownError(e);
          if (e.error === "RepoSuspended")
            return new RepoSuspendedError(e);
          if (e.error === "RepoDeactivated")
            return new RepoDeactivatedError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getBlocks.js
  var require_getBlocks = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getBlocks.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RepoDeactivatedError = exports.RepoSuspendedError = exports.RepoTakendownError = exports.RepoNotFoundError = exports.BlockNotFoundError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var BlockNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.BlockNotFoundError = BlockNotFoundError;
      var RepoNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RepoNotFoundError = RepoNotFoundError;
      var RepoTakendownError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RepoTakendownError = RepoTakendownError;
      var RepoSuspendedError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RepoSuspendedError = RepoSuspendedError;
      var RepoDeactivatedError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RepoDeactivatedError = RepoDeactivatedError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "BlockNotFound")
            return new BlockNotFoundError(e);
          if (e.error === "RepoNotFound")
            return new RepoNotFoundError(e);
          if (e.error === "RepoTakendown")
            return new RepoTakendownError(e);
          if (e.error === "RepoSuspended")
            return new RepoSuspendedError(e);
          if (e.error === "RepoDeactivated")
            return new RepoDeactivatedError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getHead.js
  var require_getHead = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getHead.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.HeadNotFoundError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var HeadNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.HeadNotFoundError = HeadNotFoundError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "HeadNotFound")
            return new HeadNotFoundError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getHostStatus.js
  var require_getHostStatus = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getHostStatus.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.HostNotFoundError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var HostNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.HostNotFoundError = HostNotFoundError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "HostNotFound")
            return new HostNotFoundError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getLatestCommit.js
  var require_getLatestCommit = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getLatestCommit.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RepoDeactivatedError = exports.RepoSuspendedError = exports.RepoTakendownError = exports.RepoNotFoundError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var RepoNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RepoNotFoundError = RepoNotFoundError;
      var RepoTakendownError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RepoTakendownError = RepoTakendownError;
      var RepoSuspendedError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RepoSuspendedError = RepoSuspendedError;
      var RepoDeactivatedError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RepoDeactivatedError = RepoDeactivatedError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "RepoNotFound")
            return new RepoNotFoundError(e);
          if (e.error === "RepoTakendown")
            return new RepoTakendownError(e);
          if (e.error === "RepoSuspended")
            return new RepoSuspendedError(e);
          if (e.error === "RepoDeactivated")
            return new RepoDeactivatedError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRecord.js
  var require_getRecord2 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRecord.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RepoDeactivatedError = exports.RepoSuspendedError = exports.RepoTakendownError = exports.RepoNotFoundError = exports.RecordNotFoundError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var RecordNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RecordNotFoundError = RecordNotFoundError;
      var RepoNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RepoNotFoundError = RepoNotFoundError;
      var RepoTakendownError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RepoTakendownError = RepoTakendownError;
      var RepoSuspendedError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RepoSuspendedError = RepoSuspendedError;
      var RepoDeactivatedError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RepoDeactivatedError = RepoDeactivatedError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "RecordNotFound")
            return new RecordNotFoundError(e);
          if (e.error === "RepoNotFound")
            return new RepoNotFoundError(e);
          if (e.error === "RepoTakendown")
            return new RepoTakendownError(e);
          if (e.error === "RepoSuspended")
            return new RepoSuspendedError(e);
          if (e.error === "RepoDeactivated")
            return new RepoDeactivatedError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRepo.js
  var require_getRepo = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRepo.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RepoDeactivatedError = exports.RepoSuspendedError = exports.RepoTakendownError = exports.RepoNotFoundError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var RepoNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RepoNotFoundError = RepoNotFoundError;
      var RepoTakendownError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RepoTakendownError = RepoTakendownError;
      var RepoSuspendedError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RepoSuspendedError = RepoSuspendedError;
      var RepoDeactivatedError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RepoDeactivatedError = RepoDeactivatedError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "RepoNotFound")
            return new RepoNotFoundError(e);
          if (e.error === "RepoTakendown")
            return new RepoTakendownError(e);
          if (e.error === "RepoSuspended")
            return new RepoSuspendedError(e);
          if (e.error === "RepoDeactivated")
            return new RepoDeactivatedError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRepoStatus.js
  var require_getRepoStatus = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRepoStatus.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RepoNotFoundError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var RepoNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RepoNotFoundError = RepoNotFoundError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "RepoNotFound")
            return new RepoNotFoundError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/listBlobs.js
  var require_listBlobs = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/listBlobs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RepoDeactivatedError = exports.RepoSuspendedError = exports.RepoTakendownError = exports.RepoNotFoundError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var RepoNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RepoNotFoundError = RepoNotFoundError;
      var RepoTakendownError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RepoTakendownError = RepoTakendownError;
      var RepoSuspendedError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RepoSuspendedError = RepoSuspendedError;
      var RepoDeactivatedError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RepoDeactivatedError = RepoDeactivatedError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "RepoNotFound")
            return new RepoNotFoundError(e);
          if (e.error === "RepoTakendown")
            return new RepoTakendownError(e);
          if (e.error === "RepoSuspended")
            return new RepoSuspendedError(e);
          if (e.error === "RepoDeactivated")
            return new RepoDeactivatedError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/requestCrawl.js
  var require_requestCrawl = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/requestCrawl.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.HostBannedError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var HostBannedError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.HostBannedError = HostBannedError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "HostBanned")
            return new HostBannedError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getActorLikes.js
  var require_getActorLikes = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getActorLikes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BlockedByActorError = exports.BlockedActorError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var BlockedActorError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.BlockedActorError = BlockedActorError;
      var BlockedByActorError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.BlockedByActorError = BlockedByActorError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "BlockedActor")
            return new BlockedActorError(e);
          if (e.error === "BlockedByActor")
            return new BlockedByActorError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getAuthorFeed.js
  var require_getAuthorFeed = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getAuthorFeed.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BlockedByActorError = exports.BlockedActorError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var BlockedActorError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.BlockedActorError = BlockedActorError;
      var BlockedByActorError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.BlockedByActorError = BlockedByActorError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "BlockedActor")
            return new BlockedActorError(e);
          if (e.error === "BlockedByActor")
            return new BlockedByActorError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeed.js
  var require_getFeed = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeed.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.UnknownFeedError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var UnknownFeedError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.UnknownFeedError = UnknownFeedError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "UnknownFeed")
            return new UnknownFeedError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedSkeleton.js
  var require_getFeedSkeleton = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedSkeleton.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.UnknownFeedError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var UnknownFeedError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.UnknownFeedError = UnknownFeedError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "UnknownFeed")
            return new UnknownFeedError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getListFeed.js
  var require_getListFeed = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getListFeed.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.UnknownListError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var UnknownListError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.UnknownListError = UnknownListError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "UnknownList")
            return new UnknownListError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getPostThread.js
  var require_getPostThread = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getPostThread.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.NotFoundError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var NotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.NotFoundError = NotFoundError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "NotFound")
            return new NotFoundError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/searchPosts.js
  var require_searchPosts = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/searchPosts.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BadQueryStringError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var BadQueryStringError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.BadQueryStringError = BadQueryStringError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "BadQueryString")
            return new BadQueryStringError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getRelationships.js
  var require_getRelationships = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getRelationships.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ActorNotFoundError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var ActorNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.ActorNotFoundError = ActorNotFoundError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "ActorNotFound")
            return new ActorNotFoundError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchActorsSkeleton.js
  var require_searchActorsSkeleton = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchActorsSkeleton.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BadQueryStringError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var BadQueryStringError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.BadQueryStringError = BadQueryStringError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "BadQueryString")
            return new BadQueryStringError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchPostsSkeleton.js
  var require_searchPostsSkeleton = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchPostsSkeleton.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BadQueryStringError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var BadQueryStringError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.BadQueryStringError = BadQueryStringError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "BadQueryString")
            return new BadQueryStringError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchStarterPacksSkeleton.js
  var require_searchStarterPacksSkeleton = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchStarterPacksSkeleton.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BadQueryStringError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var BadQueryStringError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.BadQueryStringError = BadQueryStringError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "BadQueryString")
            return new BadQueryStringError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/addReaction.js
  var require_addReaction = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/addReaction.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ReactionInvalidValueError = exports.ReactionLimitReachedError = exports.ReactionMessageDeletedError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var ReactionMessageDeletedError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.ReactionMessageDeletedError = ReactionMessageDeletedError;
      var ReactionLimitReachedError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.ReactionLimitReachedError = ReactionLimitReachedError;
      var ReactionInvalidValueError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.ReactionInvalidValueError = ReactionInvalidValueError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "ReactionMessageDeleted")
            return new ReactionMessageDeletedError(e);
          if (e.error === "ReactionLimitReached")
            return new ReactionLimitReachedError(e);
          if (e.error === "ReactionInvalidValue")
            return new ReactionInvalidValueError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/removeReaction.js
  var require_removeReaction = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/removeReaction.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ReactionInvalidValueError = exports.ReactionMessageDeletedError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var ReactionMessageDeletedError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.ReactionMessageDeletedError = ReactionMessageDeletedError;
      var ReactionInvalidValueError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.ReactionInvalidValueError = ReactionInvalidValueError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "ReactionMessageDeleted")
            return new ReactionMessageDeletedError(e);
          if (e.error === "ReactionInvalidValue")
            return new ReactionInvalidValueError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/createTemplate.js
  var require_createTemplate = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/createTemplate.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DuplicateTemplateNameError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var DuplicateTemplateNameError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.DuplicateTemplateNameError = DuplicateTemplateNameError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "DuplicateTemplateName")
            return new DuplicateTemplateNameError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/updateTemplate.js
  var require_updateTemplate = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/updateTemplate.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DuplicateTemplateNameError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var DuplicateTemplateNameError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.DuplicateTemplateNameError = DuplicateTemplateNameError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "DuplicateTemplateName")
            return new DuplicateTemplateNameError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/emitEvent.js
  var require_emitEvent = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/emitEvent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SubjectHasActionError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var SubjectHasActionError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.SubjectHasActionError = SubjectHasActionError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "SubjectHasAction")
            return new SubjectHasActionError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRecord.js
  var require_getRecord3 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRecord.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RecordNotFoundError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var RecordNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RecordNotFoundError = RecordNotFoundError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "RecordNotFound")
            return new RecordNotFoundError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRepo.js
  var require_getRepo2 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRepo.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RepoNotFoundError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var RepoNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.RepoNotFoundError = RepoNotFoundError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "RepoNotFound")
            return new RepoNotFoundError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/set/deleteSet.js
  var require_deleteSet = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/set/deleteSet.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SetNotFoundError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var SetNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.SetNotFoundError = SetNotFoundError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "SetNotFound")
            return new SetNotFoundError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/set/deleteValues.js
  var require_deleteValues = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/set/deleteValues.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SetNotFoundError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var SetNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.SetNotFoundError = SetNotFoundError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "SetNotFound")
            return new SetNotFoundError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/set/getValues.js
  var require_getValues = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/set/getValues.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SetNotFoundError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var SetNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.SetNotFoundError = SetNotFoundError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "SetNotFound")
            return new SetNotFoundError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/team/addMember.js
  var require_addMember = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/team/addMember.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.MemberAlreadyExistsError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var MemberAlreadyExistsError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.MemberAlreadyExistsError = MemberAlreadyExistsError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "MemberAlreadyExists")
            return new MemberAlreadyExistsError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/team/deleteMember.js
  var require_deleteMember = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/team/deleteMember.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.CannotDeleteSelfError = exports.MemberNotFoundError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var MemberNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.MemberNotFoundError = MemberNotFoundError;
      var CannotDeleteSelfError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.CannotDeleteSelfError = CannotDeleteSelfError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "MemberNotFound")
            return new MemberNotFoundError(e);
          if (e.error === "CannotDeleteSelf")
            return new CannotDeleteSelfError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/team/updateMember.js
  var require_updateMember = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/team/updateMember.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.MemberNotFoundError = void 0;
      exports.toKnownErr = toKnownErr;
      var xrpc_1 = require_dist19();
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var MemberNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src2) {
          super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
        }
      };
      exports.MemberNotFoundError = MemberNotFoundError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "MemberNotFound")
            return new MemberNotFoundError(e);
        }
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/defs.js
  var require_defs = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isStatusAttr = isStatusAttr;
      exports.validateStatusAttr = validateStatusAttr;
      exports.isAccountView = isAccountView;
      exports.validateAccountView = validateAccountView;
      exports.isRepoRef = isRepoRef;
      exports.validateRepoRef = validateRepoRef;
      exports.isRepoBlobRef = isRepoBlobRef;
      exports.validateRepoBlobRef = validateRepoBlobRef;
      exports.isThreatSignature = isThreatSignature;
      exports.validateThreatSignature = validateThreatSignature;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "com.atproto.admin.defs";
      var hashStatusAttr = "statusAttr";
      function isStatusAttr(v) {
        return is$typed(v, id, hashStatusAttr);
      }
      function validateStatusAttr(v) {
        return validate(v, id, hashStatusAttr);
      }
      var hashAccountView = "accountView";
      function isAccountView(v) {
        return is$typed(v, id, hashAccountView);
      }
      function validateAccountView(v) {
        return validate(v, id, hashAccountView);
      }
      var hashRepoRef = "repoRef";
      function isRepoRef(v) {
        return is$typed(v, id, hashRepoRef);
      }
      function validateRepoRef(v) {
        return validate(v, id, hashRepoRef);
      }
      var hashRepoBlobRef = "repoBlobRef";
      function isRepoBlobRef(v) {
        return is$typed(v, id, hashRepoBlobRef);
      }
      function validateRepoBlobRef(v) {
        return validate(v, id, hashRepoBlobRef);
      }
      var hashThreatSignature = "threatSignature";
      function isThreatSignature(v) {
        return is$typed(v, id, hashThreatSignature);
      }
      function validateThreatSignature(v) {
        return validate(v, id, hashThreatSignature);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/deleteAccount.js
  var require_deleteAccount2 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/deleteAccount.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/disableAccountInvites.js
  var require_disableAccountInvites = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/disableAccountInvites.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/disableInviteCodes.js
  var require_disableInviteCodes = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/disableInviteCodes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/enableAccountInvites.js
  var require_enableAccountInvites = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/enableAccountInvites.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/getAccountInfo.js
  var require_getAccountInfo = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/getAccountInfo.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/getAccountInfos.js
  var require_getAccountInfos = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/getAccountInfos.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/getInviteCodes.js
  var require_getInviteCodes = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/getInviteCodes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/getSubjectStatus.js
  var require_getSubjectStatus = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/getSubjectStatus.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/searchAccounts.js
  var require_searchAccounts = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/searchAccounts.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/sendEmail.js
  var require_sendEmail = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/sendEmail.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountEmail.js
  var require_updateAccountEmail = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountEmail.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountHandle.js
  var require_updateAccountHandle = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountHandle.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountPassword.js
  var require_updateAccountPassword = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountPassword.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountSigningKey.js
  var require_updateAccountSigningKey = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountSigningKey.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateSubjectStatus.js
  var require_updateSubjectStatus = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateSubjectStatus.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/identity/defs.js
  var require_defs2 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/identity/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isIdentityInfo = isIdentityInfo;
      exports.validateIdentityInfo = validateIdentityInfo;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "com.atproto.identity.defs";
      var hashIdentityInfo = "identityInfo";
      function isIdentityInfo(v) {
        return is$typed(v, id, hashIdentityInfo);
      }
      function validateIdentityInfo(v) {
        return validate(v, id, hashIdentityInfo);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/identity/getRecommendedDidCredentials.js
  var require_getRecommendedDidCredentials = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/identity/getRecommendedDidCredentials.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/identity/requestPlcOperationSignature.js
  var require_requestPlcOperationSignature = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/identity/requestPlcOperationSignature.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/identity/signPlcOperation.js
  var require_signPlcOperation = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/identity/signPlcOperation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/identity/submitPlcOperation.js
  var require_submitPlcOperation = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/identity/submitPlcOperation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/identity/updateHandle.js
  var require_updateHandle = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/identity/updateHandle.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/label/defs.js
  var require_defs3 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/label/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isLabel = isLabel;
      exports.validateLabel = validateLabel;
      exports.isSelfLabels = isSelfLabels;
      exports.validateSelfLabels = validateSelfLabels;
      exports.isSelfLabel = isSelfLabel;
      exports.validateSelfLabel = validateSelfLabel;
      exports.isLabelValueDefinition = isLabelValueDefinition;
      exports.validateLabelValueDefinition = validateLabelValueDefinition;
      exports.isLabelValueDefinitionStrings = isLabelValueDefinitionStrings;
      exports.validateLabelValueDefinitionStrings = validateLabelValueDefinitionStrings;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "com.atproto.label.defs";
      var hashLabel = "label";
      function isLabel(v) {
        return is$typed(v, id, hashLabel);
      }
      function validateLabel(v) {
        return validate(v, id, hashLabel);
      }
      var hashSelfLabels = "selfLabels";
      function isSelfLabels(v) {
        return is$typed(v, id, hashSelfLabels);
      }
      function validateSelfLabels(v) {
        return validate(v, id, hashSelfLabels);
      }
      var hashSelfLabel = "selfLabel";
      function isSelfLabel(v) {
        return is$typed(v, id, hashSelfLabel);
      }
      function validateSelfLabel(v) {
        return validate(v, id, hashSelfLabel);
      }
      var hashLabelValueDefinition = "labelValueDefinition";
      function isLabelValueDefinition(v) {
        return is$typed(v, id, hashLabelValueDefinition);
      }
      function validateLabelValueDefinition(v) {
        return validate(v, id, hashLabelValueDefinition);
      }
      var hashLabelValueDefinitionStrings = "labelValueDefinitionStrings";
      function isLabelValueDefinitionStrings(v) {
        return is$typed(v, id, hashLabelValueDefinitionStrings);
      }
      function validateLabelValueDefinitionStrings(v) {
        return validate(v, id, hashLabelValueDefinitionStrings);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/label/queryLabels.js
  var require_queryLabels = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/label/queryLabels.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/label/subscribeLabels.js
  var require_subscribeLabels = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/label/subscribeLabels.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isLabels = isLabels;
      exports.validateLabels = validateLabels;
      exports.isInfo = isInfo;
      exports.validateInfo = validateInfo;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "com.atproto.label.subscribeLabels";
      var hashLabels = "labels";
      function isLabels(v) {
        return is$typed(v, id, hashLabels);
      }
      function validateLabels(v) {
        return validate(v, id, hashLabels);
      }
      var hashInfo = "info";
      function isInfo(v) {
        return is$typed(v, id, hashInfo);
      }
      function validateInfo(v) {
        return validate(v, id, hashInfo);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/lexicon/schema.js
  var require_schema = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/lexicon/schema.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isRecord = isRecord;
      exports.validateRecord = validateRecord;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "com.atproto.lexicon.schema";
      var hashRecord = "main";
      function isRecord(v) {
        return is$typed(v, id, hashRecord);
      }
      function validateRecord(v) {
        return validate(v, id, hashRecord, true);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/moderation/createReport.js
  var require_createReport = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/moderation/createReport.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/moderation/defs.js
  var require_defs4 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/moderation/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.REASONAPPEAL = exports.REASONOTHER = exports.REASONRUDE = exports.REASONSEXUAL = exports.REASONMISLEADING = exports.REASONVIOLATION = exports.REASONSPAM = void 0;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "com.atproto.moderation.defs";
      exports.REASONSPAM = `${id}#reasonSpam`;
      exports.REASONVIOLATION = `${id}#reasonViolation`;
      exports.REASONMISLEADING = `${id}#reasonMisleading`;
      exports.REASONSEXUAL = `${id}#reasonSexual`;
      exports.REASONRUDE = `${id}#reasonRude`;
      exports.REASONOTHER = `${id}#reasonOther`;
      exports.REASONAPPEAL = `${id}#reasonAppeal`;
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/repo/defs.js
  var require_defs5 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/repo/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isCommitMeta = isCommitMeta;
      exports.validateCommitMeta = validateCommitMeta;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "com.atproto.repo.defs";
      var hashCommitMeta = "commitMeta";
      function isCommitMeta(v) {
        return is$typed(v, id, hashCommitMeta);
      }
      function validateCommitMeta(v) {
        return validate(v, id, hashCommitMeta);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/repo/describeRepo.js
  var require_describeRepo = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/repo/describeRepo.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/repo/importRepo.js
  var require_importRepo = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/repo/importRepo.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/repo/listMissingBlobs.js
  var require_listMissingBlobs = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/repo/listMissingBlobs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      exports.isRecordBlob = isRecordBlob;
      exports.validateRecordBlob = validateRecordBlob;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "com.atproto.repo.listMissingBlobs";
      function toKnownErr(e) {
        return e;
      }
      var hashRecordBlob = "recordBlob";
      function isRecordBlob(v) {
        return is$typed(v, id, hashRecordBlob);
      }
      function validateRecordBlob(v) {
        return validate(v, id, hashRecordBlob);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/repo/listRecords.js
  var require_listRecords = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/repo/listRecords.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      exports.isRecord = isRecord;
      exports.validateRecord = validateRecord;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "com.atproto.repo.listRecords";
      function toKnownErr(e) {
        return e;
      }
      var hashRecord = "record";
      function isRecord(v) {
        return is$typed(v, id, hashRecord);
      }
      function validateRecord(v) {
        return validate(v, id, hashRecord);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/repo/strongRef.js
  var require_strongRef = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/repo/strongRef.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isMain = isMain;
      exports.validateMain = validateMain;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "com.atproto.repo.strongRef";
      var hashMain = "main";
      function isMain(v) {
        return is$typed(v, id, hashMain);
      }
      function validateMain(v) {
        return validate(v, id, hashMain);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/repo/uploadBlob.js
  var require_uploadBlob = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/repo/uploadBlob.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/activateAccount.js
  var require_activateAccount = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/activateAccount.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/checkAccountStatus.js
  var require_checkAccountStatus = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/checkAccountStatus.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/createInviteCode.js
  var require_createInviteCode = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/createInviteCode.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/createInviteCodes.js
  var require_createInviteCodes = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/createInviteCodes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      exports.isAccountCodes = isAccountCodes;
      exports.validateAccountCodes = validateAccountCodes;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "com.atproto.server.createInviteCodes";
      function toKnownErr(e) {
        return e;
      }
      var hashAccountCodes = "accountCodes";
      function isAccountCodes(v) {
        return is$typed(v, id, hashAccountCodes);
      }
      function validateAccountCodes(v) {
        return validate(v, id, hashAccountCodes);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/deactivateAccount.js
  var require_deactivateAccount = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/deactivateAccount.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/defs.js
  var require_defs6 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isInviteCode = isInviteCode;
      exports.validateInviteCode = validateInviteCode;
      exports.isInviteCodeUse = isInviteCodeUse;
      exports.validateInviteCodeUse = validateInviteCodeUse;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "com.atproto.server.defs";
      var hashInviteCode = "inviteCode";
      function isInviteCode(v) {
        return is$typed(v, id, hashInviteCode);
      }
      function validateInviteCode(v) {
        return validate(v, id, hashInviteCode);
      }
      var hashInviteCodeUse = "inviteCodeUse";
      function isInviteCodeUse(v) {
        return is$typed(v, id, hashInviteCodeUse);
      }
      function validateInviteCodeUse(v) {
        return validate(v, id, hashInviteCodeUse);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/deleteSession.js
  var require_deleteSession = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/deleteSession.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/describeServer.js
  var require_describeServer = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/describeServer.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      exports.isLinks = isLinks;
      exports.validateLinks = validateLinks;
      exports.isContact = isContact;
      exports.validateContact = validateContact;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "com.atproto.server.describeServer";
      function toKnownErr(e) {
        return e;
      }
      var hashLinks = "links";
      function isLinks(v) {
        return is$typed(v, id, hashLinks);
      }
      function validateLinks(v) {
        return validate(v, id, hashLinks);
      }
      var hashContact = "contact";
      function isContact(v) {
        return is$typed(v, id, hashContact);
      }
      function validateContact(v) {
        return validate(v, id, hashContact);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/getSession.js
  var require_getSession = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/getSession.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/requestAccountDelete.js
  var require_requestAccountDelete = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/requestAccountDelete.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/requestEmailConfirmation.js
  var require_requestEmailConfirmation = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/requestEmailConfirmation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/requestEmailUpdate.js
  var require_requestEmailUpdate = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/requestEmailUpdate.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/requestPasswordReset.js
  var require_requestPasswordReset = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/requestPasswordReset.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/reserveSigningKey.js
  var require_reserveSigningKey = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/reserveSigningKey.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/revokeAppPassword.js
  var require_revokeAppPassword = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/server/revokeAppPassword.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/defs.js
  var require_defs7 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getCheckout.js
  var require_getCheckout = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getCheckout.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/listHosts.js
  var require_listHosts = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/listHosts.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      exports.isHost = isHost;
      exports.validateHost = validateHost;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "com.atproto.sync.listHosts";
      function toKnownErr(e) {
        return e;
      }
      var hashHost = "host";
      function isHost(v) {
        return is$typed(v, id, hashHost);
      }
      function validateHost(v) {
        return validate(v, id, hashHost);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/listRepos.js
  var require_listRepos = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/listRepos.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      exports.isRepo = isRepo;
      exports.validateRepo = validateRepo;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "com.atproto.sync.listRepos";
      function toKnownErr(e) {
        return e;
      }
      var hashRepo = "repo";
      function isRepo(v) {
        return is$typed(v, id, hashRepo);
      }
      function validateRepo(v) {
        return validate(v, id, hashRepo);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/listReposByCollection.js
  var require_listReposByCollection = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/listReposByCollection.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      exports.isRepo = isRepo;
      exports.validateRepo = validateRepo;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "com.atproto.sync.listReposByCollection";
      function toKnownErr(e) {
        return e;
      }
      var hashRepo = "repo";
      function isRepo(v) {
        return is$typed(v, id, hashRepo);
      }
      function validateRepo(v) {
        return validate(v, id, hashRepo);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/notifyOfUpdate.js
  var require_notifyOfUpdate = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/notifyOfUpdate.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/subscribeRepos.js
  var require_subscribeRepos = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/sync/subscribeRepos.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isCommit = isCommit;
      exports.validateCommit = validateCommit;
      exports.isSync = isSync;
      exports.validateSync = validateSync;
      exports.isIdentity = isIdentity;
      exports.validateIdentity = validateIdentity;
      exports.isAccount = isAccount;
      exports.validateAccount = validateAccount;
      exports.isInfo = isInfo;
      exports.validateInfo = validateInfo;
      exports.isRepoOp = isRepoOp;
      exports.validateRepoOp = validateRepoOp;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "com.atproto.sync.subscribeRepos";
      var hashCommit = "commit";
      function isCommit(v) {
        return is$typed(v, id, hashCommit);
      }
      function validateCommit(v) {
        return validate(v, id, hashCommit);
      }
      var hashSync = "sync";
      function isSync(v) {
        return is$typed(v, id, hashSync);
      }
      function validateSync(v) {
        return validate(v, id, hashSync);
      }
      var hashIdentity = "identity";
      function isIdentity(v) {
        return is$typed(v, id, hashIdentity);
      }
      function validateIdentity(v) {
        return validate(v, id, hashIdentity);
      }
      var hashAccount = "account";
      function isAccount(v) {
        return is$typed(v, id, hashAccount);
      }
      function validateAccount(v) {
        return validate(v, id, hashAccount);
      }
      var hashInfo = "info";
      function isInfo(v) {
        return is$typed(v, id, hashInfo);
      }
      function validateInfo(v) {
        return validate(v, id, hashInfo);
      }
      var hashRepoOp = "repoOp";
      function isRepoOp(v) {
        return is$typed(v, id, hashRepoOp);
      }
      function validateRepoOp(v) {
        return validate(v, id, hashRepoOp);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/temp/addReservedHandle.js
  var require_addReservedHandle = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/temp/addReservedHandle.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/temp/checkSignupQueue.js
  var require_checkSignupQueue = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/temp/checkSignupQueue.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/temp/fetchLabels.js
  var require_fetchLabels = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/temp/fetchLabels.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/temp/requestPhoneVerification.js
  var require_requestPhoneVerification = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/com/atproto/temp/requestPhoneVerification.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/actor/defs.js
  var require_defs8 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/actor/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isProfileViewBasic = isProfileViewBasic;
      exports.validateProfileViewBasic = validateProfileViewBasic;
      exports.isProfileView = isProfileView;
      exports.validateProfileView = validateProfileView;
      exports.isProfileViewDetailed = isProfileViewDetailed;
      exports.validateProfileViewDetailed = validateProfileViewDetailed;
      exports.isProfileAssociated = isProfileAssociated;
      exports.validateProfileAssociated = validateProfileAssociated;
      exports.isProfileAssociatedChat = isProfileAssociatedChat;
      exports.validateProfileAssociatedChat = validateProfileAssociatedChat;
      exports.isViewerState = isViewerState;
      exports.validateViewerState = validateViewerState;
      exports.isKnownFollowers = isKnownFollowers;
      exports.validateKnownFollowers = validateKnownFollowers;
      exports.isVerificationState = isVerificationState;
      exports.validateVerificationState = validateVerificationState;
      exports.isVerificationView = isVerificationView;
      exports.validateVerificationView = validateVerificationView;
      exports.isAdultContentPref = isAdultContentPref;
      exports.validateAdultContentPref = validateAdultContentPref;
      exports.isContentLabelPref = isContentLabelPref;
      exports.validateContentLabelPref = validateContentLabelPref;
      exports.isSavedFeed = isSavedFeed;
      exports.validateSavedFeed = validateSavedFeed;
      exports.isSavedFeedsPrefV2 = isSavedFeedsPrefV2;
      exports.validateSavedFeedsPrefV2 = validateSavedFeedsPrefV2;
      exports.isSavedFeedsPref = isSavedFeedsPref;
      exports.validateSavedFeedsPref = validateSavedFeedsPref;
      exports.isPersonalDetailsPref = isPersonalDetailsPref;
      exports.validatePersonalDetailsPref = validatePersonalDetailsPref;
      exports.isFeedViewPref = isFeedViewPref;
      exports.validateFeedViewPref = validateFeedViewPref;
      exports.isThreadViewPref = isThreadViewPref;
      exports.validateThreadViewPref = validateThreadViewPref;
      exports.isInterestsPref = isInterestsPref;
      exports.validateInterestsPref = validateInterestsPref;
      exports.isMutedWord = isMutedWord;
      exports.validateMutedWord = validateMutedWord;
      exports.isMutedWordsPref = isMutedWordsPref;
      exports.validateMutedWordsPref = validateMutedWordsPref;
      exports.isHiddenPostsPref = isHiddenPostsPref;
      exports.validateHiddenPostsPref = validateHiddenPostsPref;
      exports.isLabelersPref = isLabelersPref;
      exports.validateLabelersPref = validateLabelersPref;
      exports.isLabelerPrefItem = isLabelerPrefItem;
      exports.validateLabelerPrefItem = validateLabelerPrefItem;
      exports.isBskyAppStatePref = isBskyAppStatePref;
      exports.validateBskyAppStatePref = validateBskyAppStatePref;
      exports.isBskyAppProgressGuide = isBskyAppProgressGuide;
      exports.validateBskyAppProgressGuide = validateBskyAppProgressGuide;
      exports.isNux = isNux;
      exports.validateNux = validateNux;
      exports.isVerificationPrefs = isVerificationPrefs;
      exports.validateVerificationPrefs = validateVerificationPrefs;
      exports.isPostInteractionSettingsPref = isPostInteractionSettingsPref;
      exports.validatePostInteractionSettingsPref = validatePostInteractionSettingsPref;
      exports.isStatusView = isStatusView;
      exports.validateStatusView = validateStatusView;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.actor.defs";
      var hashProfileViewBasic = "profileViewBasic";
      function isProfileViewBasic(v) {
        return is$typed(v, id, hashProfileViewBasic);
      }
      function validateProfileViewBasic(v) {
        return validate(v, id, hashProfileViewBasic);
      }
      var hashProfileView = "profileView";
      function isProfileView(v) {
        return is$typed(v, id, hashProfileView);
      }
      function validateProfileView(v) {
        return validate(v, id, hashProfileView);
      }
      var hashProfileViewDetailed = "profileViewDetailed";
      function isProfileViewDetailed(v) {
        return is$typed(v, id, hashProfileViewDetailed);
      }
      function validateProfileViewDetailed(v) {
        return validate(v, id, hashProfileViewDetailed);
      }
      var hashProfileAssociated = "profileAssociated";
      function isProfileAssociated(v) {
        return is$typed(v, id, hashProfileAssociated);
      }
      function validateProfileAssociated(v) {
        return validate(v, id, hashProfileAssociated);
      }
      var hashProfileAssociatedChat = "profileAssociatedChat";
      function isProfileAssociatedChat(v) {
        return is$typed(v, id, hashProfileAssociatedChat);
      }
      function validateProfileAssociatedChat(v) {
        return validate(v, id, hashProfileAssociatedChat);
      }
      var hashViewerState = "viewerState";
      function isViewerState(v) {
        return is$typed(v, id, hashViewerState);
      }
      function validateViewerState(v) {
        return validate(v, id, hashViewerState);
      }
      var hashKnownFollowers = "knownFollowers";
      function isKnownFollowers(v) {
        return is$typed(v, id, hashKnownFollowers);
      }
      function validateKnownFollowers(v) {
        return validate(v, id, hashKnownFollowers);
      }
      var hashVerificationState = "verificationState";
      function isVerificationState(v) {
        return is$typed(v, id, hashVerificationState);
      }
      function validateVerificationState(v) {
        return validate(v, id, hashVerificationState);
      }
      var hashVerificationView = "verificationView";
      function isVerificationView(v) {
        return is$typed(v, id, hashVerificationView);
      }
      function validateVerificationView(v) {
        return validate(v, id, hashVerificationView);
      }
      var hashAdultContentPref = "adultContentPref";
      function isAdultContentPref(v) {
        return is$typed(v, id, hashAdultContentPref);
      }
      function validateAdultContentPref(v) {
        return validate(v, id, hashAdultContentPref);
      }
      var hashContentLabelPref = "contentLabelPref";
      function isContentLabelPref(v) {
        return is$typed(v, id, hashContentLabelPref);
      }
      function validateContentLabelPref(v) {
        return validate(v, id, hashContentLabelPref);
      }
      var hashSavedFeed = "savedFeed";
      function isSavedFeed(v) {
        return is$typed(v, id, hashSavedFeed);
      }
      function validateSavedFeed(v) {
        return validate(v, id, hashSavedFeed);
      }
      var hashSavedFeedsPrefV2 = "savedFeedsPrefV2";
      function isSavedFeedsPrefV2(v) {
        return is$typed(v, id, hashSavedFeedsPrefV2);
      }
      function validateSavedFeedsPrefV2(v) {
        return validate(v, id, hashSavedFeedsPrefV2);
      }
      var hashSavedFeedsPref = "savedFeedsPref";
      function isSavedFeedsPref(v) {
        return is$typed(v, id, hashSavedFeedsPref);
      }
      function validateSavedFeedsPref(v) {
        return validate(v, id, hashSavedFeedsPref);
      }
      var hashPersonalDetailsPref = "personalDetailsPref";
      function isPersonalDetailsPref(v) {
        return is$typed(v, id, hashPersonalDetailsPref);
      }
      function validatePersonalDetailsPref(v) {
        return validate(v, id, hashPersonalDetailsPref);
      }
      var hashFeedViewPref = "feedViewPref";
      function isFeedViewPref(v) {
        return is$typed(v, id, hashFeedViewPref);
      }
      function validateFeedViewPref(v) {
        return validate(v, id, hashFeedViewPref);
      }
      var hashThreadViewPref = "threadViewPref";
      function isThreadViewPref(v) {
        return is$typed(v, id, hashThreadViewPref);
      }
      function validateThreadViewPref(v) {
        return validate(v, id, hashThreadViewPref);
      }
      var hashInterestsPref = "interestsPref";
      function isInterestsPref(v) {
        return is$typed(v, id, hashInterestsPref);
      }
      function validateInterestsPref(v) {
        return validate(v, id, hashInterestsPref);
      }
      var hashMutedWord = "mutedWord";
      function isMutedWord(v) {
        return is$typed(v, id, hashMutedWord);
      }
      function validateMutedWord(v) {
        return validate(v, id, hashMutedWord);
      }
      var hashMutedWordsPref = "mutedWordsPref";
      function isMutedWordsPref(v) {
        return is$typed(v, id, hashMutedWordsPref);
      }
      function validateMutedWordsPref(v) {
        return validate(v, id, hashMutedWordsPref);
      }
      var hashHiddenPostsPref = "hiddenPostsPref";
      function isHiddenPostsPref(v) {
        return is$typed(v, id, hashHiddenPostsPref);
      }
      function validateHiddenPostsPref(v) {
        return validate(v, id, hashHiddenPostsPref);
      }
      var hashLabelersPref = "labelersPref";
      function isLabelersPref(v) {
        return is$typed(v, id, hashLabelersPref);
      }
      function validateLabelersPref(v) {
        return validate(v, id, hashLabelersPref);
      }
      var hashLabelerPrefItem = "labelerPrefItem";
      function isLabelerPrefItem(v) {
        return is$typed(v, id, hashLabelerPrefItem);
      }
      function validateLabelerPrefItem(v) {
        return validate(v, id, hashLabelerPrefItem);
      }
      var hashBskyAppStatePref = "bskyAppStatePref";
      function isBskyAppStatePref(v) {
        return is$typed(v, id, hashBskyAppStatePref);
      }
      function validateBskyAppStatePref(v) {
        return validate(v, id, hashBskyAppStatePref);
      }
      var hashBskyAppProgressGuide = "bskyAppProgressGuide";
      function isBskyAppProgressGuide(v) {
        return is$typed(v, id, hashBskyAppProgressGuide);
      }
      function validateBskyAppProgressGuide(v) {
        return validate(v, id, hashBskyAppProgressGuide);
      }
      var hashNux = "nux";
      function isNux(v) {
        return is$typed(v, id, hashNux);
      }
      function validateNux(v) {
        return validate(v, id, hashNux);
      }
      var hashVerificationPrefs = "verificationPrefs";
      function isVerificationPrefs(v) {
        return is$typed(v, id, hashVerificationPrefs);
      }
      function validateVerificationPrefs(v) {
        return validate(v, id, hashVerificationPrefs);
      }
      var hashPostInteractionSettingsPref = "postInteractionSettingsPref";
      function isPostInteractionSettingsPref(v) {
        return is$typed(v, id, hashPostInteractionSettingsPref);
      }
      function validatePostInteractionSettingsPref(v) {
        return validate(v, id, hashPostInteractionSettingsPref);
      }
      var hashStatusView = "statusView";
      function isStatusView(v) {
        return is$typed(v, id, hashStatusView);
      }
      function validateStatusView(v) {
        return validate(v, id, hashStatusView);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/actor/getPreferences.js
  var require_getPreferences = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/actor/getPreferences.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/actor/getProfile.js
  var require_getProfile = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/actor/getProfile.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/actor/getProfiles.js
  var require_getProfiles = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/actor/getProfiles.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/actor/getSuggestions.js
  var require_getSuggestions = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/actor/getSuggestions.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/actor/profile.js
  var require_profile = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/actor/profile.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isRecord = isRecord;
      exports.validateRecord = validateRecord;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.actor.profile";
      var hashRecord = "main";
      function isRecord(v) {
        return is$typed(v, id, hashRecord);
      }
      function validateRecord(v) {
        return validate(v, id, hashRecord, true);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/actor/putPreferences.js
  var require_putPreferences = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/actor/putPreferences.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/actor/searchActors.js
  var require_searchActors = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/actor/searchActors.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/actor/searchActorsTypeahead.js
  var require_searchActorsTypeahead = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/actor/searchActorsTypeahead.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/actor/status.js
  var require_status = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/actor/status.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.LIVE = void 0;
      exports.isRecord = isRecord;
      exports.validateRecord = validateRecord;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.actor.status";
      var hashRecord = "main";
      function isRecord(v) {
        return is$typed(v, id, hashRecord);
      }
      function validateRecord(v) {
        return validate(v, id, hashRecord, true);
      }
      exports.LIVE = `${id}#live`;
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/embed/defs.js
  var require_defs9 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/embed/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isAspectRatio = isAspectRatio;
      exports.validateAspectRatio = validateAspectRatio;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.embed.defs";
      var hashAspectRatio = "aspectRatio";
      function isAspectRatio(v) {
        return is$typed(v, id, hashAspectRatio);
      }
      function validateAspectRatio(v) {
        return validate(v, id, hashAspectRatio);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/embed/external.js
  var require_external2 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/embed/external.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isMain = isMain;
      exports.validateMain = validateMain;
      exports.isExternal = isExternal;
      exports.validateExternal = validateExternal;
      exports.isView = isView;
      exports.validateView = validateView;
      exports.isViewExternal = isViewExternal;
      exports.validateViewExternal = validateViewExternal;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.embed.external";
      var hashMain = "main";
      function isMain(v) {
        return is$typed(v, id, hashMain);
      }
      function validateMain(v) {
        return validate(v, id, hashMain);
      }
      var hashExternal = "external";
      function isExternal(v) {
        return is$typed(v, id, hashExternal);
      }
      function validateExternal(v) {
        return validate(v, id, hashExternal);
      }
      var hashView = "view";
      function isView(v) {
        return is$typed(v, id, hashView);
      }
      function validateView(v) {
        return validate(v, id, hashView);
      }
      var hashViewExternal = "viewExternal";
      function isViewExternal(v) {
        return is$typed(v, id, hashViewExternal);
      }
      function validateViewExternal(v) {
        return validate(v, id, hashViewExternal);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/embed/images.js
  var require_images = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/embed/images.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isMain = isMain;
      exports.validateMain = validateMain;
      exports.isImage = isImage;
      exports.validateImage = validateImage;
      exports.isView = isView;
      exports.validateView = validateView;
      exports.isViewImage = isViewImage;
      exports.validateViewImage = validateViewImage;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.embed.images";
      var hashMain = "main";
      function isMain(v) {
        return is$typed(v, id, hashMain);
      }
      function validateMain(v) {
        return validate(v, id, hashMain);
      }
      var hashImage = "image";
      function isImage(v) {
        return is$typed(v, id, hashImage);
      }
      function validateImage(v) {
        return validate(v, id, hashImage);
      }
      var hashView = "view";
      function isView(v) {
        return is$typed(v, id, hashView);
      }
      function validateView(v) {
        return validate(v, id, hashView);
      }
      var hashViewImage = "viewImage";
      function isViewImage(v) {
        return is$typed(v, id, hashViewImage);
      }
      function validateViewImage(v) {
        return validate(v, id, hashViewImage);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/embed/record.js
  var require_record = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/embed/record.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isMain = isMain;
      exports.validateMain = validateMain;
      exports.isView = isView;
      exports.validateView = validateView;
      exports.isViewRecord = isViewRecord;
      exports.validateViewRecord = validateViewRecord;
      exports.isViewNotFound = isViewNotFound;
      exports.validateViewNotFound = validateViewNotFound;
      exports.isViewBlocked = isViewBlocked;
      exports.validateViewBlocked = validateViewBlocked;
      exports.isViewDetached = isViewDetached;
      exports.validateViewDetached = validateViewDetached;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.embed.record";
      var hashMain = "main";
      function isMain(v) {
        return is$typed(v, id, hashMain);
      }
      function validateMain(v) {
        return validate(v, id, hashMain);
      }
      var hashView = "view";
      function isView(v) {
        return is$typed(v, id, hashView);
      }
      function validateView(v) {
        return validate(v, id, hashView);
      }
      var hashViewRecord = "viewRecord";
      function isViewRecord(v) {
        return is$typed(v, id, hashViewRecord);
      }
      function validateViewRecord(v) {
        return validate(v, id, hashViewRecord);
      }
      var hashViewNotFound = "viewNotFound";
      function isViewNotFound(v) {
        return is$typed(v, id, hashViewNotFound);
      }
      function validateViewNotFound(v) {
        return validate(v, id, hashViewNotFound);
      }
      var hashViewBlocked = "viewBlocked";
      function isViewBlocked(v) {
        return is$typed(v, id, hashViewBlocked);
      }
      function validateViewBlocked(v) {
        return validate(v, id, hashViewBlocked);
      }
      var hashViewDetached = "viewDetached";
      function isViewDetached(v) {
        return is$typed(v, id, hashViewDetached);
      }
      function validateViewDetached(v) {
        return validate(v, id, hashViewDetached);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/embed/recordWithMedia.js
  var require_recordWithMedia = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/embed/recordWithMedia.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isMain = isMain;
      exports.validateMain = validateMain;
      exports.isView = isView;
      exports.validateView = validateView;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.embed.recordWithMedia";
      var hashMain = "main";
      function isMain(v) {
        return is$typed(v, id, hashMain);
      }
      function validateMain(v) {
        return validate(v, id, hashMain);
      }
      var hashView = "view";
      function isView(v) {
        return is$typed(v, id, hashView);
      }
      function validateView(v) {
        return validate(v, id, hashView);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/embed/video.js
  var require_video = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/embed/video.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isMain = isMain;
      exports.validateMain = validateMain;
      exports.isCaption = isCaption;
      exports.validateCaption = validateCaption;
      exports.isView = isView;
      exports.validateView = validateView;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.embed.video";
      var hashMain = "main";
      function isMain(v) {
        return is$typed(v, id, hashMain);
      }
      function validateMain(v) {
        return validate(v, id, hashMain);
      }
      var hashCaption = "caption";
      function isCaption(v) {
        return is$typed(v, id, hashCaption);
      }
      function validateCaption(v) {
        return validate(v, id, hashCaption);
      }
      var hashView = "view";
      function isView(v) {
        return is$typed(v, id, hashView);
      }
      function validateView(v) {
        return validate(v, id, hashView);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/defs.js
  var require_defs10 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.INTERACTIONSHARE = exports.INTERACTIONQUOTE = exports.INTERACTIONREPLY = exports.INTERACTIONREPOST = exports.INTERACTIONLIKE = exports.INTERACTIONSEEN = exports.CONTENTMODEVIDEO = exports.CONTENTMODEUNSPECIFIED = exports.CLICKTHROUGHEMBED = exports.CLICKTHROUGHREPOSTER = exports.CLICKTHROUGHAUTHOR = exports.CLICKTHROUGHITEM = exports.REQUESTMORE = exports.REQUESTLESS = void 0;
      exports.isPostView = isPostView;
      exports.validatePostView = validatePostView;
      exports.isViewerState = isViewerState;
      exports.validateViewerState = validateViewerState;
      exports.isThreadContext = isThreadContext;
      exports.validateThreadContext = validateThreadContext;
      exports.isFeedViewPost = isFeedViewPost;
      exports.validateFeedViewPost = validateFeedViewPost;
      exports.isReplyRef = isReplyRef;
      exports.validateReplyRef = validateReplyRef;
      exports.isReasonRepost = isReasonRepost;
      exports.validateReasonRepost = validateReasonRepost;
      exports.isReasonPin = isReasonPin;
      exports.validateReasonPin = validateReasonPin;
      exports.isThreadViewPost = isThreadViewPost;
      exports.validateThreadViewPost = validateThreadViewPost;
      exports.isNotFoundPost = isNotFoundPost;
      exports.validateNotFoundPost = validateNotFoundPost;
      exports.isBlockedPost = isBlockedPost;
      exports.validateBlockedPost = validateBlockedPost;
      exports.isBlockedAuthor = isBlockedAuthor;
      exports.validateBlockedAuthor = validateBlockedAuthor;
      exports.isGeneratorView = isGeneratorView;
      exports.validateGeneratorView = validateGeneratorView;
      exports.isGeneratorViewerState = isGeneratorViewerState;
      exports.validateGeneratorViewerState = validateGeneratorViewerState;
      exports.isSkeletonFeedPost = isSkeletonFeedPost;
      exports.validateSkeletonFeedPost = validateSkeletonFeedPost;
      exports.isSkeletonReasonRepost = isSkeletonReasonRepost;
      exports.validateSkeletonReasonRepost = validateSkeletonReasonRepost;
      exports.isSkeletonReasonPin = isSkeletonReasonPin;
      exports.validateSkeletonReasonPin = validateSkeletonReasonPin;
      exports.isThreadgateView = isThreadgateView;
      exports.validateThreadgateView = validateThreadgateView;
      exports.isInteraction = isInteraction;
      exports.validateInteraction = validateInteraction;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.feed.defs";
      var hashPostView = "postView";
      function isPostView(v) {
        return is$typed(v, id, hashPostView);
      }
      function validatePostView(v) {
        return validate(v, id, hashPostView);
      }
      var hashViewerState = "viewerState";
      function isViewerState(v) {
        return is$typed(v, id, hashViewerState);
      }
      function validateViewerState(v) {
        return validate(v, id, hashViewerState);
      }
      var hashThreadContext = "threadContext";
      function isThreadContext(v) {
        return is$typed(v, id, hashThreadContext);
      }
      function validateThreadContext(v) {
        return validate(v, id, hashThreadContext);
      }
      var hashFeedViewPost = "feedViewPost";
      function isFeedViewPost(v) {
        return is$typed(v, id, hashFeedViewPost);
      }
      function validateFeedViewPost(v) {
        return validate(v, id, hashFeedViewPost);
      }
      var hashReplyRef = "replyRef";
      function isReplyRef(v) {
        return is$typed(v, id, hashReplyRef);
      }
      function validateReplyRef(v) {
        return validate(v, id, hashReplyRef);
      }
      var hashReasonRepost = "reasonRepost";
      function isReasonRepost(v) {
        return is$typed(v, id, hashReasonRepost);
      }
      function validateReasonRepost(v) {
        return validate(v, id, hashReasonRepost);
      }
      var hashReasonPin = "reasonPin";
      function isReasonPin(v) {
        return is$typed(v, id, hashReasonPin);
      }
      function validateReasonPin(v) {
        return validate(v, id, hashReasonPin);
      }
      var hashThreadViewPost = "threadViewPost";
      function isThreadViewPost(v) {
        return is$typed(v, id, hashThreadViewPost);
      }
      function validateThreadViewPost(v) {
        return validate(v, id, hashThreadViewPost);
      }
      var hashNotFoundPost = "notFoundPost";
      function isNotFoundPost(v) {
        return is$typed(v, id, hashNotFoundPost);
      }
      function validateNotFoundPost(v) {
        return validate(v, id, hashNotFoundPost);
      }
      var hashBlockedPost = "blockedPost";
      function isBlockedPost(v) {
        return is$typed(v, id, hashBlockedPost);
      }
      function validateBlockedPost(v) {
        return validate(v, id, hashBlockedPost);
      }
      var hashBlockedAuthor = "blockedAuthor";
      function isBlockedAuthor(v) {
        return is$typed(v, id, hashBlockedAuthor);
      }
      function validateBlockedAuthor(v) {
        return validate(v, id, hashBlockedAuthor);
      }
      var hashGeneratorView = "generatorView";
      function isGeneratorView(v) {
        return is$typed(v, id, hashGeneratorView);
      }
      function validateGeneratorView(v) {
        return validate(v, id, hashGeneratorView);
      }
      var hashGeneratorViewerState = "generatorViewerState";
      function isGeneratorViewerState(v) {
        return is$typed(v, id, hashGeneratorViewerState);
      }
      function validateGeneratorViewerState(v) {
        return validate(v, id, hashGeneratorViewerState);
      }
      var hashSkeletonFeedPost = "skeletonFeedPost";
      function isSkeletonFeedPost(v) {
        return is$typed(v, id, hashSkeletonFeedPost);
      }
      function validateSkeletonFeedPost(v) {
        return validate(v, id, hashSkeletonFeedPost);
      }
      var hashSkeletonReasonRepost = "skeletonReasonRepost";
      function isSkeletonReasonRepost(v) {
        return is$typed(v, id, hashSkeletonReasonRepost);
      }
      function validateSkeletonReasonRepost(v) {
        return validate(v, id, hashSkeletonReasonRepost);
      }
      var hashSkeletonReasonPin = "skeletonReasonPin";
      function isSkeletonReasonPin(v) {
        return is$typed(v, id, hashSkeletonReasonPin);
      }
      function validateSkeletonReasonPin(v) {
        return validate(v, id, hashSkeletonReasonPin);
      }
      var hashThreadgateView = "threadgateView";
      function isThreadgateView(v) {
        return is$typed(v, id, hashThreadgateView);
      }
      function validateThreadgateView(v) {
        return validate(v, id, hashThreadgateView);
      }
      var hashInteraction = "interaction";
      function isInteraction(v) {
        return is$typed(v, id, hashInteraction);
      }
      function validateInteraction(v) {
        return validate(v, id, hashInteraction);
      }
      exports.REQUESTLESS = `${id}#requestLess`;
      exports.REQUESTMORE = `${id}#requestMore`;
      exports.CLICKTHROUGHITEM = `${id}#clickthroughItem`;
      exports.CLICKTHROUGHAUTHOR = `${id}#clickthroughAuthor`;
      exports.CLICKTHROUGHREPOSTER = `${id}#clickthroughReposter`;
      exports.CLICKTHROUGHEMBED = `${id}#clickthroughEmbed`;
      exports.CONTENTMODEUNSPECIFIED = `${id}#contentModeUnspecified`;
      exports.CONTENTMODEVIDEO = `${id}#contentModeVideo`;
      exports.INTERACTIONSEEN = `${id}#interactionSeen`;
      exports.INTERACTIONLIKE = `${id}#interactionLike`;
      exports.INTERACTIONREPOST = `${id}#interactionRepost`;
      exports.INTERACTIONREPLY = `${id}#interactionReply`;
      exports.INTERACTIONQUOTE = `${id}#interactionQuote`;
      exports.INTERACTIONSHARE = `${id}#interactionShare`;
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/describeFeedGenerator.js
  var require_describeFeedGenerator = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/describeFeedGenerator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      exports.isFeed = isFeed;
      exports.validateFeed = validateFeed;
      exports.isLinks = isLinks;
      exports.validateLinks = validateLinks;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.feed.describeFeedGenerator";
      function toKnownErr(e) {
        return e;
      }
      var hashFeed = "feed";
      function isFeed(v) {
        return is$typed(v, id, hashFeed);
      }
      function validateFeed(v) {
        return validate(v, id, hashFeed);
      }
      var hashLinks = "links";
      function isLinks(v) {
        return is$typed(v, id, hashLinks);
      }
      function validateLinks(v) {
        return validate(v, id, hashLinks);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/generator.js
  var require_generator = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/generator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isRecord = isRecord;
      exports.validateRecord = validateRecord;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.feed.generator";
      var hashRecord = "main";
      function isRecord(v) {
        return is$typed(v, id, hashRecord);
      }
      function validateRecord(v) {
        return validate(v, id, hashRecord, true);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getActorFeeds.js
  var require_getActorFeeds = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getActorFeeds.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedGenerator.js
  var require_getFeedGenerator = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedGenerator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedGenerators.js
  var require_getFeedGenerators = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedGenerators.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getLikes.js
  var require_getLikes = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getLikes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      exports.isLike = isLike;
      exports.validateLike = validateLike;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.feed.getLikes";
      function toKnownErr(e) {
        return e;
      }
      var hashLike = "like";
      function isLike(v) {
        return is$typed(v, id, hashLike);
      }
      function validateLike(v) {
        return validate(v, id, hashLike);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getPosts.js
  var require_getPosts = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getPosts.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getQuotes.js
  var require_getQuotes = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getQuotes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getRepostedBy.js
  var require_getRepostedBy = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getRepostedBy.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getSuggestedFeeds.js
  var require_getSuggestedFeeds = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getSuggestedFeeds.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getTimeline.js
  var require_getTimeline = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getTimeline.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/like.js
  var require_like = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/like.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isRecord = isRecord;
      exports.validateRecord = validateRecord;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.feed.like";
      var hashRecord = "main";
      function isRecord(v) {
        return is$typed(v, id, hashRecord);
      }
      function validateRecord(v) {
        return validate(v, id, hashRecord, true);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/post.js
  var require_post = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/post.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isRecord = isRecord;
      exports.validateRecord = validateRecord;
      exports.isReplyRef = isReplyRef;
      exports.validateReplyRef = validateReplyRef;
      exports.isEntity = isEntity;
      exports.validateEntity = validateEntity;
      exports.isTextSlice = isTextSlice;
      exports.validateTextSlice = validateTextSlice;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.feed.post";
      var hashRecord = "main";
      function isRecord(v) {
        return is$typed(v, id, hashRecord);
      }
      function validateRecord(v) {
        return validate(v, id, hashRecord, true);
      }
      var hashReplyRef = "replyRef";
      function isReplyRef(v) {
        return is$typed(v, id, hashReplyRef);
      }
      function validateReplyRef(v) {
        return validate(v, id, hashReplyRef);
      }
      var hashEntity = "entity";
      function isEntity(v) {
        return is$typed(v, id, hashEntity);
      }
      function validateEntity(v) {
        return validate(v, id, hashEntity);
      }
      var hashTextSlice = "textSlice";
      function isTextSlice(v) {
        return is$typed(v, id, hashTextSlice);
      }
      function validateTextSlice(v) {
        return validate(v, id, hashTextSlice);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/postgate.js
  var require_postgate = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/postgate.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isRecord = isRecord;
      exports.validateRecord = validateRecord;
      exports.isDisableRule = isDisableRule;
      exports.validateDisableRule = validateDisableRule;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.feed.postgate";
      var hashRecord = "main";
      function isRecord(v) {
        return is$typed(v, id, hashRecord);
      }
      function validateRecord(v) {
        return validate(v, id, hashRecord, true);
      }
      var hashDisableRule = "disableRule";
      function isDisableRule(v) {
        return is$typed(v, id, hashDisableRule);
      }
      function validateDisableRule(v) {
        return validate(v, id, hashDisableRule);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/repost.js
  var require_repost = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/repost.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isRecord = isRecord;
      exports.validateRecord = validateRecord;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.feed.repost";
      var hashRecord = "main";
      function isRecord(v) {
        return is$typed(v, id, hashRecord);
      }
      function validateRecord(v) {
        return validate(v, id, hashRecord, true);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/sendInteractions.js
  var require_sendInteractions = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/sendInteractions.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/threadgate.js
  var require_threadgate = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/feed/threadgate.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isRecord = isRecord;
      exports.validateRecord = validateRecord;
      exports.isMentionRule = isMentionRule;
      exports.validateMentionRule = validateMentionRule;
      exports.isFollowerRule = isFollowerRule;
      exports.validateFollowerRule = validateFollowerRule;
      exports.isFollowingRule = isFollowingRule;
      exports.validateFollowingRule = validateFollowingRule;
      exports.isListRule = isListRule;
      exports.validateListRule = validateListRule;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.feed.threadgate";
      var hashRecord = "main";
      function isRecord(v) {
        return is$typed(v, id, hashRecord);
      }
      function validateRecord(v) {
        return validate(v, id, hashRecord, true);
      }
      var hashMentionRule = "mentionRule";
      function isMentionRule(v) {
        return is$typed(v, id, hashMentionRule);
      }
      function validateMentionRule(v) {
        return validate(v, id, hashMentionRule);
      }
      var hashFollowerRule = "followerRule";
      function isFollowerRule(v) {
        return is$typed(v, id, hashFollowerRule);
      }
      function validateFollowerRule(v) {
        return validate(v, id, hashFollowerRule);
      }
      var hashFollowingRule = "followingRule";
      function isFollowingRule(v) {
        return is$typed(v, id, hashFollowingRule);
      }
      function validateFollowingRule(v) {
        return validate(v, id, hashFollowingRule);
      }
      var hashListRule = "listRule";
      function isListRule(v) {
        return is$typed(v, id, hashListRule);
      }
      function validateListRule(v) {
        return validate(v, id, hashListRule);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/block.js
  var require_block = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/block.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isRecord = isRecord;
      exports.validateRecord = validateRecord;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.graph.block";
      var hashRecord = "main";
      function isRecord(v) {
        return is$typed(v, id, hashRecord);
      }
      function validateRecord(v) {
        return validate(v, id, hashRecord, true);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/defs.js
  var require_defs11 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.REFERENCELIST = exports.CURATELIST = exports.MODLIST = void 0;
      exports.isListViewBasic = isListViewBasic;
      exports.validateListViewBasic = validateListViewBasic;
      exports.isListView = isListView;
      exports.validateListView = validateListView;
      exports.isListItemView = isListItemView;
      exports.validateListItemView = validateListItemView;
      exports.isStarterPackView = isStarterPackView;
      exports.validateStarterPackView = validateStarterPackView;
      exports.isStarterPackViewBasic = isStarterPackViewBasic;
      exports.validateStarterPackViewBasic = validateStarterPackViewBasic;
      exports.isListViewerState = isListViewerState;
      exports.validateListViewerState = validateListViewerState;
      exports.isNotFoundActor = isNotFoundActor;
      exports.validateNotFoundActor = validateNotFoundActor;
      exports.isRelationship = isRelationship;
      exports.validateRelationship = validateRelationship;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.graph.defs";
      var hashListViewBasic = "listViewBasic";
      function isListViewBasic(v) {
        return is$typed(v, id, hashListViewBasic);
      }
      function validateListViewBasic(v) {
        return validate(v, id, hashListViewBasic);
      }
      var hashListView = "listView";
      function isListView(v) {
        return is$typed(v, id, hashListView);
      }
      function validateListView(v) {
        return validate(v, id, hashListView);
      }
      var hashListItemView = "listItemView";
      function isListItemView(v) {
        return is$typed(v, id, hashListItemView);
      }
      function validateListItemView(v) {
        return validate(v, id, hashListItemView);
      }
      var hashStarterPackView = "starterPackView";
      function isStarterPackView(v) {
        return is$typed(v, id, hashStarterPackView);
      }
      function validateStarterPackView(v) {
        return validate(v, id, hashStarterPackView);
      }
      var hashStarterPackViewBasic = "starterPackViewBasic";
      function isStarterPackViewBasic(v) {
        return is$typed(v, id, hashStarterPackViewBasic);
      }
      function validateStarterPackViewBasic(v) {
        return validate(v, id, hashStarterPackViewBasic);
      }
      exports.MODLIST = `${id}#modlist`;
      exports.CURATELIST = `${id}#curatelist`;
      exports.REFERENCELIST = `${id}#referencelist`;
      var hashListViewerState = "listViewerState";
      function isListViewerState(v) {
        return is$typed(v, id, hashListViewerState);
      }
      function validateListViewerState(v) {
        return validate(v, id, hashListViewerState);
      }
      var hashNotFoundActor = "notFoundActor";
      function isNotFoundActor(v) {
        return is$typed(v, id, hashNotFoundActor);
      }
      function validateNotFoundActor(v) {
        return validate(v, id, hashNotFoundActor);
      }
      var hashRelationship = "relationship";
      function isRelationship(v) {
        return is$typed(v, id, hashRelationship);
      }
      function validateRelationship(v) {
        return validate(v, id, hashRelationship);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/follow.js
  var require_follow = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/follow.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isRecord = isRecord;
      exports.validateRecord = validateRecord;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.graph.follow";
      var hashRecord = "main";
      function isRecord(v) {
        return is$typed(v, id, hashRecord);
      }
      function validateRecord(v) {
        return validate(v, id, hashRecord, true);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getActorStarterPacks.js
  var require_getActorStarterPacks = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getActorStarterPacks.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getBlocks.js
  var require_getBlocks2 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getBlocks.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getFollowers.js
  var require_getFollowers = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getFollowers.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getFollows.js
  var require_getFollows = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getFollows.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getKnownFollowers.js
  var require_getKnownFollowers = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getKnownFollowers.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getList.js
  var require_getList = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getList.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getListBlocks.js
  var require_getListBlocks = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getListBlocks.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getListMutes.js
  var require_getListMutes = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getListMutes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getLists.js
  var require_getLists = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getLists.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getMutes.js
  var require_getMutes = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getMutes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getStarterPack.js
  var require_getStarterPack = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getStarterPack.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getStarterPacks.js
  var require_getStarterPacks = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getStarterPacks.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getSuggestedFollowsByActor.js
  var require_getSuggestedFollowsByActor = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getSuggestedFollowsByActor.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/list.js
  var require_list = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/list.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isRecord = isRecord;
      exports.validateRecord = validateRecord;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.graph.list";
      var hashRecord = "main";
      function isRecord(v) {
        return is$typed(v, id, hashRecord);
      }
      function validateRecord(v) {
        return validate(v, id, hashRecord, true);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/listblock.js
  var require_listblock = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/listblock.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isRecord = isRecord;
      exports.validateRecord = validateRecord;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.graph.listblock";
      var hashRecord = "main";
      function isRecord(v) {
        return is$typed(v, id, hashRecord);
      }
      function validateRecord(v) {
        return validate(v, id, hashRecord, true);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/listitem.js
  var require_listitem = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/listitem.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isRecord = isRecord;
      exports.validateRecord = validateRecord;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.graph.listitem";
      var hashRecord = "main";
      function isRecord(v) {
        return is$typed(v, id, hashRecord);
      }
      function validateRecord(v) {
        return validate(v, id, hashRecord, true);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/muteActor.js
  var require_muteActor = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/muteActor.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/muteActorList.js
  var require_muteActorList = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/muteActorList.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/muteThread.js
  var require_muteThread = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/muteThread.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/searchStarterPacks.js
  var require_searchStarterPacks = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/searchStarterPacks.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/starterpack.js
  var require_starterpack = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/starterpack.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isRecord = isRecord;
      exports.validateRecord = validateRecord;
      exports.isFeedItem = isFeedItem;
      exports.validateFeedItem = validateFeedItem;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.graph.starterpack";
      var hashRecord = "main";
      function isRecord(v) {
        return is$typed(v, id, hashRecord);
      }
      function validateRecord(v) {
        return validate(v, id, hashRecord, true);
      }
      var hashFeedItem = "feedItem";
      function isFeedItem(v) {
        return is$typed(v, id, hashFeedItem);
      }
      function validateFeedItem(v) {
        return validate(v, id, hashFeedItem);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/unmuteActor.js
  var require_unmuteActor = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/unmuteActor.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/unmuteActorList.js
  var require_unmuteActorList = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/unmuteActorList.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/unmuteThread.js
  var require_unmuteThread = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/unmuteThread.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/verification.js
  var require_verification = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/graph/verification.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isRecord = isRecord;
      exports.validateRecord = validateRecord;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.graph.verification";
      var hashRecord = "main";
      function isRecord(v) {
        return is$typed(v, id, hashRecord);
      }
      function validateRecord(v) {
        return validate(v, id, hashRecord, true);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/labeler/defs.js
  var require_defs12 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/labeler/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isLabelerView = isLabelerView;
      exports.validateLabelerView = validateLabelerView;
      exports.isLabelerViewDetailed = isLabelerViewDetailed;
      exports.validateLabelerViewDetailed = validateLabelerViewDetailed;
      exports.isLabelerViewerState = isLabelerViewerState;
      exports.validateLabelerViewerState = validateLabelerViewerState;
      exports.isLabelerPolicies = isLabelerPolicies;
      exports.validateLabelerPolicies = validateLabelerPolicies;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.labeler.defs";
      var hashLabelerView = "labelerView";
      function isLabelerView(v) {
        return is$typed(v, id, hashLabelerView);
      }
      function validateLabelerView(v) {
        return validate(v, id, hashLabelerView);
      }
      var hashLabelerViewDetailed = "labelerViewDetailed";
      function isLabelerViewDetailed(v) {
        return is$typed(v, id, hashLabelerViewDetailed);
      }
      function validateLabelerViewDetailed(v) {
        return validate(v, id, hashLabelerViewDetailed);
      }
      var hashLabelerViewerState = "labelerViewerState";
      function isLabelerViewerState(v) {
        return is$typed(v, id, hashLabelerViewerState);
      }
      function validateLabelerViewerState(v) {
        return validate(v, id, hashLabelerViewerState);
      }
      var hashLabelerPolicies = "labelerPolicies";
      function isLabelerPolicies(v) {
        return is$typed(v, id, hashLabelerPolicies);
      }
      function validateLabelerPolicies(v) {
        return validate(v, id, hashLabelerPolicies);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/labeler/getServices.js
  var require_getServices = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/labeler/getServices.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/labeler/service.js
  var require_service = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/labeler/service.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isRecord = isRecord;
      exports.validateRecord = validateRecord;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.labeler.service";
      var hashRecord = "main";
      function isRecord(v) {
        return is$typed(v, id, hashRecord);
      }
      function validateRecord(v) {
        return validate(v, id, hashRecord, true);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/notification/defs.js
  var require_defs13 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/notification/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isRecordDeleted = isRecordDeleted;
      exports.validateRecordDeleted = validateRecordDeleted;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.notification.defs";
      var hashRecordDeleted = "recordDeleted";
      function isRecordDeleted(v) {
        return is$typed(v, id, hashRecordDeleted);
      }
      function validateRecordDeleted(v) {
        return validate(v, id, hashRecordDeleted);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/notification/getUnreadCount.js
  var require_getUnreadCount = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/notification/getUnreadCount.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/notification/listNotifications.js
  var require_listNotifications = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/notification/listNotifications.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      exports.isNotification = isNotification;
      exports.validateNotification = validateNotification;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.notification.listNotifications";
      function toKnownErr(e) {
        return e;
      }
      var hashNotification = "notification";
      function isNotification(v) {
        return is$typed(v, id, hashNotification);
      }
      function validateNotification(v) {
        return validate(v, id, hashNotification);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/notification/putPreferences.js
  var require_putPreferences2 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/notification/putPreferences.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/notification/registerPush.js
  var require_registerPush = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/notification/registerPush.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/notification/updateSeen.js
  var require_updateSeen = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/notification/updateSeen.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/richtext/facet.js
  var require_facet = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/richtext/facet.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isMain = isMain;
      exports.validateMain = validateMain;
      exports.isMention = isMention;
      exports.validateMention = validateMention;
      exports.isLink = isLink;
      exports.validateLink = validateLink;
      exports.isTag = isTag;
      exports.validateTag = validateTag;
      exports.isByteSlice = isByteSlice;
      exports.validateByteSlice = validateByteSlice;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.richtext.facet";
      var hashMain = "main";
      function isMain(v) {
        return is$typed(v, id, hashMain);
      }
      function validateMain(v) {
        return validate(v, id, hashMain);
      }
      var hashMention = "mention";
      function isMention(v) {
        return is$typed(v, id, hashMention);
      }
      function validateMention(v) {
        return validate(v, id, hashMention);
      }
      var hashLink = "link";
      function isLink(v) {
        return is$typed(v, id, hashLink);
      }
      function validateLink(v) {
        return validate(v, id, hashLink);
      }
      var hashTag = "tag";
      function isTag(v) {
        return is$typed(v, id, hashTag);
      }
      function validateTag(v) {
        return validate(v, id, hashTag);
      }
      var hashByteSlice = "byteSlice";
      function isByteSlice(v) {
        return is$typed(v, id, hashByteSlice);
      }
      function validateByteSlice(v) {
        return validate(v, id, hashByteSlice);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/defs.js
  var require_defs14 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isSkeletonSearchPost = isSkeletonSearchPost;
      exports.validateSkeletonSearchPost = validateSkeletonSearchPost;
      exports.isSkeletonSearchActor = isSkeletonSearchActor;
      exports.validateSkeletonSearchActor = validateSkeletonSearchActor;
      exports.isSkeletonSearchStarterPack = isSkeletonSearchStarterPack;
      exports.validateSkeletonSearchStarterPack = validateSkeletonSearchStarterPack;
      exports.isTrendingTopic = isTrendingTopic;
      exports.validateTrendingTopic = validateTrendingTopic;
      exports.isSkeletonTrend = isSkeletonTrend;
      exports.validateSkeletonTrend = validateSkeletonTrend;
      exports.isTrendView = isTrendView;
      exports.validateTrendView = validateTrendView;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.unspecced.defs";
      var hashSkeletonSearchPost = "skeletonSearchPost";
      function isSkeletonSearchPost(v) {
        return is$typed(v, id, hashSkeletonSearchPost);
      }
      function validateSkeletonSearchPost(v) {
        return validate(v, id, hashSkeletonSearchPost);
      }
      var hashSkeletonSearchActor = "skeletonSearchActor";
      function isSkeletonSearchActor(v) {
        return is$typed(v, id, hashSkeletonSearchActor);
      }
      function validateSkeletonSearchActor(v) {
        return validate(v, id, hashSkeletonSearchActor);
      }
      var hashSkeletonSearchStarterPack = "skeletonSearchStarterPack";
      function isSkeletonSearchStarterPack(v) {
        return is$typed(v, id, hashSkeletonSearchStarterPack);
      }
      function validateSkeletonSearchStarterPack(v) {
        return validate(v, id, hashSkeletonSearchStarterPack);
      }
      var hashTrendingTopic = "trendingTopic";
      function isTrendingTopic(v) {
        return is$typed(v, id, hashTrendingTopic);
      }
      function validateTrendingTopic(v) {
        return validate(v, id, hashTrendingTopic);
      }
      var hashSkeletonTrend = "skeletonTrend";
      function isSkeletonTrend(v) {
        return is$typed(v, id, hashSkeletonTrend);
      }
      function validateSkeletonTrend(v) {
        return validate(v, id, hashSkeletonTrend);
      }
      var hashTrendView = "trendView";
      function isTrendView(v) {
        return is$typed(v, id, hashTrendView);
      }
      function validateTrendView(v) {
        return validate(v, id, hashTrendView);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getConfig.js
  var require_getConfig = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getConfig.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      exports.isLiveNowConfig = isLiveNowConfig;
      exports.validateLiveNowConfig = validateLiveNowConfig;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.unspecced.getConfig";
      function toKnownErr(e) {
        return e;
      }
      var hashLiveNowConfig = "liveNowConfig";
      function isLiveNowConfig(v) {
        return is$typed(v, id, hashLiveNowConfig);
      }
      function validateLiveNowConfig(v) {
        return validate(v, id, hashLiveNowConfig);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getPopularFeedGenerators.js
  var require_getPopularFeedGenerators = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getPopularFeedGenerators.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getSuggestedFeeds.js
  var require_getSuggestedFeeds2 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getSuggestedFeeds.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getSuggestedFeedsSkeleton.js
  var require_getSuggestedFeedsSkeleton = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getSuggestedFeedsSkeleton.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getSuggestedStarterPacks.js
  var require_getSuggestedStarterPacks = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getSuggestedStarterPacks.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getSuggestedStarterPacksSkeleton.js
  var require_getSuggestedStarterPacksSkeleton = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getSuggestedStarterPacksSkeleton.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getSuggestedUsers.js
  var require_getSuggestedUsers = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getSuggestedUsers.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getSuggestedUsersSkeleton.js
  var require_getSuggestedUsersSkeleton = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getSuggestedUsersSkeleton.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getSuggestionsSkeleton.js
  var require_getSuggestionsSkeleton = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getSuggestionsSkeleton.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getTaggedSuggestions.js
  var require_getTaggedSuggestions = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getTaggedSuggestions.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      exports.isSuggestion = isSuggestion;
      exports.validateSuggestion = validateSuggestion;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.unspecced.getTaggedSuggestions";
      function toKnownErr(e) {
        return e;
      }
      var hashSuggestion = "suggestion";
      function isSuggestion(v) {
        return is$typed(v, id, hashSuggestion);
      }
      function validateSuggestion(v) {
        return validate(v, id, hashSuggestion);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getTrendingTopics.js
  var require_getTrendingTopics = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getTrendingTopics.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getTrends.js
  var require_getTrends = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getTrends.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getTrendsSkeleton.js
  var require_getTrendsSkeleton = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getTrendsSkeleton.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/video/defs.js
  var require_defs15 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/video/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isJobStatus = isJobStatus;
      exports.validateJobStatus = validateJobStatus;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "app.bsky.video.defs";
      var hashJobStatus = "jobStatus";
      function isJobStatus(v) {
        return is$typed(v, id, hashJobStatus);
      }
      function validateJobStatus(v) {
        return validate(v, id, hashJobStatus);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/video/getJobStatus.js
  var require_getJobStatus = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/video/getJobStatus.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/video/getUploadLimits.js
  var require_getUploadLimits = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/video/getUploadLimits.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/video/uploadVideo.js
  var require_uploadVideo = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/app/bsky/video/uploadVideo.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/actor/declaration.js
  var require_declaration = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/actor/declaration.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isRecord = isRecord;
      exports.validateRecord = validateRecord;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "chat.bsky.actor.declaration";
      var hashRecord = "main";
      function isRecord(v) {
        return is$typed(v, id, hashRecord);
      }
      function validateRecord(v) {
        return validate(v, id, hashRecord, true);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/actor/defs.js
  var require_defs16 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/actor/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isProfileViewBasic = isProfileViewBasic;
      exports.validateProfileViewBasic = validateProfileViewBasic;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "chat.bsky.actor.defs";
      var hashProfileViewBasic = "profileViewBasic";
      function isProfileViewBasic(v) {
        return is$typed(v, id, hashProfileViewBasic);
      }
      function validateProfileViewBasic(v) {
        return validate(v, id, hashProfileViewBasic);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/actor/deleteAccount.js
  var require_deleteAccount3 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/actor/deleteAccount.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/actor/exportAccountData.js
  var require_exportAccountData = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/actor/exportAccountData.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/acceptConvo.js
  var require_acceptConvo = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/acceptConvo.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/defs.js
  var require_defs17 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isMessageRef = isMessageRef;
      exports.validateMessageRef = validateMessageRef;
      exports.isMessageInput = isMessageInput;
      exports.validateMessageInput = validateMessageInput;
      exports.isMessageView = isMessageView;
      exports.validateMessageView = validateMessageView;
      exports.isDeletedMessageView = isDeletedMessageView;
      exports.validateDeletedMessageView = validateDeletedMessageView;
      exports.isMessageViewSender = isMessageViewSender;
      exports.validateMessageViewSender = validateMessageViewSender;
      exports.isReactionView = isReactionView;
      exports.validateReactionView = validateReactionView;
      exports.isReactionViewSender = isReactionViewSender;
      exports.validateReactionViewSender = validateReactionViewSender;
      exports.isMessageAndReactionView = isMessageAndReactionView;
      exports.validateMessageAndReactionView = validateMessageAndReactionView;
      exports.isConvoView = isConvoView;
      exports.validateConvoView = validateConvoView;
      exports.isLogBeginConvo = isLogBeginConvo;
      exports.validateLogBeginConvo = validateLogBeginConvo;
      exports.isLogAcceptConvo = isLogAcceptConvo;
      exports.validateLogAcceptConvo = validateLogAcceptConvo;
      exports.isLogLeaveConvo = isLogLeaveConvo;
      exports.validateLogLeaveConvo = validateLogLeaveConvo;
      exports.isLogMuteConvo = isLogMuteConvo;
      exports.validateLogMuteConvo = validateLogMuteConvo;
      exports.isLogUnmuteConvo = isLogUnmuteConvo;
      exports.validateLogUnmuteConvo = validateLogUnmuteConvo;
      exports.isLogCreateMessage = isLogCreateMessage;
      exports.validateLogCreateMessage = validateLogCreateMessage;
      exports.isLogDeleteMessage = isLogDeleteMessage;
      exports.validateLogDeleteMessage = validateLogDeleteMessage;
      exports.isLogReadMessage = isLogReadMessage;
      exports.validateLogReadMessage = validateLogReadMessage;
      exports.isLogAddReaction = isLogAddReaction;
      exports.validateLogAddReaction = validateLogAddReaction;
      exports.isLogRemoveReaction = isLogRemoveReaction;
      exports.validateLogRemoveReaction = validateLogRemoveReaction;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "chat.bsky.convo.defs";
      var hashMessageRef = "messageRef";
      function isMessageRef(v) {
        return is$typed(v, id, hashMessageRef);
      }
      function validateMessageRef(v) {
        return validate(v, id, hashMessageRef);
      }
      var hashMessageInput = "messageInput";
      function isMessageInput(v) {
        return is$typed(v, id, hashMessageInput);
      }
      function validateMessageInput(v) {
        return validate(v, id, hashMessageInput);
      }
      var hashMessageView = "messageView";
      function isMessageView(v) {
        return is$typed(v, id, hashMessageView);
      }
      function validateMessageView(v) {
        return validate(v, id, hashMessageView);
      }
      var hashDeletedMessageView = "deletedMessageView";
      function isDeletedMessageView(v) {
        return is$typed(v, id, hashDeletedMessageView);
      }
      function validateDeletedMessageView(v) {
        return validate(v, id, hashDeletedMessageView);
      }
      var hashMessageViewSender = "messageViewSender";
      function isMessageViewSender(v) {
        return is$typed(v, id, hashMessageViewSender);
      }
      function validateMessageViewSender(v) {
        return validate(v, id, hashMessageViewSender);
      }
      var hashReactionView = "reactionView";
      function isReactionView(v) {
        return is$typed(v, id, hashReactionView);
      }
      function validateReactionView(v) {
        return validate(v, id, hashReactionView);
      }
      var hashReactionViewSender = "reactionViewSender";
      function isReactionViewSender(v) {
        return is$typed(v, id, hashReactionViewSender);
      }
      function validateReactionViewSender(v) {
        return validate(v, id, hashReactionViewSender);
      }
      var hashMessageAndReactionView = "messageAndReactionView";
      function isMessageAndReactionView(v) {
        return is$typed(v, id, hashMessageAndReactionView);
      }
      function validateMessageAndReactionView(v) {
        return validate(v, id, hashMessageAndReactionView);
      }
      var hashConvoView = "convoView";
      function isConvoView(v) {
        return is$typed(v, id, hashConvoView);
      }
      function validateConvoView(v) {
        return validate(v, id, hashConvoView);
      }
      var hashLogBeginConvo = "logBeginConvo";
      function isLogBeginConvo(v) {
        return is$typed(v, id, hashLogBeginConvo);
      }
      function validateLogBeginConvo(v) {
        return validate(v, id, hashLogBeginConvo);
      }
      var hashLogAcceptConvo = "logAcceptConvo";
      function isLogAcceptConvo(v) {
        return is$typed(v, id, hashLogAcceptConvo);
      }
      function validateLogAcceptConvo(v) {
        return validate(v, id, hashLogAcceptConvo);
      }
      var hashLogLeaveConvo = "logLeaveConvo";
      function isLogLeaveConvo(v) {
        return is$typed(v, id, hashLogLeaveConvo);
      }
      function validateLogLeaveConvo(v) {
        return validate(v, id, hashLogLeaveConvo);
      }
      var hashLogMuteConvo = "logMuteConvo";
      function isLogMuteConvo(v) {
        return is$typed(v, id, hashLogMuteConvo);
      }
      function validateLogMuteConvo(v) {
        return validate(v, id, hashLogMuteConvo);
      }
      var hashLogUnmuteConvo = "logUnmuteConvo";
      function isLogUnmuteConvo(v) {
        return is$typed(v, id, hashLogUnmuteConvo);
      }
      function validateLogUnmuteConvo(v) {
        return validate(v, id, hashLogUnmuteConvo);
      }
      var hashLogCreateMessage = "logCreateMessage";
      function isLogCreateMessage(v) {
        return is$typed(v, id, hashLogCreateMessage);
      }
      function validateLogCreateMessage(v) {
        return validate(v, id, hashLogCreateMessage);
      }
      var hashLogDeleteMessage = "logDeleteMessage";
      function isLogDeleteMessage(v) {
        return is$typed(v, id, hashLogDeleteMessage);
      }
      function validateLogDeleteMessage(v) {
        return validate(v, id, hashLogDeleteMessage);
      }
      var hashLogReadMessage = "logReadMessage";
      function isLogReadMessage(v) {
        return is$typed(v, id, hashLogReadMessage);
      }
      function validateLogReadMessage(v) {
        return validate(v, id, hashLogReadMessage);
      }
      var hashLogAddReaction = "logAddReaction";
      function isLogAddReaction(v) {
        return is$typed(v, id, hashLogAddReaction);
      }
      function validateLogAddReaction(v) {
        return validate(v, id, hashLogAddReaction);
      }
      var hashLogRemoveReaction = "logRemoveReaction";
      function isLogRemoveReaction(v) {
        return is$typed(v, id, hashLogRemoveReaction);
      }
      function validateLogRemoveReaction(v) {
        return validate(v, id, hashLogRemoveReaction);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/deleteMessageForSelf.js
  var require_deleteMessageForSelf = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/deleteMessageForSelf.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/getConvo.js
  var require_getConvo = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/getConvo.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/getConvoAvailability.js
  var require_getConvoAvailability = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/getConvoAvailability.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/getConvoForMembers.js
  var require_getConvoForMembers = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/getConvoForMembers.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/getLog.js
  var require_getLog = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/getLog.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/getMessages.js
  var require_getMessages = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/getMessages.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/leaveConvo.js
  var require_leaveConvo = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/leaveConvo.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/listConvos.js
  var require_listConvos = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/listConvos.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/muteConvo.js
  var require_muteConvo = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/muteConvo.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/sendMessage.js
  var require_sendMessage = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/sendMessage.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/sendMessageBatch.js
  var require_sendMessageBatch = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/sendMessageBatch.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      exports.isBatchItem = isBatchItem;
      exports.validateBatchItem = validateBatchItem;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "chat.bsky.convo.sendMessageBatch";
      function toKnownErr(e) {
        return e;
      }
      var hashBatchItem = "batchItem";
      function isBatchItem(v) {
        return is$typed(v, id, hashBatchItem);
      }
      function validateBatchItem(v) {
        return validate(v, id, hashBatchItem);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/unmuteConvo.js
  var require_unmuteConvo = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/unmuteConvo.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/updateAllRead.js
  var require_updateAllRead = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/updateAllRead.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/updateRead.js
  var require_updateRead = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/convo/updateRead.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/moderation/getActorMetadata.js
  var require_getActorMetadata = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/moderation/getActorMetadata.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      exports.isMetadata = isMetadata;
      exports.validateMetadata = validateMetadata;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "chat.bsky.moderation.getActorMetadata";
      function toKnownErr(e) {
        return e;
      }
      var hashMetadata = "metadata";
      function isMetadata(v) {
        return is$typed(v, id, hashMetadata);
      }
      function validateMetadata(v) {
        return validate(v, id, hashMetadata);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/moderation/getMessageContext.js
  var require_getMessageContext = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/moderation/getMessageContext.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/moderation/updateActorAccess.js
  var require_updateActorAccess = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/chat/bsky/moderation/updateActorAccess.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/defs.js
  var require_defs18 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isTemplateView = isTemplateView;
      exports.validateTemplateView = validateTemplateView;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "tools.ozone.communication.defs";
      var hashTemplateView = "templateView";
      function isTemplateView(v) {
        return is$typed(v, id, hashTemplateView);
      }
      function validateTemplateView(v) {
        return validate(v, id, hashTemplateView);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/deleteTemplate.js
  var require_deleteTemplate = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/deleteTemplate.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/listTemplates.js
  var require_listTemplates = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/listTemplates.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/hosting/getAccountHistory.js
  var require_getAccountHistory = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/hosting/getAccountHistory.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      exports.isEvent = isEvent;
      exports.validateEvent = validateEvent;
      exports.isAccountCreated = isAccountCreated;
      exports.validateAccountCreated = validateAccountCreated;
      exports.isEmailUpdated = isEmailUpdated;
      exports.validateEmailUpdated = validateEmailUpdated;
      exports.isEmailConfirmed = isEmailConfirmed;
      exports.validateEmailConfirmed = validateEmailConfirmed;
      exports.isPasswordUpdated = isPasswordUpdated;
      exports.validatePasswordUpdated = validatePasswordUpdated;
      exports.isHandleUpdated = isHandleUpdated;
      exports.validateHandleUpdated = validateHandleUpdated;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "tools.ozone.hosting.getAccountHistory";
      function toKnownErr(e) {
        return e;
      }
      var hashEvent = "event";
      function isEvent(v) {
        return is$typed(v, id, hashEvent);
      }
      function validateEvent(v) {
        return validate(v, id, hashEvent);
      }
      var hashAccountCreated = "accountCreated";
      function isAccountCreated(v) {
        return is$typed(v, id, hashAccountCreated);
      }
      function validateAccountCreated(v) {
        return validate(v, id, hashAccountCreated);
      }
      var hashEmailUpdated = "emailUpdated";
      function isEmailUpdated(v) {
        return is$typed(v, id, hashEmailUpdated);
      }
      function validateEmailUpdated(v) {
        return validate(v, id, hashEmailUpdated);
      }
      var hashEmailConfirmed = "emailConfirmed";
      function isEmailConfirmed(v) {
        return is$typed(v, id, hashEmailConfirmed);
      }
      function validateEmailConfirmed(v) {
        return validate(v, id, hashEmailConfirmed);
      }
      var hashPasswordUpdated = "passwordUpdated";
      function isPasswordUpdated(v) {
        return is$typed(v, id, hashPasswordUpdated);
      }
      function validatePasswordUpdated(v) {
        return validate(v, id, hashPasswordUpdated);
      }
      var hashHandleUpdated = "handleUpdated";
      function isHandleUpdated(v) {
        return is$typed(v, id, hashHandleUpdated);
      }
      function validateHandleUpdated(v) {
        return validate(v, id, hashHandleUpdated);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/defs.js
  var require_defs19 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.REVIEWNONE = exports.REVIEWCLOSED = exports.REVIEWESCALATED = exports.REVIEWOPEN = void 0;
      exports.isModEventView = isModEventView;
      exports.validateModEventView = validateModEventView;
      exports.isModEventViewDetail = isModEventViewDetail;
      exports.validateModEventViewDetail = validateModEventViewDetail;
      exports.isSubjectStatusView = isSubjectStatusView;
      exports.validateSubjectStatusView = validateSubjectStatusView;
      exports.isSubjectView = isSubjectView;
      exports.validateSubjectView = validateSubjectView;
      exports.isAccountStats = isAccountStats;
      exports.validateAccountStats = validateAccountStats;
      exports.isRecordsStats = isRecordsStats;
      exports.validateRecordsStats = validateRecordsStats;
      exports.isModEventTakedown = isModEventTakedown;
      exports.validateModEventTakedown = validateModEventTakedown;
      exports.isModEventReverseTakedown = isModEventReverseTakedown;
      exports.validateModEventReverseTakedown = validateModEventReverseTakedown;
      exports.isModEventResolveAppeal = isModEventResolveAppeal;
      exports.validateModEventResolveAppeal = validateModEventResolveAppeal;
      exports.isModEventComment = isModEventComment;
      exports.validateModEventComment = validateModEventComment;
      exports.isModEventReport = isModEventReport;
      exports.validateModEventReport = validateModEventReport;
      exports.isModEventLabel = isModEventLabel;
      exports.validateModEventLabel = validateModEventLabel;
      exports.isModEventPriorityScore = isModEventPriorityScore;
      exports.validateModEventPriorityScore = validateModEventPriorityScore;
      exports.isModEventAcknowledge = isModEventAcknowledge;
      exports.validateModEventAcknowledge = validateModEventAcknowledge;
      exports.isModEventEscalate = isModEventEscalate;
      exports.validateModEventEscalate = validateModEventEscalate;
      exports.isModEventMute = isModEventMute;
      exports.validateModEventMute = validateModEventMute;
      exports.isModEventUnmute = isModEventUnmute;
      exports.validateModEventUnmute = validateModEventUnmute;
      exports.isModEventMuteReporter = isModEventMuteReporter;
      exports.validateModEventMuteReporter = validateModEventMuteReporter;
      exports.isModEventUnmuteReporter = isModEventUnmuteReporter;
      exports.validateModEventUnmuteReporter = validateModEventUnmuteReporter;
      exports.isModEventEmail = isModEventEmail;
      exports.validateModEventEmail = validateModEventEmail;
      exports.isModEventDivert = isModEventDivert;
      exports.validateModEventDivert = validateModEventDivert;
      exports.isModEventTag = isModEventTag;
      exports.validateModEventTag = validateModEventTag;
      exports.isAccountEvent = isAccountEvent;
      exports.validateAccountEvent = validateAccountEvent;
      exports.isIdentityEvent = isIdentityEvent;
      exports.validateIdentityEvent = validateIdentityEvent;
      exports.isRecordEvent = isRecordEvent;
      exports.validateRecordEvent = validateRecordEvent;
      exports.isRepoView = isRepoView;
      exports.validateRepoView = validateRepoView;
      exports.isRepoViewDetail = isRepoViewDetail;
      exports.validateRepoViewDetail = validateRepoViewDetail;
      exports.isRepoViewNotFound = isRepoViewNotFound;
      exports.validateRepoViewNotFound = validateRepoViewNotFound;
      exports.isRecordView = isRecordView;
      exports.validateRecordView = validateRecordView;
      exports.isRecordViewDetail = isRecordViewDetail;
      exports.validateRecordViewDetail = validateRecordViewDetail;
      exports.isRecordViewNotFound = isRecordViewNotFound;
      exports.validateRecordViewNotFound = validateRecordViewNotFound;
      exports.isModeration = isModeration;
      exports.validateModeration = validateModeration;
      exports.isModerationDetail = isModerationDetail;
      exports.validateModerationDetail = validateModerationDetail;
      exports.isBlobView = isBlobView;
      exports.validateBlobView = validateBlobView;
      exports.isImageDetails = isImageDetails;
      exports.validateImageDetails = validateImageDetails;
      exports.isVideoDetails = isVideoDetails;
      exports.validateVideoDetails = validateVideoDetails;
      exports.isAccountHosting = isAccountHosting;
      exports.validateAccountHosting = validateAccountHosting;
      exports.isRecordHosting = isRecordHosting;
      exports.validateRecordHosting = validateRecordHosting;
      exports.isReporterStats = isReporterStats;
      exports.validateReporterStats = validateReporterStats;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "tools.ozone.moderation.defs";
      var hashModEventView = "modEventView";
      function isModEventView(v) {
        return is$typed(v, id, hashModEventView);
      }
      function validateModEventView(v) {
        return validate(v, id, hashModEventView);
      }
      var hashModEventViewDetail = "modEventViewDetail";
      function isModEventViewDetail(v) {
        return is$typed(v, id, hashModEventViewDetail);
      }
      function validateModEventViewDetail(v) {
        return validate(v, id, hashModEventViewDetail);
      }
      var hashSubjectStatusView = "subjectStatusView";
      function isSubjectStatusView(v) {
        return is$typed(v, id, hashSubjectStatusView);
      }
      function validateSubjectStatusView(v) {
        return validate(v, id, hashSubjectStatusView);
      }
      var hashSubjectView = "subjectView";
      function isSubjectView(v) {
        return is$typed(v, id, hashSubjectView);
      }
      function validateSubjectView(v) {
        return validate(v, id, hashSubjectView);
      }
      var hashAccountStats = "accountStats";
      function isAccountStats(v) {
        return is$typed(v, id, hashAccountStats);
      }
      function validateAccountStats(v) {
        return validate(v, id, hashAccountStats);
      }
      var hashRecordsStats = "recordsStats";
      function isRecordsStats(v) {
        return is$typed(v, id, hashRecordsStats);
      }
      function validateRecordsStats(v) {
        return validate(v, id, hashRecordsStats);
      }
      exports.REVIEWOPEN = `${id}#reviewOpen`;
      exports.REVIEWESCALATED = `${id}#reviewEscalated`;
      exports.REVIEWCLOSED = `${id}#reviewClosed`;
      exports.REVIEWNONE = `${id}#reviewNone`;
      var hashModEventTakedown = "modEventTakedown";
      function isModEventTakedown(v) {
        return is$typed(v, id, hashModEventTakedown);
      }
      function validateModEventTakedown(v) {
        return validate(v, id, hashModEventTakedown);
      }
      var hashModEventReverseTakedown = "modEventReverseTakedown";
      function isModEventReverseTakedown(v) {
        return is$typed(v, id, hashModEventReverseTakedown);
      }
      function validateModEventReverseTakedown(v) {
        return validate(v, id, hashModEventReverseTakedown);
      }
      var hashModEventResolveAppeal = "modEventResolveAppeal";
      function isModEventResolveAppeal(v) {
        return is$typed(v, id, hashModEventResolveAppeal);
      }
      function validateModEventResolveAppeal(v) {
        return validate(v, id, hashModEventResolveAppeal);
      }
      var hashModEventComment = "modEventComment";
      function isModEventComment(v) {
        return is$typed(v, id, hashModEventComment);
      }
      function validateModEventComment(v) {
        return validate(v, id, hashModEventComment);
      }
      var hashModEventReport = "modEventReport";
      function isModEventReport(v) {
        return is$typed(v, id, hashModEventReport);
      }
      function validateModEventReport(v) {
        return validate(v, id, hashModEventReport);
      }
      var hashModEventLabel = "modEventLabel";
      function isModEventLabel(v) {
        return is$typed(v, id, hashModEventLabel);
      }
      function validateModEventLabel(v) {
        return validate(v, id, hashModEventLabel);
      }
      var hashModEventPriorityScore = "modEventPriorityScore";
      function isModEventPriorityScore(v) {
        return is$typed(v, id, hashModEventPriorityScore);
      }
      function validateModEventPriorityScore(v) {
        return validate(v, id, hashModEventPriorityScore);
      }
      var hashModEventAcknowledge = "modEventAcknowledge";
      function isModEventAcknowledge(v) {
        return is$typed(v, id, hashModEventAcknowledge);
      }
      function validateModEventAcknowledge(v) {
        return validate(v, id, hashModEventAcknowledge);
      }
      var hashModEventEscalate = "modEventEscalate";
      function isModEventEscalate(v) {
        return is$typed(v, id, hashModEventEscalate);
      }
      function validateModEventEscalate(v) {
        return validate(v, id, hashModEventEscalate);
      }
      var hashModEventMute = "modEventMute";
      function isModEventMute(v) {
        return is$typed(v, id, hashModEventMute);
      }
      function validateModEventMute(v) {
        return validate(v, id, hashModEventMute);
      }
      var hashModEventUnmute = "modEventUnmute";
      function isModEventUnmute(v) {
        return is$typed(v, id, hashModEventUnmute);
      }
      function validateModEventUnmute(v) {
        return validate(v, id, hashModEventUnmute);
      }
      var hashModEventMuteReporter = "modEventMuteReporter";
      function isModEventMuteReporter(v) {
        return is$typed(v, id, hashModEventMuteReporter);
      }
      function validateModEventMuteReporter(v) {
        return validate(v, id, hashModEventMuteReporter);
      }
      var hashModEventUnmuteReporter = "modEventUnmuteReporter";
      function isModEventUnmuteReporter(v) {
        return is$typed(v, id, hashModEventUnmuteReporter);
      }
      function validateModEventUnmuteReporter(v) {
        return validate(v, id, hashModEventUnmuteReporter);
      }
      var hashModEventEmail = "modEventEmail";
      function isModEventEmail(v) {
        return is$typed(v, id, hashModEventEmail);
      }
      function validateModEventEmail(v) {
        return validate(v, id, hashModEventEmail);
      }
      var hashModEventDivert = "modEventDivert";
      function isModEventDivert(v) {
        return is$typed(v, id, hashModEventDivert);
      }
      function validateModEventDivert(v) {
        return validate(v, id, hashModEventDivert);
      }
      var hashModEventTag = "modEventTag";
      function isModEventTag(v) {
        return is$typed(v, id, hashModEventTag);
      }
      function validateModEventTag(v) {
        return validate(v, id, hashModEventTag);
      }
      var hashAccountEvent = "accountEvent";
      function isAccountEvent(v) {
        return is$typed(v, id, hashAccountEvent);
      }
      function validateAccountEvent(v) {
        return validate(v, id, hashAccountEvent);
      }
      var hashIdentityEvent = "identityEvent";
      function isIdentityEvent(v) {
        return is$typed(v, id, hashIdentityEvent);
      }
      function validateIdentityEvent(v) {
        return validate(v, id, hashIdentityEvent);
      }
      var hashRecordEvent = "recordEvent";
      function isRecordEvent(v) {
        return is$typed(v, id, hashRecordEvent);
      }
      function validateRecordEvent(v) {
        return validate(v, id, hashRecordEvent);
      }
      var hashRepoView = "repoView";
      function isRepoView(v) {
        return is$typed(v, id, hashRepoView);
      }
      function validateRepoView(v) {
        return validate(v, id, hashRepoView);
      }
      var hashRepoViewDetail = "repoViewDetail";
      function isRepoViewDetail(v) {
        return is$typed(v, id, hashRepoViewDetail);
      }
      function validateRepoViewDetail(v) {
        return validate(v, id, hashRepoViewDetail);
      }
      var hashRepoViewNotFound = "repoViewNotFound";
      function isRepoViewNotFound(v) {
        return is$typed(v, id, hashRepoViewNotFound);
      }
      function validateRepoViewNotFound(v) {
        return validate(v, id, hashRepoViewNotFound);
      }
      var hashRecordView = "recordView";
      function isRecordView(v) {
        return is$typed(v, id, hashRecordView);
      }
      function validateRecordView(v) {
        return validate(v, id, hashRecordView);
      }
      var hashRecordViewDetail = "recordViewDetail";
      function isRecordViewDetail(v) {
        return is$typed(v, id, hashRecordViewDetail);
      }
      function validateRecordViewDetail(v) {
        return validate(v, id, hashRecordViewDetail);
      }
      var hashRecordViewNotFound = "recordViewNotFound";
      function isRecordViewNotFound(v) {
        return is$typed(v, id, hashRecordViewNotFound);
      }
      function validateRecordViewNotFound(v) {
        return validate(v, id, hashRecordViewNotFound);
      }
      var hashModeration = "moderation";
      function isModeration(v) {
        return is$typed(v, id, hashModeration);
      }
      function validateModeration(v) {
        return validate(v, id, hashModeration);
      }
      var hashModerationDetail = "moderationDetail";
      function isModerationDetail(v) {
        return is$typed(v, id, hashModerationDetail);
      }
      function validateModerationDetail(v) {
        return validate(v, id, hashModerationDetail);
      }
      var hashBlobView = "blobView";
      function isBlobView(v) {
        return is$typed(v, id, hashBlobView);
      }
      function validateBlobView(v) {
        return validate(v, id, hashBlobView);
      }
      var hashImageDetails = "imageDetails";
      function isImageDetails(v) {
        return is$typed(v, id, hashImageDetails);
      }
      function validateImageDetails(v) {
        return validate(v, id, hashImageDetails);
      }
      var hashVideoDetails = "videoDetails";
      function isVideoDetails(v) {
        return is$typed(v, id, hashVideoDetails);
      }
      function validateVideoDetails(v) {
        return validate(v, id, hashVideoDetails);
      }
      var hashAccountHosting = "accountHosting";
      function isAccountHosting(v) {
        return is$typed(v, id, hashAccountHosting);
      }
      function validateAccountHosting(v) {
        return validate(v, id, hashAccountHosting);
      }
      var hashRecordHosting = "recordHosting";
      function isRecordHosting(v) {
        return is$typed(v, id, hashRecordHosting);
      }
      function validateRecordHosting(v) {
        return validate(v, id, hashRecordHosting);
      }
      var hashReporterStats = "reporterStats";
      function isReporterStats(v) {
        return is$typed(v, id, hashReporterStats);
      }
      function validateReporterStats(v) {
        return validate(v, id, hashReporterStats);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getEvent.js
  var require_getEvent = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getEvent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRecords.js
  var require_getRecords = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRecords.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getReporterStats.js
  var require_getReporterStats = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getReporterStats.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRepos.js
  var require_getRepos = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRepos.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getSubjects.js
  var require_getSubjects = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getSubjects.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/queryEvents.js
  var require_queryEvents = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/queryEvents.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/queryStatuses.js
  var require_queryStatuses = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/queryStatuses.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/searchRepos.js
  var require_searchRepos = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/searchRepos.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/server/getConfig.js
  var require_getConfig2 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/server/getConfig.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      exports.isServiceConfig = isServiceConfig;
      exports.validateServiceConfig = validateServiceConfig;
      exports.isViewerConfig = isViewerConfig;
      exports.validateViewerConfig = validateViewerConfig;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "tools.ozone.server.getConfig";
      function toKnownErr(e) {
        return e;
      }
      var hashServiceConfig = "serviceConfig";
      function isServiceConfig(v) {
        return is$typed(v, id, hashServiceConfig);
      }
      function validateServiceConfig(v) {
        return validate(v, id, hashServiceConfig);
      }
      var hashViewerConfig = "viewerConfig";
      function isViewerConfig(v) {
        return is$typed(v, id, hashViewerConfig);
      }
      function validateViewerConfig(v) {
        return validate(v, id, hashViewerConfig);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/set/addValues.js
  var require_addValues = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/set/addValues.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/set/defs.js
  var require_defs20 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/set/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isSet = isSet;
      exports.validateSet = validateSet;
      exports.isSetView = isSetView;
      exports.validateSetView = validateSetView;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "tools.ozone.set.defs";
      var hashSet = "set";
      function isSet(v) {
        return is$typed(v, id, hashSet);
      }
      function validateSet(v) {
        return validate(v, id, hashSet);
      }
      var hashSetView = "setView";
      function isSetView(v) {
        return is$typed(v, id, hashSetView);
      }
      function validateSetView(v) {
        return validate(v, id, hashSetView);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/set/querySets.js
  var require_querySets = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/set/querySets.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/set/upsertSet.js
  var require_upsertSet = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/set/upsertSet.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/setting/defs.js
  var require_defs21 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/setting/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isOption = isOption;
      exports.validateOption = validateOption;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "tools.ozone.setting.defs";
      var hashOption = "option";
      function isOption(v) {
        return is$typed(v, id, hashOption);
      }
      function validateOption(v) {
        return validate(v, id, hashOption);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/setting/listOptions.js
  var require_listOptions = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/setting/listOptions.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/setting/removeOptions.js
  var require_removeOptions = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/setting/removeOptions.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/setting/upsertOption.js
  var require_upsertOption = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/setting/upsertOption.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/signature/defs.js
  var require_defs22 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/signature/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isSigDetail = isSigDetail;
      exports.validateSigDetail = validateSigDetail;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "tools.ozone.signature.defs";
      var hashSigDetail = "sigDetail";
      function isSigDetail(v) {
        return is$typed(v, id, hashSigDetail);
      }
      function validateSigDetail(v) {
        return validate(v, id, hashSigDetail);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/signature/findCorrelation.js
  var require_findCorrelation = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/signature/findCorrelation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/signature/findRelatedAccounts.js
  var require_findRelatedAccounts = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/signature/findRelatedAccounts.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      exports.isRelatedAccount = isRelatedAccount;
      exports.validateRelatedAccount = validateRelatedAccount;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "tools.ozone.signature.findRelatedAccounts";
      function toKnownErr(e) {
        return e;
      }
      var hashRelatedAccount = "relatedAccount";
      function isRelatedAccount(v) {
        return is$typed(v, id, hashRelatedAccount);
      }
      function validateRelatedAccount(v) {
        return validate(v, id, hashRelatedAccount);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/signature/searchAccounts.js
  var require_searchAccounts2 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/signature/searchAccounts.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/team/defs.js
  var require_defs23 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/team/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ROLEVERIFIER = exports.ROLETRIAGE = exports.ROLEMODERATOR = exports.ROLEADMIN = void 0;
      exports.isMember = isMember;
      exports.validateMember = validateMember;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "tools.ozone.team.defs";
      var hashMember = "member";
      function isMember(v) {
        return is$typed(v, id, hashMember);
      }
      function validateMember(v) {
        return validate(v, id, hashMember);
      }
      exports.ROLEADMIN = `${id}#roleAdmin`;
      exports.ROLEMODERATOR = `${id}#roleModerator`;
      exports.ROLETRIAGE = `${id}#roleTriage`;
      exports.ROLEVERIFIER = `${id}#roleVerifier`;
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/team/listMembers.js
  var require_listMembers = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/team/listMembers.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/verification/defs.js
  var require_defs24 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/verification/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isVerificationView = isVerificationView;
      exports.validateVerificationView = validateVerificationView;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "tools.ozone.verification.defs";
      var hashVerificationView = "verificationView";
      function isVerificationView(v) {
        return is$typed(v, id, hashVerificationView);
      }
      function validateVerificationView(v) {
        return validate(v, id, hashVerificationView);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/verification/grantVerifications.js
  var require_grantVerifications = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/verification/grantVerifications.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      exports.isVerificationInput = isVerificationInput;
      exports.validateVerificationInput = validateVerificationInput;
      exports.isGrantError = isGrantError;
      exports.validateGrantError = validateGrantError;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "tools.ozone.verification.grantVerifications";
      function toKnownErr(e) {
        return e;
      }
      var hashVerificationInput = "verificationInput";
      function isVerificationInput(v) {
        return is$typed(v, id, hashVerificationInput);
      }
      function validateVerificationInput(v) {
        return validate(v, id, hashVerificationInput);
      }
      var hashGrantError = "grantError";
      function isGrantError(v) {
        return is$typed(v, id, hashGrantError);
      }
      function validateGrantError(v) {
        return validate(v, id, hashGrantError);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/verification/listVerifications.js
  var require_listVerifications = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/verification/listVerifications.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      function toKnownErr(e) {
        return e;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/verification/revokeVerifications.js
  var require_revokeVerifications = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/types/tools/ozone/verification/revokeVerifications.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = toKnownErr;
      exports.isRevokeError = isRevokeError;
      exports.validateRevokeError = validateRevokeError;
      var lexicons_1 = require_lexicons2();
      var util_1 = require_util14();
      var is$typed = util_1.is$typed;
      var validate = lexicons_1.validate;
      var id = "tools.ozone.verification.revokeVerifications";
      function toKnownErr(e) {
        return e;
      }
      var hashRevokeError = "revokeError";
      function isRevokeError(v) {
        return is$typed(v, id, hashRevokeError);
      }
      function validateRevokeError(v) {
        return validate(v, id, hashRevokeError);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/index.js
  var require_client3 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/client/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
        var ownKeys = function(o) {
          ownKeys = Object.getOwnPropertyNames || function(o2) {
            var ar = [];
            for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
            return ar;
          };
          return ownKeys(o);
        };
        return function(mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      }();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ComAtprotoServerCreateInviteCode = exports.ComAtprotoServerCreateAppPassword = exports.ComAtprotoServerCreateAccount = exports.ComAtprotoServerConfirmEmail = exports.ComAtprotoServerCheckAccountStatus = exports.ComAtprotoServerActivateAccount = exports.ComAtprotoRepoUploadBlob = exports.ComAtprotoRepoStrongRef = exports.ComAtprotoRepoPutRecord = exports.ComAtprotoRepoListRecords = exports.ComAtprotoRepoListMissingBlobs = exports.ComAtprotoRepoImportRepo = exports.ComAtprotoRepoGetRecord = exports.ComAtprotoRepoDescribeRepo = exports.ComAtprotoRepoDeleteRecord = exports.ComAtprotoRepoDefs = exports.ComAtprotoRepoCreateRecord = exports.ComAtprotoRepoApplyWrites = exports.ComAtprotoModerationDefs = exports.ComAtprotoModerationCreateReport = exports.ComAtprotoLexiconSchema = exports.ComAtprotoLabelSubscribeLabels = exports.ComAtprotoLabelQueryLabels = exports.ComAtprotoLabelDefs = exports.ComAtprotoIdentityUpdateHandle = exports.ComAtprotoIdentitySubmitPlcOperation = exports.ComAtprotoIdentitySignPlcOperation = exports.ComAtprotoIdentityResolveIdentity = exports.ComAtprotoIdentityResolveHandle = exports.ComAtprotoIdentityResolveDid = exports.ComAtprotoIdentityRequestPlcOperationSignature = exports.ComAtprotoIdentityRefreshIdentity = exports.ComAtprotoIdentityGetRecommendedDidCredentials = exports.ComAtprotoIdentityDefs = exports.ComAtprotoAdminUpdateSubjectStatus = exports.ComAtprotoAdminUpdateAccountSigningKey = exports.ComAtprotoAdminUpdateAccountPassword = exports.ComAtprotoAdminUpdateAccountHandle = exports.ComAtprotoAdminUpdateAccountEmail = exports.ComAtprotoAdminSendEmail = exports.ComAtprotoAdminSearchAccounts = exports.ComAtprotoAdminGetSubjectStatus = exports.ComAtprotoAdminGetInviteCodes = exports.ComAtprotoAdminGetAccountInfos = exports.ComAtprotoAdminGetAccountInfo = exports.ComAtprotoAdminEnableAccountInvites = exports.ComAtprotoAdminDisableInviteCodes = exports.ComAtprotoAdminDisableAccountInvites = exports.ComAtprotoAdminDeleteAccount = exports.ComAtprotoAdminDefs = void 0;
      exports.AppBskyActorSearchActorsTypeahead = exports.AppBskyActorSearchActors = exports.AppBskyActorPutPreferences = exports.AppBskyActorProfile = exports.AppBskyActorGetSuggestions = exports.AppBskyActorGetProfiles = exports.AppBskyActorGetProfile = exports.AppBskyActorGetPreferences = exports.AppBskyActorDefs = exports.ComAtprotoTempRequestPhoneVerification = exports.ComAtprotoTempFetchLabels = exports.ComAtprotoTempCheckSignupQueue = exports.ComAtprotoTempAddReservedHandle = exports.ComAtprotoSyncSubscribeRepos = exports.ComAtprotoSyncRequestCrawl = exports.ComAtprotoSyncNotifyOfUpdate = exports.ComAtprotoSyncListReposByCollection = exports.ComAtprotoSyncListRepos = exports.ComAtprotoSyncListHosts = exports.ComAtprotoSyncListBlobs = exports.ComAtprotoSyncGetRepoStatus = exports.ComAtprotoSyncGetRepo = exports.ComAtprotoSyncGetRecord = exports.ComAtprotoSyncGetLatestCommit = exports.ComAtprotoSyncGetHostStatus = exports.ComAtprotoSyncGetHead = exports.ComAtprotoSyncGetCheckout = exports.ComAtprotoSyncGetBlocks = exports.ComAtprotoSyncGetBlob = exports.ComAtprotoSyncDefs = exports.ComAtprotoServerUpdateEmail = exports.ComAtprotoServerRevokeAppPassword = exports.ComAtprotoServerResetPassword = exports.ComAtprotoServerReserveSigningKey = exports.ComAtprotoServerRequestPasswordReset = exports.ComAtprotoServerRequestEmailUpdate = exports.ComAtprotoServerRequestEmailConfirmation = exports.ComAtprotoServerRequestAccountDelete = exports.ComAtprotoServerRefreshSession = exports.ComAtprotoServerListAppPasswords = exports.ComAtprotoServerGetSession = exports.ComAtprotoServerGetServiceAuth = exports.ComAtprotoServerGetAccountInviteCodes = exports.ComAtprotoServerDescribeServer = exports.ComAtprotoServerDeleteSession = exports.ComAtprotoServerDeleteAccount = exports.ComAtprotoServerDefs = exports.ComAtprotoServerDeactivateAccount = exports.ComAtprotoServerCreateSession = exports.ComAtprotoServerCreateInviteCodes = void 0;
      exports.AppBskyGraphList = exports.AppBskyGraphGetSuggestedFollowsByActor = exports.AppBskyGraphGetStarterPacks = exports.AppBskyGraphGetStarterPack = exports.AppBskyGraphGetRelationships = exports.AppBskyGraphGetMutes = exports.AppBskyGraphGetLists = exports.AppBskyGraphGetListMutes = exports.AppBskyGraphGetListBlocks = exports.AppBskyGraphGetList = exports.AppBskyGraphGetKnownFollowers = exports.AppBskyGraphGetFollows = exports.AppBskyGraphGetFollowers = exports.AppBskyGraphGetBlocks = exports.AppBskyGraphGetActorStarterPacks = exports.AppBskyGraphFollow = exports.AppBskyGraphDefs = exports.AppBskyGraphBlock = exports.AppBskyFeedThreadgate = exports.AppBskyFeedSendInteractions = exports.AppBskyFeedSearchPosts = exports.AppBskyFeedRepost = exports.AppBskyFeedPostgate = exports.AppBskyFeedPost = exports.AppBskyFeedLike = exports.AppBskyFeedGetTimeline = exports.AppBskyFeedGetSuggestedFeeds = exports.AppBskyFeedGetRepostedBy = exports.AppBskyFeedGetQuotes = exports.AppBskyFeedGetPostThread = exports.AppBskyFeedGetPosts = exports.AppBskyFeedGetListFeed = exports.AppBskyFeedGetLikes = exports.AppBskyFeedGetFeedSkeleton = exports.AppBskyFeedGetFeedGenerators = exports.AppBskyFeedGetFeedGenerator = exports.AppBskyFeedGetFeed = exports.AppBskyFeedGetAuthorFeed = exports.AppBskyFeedGetActorLikes = exports.AppBskyFeedGetActorFeeds = exports.AppBskyFeedGenerator = exports.AppBskyFeedDescribeFeedGenerator = exports.AppBskyFeedDefs = exports.AppBskyEmbedVideo = exports.AppBskyEmbedRecordWithMedia = exports.AppBskyEmbedRecord = exports.AppBskyEmbedImages = exports.AppBskyEmbedExternal = exports.AppBskyEmbedDefs = exports.AppBskyActorStatus = void 0;
      exports.ChatBskyConvoDeleteMessageForSelf = exports.ChatBskyConvoDefs = exports.ChatBskyConvoAddReaction = exports.ChatBskyConvoAcceptConvo = exports.ChatBskyActorExportAccountData = exports.ChatBskyActorDeleteAccount = exports.ChatBskyActorDefs = exports.ChatBskyActorDeclaration = exports.AppBskyVideoUploadVideo = exports.AppBskyVideoGetUploadLimits = exports.AppBskyVideoGetJobStatus = exports.AppBskyVideoDefs = exports.AppBskyUnspeccedSearchStarterPacksSkeleton = exports.AppBskyUnspeccedSearchPostsSkeleton = exports.AppBskyUnspeccedSearchActorsSkeleton = exports.AppBskyUnspeccedGetTrendsSkeleton = exports.AppBskyUnspeccedGetTrends = exports.AppBskyUnspeccedGetTrendingTopics = exports.AppBskyUnspeccedGetTaggedSuggestions = exports.AppBskyUnspeccedGetSuggestionsSkeleton = exports.AppBskyUnspeccedGetSuggestedUsersSkeleton = exports.AppBskyUnspeccedGetSuggestedUsers = exports.AppBskyUnspeccedGetSuggestedStarterPacksSkeleton = exports.AppBskyUnspeccedGetSuggestedStarterPacks = exports.AppBskyUnspeccedGetSuggestedFeedsSkeleton = exports.AppBskyUnspeccedGetSuggestedFeeds = exports.AppBskyUnspeccedGetPopularFeedGenerators = exports.AppBskyUnspeccedGetConfig = exports.AppBskyUnspeccedDefs = exports.AppBskyRichtextFacet = exports.AppBskyNotificationUpdateSeen = exports.AppBskyNotificationRegisterPush = exports.AppBskyNotificationPutPreferences = exports.AppBskyNotificationListNotifications = exports.AppBskyNotificationGetUnreadCount = exports.AppBskyNotificationDefs = exports.AppBskyLabelerService = exports.AppBskyLabelerGetServices = exports.AppBskyLabelerDefs = exports.AppBskyGraphVerification = exports.AppBskyGraphUnmuteThread = exports.AppBskyGraphUnmuteActorList = exports.AppBskyGraphUnmuteActor = exports.AppBskyGraphStarterpack = exports.AppBskyGraphSearchStarterPacks = exports.AppBskyGraphMuteThread = exports.AppBskyGraphMuteActorList = exports.AppBskyGraphMuteActor = exports.AppBskyGraphListitem = exports.AppBskyGraphListblock = void 0;
      exports.ToolsOzoneSignatureFindRelatedAccounts = exports.ToolsOzoneSignatureFindCorrelation = exports.ToolsOzoneSignatureDefs = exports.ToolsOzoneSettingUpsertOption = exports.ToolsOzoneSettingRemoveOptions = exports.ToolsOzoneSettingListOptions = exports.ToolsOzoneSettingDefs = exports.ToolsOzoneSetUpsertSet = exports.ToolsOzoneSetQuerySets = exports.ToolsOzoneSetGetValues = exports.ToolsOzoneSetDeleteValues = exports.ToolsOzoneSetDeleteSet = exports.ToolsOzoneSetDefs = exports.ToolsOzoneSetAddValues = exports.ToolsOzoneServerGetConfig = exports.ToolsOzoneModerationSearchRepos = exports.ToolsOzoneModerationQueryStatuses = exports.ToolsOzoneModerationQueryEvents = exports.ToolsOzoneModerationGetSubjects = exports.ToolsOzoneModerationGetRepos = exports.ToolsOzoneModerationGetReporterStats = exports.ToolsOzoneModerationGetRepo = exports.ToolsOzoneModerationGetRecords = exports.ToolsOzoneModerationGetRecord = exports.ToolsOzoneModerationGetEvent = exports.ToolsOzoneModerationEmitEvent = exports.ToolsOzoneModerationDefs = exports.ToolsOzoneHostingGetAccountHistory = exports.ToolsOzoneCommunicationUpdateTemplate = exports.ToolsOzoneCommunicationListTemplates = exports.ToolsOzoneCommunicationDeleteTemplate = exports.ToolsOzoneCommunicationDefs = exports.ToolsOzoneCommunicationCreateTemplate = exports.ChatBskyModerationUpdateActorAccess = exports.ChatBskyModerationGetMessageContext = exports.ChatBskyModerationGetActorMetadata = exports.ChatBskyConvoUpdateRead = exports.ChatBskyConvoUpdateAllRead = exports.ChatBskyConvoUnmuteConvo = exports.ChatBskyConvoSendMessageBatch = exports.ChatBskyConvoSendMessage = exports.ChatBskyConvoRemoveReaction = exports.ChatBskyConvoMuteConvo = exports.ChatBskyConvoListConvos = exports.ChatBskyConvoLeaveConvo = exports.ChatBskyConvoGetMessages = exports.ChatBskyConvoGetLog = exports.ChatBskyConvoGetConvoForMembers = exports.ChatBskyConvoGetConvoAvailability = exports.ChatBskyConvoGetConvo = void 0;
      exports.AppBskyGraphVerificationRecord = exports.AppBskyGraphStarterpackRecord = exports.AppBskyGraphListitemRecord = exports.AppBskyGraphListblockRecord = exports.AppBskyGraphListRecord = exports.AppBskyGraphFollowRecord = exports.AppBskyGraphBlockRecord = exports.AppBskyGraphNS = exports.AppBskyFeedThreadgateRecord = exports.AppBskyFeedRepostRecord = exports.AppBskyFeedPostgateRecord = exports.AppBskyFeedPostRecord = exports.AppBskyFeedLikeRecord = exports.AppBskyFeedGeneratorRecord = exports.AppBskyFeedNS = exports.AppBskyEmbedNS = exports.AppBskyActorStatusRecord = exports.AppBskyActorProfileRecord = exports.AppBskyActorNS = exports.AppBskyNS = exports.AppNS = exports.ComAtprotoTempNS = exports.ComAtprotoSyncNS = exports.ComAtprotoServerNS = exports.ComAtprotoRepoNS = exports.ComAtprotoModerationNS = exports.ComAtprotoLexiconSchemaRecord = exports.ComAtprotoLexiconNS = exports.ComAtprotoLabelNS = exports.ComAtprotoIdentityNS = exports.ComAtprotoAdminNS = exports.ComAtprotoNS = exports.ComNS = exports.AtpBaseClient = exports.TOOLS_OZONE_TEAM = exports.TOOLS_OZONE_MODERATION = exports.APP_BSKY_GRAPH = exports.APP_BSKY_FEED = exports.APP_BSKY_ACTOR = exports.COM_ATPROTO_MODERATION = exports.ToolsOzoneVerificationRevokeVerifications = exports.ToolsOzoneVerificationListVerifications = exports.ToolsOzoneVerificationGrantVerifications = exports.ToolsOzoneVerificationDefs = exports.ToolsOzoneTeamUpdateMember = exports.ToolsOzoneTeamListMembers = exports.ToolsOzoneTeamDeleteMember = exports.ToolsOzoneTeamDefs = exports.ToolsOzoneTeamAddMember = exports.ToolsOzoneSignatureSearchAccounts = void 0;
      exports.ToolsOzoneVerificationNS = exports.ToolsOzoneTeamNS = exports.ToolsOzoneSignatureNS = exports.ToolsOzoneSettingNS = exports.ToolsOzoneSetNS = exports.ToolsOzoneServerNS = exports.ToolsOzoneModerationNS = exports.ToolsOzoneHostingNS = exports.ToolsOzoneCommunicationNS = exports.ToolsOzoneNS = exports.ToolsNS = exports.ChatBskyModerationNS = exports.ChatBskyConvoNS = exports.ChatBskyActorDeclarationRecord = exports.ChatBskyActorNS = exports.ChatBskyNS = exports.ChatNS = exports.AppBskyVideoNS = exports.AppBskyUnspeccedNS = exports.AppBskyRichtextNS = exports.AppBskyNotificationNS = exports.AppBskyLabelerServiceRecord = exports.AppBskyLabelerNS = void 0;
      var xrpc_1 = require_dist19();
      var lexicons_js_1 = require_lexicons2();
      var ComAtprotoIdentityRefreshIdentity = __importStar(require_refreshIdentity());
      var ComAtprotoIdentityResolveDid = __importStar(require_resolveDid());
      var ComAtprotoIdentityResolveHandle = __importStar(require_resolveHandle());
      var ComAtprotoIdentityResolveIdentity = __importStar(require_resolveIdentity());
      var ComAtprotoRepoApplyWrites = __importStar(require_applyWrites());
      var ComAtprotoRepoCreateRecord = __importStar(require_createRecord());
      var ComAtprotoRepoDeleteRecord = __importStar(require_deleteRecord());
      var ComAtprotoRepoGetRecord = __importStar(require_getRecord());
      var ComAtprotoRepoPutRecord = __importStar(require_putRecord());
      var ComAtprotoServerConfirmEmail = __importStar(require_confirmEmail());
      var ComAtprotoServerCreateAccount = __importStar(require_createAccount());
      var ComAtprotoServerCreateAppPassword = __importStar(require_createAppPassword());
      var ComAtprotoServerCreateSession = __importStar(require_createSession());
      var ComAtprotoServerDeleteAccount = __importStar(require_deleteAccount());
      var ComAtprotoServerGetAccountInviteCodes = __importStar(require_getAccountInviteCodes());
      var ComAtprotoServerGetServiceAuth = __importStar(require_getServiceAuth());
      var ComAtprotoServerListAppPasswords = __importStar(require_listAppPasswords());
      var ComAtprotoServerRefreshSession = __importStar(require_refreshSession());
      var ComAtprotoServerResetPassword = __importStar(require_resetPassword());
      var ComAtprotoServerUpdateEmail = __importStar(require_updateEmail());
      var ComAtprotoSyncGetBlob = __importStar(require_getBlob());
      var ComAtprotoSyncGetBlocks = __importStar(require_getBlocks());
      var ComAtprotoSyncGetHead = __importStar(require_getHead());
      var ComAtprotoSyncGetHostStatus = __importStar(require_getHostStatus());
      var ComAtprotoSyncGetLatestCommit = __importStar(require_getLatestCommit());
      var ComAtprotoSyncGetRecord = __importStar(require_getRecord2());
      var ComAtprotoSyncGetRepo = __importStar(require_getRepo());
      var ComAtprotoSyncGetRepoStatus = __importStar(require_getRepoStatus());
      var ComAtprotoSyncListBlobs = __importStar(require_listBlobs());
      var ComAtprotoSyncRequestCrawl = __importStar(require_requestCrawl());
      var AppBskyFeedGetActorLikes = __importStar(require_getActorLikes());
      var AppBskyFeedGetAuthorFeed = __importStar(require_getAuthorFeed());
      var AppBskyFeedGetFeed = __importStar(require_getFeed());
      var AppBskyFeedGetFeedSkeleton = __importStar(require_getFeedSkeleton());
      var AppBskyFeedGetListFeed = __importStar(require_getListFeed());
      var AppBskyFeedGetPostThread = __importStar(require_getPostThread());
      var AppBskyFeedSearchPosts = __importStar(require_searchPosts());
      var AppBskyGraphGetRelationships = __importStar(require_getRelationships());
      var AppBskyUnspeccedSearchActorsSkeleton = __importStar(require_searchActorsSkeleton());
      var AppBskyUnspeccedSearchPostsSkeleton = __importStar(require_searchPostsSkeleton());
      var AppBskyUnspeccedSearchStarterPacksSkeleton = __importStar(require_searchStarterPacksSkeleton());
      var ChatBskyConvoAddReaction = __importStar(require_addReaction());
      var ChatBskyConvoRemoveReaction = __importStar(require_removeReaction());
      var ToolsOzoneCommunicationCreateTemplate = __importStar(require_createTemplate());
      var ToolsOzoneCommunicationUpdateTemplate = __importStar(require_updateTemplate());
      var ToolsOzoneModerationEmitEvent = __importStar(require_emitEvent());
      var ToolsOzoneModerationGetRecord = __importStar(require_getRecord3());
      var ToolsOzoneModerationGetRepo = __importStar(require_getRepo2());
      var ToolsOzoneSetDeleteSet = __importStar(require_deleteSet());
      var ToolsOzoneSetDeleteValues = __importStar(require_deleteValues());
      var ToolsOzoneSetGetValues = __importStar(require_getValues());
      var ToolsOzoneTeamAddMember = __importStar(require_addMember());
      var ToolsOzoneTeamDeleteMember = __importStar(require_deleteMember());
      var ToolsOzoneTeamUpdateMember = __importStar(require_updateMember());
      exports.ComAtprotoAdminDefs = __importStar(require_defs());
      exports.ComAtprotoAdminDeleteAccount = __importStar(require_deleteAccount2());
      exports.ComAtprotoAdminDisableAccountInvites = __importStar(require_disableAccountInvites());
      exports.ComAtprotoAdminDisableInviteCodes = __importStar(require_disableInviteCodes());
      exports.ComAtprotoAdminEnableAccountInvites = __importStar(require_enableAccountInvites());
      exports.ComAtprotoAdminGetAccountInfo = __importStar(require_getAccountInfo());
      exports.ComAtprotoAdminGetAccountInfos = __importStar(require_getAccountInfos());
      exports.ComAtprotoAdminGetInviteCodes = __importStar(require_getInviteCodes());
      exports.ComAtprotoAdminGetSubjectStatus = __importStar(require_getSubjectStatus());
      exports.ComAtprotoAdminSearchAccounts = __importStar(require_searchAccounts());
      exports.ComAtprotoAdminSendEmail = __importStar(require_sendEmail());
      exports.ComAtprotoAdminUpdateAccountEmail = __importStar(require_updateAccountEmail());
      exports.ComAtprotoAdminUpdateAccountHandle = __importStar(require_updateAccountHandle());
      exports.ComAtprotoAdminUpdateAccountPassword = __importStar(require_updateAccountPassword());
      exports.ComAtprotoAdminUpdateAccountSigningKey = __importStar(require_updateAccountSigningKey());
      exports.ComAtprotoAdminUpdateSubjectStatus = __importStar(require_updateSubjectStatus());
      exports.ComAtprotoIdentityDefs = __importStar(require_defs2());
      exports.ComAtprotoIdentityGetRecommendedDidCredentials = __importStar(require_getRecommendedDidCredentials());
      exports.ComAtprotoIdentityRefreshIdentity = __importStar(require_refreshIdentity());
      exports.ComAtprotoIdentityRequestPlcOperationSignature = __importStar(require_requestPlcOperationSignature());
      exports.ComAtprotoIdentityResolveDid = __importStar(require_resolveDid());
      exports.ComAtprotoIdentityResolveHandle = __importStar(require_resolveHandle());
      exports.ComAtprotoIdentityResolveIdentity = __importStar(require_resolveIdentity());
      exports.ComAtprotoIdentitySignPlcOperation = __importStar(require_signPlcOperation());
      exports.ComAtprotoIdentitySubmitPlcOperation = __importStar(require_submitPlcOperation());
      exports.ComAtprotoIdentityUpdateHandle = __importStar(require_updateHandle());
      exports.ComAtprotoLabelDefs = __importStar(require_defs3());
      exports.ComAtprotoLabelQueryLabels = __importStar(require_queryLabels());
      exports.ComAtprotoLabelSubscribeLabels = __importStar(require_subscribeLabels());
      exports.ComAtprotoLexiconSchema = __importStar(require_schema());
      exports.ComAtprotoModerationCreateReport = __importStar(require_createReport());
      exports.ComAtprotoModerationDefs = __importStar(require_defs4());
      exports.ComAtprotoRepoApplyWrites = __importStar(require_applyWrites());
      exports.ComAtprotoRepoCreateRecord = __importStar(require_createRecord());
      exports.ComAtprotoRepoDefs = __importStar(require_defs5());
      exports.ComAtprotoRepoDeleteRecord = __importStar(require_deleteRecord());
      exports.ComAtprotoRepoDescribeRepo = __importStar(require_describeRepo());
      exports.ComAtprotoRepoGetRecord = __importStar(require_getRecord());
      exports.ComAtprotoRepoImportRepo = __importStar(require_importRepo());
      exports.ComAtprotoRepoListMissingBlobs = __importStar(require_listMissingBlobs());
      exports.ComAtprotoRepoListRecords = __importStar(require_listRecords());
      exports.ComAtprotoRepoPutRecord = __importStar(require_putRecord());
      exports.ComAtprotoRepoStrongRef = __importStar(require_strongRef());
      exports.ComAtprotoRepoUploadBlob = __importStar(require_uploadBlob());
      exports.ComAtprotoServerActivateAccount = __importStar(require_activateAccount());
      exports.ComAtprotoServerCheckAccountStatus = __importStar(require_checkAccountStatus());
      exports.ComAtprotoServerConfirmEmail = __importStar(require_confirmEmail());
      exports.ComAtprotoServerCreateAccount = __importStar(require_createAccount());
      exports.ComAtprotoServerCreateAppPassword = __importStar(require_createAppPassword());
      exports.ComAtprotoServerCreateInviteCode = __importStar(require_createInviteCode());
      exports.ComAtprotoServerCreateInviteCodes = __importStar(require_createInviteCodes());
      exports.ComAtprotoServerCreateSession = __importStar(require_createSession());
      exports.ComAtprotoServerDeactivateAccount = __importStar(require_deactivateAccount());
      exports.ComAtprotoServerDefs = __importStar(require_defs6());
      exports.ComAtprotoServerDeleteAccount = __importStar(require_deleteAccount());
      exports.ComAtprotoServerDeleteSession = __importStar(require_deleteSession());
      exports.ComAtprotoServerDescribeServer = __importStar(require_describeServer());
      exports.ComAtprotoServerGetAccountInviteCodes = __importStar(require_getAccountInviteCodes());
      exports.ComAtprotoServerGetServiceAuth = __importStar(require_getServiceAuth());
      exports.ComAtprotoServerGetSession = __importStar(require_getSession());
      exports.ComAtprotoServerListAppPasswords = __importStar(require_listAppPasswords());
      exports.ComAtprotoServerRefreshSession = __importStar(require_refreshSession());
      exports.ComAtprotoServerRequestAccountDelete = __importStar(require_requestAccountDelete());
      exports.ComAtprotoServerRequestEmailConfirmation = __importStar(require_requestEmailConfirmation());
      exports.ComAtprotoServerRequestEmailUpdate = __importStar(require_requestEmailUpdate());
      exports.ComAtprotoServerRequestPasswordReset = __importStar(require_requestPasswordReset());
      exports.ComAtprotoServerReserveSigningKey = __importStar(require_reserveSigningKey());
      exports.ComAtprotoServerResetPassword = __importStar(require_resetPassword());
      exports.ComAtprotoServerRevokeAppPassword = __importStar(require_revokeAppPassword());
      exports.ComAtprotoServerUpdateEmail = __importStar(require_updateEmail());
      exports.ComAtprotoSyncDefs = __importStar(require_defs7());
      exports.ComAtprotoSyncGetBlob = __importStar(require_getBlob());
      exports.ComAtprotoSyncGetBlocks = __importStar(require_getBlocks());
      exports.ComAtprotoSyncGetCheckout = __importStar(require_getCheckout());
      exports.ComAtprotoSyncGetHead = __importStar(require_getHead());
      exports.ComAtprotoSyncGetHostStatus = __importStar(require_getHostStatus());
      exports.ComAtprotoSyncGetLatestCommit = __importStar(require_getLatestCommit());
      exports.ComAtprotoSyncGetRecord = __importStar(require_getRecord2());
      exports.ComAtprotoSyncGetRepo = __importStar(require_getRepo());
      exports.ComAtprotoSyncGetRepoStatus = __importStar(require_getRepoStatus());
      exports.ComAtprotoSyncListBlobs = __importStar(require_listBlobs());
      exports.ComAtprotoSyncListHosts = __importStar(require_listHosts());
      exports.ComAtprotoSyncListRepos = __importStar(require_listRepos());
      exports.ComAtprotoSyncListReposByCollection = __importStar(require_listReposByCollection());
      exports.ComAtprotoSyncNotifyOfUpdate = __importStar(require_notifyOfUpdate());
      exports.ComAtprotoSyncRequestCrawl = __importStar(require_requestCrawl());
      exports.ComAtprotoSyncSubscribeRepos = __importStar(require_subscribeRepos());
      exports.ComAtprotoTempAddReservedHandle = __importStar(require_addReservedHandle());
      exports.ComAtprotoTempCheckSignupQueue = __importStar(require_checkSignupQueue());
      exports.ComAtprotoTempFetchLabels = __importStar(require_fetchLabels());
      exports.ComAtprotoTempRequestPhoneVerification = __importStar(require_requestPhoneVerification());
      exports.AppBskyActorDefs = __importStar(require_defs8());
      exports.AppBskyActorGetPreferences = __importStar(require_getPreferences());
      exports.AppBskyActorGetProfile = __importStar(require_getProfile());
      exports.AppBskyActorGetProfiles = __importStar(require_getProfiles());
      exports.AppBskyActorGetSuggestions = __importStar(require_getSuggestions());
      exports.AppBskyActorProfile = __importStar(require_profile());
      exports.AppBskyActorPutPreferences = __importStar(require_putPreferences());
      exports.AppBskyActorSearchActors = __importStar(require_searchActors());
      exports.AppBskyActorSearchActorsTypeahead = __importStar(require_searchActorsTypeahead());
      exports.AppBskyActorStatus = __importStar(require_status());
      exports.AppBskyEmbedDefs = __importStar(require_defs9());
      exports.AppBskyEmbedExternal = __importStar(require_external2());
      exports.AppBskyEmbedImages = __importStar(require_images());
      exports.AppBskyEmbedRecord = __importStar(require_record());
      exports.AppBskyEmbedRecordWithMedia = __importStar(require_recordWithMedia());
      exports.AppBskyEmbedVideo = __importStar(require_video());
      exports.AppBskyFeedDefs = __importStar(require_defs10());
      exports.AppBskyFeedDescribeFeedGenerator = __importStar(require_describeFeedGenerator());
      exports.AppBskyFeedGenerator = __importStar(require_generator());
      exports.AppBskyFeedGetActorFeeds = __importStar(require_getActorFeeds());
      exports.AppBskyFeedGetActorLikes = __importStar(require_getActorLikes());
      exports.AppBskyFeedGetAuthorFeed = __importStar(require_getAuthorFeed());
      exports.AppBskyFeedGetFeed = __importStar(require_getFeed());
      exports.AppBskyFeedGetFeedGenerator = __importStar(require_getFeedGenerator());
      exports.AppBskyFeedGetFeedGenerators = __importStar(require_getFeedGenerators());
      exports.AppBskyFeedGetFeedSkeleton = __importStar(require_getFeedSkeleton());
      exports.AppBskyFeedGetLikes = __importStar(require_getLikes());
      exports.AppBskyFeedGetListFeed = __importStar(require_getListFeed());
      exports.AppBskyFeedGetPosts = __importStar(require_getPosts());
      exports.AppBskyFeedGetPostThread = __importStar(require_getPostThread());
      exports.AppBskyFeedGetQuotes = __importStar(require_getQuotes());
      exports.AppBskyFeedGetRepostedBy = __importStar(require_getRepostedBy());
      exports.AppBskyFeedGetSuggestedFeeds = __importStar(require_getSuggestedFeeds());
      exports.AppBskyFeedGetTimeline = __importStar(require_getTimeline());
      exports.AppBskyFeedLike = __importStar(require_like());
      exports.AppBskyFeedPost = __importStar(require_post());
      exports.AppBskyFeedPostgate = __importStar(require_postgate());
      exports.AppBskyFeedRepost = __importStar(require_repost());
      exports.AppBskyFeedSearchPosts = __importStar(require_searchPosts());
      exports.AppBskyFeedSendInteractions = __importStar(require_sendInteractions());
      exports.AppBskyFeedThreadgate = __importStar(require_threadgate());
      exports.AppBskyGraphBlock = __importStar(require_block());
      exports.AppBskyGraphDefs = __importStar(require_defs11());
      exports.AppBskyGraphFollow = __importStar(require_follow());
      exports.AppBskyGraphGetActorStarterPacks = __importStar(require_getActorStarterPacks());
      exports.AppBskyGraphGetBlocks = __importStar(require_getBlocks2());
      exports.AppBskyGraphGetFollowers = __importStar(require_getFollowers());
      exports.AppBskyGraphGetFollows = __importStar(require_getFollows());
      exports.AppBskyGraphGetKnownFollowers = __importStar(require_getKnownFollowers());
      exports.AppBskyGraphGetList = __importStar(require_getList());
      exports.AppBskyGraphGetListBlocks = __importStar(require_getListBlocks());
      exports.AppBskyGraphGetListMutes = __importStar(require_getListMutes());
      exports.AppBskyGraphGetLists = __importStar(require_getLists());
      exports.AppBskyGraphGetMutes = __importStar(require_getMutes());
      exports.AppBskyGraphGetRelationships = __importStar(require_getRelationships());
      exports.AppBskyGraphGetStarterPack = __importStar(require_getStarterPack());
      exports.AppBskyGraphGetStarterPacks = __importStar(require_getStarterPacks());
      exports.AppBskyGraphGetSuggestedFollowsByActor = __importStar(require_getSuggestedFollowsByActor());
      exports.AppBskyGraphList = __importStar(require_list());
      exports.AppBskyGraphListblock = __importStar(require_listblock());
      exports.AppBskyGraphListitem = __importStar(require_listitem());
      exports.AppBskyGraphMuteActor = __importStar(require_muteActor());
      exports.AppBskyGraphMuteActorList = __importStar(require_muteActorList());
      exports.AppBskyGraphMuteThread = __importStar(require_muteThread());
      exports.AppBskyGraphSearchStarterPacks = __importStar(require_searchStarterPacks());
      exports.AppBskyGraphStarterpack = __importStar(require_starterpack());
      exports.AppBskyGraphUnmuteActor = __importStar(require_unmuteActor());
      exports.AppBskyGraphUnmuteActorList = __importStar(require_unmuteActorList());
      exports.AppBskyGraphUnmuteThread = __importStar(require_unmuteThread());
      exports.AppBskyGraphVerification = __importStar(require_verification());
      exports.AppBskyLabelerDefs = __importStar(require_defs12());
      exports.AppBskyLabelerGetServices = __importStar(require_getServices());
      exports.AppBskyLabelerService = __importStar(require_service());
      exports.AppBskyNotificationDefs = __importStar(require_defs13());
      exports.AppBskyNotificationGetUnreadCount = __importStar(require_getUnreadCount());
      exports.AppBskyNotificationListNotifications = __importStar(require_listNotifications());
      exports.AppBskyNotificationPutPreferences = __importStar(require_putPreferences2());
      exports.AppBskyNotificationRegisterPush = __importStar(require_registerPush());
      exports.AppBskyNotificationUpdateSeen = __importStar(require_updateSeen());
      exports.AppBskyRichtextFacet = __importStar(require_facet());
      exports.AppBskyUnspeccedDefs = __importStar(require_defs14());
      exports.AppBskyUnspeccedGetConfig = __importStar(require_getConfig());
      exports.AppBskyUnspeccedGetPopularFeedGenerators = __importStar(require_getPopularFeedGenerators());
      exports.AppBskyUnspeccedGetSuggestedFeeds = __importStar(require_getSuggestedFeeds2());
      exports.AppBskyUnspeccedGetSuggestedFeedsSkeleton = __importStar(require_getSuggestedFeedsSkeleton());
      exports.AppBskyUnspeccedGetSuggestedStarterPacks = __importStar(require_getSuggestedStarterPacks());
      exports.AppBskyUnspeccedGetSuggestedStarterPacksSkeleton = __importStar(require_getSuggestedStarterPacksSkeleton());
      exports.AppBskyUnspeccedGetSuggestedUsers = __importStar(require_getSuggestedUsers());
      exports.AppBskyUnspeccedGetSuggestedUsersSkeleton = __importStar(require_getSuggestedUsersSkeleton());
      exports.AppBskyUnspeccedGetSuggestionsSkeleton = __importStar(require_getSuggestionsSkeleton());
      exports.AppBskyUnspeccedGetTaggedSuggestions = __importStar(require_getTaggedSuggestions());
      exports.AppBskyUnspeccedGetTrendingTopics = __importStar(require_getTrendingTopics());
      exports.AppBskyUnspeccedGetTrends = __importStar(require_getTrends());
      exports.AppBskyUnspeccedGetTrendsSkeleton = __importStar(require_getTrendsSkeleton());
      exports.AppBskyUnspeccedSearchActorsSkeleton = __importStar(require_searchActorsSkeleton());
      exports.AppBskyUnspeccedSearchPostsSkeleton = __importStar(require_searchPostsSkeleton());
      exports.AppBskyUnspeccedSearchStarterPacksSkeleton = __importStar(require_searchStarterPacksSkeleton());
      exports.AppBskyVideoDefs = __importStar(require_defs15());
      exports.AppBskyVideoGetJobStatus = __importStar(require_getJobStatus());
      exports.AppBskyVideoGetUploadLimits = __importStar(require_getUploadLimits());
      exports.AppBskyVideoUploadVideo = __importStar(require_uploadVideo());
      exports.ChatBskyActorDeclaration = __importStar(require_declaration());
      exports.ChatBskyActorDefs = __importStar(require_defs16());
      exports.ChatBskyActorDeleteAccount = __importStar(require_deleteAccount3());
      exports.ChatBskyActorExportAccountData = __importStar(require_exportAccountData());
      exports.ChatBskyConvoAcceptConvo = __importStar(require_acceptConvo());
      exports.ChatBskyConvoAddReaction = __importStar(require_addReaction());
      exports.ChatBskyConvoDefs = __importStar(require_defs17());
      exports.ChatBskyConvoDeleteMessageForSelf = __importStar(require_deleteMessageForSelf());
      exports.ChatBskyConvoGetConvo = __importStar(require_getConvo());
      exports.ChatBskyConvoGetConvoAvailability = __importStar(require_getConvoAvailability());
      exports.ChatBskyConvoGetConvoForMembers = __importStar(require_getConvoForMembers());
      exports.ChatBskyConvoGetLog = __importStar(require_getLog());
      exports.ChatBskyConvoGetMessages = __importStar(require_getMessages());
      exports.ChatBskyConvoLeaveConvo = __importStar(require_leaveConvo());
      exports.ChatBskyConvoListConvos = __importStar(require_listConvos());
      exports.ChatBskyConvoMuteConvo = __importStar(require_muteConvo());
      exports.ChatBskyConvoRemoveReaction = __importStar(require_removeReaction());
      exports.ChatBskyConvoSendMessage = __importStar(require_sendMessage());
      exports.ChatBskyConvoSendMessageBatch = __importStar(require_sendMessageBatch());
      exports.ChatBskyConvoUnmuteConvo = __importStar(require_unmuteConvo());
      exports.ChatBskyConvoUpdateAllRead = __importStar(require_updateAllRead());
      exports.ChatBskyConvoUpdateRead = __importStar(require_updateRead());
      exports.ChatBskyModerationGetActorMetadata = __importStar(require_getActorMetadata());
      exports.ChatBskyModerationGetMessageContext = __importStar(require_getMessageContext());
      exports.ChatBskyModerationUpdateActorAccess = __importStar(require_updateActorAccess());
      exports.ToolsOzoneCommunicationCreateTemplate = __importStar(require_createTemplate());
      exports.ToolsOzoneCommunicationDefs = __importStar(require_defs18());
      exports.ToolsOzoneCommunicationDeleteTemplate = __importStar(require_deleteTemplate());
      exports.ToolsOzoneCommunicationListTemplates = __importStar(require_listTemplates());
      exports.ToolsOzoneCommunicationUpdateTemplate = __importStar(require_updateTemplate());
      exports.ToolsOzoneHostingGetAccountHistory = __importStar(require_getAccountHistory());
      exports.ToolsOzoneModerationDefs = __importStar(require_defs19());
      exports.ToolsOzoneModerationEmitEvent = __importStar(require_emitEvent());
      exports.ToolsOzoneModerationGetEvent = __importStar(require_getEvent());
      exports.ToolsOzoneModerationGetRecord = __importStar(require_getRecord3());
      exports.ToolsOzoneModerationGetRecords = __importStar(require_getRecords());
      exports.ToolsOzoneModerationGetRepo = __importStar(require_getRepo2());
      exports.ToolsOzoneModerationGetReporterStats = __importStar(require_getReporterStats());
      exports.ToolsOzoneModerationGetRepos = __importStar(require_getRepos());
      exports.ToolsOzoneModerationGetSubjects = __importStar(require_getSubjects());
      exports.ToolsOzoneModerationQueryEvents = __importStar(require_queryEvents());
      exports.ToolsOzoneModerationQueryStatuses = __importStar(require_queryStatuses());
      exports.ToolsOzoneModerationSearchRepos = __importStar(require_searchRepos());
      exports.ToolsOzoneServerGetConfig = __importStar(require_getConfig2());
      exports.ToolsOzoneSetAddValues = __importStar(require_addValues());
      exports.ToolsOzoneSetDefs = __importStar(require_defs20());
      exports.ToolsOzoneSetDeleteSet = __importStar(require_deleteSet());
      exports.ToolsOzoneSetDeleteValues = __importStar(require_deleteValues());
      exports.ToolsOzoneSetGetValues = __importStar(require_getValues());
      exports.ToolsOzoneSetQuerySets = __importStar(require_querySets());
      exports.ToolsOzoneSetUpsertSet = __importStar(require_upsertSet());
      exports.ToolsOzoneSettingDefs = __importStar(require_defs21());
      exports.ToolsOzoneSettingListOptions = __importStar(require_listOptions());
      exports.ToolsOzoneSettingRemoveOptions = __importStar(require_removeOptions());
      exports.ToolsOzoneSettingUpsertOption = __importStar(require_upsertOption());
      exports.ToolsOzoneSignatureDefs = __importStar(require_defs22());
      exports.ToolsOzoneSignatureFindCorrelation = __importStar(require_findCorrelation());
      exports.ToolsOzoneSignatureFindRelatedAccounts = __importStar(require_findRelatedAccounts());
      exports.ToolsOzoneSignatureSearchAccounts = __importStar(require_searchAccounts2());
      exports.ToolsOzoneTeamAddMember = __importStar(require_addMember());
      exports.ToolsOzoneTeamDefs = __importStar(require_defs23());
      exports.ToolsOzoneTeamDeleteMember = __importStar(require_deleteMember());
      exports.ToolsOzoneTeamListMembers = __importStar(require_listMembers());
      exports.ToolsOzoneTeamUpdateMember = __importStar(require_updateMember());
      exports.ToolsOzoneVerificationDefs = __importStar(require_defs24());
      exports.ToolsOzoneVerificationGrantVerifications = __importStar(require_grantVerifications());
      exports.ToolsOzoneVerificationListVerifications = __importStar(require_listVerifications());
      exports.ToolsOzoneVerificationRevokeVerifications = __importStar(require_revokeVerifications());
      exports.COM_ATPROTO_MODERATION = {
        DefsReasonSpam: "com.atproto.moderation.defs#reasonSpam",
        DefsReasonViolation: "com.atproto.moderation.defs#reasonViolation",
        DefsReasonMisleading: "com.atproto.moderation.defs#reasonMisleading",
        DefsReasonSexual: "com.atproto.moderation.defs#reasonSexual",
        DefsReasonRude: "com.atproto.moderation.defs#reasonRude",
        DefsReasonOther: "com.atproto.moderation.defs#reasonOther",
        DefsReasonAppeal: "com.atproto.moderation.defs#reasonAppeal"
      };
      exports.APP_BSKY_ACTOR = {
        StatusLive: "app.bsky.actor.status#live"
      };
      exports.APP_BSKY_FEED = {
        DefsRequestLess: "app.bsky.feed.defs#requestLess",
        DefsRequestMore: "app.bsky.feed.defs#requestMore",
        DefsClickthroughItem: "app.bsky.feed.defs#clickthroughItem",
        DefsClickthroughAuthor: "app.bsky.feed.defs#clickthroughAuthor",
        DefsClickthroughReposter: "app.bsky.feed.defs#clickthroughReposter",
        DefsClickthroughEmbed: "app.bsky.feed.defs#clickthroughEmbed",
        DefsContentModeUnspecified: "app.bsky.feed.defs#contentModeUnspecified",
        DefsContentModeVideo: "app.bsky.feed.defs#contentModeVideo",
        DefsInteractionSeen: "app.bsky.feed.defs#interactionSeen",
        DefsInteractionLike: "app.bsky.feed.defs#interactionLike",
        DefsInteractionRepost: "app.bsky.feed.defs#interactionRepost",
        DefsInteractionReply: "app.bsky.feed.defs#interactionReply",
        DefsInteractionQuote: "app.bsky.feed.defs#interactionQuote",
        DefsInteractionShare: "app.bsky.feed.defs#interactionShare"
      };
      exports.APP_BSKY_GRAPH = {
        DefsModlist: "app.bsky.graph.defs#modlist",
        DefsCuratelist: "app.bsky.graph.defs#curatelist",
        DefsReferencelist: "app.bsky.graph.defs#referencelist"
      };
      exports.TOOLS_OZONE_MODERATION = {
        DefsReviewOpen: "tools.ozone.moderation.defs#reviewOpen",
        DefsReviewEscalated: "tools.ozone.moderation.defs#reviewEscalated",
        DefsReviewClosed: "tools.ozone.moderation.defs#reviewClosed",
        DefsReviewNone: "tools.ozone.moderation.defs#reviewNone"
      };
      exports.TOOLS_OZONE_TEAM = {
        DefsRoleAdmin: "tools.ozone.team.defs#roleAdmin",
        DefsRoleModerator: "tools.ozone.team.defs#roleModerator",
        DefsRoleTriage: "tools.ozone.team.defs#roleTriage",
        DefsRoleVerifier: "tools.ozone.team.defs#roleVerifier"
      };
      var AtpBaseClient = class extends xrpc_1.XrpcClient {
        constructor(options) {
          super(options, lexicons_js_1.schemas);
          Object.defineProperty(this, "com", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "app", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "chat", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "tools", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.com = new ComNS(this);
          this.app = new AppNS(this);
          this.chat = new ChatNS(this);
          this.tools = new ToolsNS(this);
        }
        /** @deprecated use `this` instead */
        get xrpc() {
          return this;
        }
      };
      exports.AtpBaseClient = AtpBaseClient;
      var ComNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "atproto", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
          this.atproto = new ComAtprotoNS(client);
        }
      };
      exports.ComNS = ComNS;
      var ComAtprotoNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "admin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "identity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "label", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "lexicon", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "moderation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "repo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "server", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "sync", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "temp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
          this.admin = new ComAtprotoAdminNS(client);
          this.identity = new ComAtprotoIdentityNS(client);
          this.label = new ComAtprotoLabelNS(client);
          this.lexicon = new ComAtprotoLexiconNS(client);
          this.moderation = new ComAtprotoModerationNS(client);
          this.repo = new ComAtprotoRepoNS(client);
          this.server = new ComAtprotoServerNS(client);
          this.sync = new ComAtprotoSyncNS(client);
          this.temp = new ComAtprotoTempNS(client);
        }
      };
      exports.ComAtprotoNS = ComAtprotoNS;
      var ComAtprotoAdminNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        deleteAccount(data, opts) {
          return this._client.call("com.atproto.admin.deleteAccount", opts?.qp, data, opts);
        }
        disableAccountInvites(data, opts) {
          return this._client.call("com.atproto.admin.disableAccountInvites", opts?.qp, data, opts);
        }
        disableInviteCodes(data, opts) {
          return this._client.call("com.atproto.admin.disableInviteCodes", opts?.qp, data, opts);
        }
        enableAccountInvites(data, opts) {
          return this._client.call("com.atproto.admin.enableAccountInvites", opts?.qp, data, opts);
        }
        getAccountInfo(params, opts) {
          return this._client.call("com.atproto.admin.getAccountInfo", params, void 0, opts);
        }
        getAccountInfos(params, opts) {
          return this._client.call("com.atproto.admin.getAccountInfos", params, void 0, opts);
        }
        getInviteCodes(params, opts) {
          return this._client.call("com.atproto.admin.getInviteCodes", params, void 0, opts);
        }
        getSubjectStatus(params, opts) {
          return this._client.call("com.atproto.admin.getSubjectStatus", params, void 0, opts);
        }
        searchAccounts(params, opts) {
          return this._client.call("com.atproto.admin.searchAccounts", params, void 0, opts);
        }
        sendEmail(data, opts) {
          return this._client.call("com.atproto.admin.sendEmail", opts?.qp, data, opts);
        }
        updateAccountEmail(data, opts) {
          return this._client.call("com.atproto.admin.updateAccountEmail", opts?.qp, data, opts);
        }
        updateAccountHandle(data, opts) {
          return this._client.call("com.atproto.admin.updateAccountHandle", opts?.qp, data, opts);
        }
        updateAccountPassword(data, opts) {
          return this._client.call("com.atproto.admin.updateAccountPassword", opts?.qp, data, opts);
        }
        updateAccountSigningKey(data, opts) {
          return this._client.call("com.atproto.admin.updateAccountSigningKey", opts?.qp, data, opts);
        }
        updateSubjectStatus(data, opts) {
          return this._client.call("com.atproto.admin.updateSubjectStatus", opts?.qp, data, opts);
        }
      };
      exports.ComAtprotoAdminNS = ComAtprotoAdminNS;
      var ComAtprotoIdentityNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        getRecommendedDidCredentials(params, opts) {
          return this._client.call("com.atproto.identity.getRecommendedDidCredentials", params, void 0, opts);
        }
        refreshIdentity(data, opts) {
          return this._client.call("com.atproto.identity.refreshIdentity", opts?.qp, data, opts).catch((e) => {
            throw ComAtprotoIdentityRefreshIdentity.toKnownErr(e);
          });
        }
        requestPlcOperationSignature(data, opts) {
          return this._client.call("com.atproto.identity.requestPlcOperationSignature", opts?.qp, data, opts);
        }
        resolveDid(params, opts) {
          return this._client.call("com.atproto.identity.resolveDid", params, void 0, opts).catch((e) => {
            throw ComAtprotoIdentityResolveDid.toKnownErr(e);
          });
        }
        resolveHandle(params, opts) {
          return this._client.call("com.atproto.identity.resolveHandle", params, void 0, opts).catch((e) => {
            throw ComAtprotoIdentityResolveHandle.toKnownErr(e);
          });
        }
        resolveIdentity(params, opts) {
          return this._client.call("com.atproto.identity.resolveIdentity", params, void 0, opts).catch((e) => {
            throw ComAtprotoIdentityResolveIdentity.toKnownErr(e);
          });
        }
        signPlcOperation(data, opts) {
          return this._client.call("com.atproto.identity.signPlcOperation", opts?.qp, data, opts);
        }
        submitPlcOperation(data, opts) {
          return this._client.call("com.atproto.identity.submitPlcOperation", opts?.qp, data, opts);
        }
        updateHandle(data, opts) {
          return this._client.call("com.atproto.identity.updateHandle", opts?.qp, data, opts);
        }
      };
      exports.ComAtprotoIdentityNS = ComAtprotoIdentityNS;
      var ComAtprotoLabelNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        queryLabels(params, opts) {
          return this._client.call("com.atproto.label.queryLabels", params, void 0, opts);
        }
      };
      exports.ComAtprotoLabelNS = ComAtprotoLabelNS;
      var ComAtprotoLexiconNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "schema", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
          this.schema = new ComAtprotoLexiconSchemaRecord(client);
        }
      };
      exports.ComAtprotoLexiconNS = ComAtprotoLexiconNS;
      var ComAtprotoLexiconSchemaRecord = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        async list(params) {
          const res = await this._client.call("com.atproto.repo.listRecords", {
            collection: "com.atproto.lexicon.schema",
            ...params
          });
          return res.data;
        }
        async get(params) {
          const res = await this._client.call("com.atproto.repo.getRecord", {
            collection: "com.atproto.lexicon.schema",
            ...params
          });
          return res.data;
        }
        async create(params, record, headers) {
          const collection = "com.atproto.lexicon.schema";
          const res = await this._client.call("com.atproto.repo.createRecord", void 0, { collection, ...params, record: { ...record, $type: collection } }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params, headers) {
          await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "com.atproto.lexicon.schema", ...params }, { headers });
        }
      };
      exports.ComAtprotoLexiconSchemaRecord = ComAtprotoLexiconSchemaRecord;
      var ComAtprotoModerationNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        createReport(data, opts) {
          return this._client.call("com.atproto.moderation.createReport", opts?.qp, data, opts);
        }
      };
      exports.ComAtprotoModerationNS = ComAtprotoModerationNS;
      var ComAtprotoRepoNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        applyWrites(data, opts) {
          return this._client.call("com.atproto.repo.applyWrites", opts?.qp, data, opts).catch((e) => {
            throw ComAtprotoRepoApplyWrites.toKnownErr(e);
          });
        }
        createRecord(data, opts) {
          return this._client.call("com.atproto.repo.createRecord", opts?.qp, data, opts).catch((e) => {
            throw ComAtprotoRepoCreateRecord.toKnownErr(e);
          });
        }
        deleteRecord(data, opts) {
          return this._client.call("com.atproto.repo.deleteRecord", opts?.qp, data, opts).catch((e) => {
            throw ComAtprotoRepoDeleteRecord.toKnownErr(e);
          });
        }
        describeRepo(params, opts) {
          return this._client.call("com.atproto.repo.describeRepo", params, void 0, opts);
        }
        getRecord(params, opts) {
          return this._client.call("com.atproto.repo.getRecord", params, void 0, opts).catch((e) => {
            throw ComAtprotoRepoGetRecord.toKnownErr(e);
          });
        }
        importRepo(data, opts) {
          return this._client.call("com.atproto.repo.importRepo", opts?.qp, data, opts);
        }
        listMissingBlobs(params, opts) {
          return this._client.call("com.atproto.repo.listMissingBlobs", params, void 0, opts);
        }
        listRecords(params, opts) {
          return this._client.call("com.atproto.repo.listRecords", params, void 0, opts);
        }
        putRecord(data, opts) {
          return this._client.call("com.atproto.repo.putRecord", opts?.qp, data, opts).catch((e) => {
            throw ComAtprotoRepoPutRecord.toKnownErr(e);
          });
        }
        uploadBlob(data, opts) {
          return this._client.call("com.atproto.repo.uploadBlob", opts?.qp, data, opts);
        }
      };
      exports.ComAtprotoRepoNS = ComAtprotoRepoNS;
      var ComAtprotoServerNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        activateAccount(data, opts) {
          return this._client.call("com.atproto.server.activateAccount", opts?.qp, data, opts);
        }
        checkAccountStatus(params, opts) {
          return this._client.call("com.atproto.server.checkAccountStatus", params, void 0, opts);
        }
        confirmEmail(data, opts) {
          return this._client.call("com.atproto.server.confirmEmail", opts?.qp, data, opts).catch((e) => {
            throw ComAtprotoServerConfirmEmail.toKnownErr(e);
          });
        }
        createAccount(data, opts) {
          return this._client.call("com.atproto.server.createAccount", opts?.qp, data, opts).catch((e) => {
            throw ComAtprotoServerCreateAccount.toKnownErr(e);
          });
        }
        createAppPassword(data, opts) {
          return this._client.call("com.atproto.server.createAppPassword", opts?.qp, data, opts).catch((e) => {
            throw ComAtprotoServerCreateAppPassword.toKnownErr(e);
          });
        }
        createInviteCode(data, opts) {
          return this._client.call("com.atproto.server.createInviteCode", opts?.qp, data, opts);
        }
        createInviteCodes(data, opts) {
          return this._client.call("com.atproto.server.createInviteCodes", opts?.qp, data, opts);
        }
        createSession(data, opts) {
          return this._client.call("com.atproto.server.createSession", opts?.qp, data, opts).catch((e) => {
            throw ComAtprotoServerCreateSession.toKnownErr(e);
          });
        }
        deactivateAccount(data, opts) {
          return this._client.call("com.atproto.server.deactivateAccount", opts?.qp, data, opts);
        }
        deleteAccount(data, opts) {
          return this._client.call("com.atproto.server.deleteAccount", opts?.qp, data, opts).catch((e) => {
            throw ComAtprotoServerDeleteAccount.toKnownErr(e);
          });
        }
        deleteSession(data, opts) {
          return this._client.call("com.atproto.server.deleteSession", opts?.qp, data, opts);
        }
        describeServer(params, opts) {
          return this._client.call("com.atproto.server.describeServer", params, void 0, opts);
        }
        getAccountInviteCodes(params, opts) {
          return this._client.call("com.atproto.server.getAccountInviteCodes", params, void 0, opts).catch((e) => {
            throw ComAtprotoServerGetAccountInviteCodes.toKnownErr(e);
          });
        }
        getServiceAuth(params, opts) {
          return this._client.call("com.atproto.server.getServiceAuth", params, void 0, opts).catch((e) => {
            throw ComAtprotoServerGetServiceAuth.toKnownErr(e);
          });
        }
        getSession(params, opts) {
          return this._client.call("com.atproto.server.getSession", params, void 0, opts);
        }
        listAppPasswords(params, opts) {
          return this._client.call("com.atproto.server.listAppPasswords", params, void 0, opts).catch((e) => {
            throw ComAtprotoServerListAppPasswords.toKnownErr(e);
          });
        }
        refreshSession(data, opts) {
          return this._client.call("com.atproto.server.refreshSession", opts?.qp, data, opts).catch((e) => {
            throw ComAtprotoServerRefreshSession.toKnownErr(e);
          });
        }
        requestAccountDelete(data, opts) {
          return this._client.call("com.atproto.server.requestAccountDelete", opts?.qp, data, opts);
        }
        requestEmailConfirmation(data, opts) {
          return this._client.call("com.atproto.server.requestEmailConfirmation", opts?.qp, data, opts);
        }
        requestEmailUpdate(data, opts) {
          return this._client.call("com.atproto.server.requestEmailUpdate", opts?.qp, data, opts);
        }
        requestPasswordReset(data, opts) {
          return this._client.call("com.atproto.server.requestPasswordReset", opts?.qp, data, opts);
        }
        reserveSigningKey(data, opts) {
          return this._client.call("com.atproto.server.reserveSigningKey", opts?.qp, data, opts);
        }
        resetPassword(data, opts) {
          return this._client.call("com.atproto.server.resetPassword", opts?.qp, data, opts).catch((e) => {
            throw ComAtprotoServerResetPassword.toKnownErr(e);
          });
        }
        revokeAppPassword(data, opts) {
          return this._client.call("com.atproto.server.revokeAppPassword", opts?.qp, data, opts);
        }
        updateEmail(data, opts) {
          return this._client.call("com.atproto.server.updateEmail", opts?.qp, data, opts).catch((e) => {
            throw ComAtprotoServerUpdateEmail.toKnownErr(e);
          });
        }
      };
      exports.ComAtprotoServerNS = ComAtprotoServerNS;
      var ComAtprotoSyncNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        getBlob(params, opts) {
          return this._client.call("com.atproto.sync.getBlob", params, void 0, opts).catch((e) => {
            throw ComAtprotoSyncGetBlob.toKnownErr(e);
          });
        }
        getBlocks(params, opts) {
          return this._client.call("com.atproto.sync.getBlocks", params, void 0, opts).catch((e) => {
            throw ComAtprotoSyncGetBlocks.toKnownErr(e);
          });
        }
        getCheckout(params, opts) {
          return this._client.call("com.atproto.sync.getCheckout", params, void 0, opts);
        }
        getHead(params, opts) {
          return this._client.call("com.atproto.sync.getHead", params, void 0, opts).catch((e) => {
            throw ComAtprotoSyncGetHead.toKnownErr(e);
          });
        }
        getHostStatus(params, opts) {
          return this._client.call("com.atproto.sync.getHostStatus", params, void 0, opts).catch((e) => {
            throw ComAtprotoSyncGetHostStatus.toKnownErr(e);
          });
        }
        getLatestCommit(params, opts) {
          return this._client.call("com.atproto.sync.getLatestCommit", params, void 0, opts).catch((e) => {
            throw ComAtprotoSyncGetLatestCommit.toKnownErr(e);
          });
        }
        getRecord(params, opts) {
          return this._client.call("com.atproto.sync.getRecord", params, void 0, opts).catch((e) => {
            throw ComAtprotoSyncGetRecord.toKnownErr(e);
          });
        }
        getRepo(params, opts) {
          return this._client.call("com.atproto.sync.getRepo", params, void 0, opts).catch((e) => {
            throw ComAtprotoSyncGetRepo.toKnownErr(e);
          });
        }
        getRepoStatus(params, opts) {
          return this._client.call("com.atproto.sync.getRepoStatus", params, void 0, opts).catch((e) => {
            throw ComAtprotoSyncGetRepoStatus.toKnownErr(e);
          });
        }
        listBlobs(params, opts) {
          return this._client.call("com.atproto.sync.listBlobs", params, void 0, opts).catch((e) => {
            throw ComAtprotoSyncListBlobs.toKnownErr(e);
          });
        }
        listHosts(params, opts) {
          return this._client.call("com.atproto.sync.listHosts", params, void 0, opts);
        }
        listRepos(params, opts) {
          return this._client.call("com.atproto.sync.listRepos", params, void 0, opts);
        }
        listReposByCollection(params, opts) {
          return this._client.call("com.atproto.sync.listReposByCollection", params, void 0, opts);
        }
        notifyOfUpdate(data, opts) {
          return this._client.call("com.atproto.sync.notifyOfUpdate", opts?.qp, data, opts);
        }
        requestCrawl(data, opts) {
          return this._client.call("com.atproto.sync.requestCrawl", opts?.qp, data, opts).catch((e) => {
            throw ComAtprotoSyncRequestCrawl.toKnownErr(e);
          });
        }
      };
      exports.ComAtprotoSyncNS = ComAtprotoSyncNS;
      var ComAtprotoTempNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        addReservedHandle(data, opts) {
          return this._client.call("com.atproto.temp.addReservedHandle", opts?.qp, data, opts);
        }
        checkSignupQueue(params, opts) {
          return this._client.call("com.atproto.temp.checkSignupQueue", params, void 0, opts);
        }
        fetchLabels(params, opts) {
          return this._client.call("com.atproto.temp.fetchLabels", params, void 0, opts);
        }
        requestPhoneVerification(data, opts) {
          return this._client.call("com.atproto.temp.requestPhoneVerification", opts?.qp, data, opts);
        }
      };
      exports.ComAtprotoTempNS = ComAtprotoTempNS;
      var AppNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "bsky", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
          this.bsky = new AppBskyNS(client);
        }
      };
      exports.AppNS = AppNS;
      var AppBskyNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "actor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "embed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "feed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "labeler", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "notification", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "richtext", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "unspecced", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "video", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
          this.actor = new AppBskyActorNS(client);
          this.embed = new AppBskyEmbedNS(client);
          this.feed = new AppBskyFeedNS(client);
          this.graph = new AppBskyGraphNS(client);
          this.labeler = new AppBskyLabelerNS(client);
          this.notification = new AppBskyNotificationNS(client);
          this.richtext = new AppBskyRichtextNS(client);
          this.unspecced = new AppBskyUnspeccedNS(client);
          this.video = new AppBskyVideoNS(client);
        }
      };
      exports.AppBskyNS = AppBskyNS;
      var AppBskyActorNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "profile", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "status", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
          this.profile = new AppBskyActorProfileRecord(client);
          this.status = new AppBskyActorStatusRecord(client);
        }
        getPreferences(params, opts) {
          return this._client.call("app.bsky.actor.getPreferences", params, void 0, opts);
        }
        getProfile(params, opts) {
          return this._client.call("app.bsky.actor.getProfile", params, void 0, opts);
        }
        getProfiles(params, opts) {
          return this._client.call("app.bsky.actor.getProfiles", params, void 0, opts);
        }
        getSuggestions(params, opts) {
          return this._client.call("app.bsky.actor.getSuggestions", params, void 0, opts);
        }
        putPreferences(data, opts) {
          return this._client.call("app.bsky.actor.putPreferences", opts?.qp, data, opts);
        }
        searchActors(params, opts) {
          return this._client.call("app.bsky.actor.searchActors", params, void 0, opts);
        }
        searchActorsTypeahead(params, opts) {
          return this._client.call("app.bsky.actor.searchActorsTypeahead", params, void 0, opts);
        }
      };
      exports.AppBskyActorNS = AppBskyActorNS;
      var AppBskyActorProfileRecord = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        async list(params) {
          const res = await this._client.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.actor.profile",
            ...params
          });
          return res.data;
        }
        async get(params) {
          const res = await this._client.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.actor.profile",
            ...params
          });
          return res.data;
        }
        async create(params, record, headers) {
          const collection = "app.bsky.actor.profile";
          const res = await this._client.call("com.atproto.repo.createRecord", void 0, {
            collection,
            rkey: "self",
            ...params,
            record: { ...record, $type: collection }
          }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params, headers) {
          await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.actor.profile", ...params }, { headers });
        }
      };
      exports.AppBskyActorProfileRecord = AppBskyActorProfileRecord;
      var AppBskyActorStatusRecord = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        async list(params) {
          const res = await this._client.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.actor.status",
            ...params
          });
          return res.data;
        }
        async get(params) {
          const res = await this._client.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.actor.status",
            ...params
          });
          return res.data;
        }
        async create(params, record, headers) {
          const collection = "app.bsky.actor.status";
          const res = await this._client.call("com.atproto.repo.createRecord", void 0, {
            collection,
            rkey: "self",
            ...params,
            record: { ...record, $type: collection }
          }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params, headers) {
          await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.actor.status", ...params }, { headers });
        }
      };
      exports.AppBskyActorStatusRecord = AppBskyActorStatusRecord;
      var AppBskyEmbedNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
      };
      exports.AppBskyEmbedNS = AppBskyEmbedNS;
      var AppBskyFeedNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "generator", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "like", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "post", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "postgate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "repost", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "threadgate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
          this.generator = new AppBskyFeedGeneratorRecord(client);
          this.like = new AppBskyFeedLikeRecord(client);
          this.post = new AppBskyFeedPostRecord(client);
          this.postgate = new AppBskyFeedPostgateRecord(client);
          this.repost = new AppBskyFeedRepostRecord(client);
          this.threadgate = new AppBskyFeedThreadgateRecord(client);
        }
        describeFeedGenerator(params, opts) {
          return this._client.call("app.bsky.feed.describeFeedGenerator", params, void 0, opts);
        }
        getActorFeeds(params, opts) {
          return this._client.call("app.bsky.feed.getActorFeeds", params, void 0, opts);
        }
        getActorLikes(params, opts) {
          return this._client.call("app.bsky.feed.getActorLikes", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetActorLikes.toKnownErr(e);
          });
        }
        getAuthorFeed(params, opts) {
          return this._client.call("app.bsky.feed.getAuthorFeed", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetAuthorFeed.toKnownErr(e);
          });
        }
        getFeed(params, opts) {
          return this._client.call("app.bsky.feed.getFeed", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetFeed.toKnownErr(e);
          });
        }
        getFeedGenerator(params, opts) {
          return this._client.call("app.bsky.feed.getFeedGenerator", params, void 0, opts);
        }
        getFeedGenerators(params, opts) {
          return this._client.call("app.bsky.feed.getFeedGenerators", params, void 0, opts);
        }
        getFeedSkeleton(params, opts) {
          return this._client.call("app.bsky.feed.getFeedSkeleton", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetFeedSkeleton.toKnownErr(e);
          });
        }
        getLikes(params, opts) {
          return this._client.call("app.bsky.feed.getLikes", params, void 0, opts);
        }
        getListFeed(params, opts) {
          return this._client.call("app.bsky.feed.getListFeed", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetListFeed.toKnownErr(e);
          });
        }
        getPosts(params, opts) {
          return this._client.call("app.bsky.feed.getPosts", params, void 0, opts);
        }
        getPostThread(params, opts) {
          return this._client.call("app.bsky.feed.getPostThread", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetPostThread.toKnownErr(e);
          });
        }
        getQuotes(params, opts) {
          return this._client.call("app.bsky.feed.getQuotes", params, void 0, opts);
        }
        getRepostedBy(params, opts) {
          return this._client.call("app.bsky.feed.getRepostedBy", params, void 0, opts);
        }
        getSuggestedFeeds(params, opts) {
          return this._client.call("app.bsky.feed.getSuggestedFeeds", params, void 0, opts);
        }
        getTimeline(params, opts) {
          return this._client.call("app.bsky.feed.getTimeline", params, void 0, opts);
        }
        searchPosts(params, opts) {
          return this._client.call("app.bsky.feed.searchPosts", params, void 0, opts).catch((e) => {
            throw AppBskyFeedSearchPosts.toKnownErr(e);
          });
        }
        sendInteractions(data, opts) {
          return this._client.call("app.bsky.feed.sendInteractions", opts?.qp, data, opts);
        }
      };
      exports.AppBskyFeedNS = AppBskyFeedNS;
      var AppBskyFeedGeneratorRecord = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        async list(params) {
          const res = await this._client.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.feed.generator",
            ...params
          });
          return res.data;
        }
        async get(params) {
          const res = await this._client.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.feed.generator",
            ...params
          });
          return res.data;
        }
        async create(params, record, headers) {
          const collection = "app.bsky.feed.generator";
          const res = await this._client.call("com.atproto.repo.createRecord", void 0, { collection, ...params, record: { ...record, $type: collection } }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params, headers) {
          await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.generator", ...params }, { headers });
        }
      };
      exports.AppBskyFeedGeneratorRecord = AppBskyFeedGeneratorRecord;
      var AppBskyFeedLikeRecord = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        async list(params) {
          const res = await this._client.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.feed.like",
            ...params
          });
          return res.data;
        }
        async get(params) {
          const res = await this._client.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.feed.like",
            ...params
          });
          return res.data;
        }
        async create(params, record, headers) {
          const collection = "app.bsky.feed.like";
          const res = await this._client.call("com.atproto.repo.createRecord", void 0, { collection, ...params, record: { ...record, $type: collection } }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params, headers) {
          await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.like", ...params }, { headers });
        }
      };
      exports.AppBskyFeedLikeRecord = AppBskyFeedLikeRecord;
      var AppBskyFeedPostRecord = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        async list(params) {
          const res = await this._client.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.feed.post",
            ...params
          });
          return res.data;
        }
        async get(params) {
          const res = await this._client.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.feed.post",
            ...params
          });
          return res.data;
        }
        async create(params, record, headers) {
          const collection = "app.bsky.feed.post";
          const res = await this._client.call("com.atproto.repo.createRecord", void 0, { collection, ...params, record: { ...record, $type: collection } }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params, headers) {
          await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.post", ...params }, { headers });
        }
      };
      exports.AppBskyFeedPostRecord = AppBskyFeedPostRecord;
      var AppBskyFeedPostgateRecord = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        async list(params) {
          const res = await this._client.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.feed.postgate",
            ...params
          });
          return res.data;
        }
        async get(params) {
          const res = await this._client.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.feed.postgate",
            ...params
          });
          return res.data;
        }
        async create(params, record, headers) {
          const collection = "app.bsky.feed.postgate";
          const res = await this._client.call("com.atproto.repo.createRecord", void 0, { collection, ...params, record: { ...record, $type: collection } }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params, headers) {
          await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.postgate", ...params }, { headers });
        }
      };
      exports.AppBskyFeedPostgateRecord = AppBskyFeedPostgateRecord;
      var AppBskyFeedRepostRecord = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        async list(params) {
          const res = await this._client.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.feed.repost",
            ...params
          });
          return res.data;
        }
        async get(params) {
          const res = await this._client.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.feed.repost",
            ...params
          });
          return res.data;
        }
        async create(params, record, headers) {
          const collection = "app.bsky.feed.repost";
          const res = await this._client.call("com.atproto.repo.createRecord", void 0, { collection, ...params, record: { ...record, $type: collection } }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params, headers) {
          await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.repost", ...params }, { headers });
        }
      };
      exports.AppBskyFeedRepostRecord = AppBskyFeedRepostRecord;
      var AppBskyFeedThreadgateRecord = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        async list(params) {
          const res = await this._client.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.feed.threadgate",
            ...params
          });
          return res.data;
        }
        async get(params) {
          const res = await this._client.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.feed.threadgate",
            ...params
          });
          return res.data;
        }
        async create(params, record, headers) {
          const collection = "app.bsky.feed.threadgate";
          const res = await this._client.call("com.atproto.repo.createRecord", void 0, { collection, ...params, record: { ...record, $type: collection } }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params, headers) {
          await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.threadgate", ...params }, { headers });
        }
      };
      exports.AppBskyFeedThreadgateRecord = AppBskyFeedThreadgateRecord;
      var AppBskyGraphNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "block", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "follow", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "list", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "listblock", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "listitem", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "starterpack", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "verification", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
          this.block = new AppBskyGraphBlockRecord(client);
          this.follow = new AppBskyGraphFollowRecord(client);
          this.list = new AppBskyGraphListRecord(client);
          this.listblock = new AppBskyGraphListblockRecord(client);
          this.listitem = new AppBskyGraphListitemRecord(client);
          this.starterpack = new AppBskyGraphStarterpackRecord(client);
          this.verification = new AppBskyGraphVerificationRecord(client);
        }
        getActorStarterPacks(params, opts) {
          return this._client.call("app.bsky.graph.getActorStarterPacks", params, void 0, opts);
        }
        getBlocks(params, opts) {
          return this._client.call("app.bsky.graph.getBlocks", params, void 0, opts);
        }
        getFollowers(params, opts) {
          return this._client.call("app.bsky.graph.getFollowers", params, void 0, opts);
        }
        getFollows(params, opts) {
          return this._client.call("app.bsky.graph.getFollows", params, void 0, opts);
        }
        getKnownFollowers(params, opts) {
          return this._client.call("app.bsky.graph.getKnownFollowers", params, void 0, opts);
        }
        getList(params, opts) {
          return this._client.call("app.bsky.graph.getList", params, void 0, opts);
        }
        getListBlocks(params, opts) {
          return this._client.call("app.bsky.graph.getListBlocks", params, void 0, opts);
        }
        getListMutes(params, opts) {
          return this._client.call("app.bsky.graph.getListMutes", params, void 0, opts);
        }
        getLists(params, opts) {
          return this._client.call("app.bsky.graph.getLists", params, void 0, opts);
        }
        getMutes(params, opts) {
          return this._client.call("app.bsky.graph.getMutes", params, void 0, opts);
        }
        getRelationships(params, opts) {
          return this._client.call("app.bsky.graph.getRelationships", params, void 0, opts).catch((e) => {
            throw AppBskyGraphGetRelationships.toKnownErr(e);
          });
        }
        getStarterPack(params, opts) {
          return this._client.call("app.bsky.graph.getStarterPack", params, void 0, opts);
        }
        getStarterPacks(params, opts) {
          return this._client.call("app.bsky.graph.getStarterPacks", params, void 0, opts);
        }
        getSuggestedFollowsByActor(params, opts) {
          return this._client.call("app.bsky.graph.getSuggestedFollowsByActor", params, void 0, opts);
        }
        muteActor(data, opts) {
          return this._client.call("app.bsky.graph.muteActor", opts?.qp, data, opts);
        }
        muteActorList(data, opts) {
          return this._client.call("app.bsky.graph.muteActorList", opts?.qp, data, opts);
        }
        muteThread(data, opts) {
          return this._client.call("app.bsky.graph.muteThread", opts?.qp, data, opts);
        }
        searchStarterPacks(params, opts) {
          return this._client.call("app.bsky.graph.searchStarterPacks", params, void 0, opts);
        }
        unmuteActor(data, opts) {
          return this._client.call("app.bsky.graph.unmuteActor", opts?.qp, data, opts);
        }
        unmuteActorList(data, opts) {
          return this._client.call("app.bsky.graph.unmuteActorList", opts?.qp, data, opts);
        }
        unmuteThread(data, opts) {
          return this._client.call("app.bsky.graph.unmuteThread", opts?.qp, data, opts);
        }
      };
      exports.AppBskyGraphNS = AppBskyGraphNS;
      var AppBskyGraphBlockRecord = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        async list(params) {
          const res = await this._client.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.graph.block",
            ...params
          });
          return res.data;
        }
        async get(params) {
          const res = await this._client.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.graph.block",
            ...params
          });
          return res.data;
        }
        async create(params, record, headers) {
          const collection = "app.bsky.graph.block";
          const res = await this._client.call("com.atproto.repo.createRecord", void 0, { collection, ...params, record: { ...record, $type: collection } }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params, headers) {
          await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.block", ...params }, { headers });
        }
      };
      exports.AppBskyGraphBlockRecord = AppBskyGraphBlockRecord;
      var AppBskyGraphFollowRecord = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        async list(params) {
          const res = await this._client.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.graph.follow",
            ...params
          });
          return res.data;
        }
        async get(params) {
          const res = await this._client.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.graph.follow",
            ...params
          });
          return res.data;
        }
        async create(params, record, headers) {
          const collection = "app.bsky.graph.follow";
          const res = await this._client.call("com.atproto.repo.createRecord", void 0, { collection, ...params, record: { ...record, $type: collection } }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params, headers) {
          await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.follow", ...params }, { headers });
        }
      };
      exports.AppBskyGraphFollowRecord = AppBskyGraphFollowRecord;
      var AppBskyGraphListRecord = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        async list(params) {
          const res = await this._client.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.graph.list",
            ...params
          });
          return res.data;
        }
        async get(params) {
          const res = await this._client.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.graph.list",
            ...params
          });
          return res.data;
        }
        async create(params, record, headers) {
          const collection = "app.bsky.graph.list";
          const res = await this._client.call("com.atproto.repo.createRecord", void 0, { collection, ...params, record: { ...record, $type: collection } }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params, headers) {
          await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.list", ...params }, { headers });
        }
      };
      exports.AppBskyGraphListRecord = AppBskyGraphListRecord;
      var AppBskyGraphListblockRecord = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        async list(params) {
          const res = await this._client.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.graph.listblock",
            ...params
          });
          return res.data;
        }
        async get(params) {
          const res = await this._client.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.graph.listblock",
            ...params
          });
          return res.data;
        }
        async create(params, record, headers) {
          const collection = "app.bsky.graph.listblock";
          const res = await this._client.call("com.atproto.repo.createRecord", void 0, { collection, ...params, record: { ...record, $type: collection } }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params, headers) {
          await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.listblock", ...params }, { headers });
        }
      };
      exports.AppBskyGraphListblockRecord = AppBskyGraphListblockRecord;
      var AppBskyGraphListitemRecord = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        async list(params) {
          const res = await this._client.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.graph.listitem",
            ...params
          });
          return res.data;
        }
        async get(params) {
          const res = await this._client.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.graph.listitem",
            ...params
          });
          return res.data;
        }
        async create(params, record, headers) {
          const collection = "app.bsky.graph.listitem";
          const res = await this._client.call("com.atproto.repo.createRecord", void 0, { collection, ...params, record: { ...record, $type: collection } }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params, headers) {
          await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.listitem", ...params }, { headers });
        }
      };
      exports.AppBskyGraphListitemRecord = AppBskyGraphListitemRecord;
      var AppBskyGraphStarterpackRecord = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        async list(params) {
          const res = await this._client.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.graph.starterpack",
            ...params
          });
          return res.data;
        }
        async get(params) {
          const res = await this._client.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.graph.starterpack",
            ...params
          });
          return res.data;
        }
        async create(params, record, headers) {
          const collection = "app.bsky.graph.starterpack";
          const res = await this._client.call("com.atproto.repo.createRecord", void 0, { collection, ...params, record: { ...record, $type: collection } }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params, headers) {
          await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.starterpack", ...params }, { headers });
        }
      };
      exports.AppBskyGraphStarterpackRecord = AppBskyGraphStarterpackRecord;
      var AppBskyGraphVerificationRecord = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        async list(params) {
          const res = await this._client.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.graph.verification",
            ...params
          });
          return res.data;
        }
        async get(params) {
          const res = await this._client.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.graph.verification",
            ...params
          });
          return res.data;
        }
        async create(params, record, headers) {
          const collection = "app.bsky.graph.verification";
          const res = await this._client.call("com.atproto.repo.createRecord", void 0, { collection, ...params, record: { ...record, $type: collection } }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params, headers) {
          await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.verification", ...params }, { headers });
        }
      };
      exports.AppBskyGraphVerificationRecord = AppBskyGraphVerificationRecord;
      var AppBskyLabelerNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
          this.service = new AppBskyLabelerServiceRecord(client);
        }
        getServices(params, opts) {
          return this._client.call("app.bsky.labeler.getServices", params, void 0, opts);
        }
      };
      exports.AppBskyLabelerNS = AppBskyLabelerNS;
      var AppBskyLabelerServiceRecord = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        async list(params) {
          const res = await this._client.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.labeler.service",
            ...params
          });
          return res.data;
        }
        async get(params) {
          const res = await this._client.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.labeler.service",
            ...params
          });
          return res.data;
        }
        async create(params, record, headers) {
          const collection = "app.bsky.labeler.service";
          const res = await this._client.call("com.atproto.repo.createRecord", void 0, {
            collection,
            rkey: "self",
            ...params,
            record: { ...record, $type: collection }
          }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params, headers) {
          await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.labeler.service", ...params }, { headers });
        }
      };
      exports.AppBskyLabelerServiceRecord = AppBskyLabelerServiceRecord;
      var AppBskyNotificationNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        getUnreadCount(params, opts) {
          return this._client.call("app.bsky.notification.getUnreadCount", params, void 0, opts);
        }
        listNotifications(params, opts) {
          return this._client.call("app.bsky.notification.listNotifications", params, void 0, opts);
        }
        putPreferences(data, opts) {
          return this._client.call("app.bsky.notification.putPreferences", opts?.qp, data, opts);
        }
        registerPush(data, opts) {
          return this._client.call("app.bsky.notification.registerPush", opts?.qp, data, opts);
        }
        updateSeen(data, opts) {
          return this._client.call("app.bsky.notification.updateSeen", opts?.qp, data, opts);
        }
      };
      exports.AppBskyNotificationNS = AppBskyNotificationNS;
      var AppBskyRichtextNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
      };
      exports.AppBskyRichtextNS = AppBskyRichtextNS;
      var AppBskyUnspeccedNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        getConfig(params, opts) {
          return this._client.call("app.bsky.unspecced.getConfig", params, void 0, opts);
        }
        getPopularFeedGenerators(params, opts) {
          return this._client.call("app.bsky.unspecced.getPopularFeedGenerators", params, void 0, opts);
        }
        getSuggestedFeeds(params, opts) {
          return this._client.call("app.bsky.unspecced.getSuggestedFeeds", params, void 0, opts);
        }
        getSuggestedFeedsSkeleton(params, opts) {
          return this._client.call("app.bsky.unspecced.getSuggestedFeedsSkeleton", params, void 0, opts);
        }
        getSuggestedStarterPacks(params, opts) {
          return this._client.call("app.bsky.unspecced.getSuggestedStarterPacks", params, void 0, opts);
        }
        getSuggestedStarterPacksSkeleton(params, opts) {
          return this._client.call("app.bsky.unspecced.getSuggestedStarterPacksSkeleton", params, void 0, opts);
        }
        getSuggestedUsers(params, opts) {
          return this._client.call("app.bsky.unspecced.getSuggestedUsers", params, void 0, opts);
        }
        getSuggestedUsersSkeleton(params, opts) {
          return this._client.call("app.bsky.unspecced.getSuggestedUsersSkeleton", params, void 0, opts);
        }
        getSuggestionsSkeleton(params, opts) {
          return this._client.call("app.bsky.unspecced.getSuggestionsSkeleton", params, void 0, opts);
        }
        getTaggedSuggestions(params, opts) {
          return this._client.call("app.bsky.unspecced.getTaggedSuggestions", params, void 0, opts);
        }
        getTrendingTopics(params, opts) {
          return this._client.call("app.bsky.unspecced.getTrendingTopics", params, void 0, opts);
        }
        getTrends(params, opts) {
          return this._client.call("app.bsky.unspecced.getTrends", params, void 0, opts);
        }
        getTrendsSkeleton(params, opts) {
          return this._client.call("app.bsky.unspecced.getTrendsSkeleton", params, void 0, opts);
        }
        searchActorsSkeleton(params, opts) {
          return this._client.call("app.bsky.unspecced.searchActorsSkeleton", params, void 0, opts).catch((e) => {
            throw AppBskyUnspeccedSearchActorsSkeleton.toKnownErr(e);
          });
        }
        searchPostsSkeleton(params, opts) {
          return this._client.call("app.bsky.unspecced.searchPostsSkeleton", params, void 0, opts).catch((e) => {
            throw AppBskyUnspeccedSearchPostsSkeleton.toKnownErr(e);
          });
        }
        searchStarterPacksSkeleton(params, opts) {
          return this._client.call("app.bsky.unspecced.searchStarterPacksSkeleton", params, void 0, opts).catch((e) => {
            throw AppBskyUnspeccedSearchStarterPacksSkeleton.toKnownErr(e);
          });
        }
      };
      exports.AppBskyUnspeccedNS = AppBskyUnspeccedNS;
      var AppBskyVideoNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        getJobStatus(params, opts) {
          return this._client.call("app.bsky.video.getJobStatus", params, void 0, opts);
        }
        getUploadLimits(params, opts) {
          return this._client.call("app.bsky.video.getUploadLimits", params, void 0, opts);
        }
        uploadVideo(data, opts) {
          return this._client.call("app.bsky.video.uploadVideo", opts?.qp, data, opts);
        }
      };
      exports.AppBskyVideoNS = AppBskyVideoNS;
      var ChatNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "bsky", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
          this.bsky = new ChatBskyNS(client);
        }
      };
      exports.ChatNS = ChatNS;
      var ChatBskyNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "actor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "convo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "moderation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
          this.actor = new ChatBskyActorNS(client);
          this.convo = new ChatBskyConvoNS(client);
          this.moderation = new ChatBskyModerationNS(client);
        }
      };
      exports.ChatBskyNS = ChatBskyNS;
      var ChatBskyActorNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "declaration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
          this.declaration = new ChatBskyActorDeclarationRecord(client);
        }
        deleteAccount(data, opts) {
          return this._client.call("chat.bsky.actor.deleteAccount", opts?.qp, data, opts);
        }
        exportAccountData(params, opts) {
          return this._client.call("chat.bsky.actor.exportAccountData", params, void 0, opts);
        }
      };
      exports.ChatBskyActorNS = ChatBskyActorNS;
      var ChatBskyActorDeclarationRecord = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        async list(params) {
          const res = await this._client.call("com.atproto.repo.listRecords", {
            collection: "chat.bsky.actor.declaration",
            ...params
          });
          return res.data;
        }
        async get(params) {
          const res = await this._client.call("com.atproto.repo.getRecord", {
            collection: "chat.bsky.actor.declaration",
            ...params
          });
          return res.data;
        }
        async create(params, record, headers) {
          const collection = "chat.bsky.actor.declaration";
          const res = await this._client.call("com.atproto.repo.createRecord", void 0, {
            collection,
            rkey: "self",
            ...params,
            record: { ...record, $type: collection }
          }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params, headers) {
          await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "chat.bsky.actor.declaration", ...params }, { headers });
        }
      };
      exports.ChatBskyActorDeclarationRecord = ChatBskyActorDeclarationRecord;
      var ChatBskyConvoNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        acceptConvo(data, opts) {
          return this._client.call("chat.bsky.convo.acceptConvo", opts?.qp, data, opts);
        }
        addReaction(data, opts) {
          return this._client.call("chat.bsky.convo.addReaction", opts?.qp, data, opts).catch((e) => {
            throw ChatBskyConvoAddReaction.toKnownErr(e);
          });
        }
        deleteMessageForSelf(data, opts) {
          return this._client.call("chat.bsky.convo.deleteMessageForSelf", opts?.qp, data, opts);
        }
        getConvo(params, opts) {
          return this._client.call("chat.bsky.convo.getConvo", params, void 0, opts);
        }
        getConvoAvailability(params, opts) {
          return this._client.call("chat.bsky.convo.getConvoAvailability", params, void 0, opts);
        }
        getConvoForMembers(params, opts) {
          return this._client.call("chat.bsky.convo.getConvoForMembers", params, void 0, opts);
        }
        getLog(params, opts) {
          return this._client.call("chat.bsky.convo.getLog", params, void 0, opts);
        }
        getMessages(params, opts) {
          return this._client.call("chat.bsky.convo.getMessages", params, void 0, opts);
        }
        leaveConvo(data, opts) {
          return this._client.call("chat.bsky.convo.leaveConvo", opts?.qp, data, opts);
        }
        listConvos(params, opts) {
          return this._client.call("chat.bsky.convo.listConvos", params, void 0, opts);
        }
        muteConvo(data, opts) {
          return this._client.call("chat.bsky.convo.muteConvo", opts?.qp, data, opts);
        }
        removeReaction(data, opts) {
          return this._client.call("chat.bsky.convo.removeReaction", opts?.qp, data, opts).catch((e) => {
            throw ChatBskyConvoRemoveReaction.toKnownErr(e);
          });
        }
        sendMessage(data, opts) {
          return this._client.call("chat.bsky.convo.sendMessage", opts?.qp, data, opts);
        }
        sendMessageBatch(data, opts) {
          return this._client.call("chat.bsky.convo.sendMessageBatch", opts?.qp, data, opts);
        }
        unmuteConvo(data, opts) {
          return this._client.call("chat.bsky.convo.unmuteConvo", opts?.qp, data, opts);
        }
        updateAllRead(data, opts) {
          return this._client.call("chat.bsky.convo.updateAllRead", opts?.qp, data, opts);
        }
        updateRead(data, opts) {
          return this._client.call("chat.bsky.convo.updateRead", opts?.qp, data, opts);
        }
      };
      exports.ChatBskyConvoNS = ChatBskyConvoNS;
      var ChatBskyModerationNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        getActorMetadata(params, opts) {
          return this._client.call("chat.bsky.moderation.getActorMetadata", params, void 0, opts);
        }
        getMessageContext(params, opts) {
          return this._client.call("chat.bsky.moderation.getMessageContext", params, void 0, opts);
        }
        updateActorAccess(data, opts) {
          return this._client.call("chat.bsky.moderation.updateActorAccess", opts?.qp, data, opts);
        }
      };
      exports.ChatBskyModerationNS = ChatBskyModerationNS;
      var ToolsNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "ozone", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
          this.ozone = new ToolsOzoneNS(client);
        }
      };
      exports.ToolsNS = ToolsNS;
      var ToolsOzoneNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "communication", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "hosting", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "moderation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "server", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "set", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "setting", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "signature", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "team", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "verification", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
          this.communication = new ToolsOzoneCommunicationNS(client);
          this.hosting = new ToolsOzoneHostingNS(client);
          this.moderation = new ToolsOzoneModerationNS(client);
          this.server = new ToolsOzoneServerNS(client);
          this.set = new ToolsOzoneSetNS(client);
          this.setting = new ToolsOzoneSettingNS(client);
          this.signature = new ToolsOzoneSignatureNS(client);
          this.team = new ToolsOzoneTeamNS(client);
          this.verification = new ToolsOzoneVerificationNS(client);
        }
      };
      exports.ToolsOzoneNS = ToolsOzoneNS;
      var ToolsOzoneCommunicationNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        createTemplate(data, opts) {
          return this._client.call("tools.ozone.communication.createTemplate", opts?.qp, data, opts).catch((e) => {
            throw ToolsOzoneCommunicationCreateTemplate.toKnownErr(e);
          });
        }
        deleteTemplate(data, opts) {
          return this._client.call("tools.ozone.communication.deleteTemplate", opts?.qp, data, opts);
        }
        listTemplates(params, opts) {
          return this._client.call("tools.ozone.communication.listTemplates", params, void 0, opts);
        }
        updateTemplate(data, opts) {
          return this._client.call("tools.ozone.communication.updateTemplate", opts?.qp, data, opts).catch((e) => {
            throw ToolsOzoneCommunicationUpdateTemplate.toKnownErr(e);
          });
        }
      };
      exports.ToolsOzoneCommunicationNS = ToolsOzoneCommunicationNS;
      var ToolsOzoneHostingNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        getAccountHistory(params, opts) {
          return this._client.call("tools.ozone.hosting.getAccountHistory", params, void 0, opts);
        }
      };
      exports.ToolsOzoneHostingNS = ToolsOzoneHostingNS;
      var ToolsOzoneModerationNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        emitEvent(data, opts) {
          return this._client.call("tools.ozone.moderation.emitEvent", opts?.qp, data, opts).catch((e) => {
            throw ToolsOzoneModerationEmitEvent.toKnownErr(e);
          });
        }
        getEvent(params, opts) {
          return this._client.call("tools.ozone.moderation.getEvent", params, void 0, opts);
        }
        getRecord(params, opts) {
          return this._client.call("tools.ozone.moderation.getRecord", params, void 0, opts).catch((e) => {
            throw ToolsOzoneModerationGetRecord.toKnownErr(e);
          });
        }
        getRecords(params, opts) {
          return this._client.call("tools.ozone.moderation.getRecords", params, void 0, opts);
        }
        getRepo(params, opts) {
          return this._client.call("tools.ozone.moderation.getRepo", params, void 0, opts).catch((e) => {
            throw ToolsOzoneModerationGetRepo.toKnownErr(e);
          });
        }
        getReporterStats(params, opts) {
          return this._client.call("tools.ozone.moderation.getReporterStats", params, void 0, opts);
        }
        getRepos(params, opts) {
          return this._client.call("tools.ozone.moderation.getRepos", params, void 0, opts);
        }
        getSubjects(params, opts) {
          return this._client.call("tools.ozone.moderation.getSubjects", params, void 0, opts);
        }
        queryEvents(params, opts) {
          return this._client.call("tools.ozone.moderation.queryEvents", params, void 0, opts);
        }
        queryStatuses(params, opts) {
          return this._client.call("tools.ozone.moderation.queryStatuses", params, void 0, opts);
        }
        searchRepos(params, opts) {
          return this._client.call("tools.ozone.moderation.searchRepos", params, void 0, opts);
        }
      };
      exports.ToolsOzoneModerationNS = ToolsOzoneModerationNS;
      var ToolsOzoneServerNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        getConfig(params, opts) {
          return this._client.call("tools.ozone.server.getConfig", params, void 0, opts);
        }
      };
      exports.ToolsOzoneServerNS = ToolsOzoneServerNS;
      var ToolsOzoneSetNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        addValues(data, opts) {
          return this._client.call("tools.ozone.set.addValues", opts?.qp, data, opts);
        }
        deleteSet(data, opts) {
          return this._client.call("tools.ozone.set.deleteSet", opts?.qp, data, opts).catch((e) => {
            throw ToolsOzoneSetDeleteSet.toKnownErr(e);
          });
        }
        deleteValues(data, opts) {
          return this._client.call("tools.ozone.set.deleteValues", opts?.qp, data, opts).catch((e) => {
            throw ToolsOzoneSetDeleteValues.toKnownErr(e);
          });
        }
        getValues(params, opts) {
          return this._client.call("tools.ozone.set.getValues", params, void 0, opts).catch((e) => {
            throw ToolsOzoneSetGetValues.toKnownErr(e);
          });
        }
        querySets(params, opts) {
          return this._client.call("tools.ozone.set.querySets", params, void 0, opts);
        }
        upsertSet(data, opts) {
          return this._client.call("tools.ozone.set.upsertSet", opts?.qp, data, opts);
        }
      };
      exports.ToolsOzoneSetNS = ToolsOzoneSetNS;
      var ToolsOzoneSettingNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        listOptions(params, opts) {
          return this._client.call("tools.ozone.setting.listOptions", params, void 0, opts);
        }
        removeOptions(data, opts) {
          return this._client.call("tools.ozone.setting.removeOptions", opts?.qp, data, opts);
        }
        upsertOption(data, opts) {
          return this._client.call("tools.ozone.setting.upsertOption", opts?.qp, data, opts);
        }
      };
      exports.ToolsOzoneSettingNS = ToolsOzoneSettingNS;
      var ToolsOzoneSignatureNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        findCorrelation(params, opts) {
          return this._client.call("tools.ozone.signature.findCorrelation", params, void 0, opts);
        }
        findRelatedAccounts(params, opts) {
          return this._client.call("tools.ozone.signature.findRelatedAccounts", params, void 0, opts);
        }
        searchAccounts(params, opts) {
          return this._client.call("tools.ozone.signature.searchAccounts", params, void 0, opts);
        }
      };
      exports.ToolsOzoneSignatureNS = ToolsOzoneSignatureNS;
      var ToolsOzoneTeamNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        addMember(data, opts) {
          return this._client.call("tools.ozone.team.addMember", opts?.qp, data, opts).catch((e) => {
            throw ToolsOzoneTeamAddMember.toKnownErr(e);
          });
        }
        deleteMember(data, opts) {
          return this._client.call("tools.ozone.team.deleteMember", opts?.qp, data, opts).catch((e) => {
            throw ToolsOzoneTeamDeleteMember.toKnownErr(e);
          });
        }
        listMembers(params, opts) {
          return this._client.call("tools.ozone.team.listMembers", params, void 0, opts);
        }
        updateMember(data, opts) {
          return this._client.call("tools.ozone.team.updateMember", opts?.qp, data, opts).catch((e) => {
            throw ToolsOzoneTeamUpdateMember.toKnownErr(e);
          });
        }
      };
      exports.ToolsOzoneTeamNS = ToolsOzoneTeamNS;
      var ToolsOzoneVerificationNS = class {
        constructor(client) {
          Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._client = client;
        }
        grantVerifications(data, opts) {
          return this._client.call("tools.ozone.verification.grantVerifications", opts?.qp, data, opts);
        }
        listVerifications(params, opts) {
          return this._client.call("tools.ozone.verification.listVerifications", params, void 0, opts);
        }
        revokeVerifications(data, opts) {
          return this._client.call("tools.ozone.verification.revokeVerifications", opts?.qp, data, opts);
        }
      };
      exports.ToolsOzoneVerificationNS = ToolsOzoneVerificationNS;
    }
  });

  // node_modules/.pnpm/tlds@1.259.0/node_modules/tlds/index.json
  var require_tlds = __commonJS({
    "node_modules/.pnpm/tlds@1.259.0/node_modules/tlds/index.json"(exports, module) {
      module.exports = [
        "aaa",
        "aarp",
        "abb",
        "abbott",
        "abbvie",
        "abc",
        "able",
        "abogado",
        "abudhabi",
        "ac",
        "academy",
        "accenture",
        "accountant",
        "accountants",
        "aco",
        "actor",
        "ad",
        "ads",
        "adult",
        "ae",
        "aeg",
        "aero",
        "aetna",
        "af",
        "afl",
        "africa",
        "ag",
        "agakhan",
        "agency",
        "ai",
        "aig",
        "airbus",
        "airforce",
        "airtel",
        "akdn",
        "al",
        "alibaba",
        "alipay",
        "allfinanz",
        "allstate",
        "ally",
        "alsace",
        "alstom",
        "am",
        "amazon",
        "americanexpress",
        "americanfamily",
        "amex",
        "amfam",
        "amica",
        "amsterdam",
        "analytics",
        "android",
        "anquan",
        "anz",
        "ao",
        "aol",
        "apartments",
        "app",
        "apple",
        "aq",
        "aquarelle",
        "ar",
        "arab",
        "aramco",
        "archi",
        "army",
        "arpa",
        "art",
        "arte",
        "as",
        "asda",
        "asia",
        "associates",
        "at",
        "athleta",
        "attorney",
        "au",
        "auction",
        "audi",
        "audible",
        "audio",
        "auspost",
        "author",
        "auto",
        "autos",
        "aw",
        "aws",
        "ax",
        "axa",
        "az",
        "azure",
        "ba",
        "baby",
        "baidu",
        "banamex",
        "band",
        "bank",
        "bar",
        "barcelona",
        "barclaycard",
        "barclays",
        "barefoot",
        "bargains",
        "baseball",
        "basketball",
        "bauhaus",
        "bayern",
        "bb",
        "bbc",
        "bbt",
        "bbva",
        "bcg",
        "bcn",
        "bd",
        "be",
        "beats",
        "beauty",
        "beer",
        "berlin",
        "best",
        "bestbuy",
        "bet",
        "bf",
        "bg",
        "bh",
        "bharti",
        "bi",
        "bible",
        "bid",
        "bike",
        "bing",
        "bingo",
        "bio",
        "biz",
        "bj",
        "black",
        "blackfriday",
        "blockbuster",
        "blog",
        "bloomberg",
        "blue",
        "bm",
        "bms",
        "bmw",
        "bn",
        "bnpparibas",
        "bo",
        "boats",
        "boehringer",
        "bofa",
        "bom",
        "bond",
        "boo",
        "book",
        "booking",
        "bosch",
        "bostik",
        "boston",
        "bot",
        "boutique",
        "box",
        "br",
        "bradesco",
        "bridgestone",
        "broadway",
        "broker",
        "brother",
        "brussels",
        "bs",
        "bt",
        "build",
        "builders",
        "business",
        "buy",
        "buzz",
        "bv",
        "bw",
        "by",
        "bz",
        "bzh",
        "ca",
        "cab",
        "cafe",
        "cal",
        "call",
        "calvinklein",
        "cam",
        "camera",
        "camp",
        "canon",
        "capetown",
        "capital",
        "capitalone",
        "car",
        "caravan",
        "cards",
        "care",
        "career",
        "careers",
        "cars",
        "casa",
        "case",
        "cash",
        "casino",
        "cat",
        "catering",
        "catholic",
        "cba",
        "cbn",
        "cbre",
        "cc",
        "cd",
        "center",
        "ceo",
        "cern",
        "cf",
        "cfa",
        "cfd",
        "cg",
        "ch",
        "chanel",
        "channel",
        "charity",
        "chase",
        "chat",
        "cheap",
        "chintai",
        "christmas",
        "chrome",
        "church",
        "ci",
        "cipriani",
        "circle",
        "cisco",
        "citadel",
        "citi",
        "citic",
        "city",
        "ck",
        "cl",
        "claims",
        "cleaning",
        "click",
        "clinic",
        "clinique",
        "clothing",
        "cloud",
        "club",
        "clubmed",
        "cm",
        "cn",
        "co",
        "coach",
        "codes",
        "coffee",
        "college",
        "cologne",
        "com",
        "commbank",
        "community",
        "company",
        "compare",
        "computer",
        "comsec",
        "condos",
        "construction",
        "consulting",
        "contact",
        "contractors",
        "cooking",
        "cool",
        "coop",
        "corsica",
        "country",
        "coupon",
        "coupons",
        "courses",
        "cpa",
        "cr",
        "credit",
        "creditcard",
        "creditunion",
        "cricket",
        "crown",
        "crs",
        "cruise",
        "cruises",
        "cu",
        "cuisinella",
        "cv",
        "cw",
        "cx",
        "cy",
        "cymru",
        "cyou",
        "cz",
        "dad",
        "dance",
        "data",
        "date",
        "dating",
        "datsun",
        "day",
        "dclk",
        "dds",
        "de",
        "deal",
        "dealer",
        "deals",
        "degree",
        "delivery",
        "dell",
        "deloitte",
        "delta",
        "democrat",
        "dental",
        "dentist",
        "desi",
        "design",
        "dev",
        "dhl",
        "diamonds",
        "diet",
        "digital",
        "direct",
        "directory",
        "discount",
        "discover",
        "dish",
        "diy",
        "dj",
        "dk",
        "dm",
        "dnp",
        "do",
        "docs",
        "doctor",
        "dog",
        "domains",
        "dot",
        "download",
        "drive",
        "dtv",
        "dubai",
        "dunlop",
        "dupont",
        "durban",
        "dvag",
        "dvr",
        "dz",
        "earth",
        "eat",
        "ec",
        "eco",
        "edeka",
        "edu",
        "education",
        "ee",
        "eg",
        "email",
        "emerck",
        "energy",
        "engineer",
        "engineering",
        "enterprises",
        "epson",
        "equipment",
        "er",
        "ericsson",
        "erni",
        "es",
        "esq",
        "estate",
        "et",
        "eu",
        "eurovision",
        "eus",
        "events",
        "exchange",
        "expert",
        "exposed",
        "express",
        "extraspace",
        "fage",
        "fail",
        "fairwinds",
        "faith",
        "family",
        "fan",
        "fans",
        "farm",
        "farmers",
        "fashion",
        "fast",
        "fedex",
        "feedback",
        "ferrari",
        "ferrero",
        "fi",
        "fidelity",
        "fido",
        "film",
        "final",
        "finance",
        "financial",
        "fire",
        "firestone",
        "firmdale",
        "fish",
        "fishing",
        "fit",
        "fitness",
        "fj",
        "fk",
        "flickr",
        "flights",
        "flir",
        "florist",
        "flowers",
        "fly",
        "fm",
        "fo",
        "foo",
        "food",
        "football",
        "ford",
        "forex",
        "forsale",
        "forum",
        "foundation",
        "fox",
        "fr",
        "free",
        "fresenius",
        "frl",
        "frogans",
        "frontier",
        "ftr",
        "fujitsu",
        "fun",
        "fund",
        "furniture",
        "futbol",
        "fyi",
        "ga",
        "gal",
        "gallery",
        "gallo",
        "gallup",
        "game",
        "games",
        "gap",
        "garden",
        "gay",
        "gb",
        "gbiz",
        "gd",
        "gdn",
        "ge",
        "gea",
        "gent",
        "genting",
        "george",
        "gf",
        "gg",
        "ggee",
        "gh",
        "gi",
        "gift",
        "gifts",
        "gives",
        "giving",
        "gl",
        "glass",
        "gle",
        "global",
        "globo",
        "gm",
        "gmail",
        "gmbh",
        "gmo",
        "gmx",
        "gn",
        "godaddy",
        "gold",
        "goldpoint",
        "golf",
        "goo",
        "goodyear",
        "goog",
        "google",
        "gop",
        "got",
        "gov",
        "gp",
        "gq",
        "gr",
        "grainger",
        "graphics",
        "gratis",
        "green",
        "gripe",
        "grocery",
        "group",
        "gs",
        "gt",
        "gu",
        "gucci",
        "guge",
        "guide",
        "guitars",
        "guru",
        "gw",
        "gy",
        "hair",
        "hamburg",
        "hangout",
        "haus",
        "hbo",
        "hdfc",
        "hdfcbank",
        "health",
        "healthcare",
        "help",
        "helsinki",
        "here",
        "hermes",
        "hiphop",
        "hisamitsu",
        "hitachi",
        "hiv",
        "hk",
        "hkt",
        "hm",
        "hn",
        "hockey",
        "holdings",
        "holiday",
        "homedepot",
        "homegoods",
        "homes",
        "homesense",
        "honda",
        "horse",
        "hospital",
        "host",
        "hosting",
        "hot",
        "hotels",
        "hotmail",
        "house",
        "how",
        "hr",
        "hsbc",
        "ht",
        "hu",
        "hughes",
        "hyatt",
        "hyundai",
        "ibm",
        "icbc",
        "ice",
        "icu",
        "id",
        "ie",
        "ieee",
        "ifm",
        "ikano",
        "il",
        "im",
        "imamat",
        "imdb",
        "immo",
        "immobilien",
        "in",
        "inc",
        "industries",
        "infiniti",
        "info",
        "ing",
        "ink",
        "institute",
        "insurance",
        "insure",
        "int",
        "international",
        "intuit",
        "investments",
        "io",
        "ipiranga",
        "iq",
        "ir",
        "irish",
        "is",
        "ismaili",
        "ist",
        "istanbul",
        "it",
        "itau",
        "itv",
        "jaguar",
        "java",
        "jcb",
        "je",
        "jeep",
        "jetzt",
        "jewelry",
        "jio",
        "jll",
        "jm",
        "jmp",
        "jnj",
        "jo",
        "jobs",
        "joburg",
        "jot",
        "joy",
        "jp",
        "jpmorgan",
        "jprs",
        "juegos",
        "juniper",
        "kaufen",
        "kddi",
        "ke",
        "kerryhotels",
        "kerryproperties",
        "kfh",
        "kg",
        "kh",
        "ki",
        "kia",
        "kids",
        "kim",
        "kindle",
        "kitchen",
        "kiwi",
        "km",
        "kn",
        "koeln",
        "komatsu",
        "kosher",
        "kp",
        "kpmg",
        "kpn",
        "kr",
        "krd",
        "kred",
        "kuokgroup",
        "kw",
        "ky",
        "kyoto",
        "kz",
        "la",
        "lacaixa",
        "lamborghini",
        "lamer",
        "land",
        "landrover",
        "lanxess",
        "lasalle",
        "lat",
        "latino",
        "latrobe",
        "law",
        "lawyer",
        "lb",
        "lc",
        "lds",
        "lease",
        "leclerc",
        "lefrak",
        "legal",
        "lego",
        "lexus",
        "lgbt",
        "li",
        "lidl",
        "life",
        "lifeinsurance",
        "lifestyle",
        "lighting",
        "like",
        "lilly",
        "limited",
        "limo",
        "lincoln",
        "link",
        "live",
        "living",
        "lk",
        "llc",
        "llp",
        "loan",
        "loans",
        "locker",
        "locus",
        "lol",
        "london",
        "lotte",
        "lotto",
        "love",
        "lpl",
        "lplfinancial",
        "lr",
        "ls",
        "lt",
        "ltd",
        "ltda",
        "lu",
        "lundbeck",
        "luxe",
        "luxury",
        "lv",
        "ly",
        "ma",
        "madrid",
        "maif",
        "maison",
        "makeup",
        "man",
        "management",
        "mango",
        "map",
        "market",
        "marketing",
        "markets",
        "marriott",
        "marshalls",
        "mattel",
        "mba",
        "mc",
        "mckinsey",
        "md",
        "me",
        "med",
        "media",
        "meet",
        "melbourne",
        "meme",
        "memorial",
        "men",
        "menu",
        "merckmsd",
        "mg",
        "mh",
        "miami",
        "microsoft",
        "mil",
        "mini",
        "mint",
        "mit",
        "mitsubishi",
        "mk",
        "ml",
        "mlb",
        "mls",
        "mm",
        "mma",
        "mn",
        "mo",
        "mobi",
        "mobile",
        "moda",
        "moe",
        "moi",
        "mom",
        "monash",
        "money",
        "monster",
        "mormon",
        "mortgage",
        "moscow",
        "moto",
        "motorcycles",
        "mov",
        "movie",
        "mp",
        "mq",
        "mr",
        "ms",
        "msd",
        "mt",
        "mtn",
        "mtr",
        "mu",
        "museum",
        "music",
        "mv",
        "mw",
        "mx",
        "my",
        "mz",
        "na",
        "nab",
        "nagoya",
        "name",
        "navy",
        "nba",
        "nc",
        "ne",
        "nec",
        "net",
        "netbank",
        "netflix",
        "network",
        "neustar",
        "new",
        "news",
        "next",
        "nextdirect",
        "nexus",
        "nf",
        "nfl",
        "ng",
        "ngo",
        "nhk",
        "ni",
        "nico",
        "nike",
        "nikon",
        "ninja",
        "nissan",
        "nissay",
        "nl",
        "no",
        "nokia",
        "norton",
        "now",
        "nowruz",
        "nowtv",
        "np",
        "nr",
        "nra",
        "nrw",
        "ntt",
        "nu",
        "nyc",
        "nz",
        "obi",
        "observer",
        "office",
        "okinawa",
        "olayan",
        "olayangroup",
        "ollo",
        "om",
        "omega",
        "one",
        "ong",
        "onl",
        "online",
        "ooo",
        "open",
        "oracle",
        "orange",
        "org",
        "organic",
        "origins",
        "osaka",
        "otsuka",
        "ott",
        "ovh",
        "pa",
        "page",
        "panasonic",
        "paris",
        "pars",
        "partners",
        "parts",
        "party",
        "pay",
        "pccw",
        "pe",
        "pet",
        "pf",
        "pfizer",
        "pg",
        "ph",
        "pharmacy",
        "phd",
        "philips",
        "phone",
        "photo",
        "photography",
        "photos",
        "physio",
        "pics",
        "pictet",
        "pictures",
        "pid",
        "pin",
        "ping",
        "pink",
        "pioneer",
        "pizza",
        "pk",
        "pl",
        "place",
        "play",
        "playstation",
        "plumbing",
        "plus",
        "pm",
        "pn",
        "pnc",
        "pohl",
        "poker",
        "politie",
        "porn",
        "post",
        "pr",
        "praxi",
        "press",
        "prime",
        "pro",
        "prod",
        "productions",
        "prof",
        "progressive",
        "promo",
        "properties",
        "property",
        "protection",
        "pru",
        "prudential",
        "ps",
        "pt",
        "pub",
        "pw",
        "pwc",
        "py",
        "qa",
        "qpon",
        "quebec",
        "quest",
        "racing",
        "radio",
        "re",
        "read",
        "realestate",
        "realtor",
        "realty",
        "recipes",
        "red",
        "redstone",
        "redumbrella",
        "rehab",
        "reise",
        "reisen",
        "reit",
        "reliance",
        "ren",
        "rent",
        "rentals",
        "repair",
        "report",
        "republican",
        "rest",
        "restaurant",
        "review",
        "reviews",
        "rexroth",
        "rich",
        "richardli",
        "ricoh",
        "ril",
        "rio",
        "rip",
        "ro",
        "rocks",
        "rodeo",
        "rogers",
        "room",
        "rs",
        "rsvp",
        "ru",
        "rugby",
        "ruhr",
        "run",
        "rw",
        "rwe",
        "ryukyu",
        "sa",
        "saarland",
        "safe",
        "safety",
        "sakura",
        "sale",
        "salon",
        "samsclub",
        "samsung",
        "sandvik",
        "sandvikcoromant",
        "sanofi",
        "sap",
        "sarl",
        "sas",
        "save",
        "saxo",
        "sb",
        "sbi",
        "sbs",
        "sc",
        "scb",
        "schaeffler",
        "schmidt",
        "scholarships",
        "school",
        "schule",
        "schwarz",
        "science",
        "scot",
        "sd",
        "se",
        "search",
        "seat",
        "secure",
        "security",
        "seek",
        "select",
        "sener",
        "services",
        "seven",
        "sew",
        "sex",
        "sexy",
        "sfr",
        "sg",
        "sh",
        "shangrila",
        "sharp",
        "shell",
        "shia",
        "shiksha",
        "shoes",
        "shop",
        "shopping",
        "shouji",
        "show",
        "si",
        "silk",
        "sina",
        "singles",
        "site",
        "sj",
        "sk",
        "ski",
        "skin",
        "sky",
        "skype",
        "sl",
        "sling",
        "sm",
        "smart",
        "smile",
        "sn",
        "sncf",
        "so",
        "soccer",
        "social",
        "softbank",
        "software",
        "sohu",
        "solar",
        "solutions",
        "song",
        "sony",
        "soy",
        "spa",
        "space",
        "sport",
        "spot",
        "sr",
        "srl",
        "ss",
        "st",
        "stada",
        "staples",
        "star",
        "statebank",
        "statefarm",
        "stc",
        "stcgroup",
        "stockholm",
        "storage",
        "store",
        "stream",
        "studio",
        "study",
        "style",
        "su",
        "sucks",
        "supplies",
        "supply",
        "support",
        "surf",
        "surgery",
        "suzuki",
        "sv",
        "swatch",
        "swiss",
        "sx",
        "sy",
        "sydney",
        "systems",
        "sz",
        "tab",
        "taipei",
        "talk",
        "taobao",
        "target",
        "tatamotors",
        "tatar",
        "tattoo",
        "tax",
        "taxi",
        "tc",
        "tci",
        "td",
        "tdk",
        "team",
        "tech",
        "technology",
        "tel",
        "temasek",
        "tennis",
        "teva",
        "tf",
        "tg",
        "th",
        "thd",
        "theater",
        "theatre",
        "tiaa",
        "tickets",
        "tienda",
        "tips",
        "tires",
        "tirol",
        "tj",
        "tjmaxx",
        "tjx",
        "tk",
        "tkmaxx",
        "tl",
        "tm",
        "tmall",
        "tn",
        "to",
        "today",
        "tokyo",
        "tools",
        "top",
        "toray",
        "toshiba",
        "total",
        "tours",
        "town",
        "toyota",
        "toys",
        "tr",
        "trade",
        "trading",
        "training",
        "travel",
        "travelers",
        "travelersinsurance",
        "trust",
        "trv",
        "tt",
        "tube",
        "tui",
        "tunes",
        "tushu",
        "tv",
        "tvs",
        "tw",
        "tz",
        "ua",
        "ubank",
        "ubs",
        "ug",
        "uk",
        "unicom",
        "university",
        "uno",
        "uol",
        "ups",
        "us",
        "uy",
        "uz",
        "va",
        "vacations",
        "vana",
        "vanguard",
        "vc",
        "ve",
        "vegas",
        "ventures",
        "verisign",
        "verm\xF6gensberater",
        "verm\xF6gensberatung",
        "versicherung",
        "vet",
        "vg",
        "vi",
        "viajes",
        "video",
        "vig",
        "viking",
        "villas",
        "vin",
        "vip",
        "virgin",
        "visa",
        "vision",
        "viva",
        "vivo",
        "vlaanderen",
        "vn",
        "vodka",
        "volvo",
        "vote",
        "voting",
        "voto",
        "voyage",
        "vu",
        "wales",
        "walmart",
        "walter",
        "wang",
        "wanggou",
        "watch",
        "watches",
        "weather",
        "weatherchannel",
        "webcam",
        "weber",
        "website",
        "wed",
        "wedding",
        "weibo",
        "weir",
        "wf",
        "whoswho",
        "wien",
        "wiki",
        "williamhill",
        "win",
        "windows",
        "wine",
        "winners",
        "wme",
        "wolterskluwer",
        "woodside",
        "work",
        "works",
        "world",
        "wow",
        "ws",
        "wtc",
        "wtf",
        "xbox",
        "xerox",
        "xihuan",
        "xin",
        "xxx",
        "xyz",
        "yachts",
        "yahoo",
        "yamaxun",
        "yandex",
        "ye",
        "yodobashi",
        "yoga",
        "yokohama",
        "you",
        "youtube",
        "yt",
        "yun",
        "za",
        "zappos",
        "zara",
        "zero",
        "zip",
        "zm",
        "zone",
        "zuerich",
        "zw",
        "\u03B5\u03BB",
        "\u03B5\u03C5",
        "\u0431\u0433",
        "\u0431\u0435\u043B",
        "\u0434\u0435\u0442\u0438",
        "\u0435\u044E",
        "\u043A\u0430\u0442\u043E\u043B\u0438\u043A",
        "\u043A\u043E\u043C",
        "\u043C\u043A\u0434",
        "\u043C\u043E\u043D",
        "\u043C\u043E\u0441\u043A\u0432\u0430",
        "\u043E\u043D\u043B\u0430\u0439\u043D",
        "\u043E\u0440\u0433",
        "\u0440\u0443\u0441",
        "\u0440\u0444",
        "\u0441\u0430\u0439\u0442",
        "\u0441\u0440\u0431",
        "\u0443\u043A\u0440",
        "\u049B\u0430\u0437",
        "\u0570\u0561\u0575",
        "\u05D9\u05E9\u05E8\u05D0\u05DC",
        "\u05E7\u05D5\u05DD",
        "\u0627\u0628\u0648\u0638\u0628\u064A",
        "\u0627\u0631\u0627\u0645\u0643\u0648",
        "\u0627\u0644\u0627\u0631\u062F\u0646",
        "\u0627\u0644\u0628\u062D\u0631\u064A\u0646",
        "\u0627\u0644\u062C\u0632\u0627\u0626\u0631",
        "\u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629",
        "\u0627\u0644\u0639\u0644\u064A\u0627\u0646",
        "\u0627\u0644\u0645\u063A\u0631\u0628",
        "\u0627\u0645\u0627\u0631\u0627\u062A",
        "\u0627\u06CC\u0631\u0627\u0646",
        "\u0628\u0627\u0631\u062A",
        "\u0628\u0627\u0632\u0627\u0631",
        "\u0628\u064A\u062A\u0643",
        "\u0628\u06BE\u0627\u0631\u062A",
        "\u062A\u0648\u0646\u0633",
        "\u0633\u0648\u062F\u0627\u0646",
        "\u0633\u0648\u0631\u064A\u0629",
        "\u0634\u0628\u0643\u0629",
        "\u0639\u0631\u0627\u0642",
        "\u0639\u0631\u0628",
        "\u0639\u0645\u0627\u0646",
        "\u0641\u0644\u0633\u0637\u064A\u0646",
        "\u0642\u0637\u0631",
        "\u0643\u0627\u062B\u0648\u0644\u064A\u0643",
        "\u0643\u0648\u0645",
        "\u0645\u0635\u0631",
        "\u0645\u0644\u064A\u0633\u064A\u0627",
        "\u0645\u0648\u0631\u064A\u062A\u0627\u0646\u064A\u0627",
        "\u0645\u0648\u0642\u0639",
        "\u0647\u0645\u0631\u0627\u0647",
        "\u067E\u0627\u06A9\u0633\u062A\u0627\u0646",
        "\u0680\u0627\u0631\u062A",
        "\u0915\u0949\u092E",
        "\u0928\u0947\u091F",
        "\u092D\u093E\u0930\u0924",
        "\u092D\u093E\u0930\u0924\u092E\u094D",
        "\u092D\u093E\u0930\u094B\u0924",
        "\u0938\u0902\u0917\u0920\u0928",
        "\u09AC\u09BE\u0982\u09B2\u09BE",
        "\u09AD\u09BE\u09B0\u09A4",
        "\u09AD\u09BE\u09F0\u09A4",
        "\u0A2D\u0A3E\u0A30\u0A24",
        "\u0AAD\u0ABE\u0AB0\u0AA4",
        "\u0B2D\u0B3E\u0B30\u0B24",
        "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE",
        "\u0B87\u0BB2\u0B99\u0BCD\u0B95\u0BC8",
        "\u0B9A\u0BBF\u0B99\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0BC2\u0BB0\u0BCD",
        "\u0C2D\u0C3E\u0C30\u0C24\u0C4D",
        "\u0CAD\u0CBE\u0CB0\u0CA4",
        "\u0D2D\u0D3E\u0D30\u0D24\u0D02",
        "\u0DBD\u0D82\u0D9A\u0DCF",
        "\u0E04\u0E2D\u0E21",
        "\u0E44\u0E17\u0E22",
        "\u0EA5\u0EB2\u0EA7",
        "\u10D2\u10D4",
        "\u307F\u3093\u306A",
        "\u30A2\u30DE\u30BE\u30F3",
        "\u30AF\u30E9\u30A6\u30C9",
        "\u30B0\u30FC\u30B0\u30EB",
        "\u30B3\u30E0",
        "\u30B9\u30C8\u30A2",
        "\u30BB\u30FC\u30EB",
        "\u30D5\u30A1\u30C3\u30B7\u30E7\u30F3",
        "\u30DD\u30A4\u30F3\u30C8",
        "\u4E16\u754C",
        "\u4E2D\u4FE1",
        "\u4E2D\u56FD",
        "\u4E2D\u570B",
        "\u4E2D\u6587\u7F51",
        "\u4E9A\u9A6C\u900A",
        "\u4F01\u4E1A",
        "\u4F5B\u5C71",
        "\u4FE1\u606F",
        "\u5065\u5EB7",
        "\u516B\u5366",
        "\u516C\u53F8",
        "\u516C\u76CA",
        "\u53F0\u6E7E",
        "\u53F0\u7063",
        "\u5546\u57CE",
        "\u5546\u5E97",
        "\u5546\u6807",
        "\u5609\u91CC",
        "\u5609\u91CC\u5927\u9152\u5E97",
        "\u5728\u7EBF",
        "\u5927\u62FF",
        "\u5929\u4E3B\u6559",
        "\u5A31\u4E50",
        "\u5BB6\u96FB",
        "\u5E7F\u4E1C",
        "\u5FAE\u535A",
        "\u6148\u5584",
        "\u6211\u7231\u4F60",
        "\u624B\u673A",
        "\u62DB\u8058",
        "\u653F\u52A1",
        "\u653F\u5E9C",
        "\u65B0\u52A0\u5761",
        "\u65B0\u95FB",
        "\u65F6\u5C1A",
        "\u66F8\u7C4D",
        "\u673A\u6784",
        "\u6DE1\u9A6C\u9521",
        "\u6E38\u620F",
        "\u6FB3\u9580",
        "\u70B9\u770B",
        "\u79FB\u52A8",
        "\u7EC4\u7EC7\u673A\u6784",
        "\u7F51\u5740",
        "\u7F51\u5E97",
        "\u7F51\u7AD9",
        "\u7F51\u7EDC",
        "\u8054\u901A",
        "\u8C37\u6B4C",
        "\u8D2D\u7269",
        "\u901A\u8CA9",
        "\u96C6\u56E2",
        "\u96FB\u8A0A\u76C8\u79D1",
        "\u98DE\u5229\u6D66",
        "\u98DF\u54C1",
        "\u9910\u5385",
        "\u9999\u683C\u91CC\u62C9",
        "\u9999\u6E2F",
        "\uB2F7\uB137",
        "\uB2F7\uCEF4",
        "\uC0BC\uC131",
        "\uD55C\uAD6D"
      ];
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/rich-text/util.js
  var require_util17 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/rich-text/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TAG_REGEX = exports.TRAILING_PUNCTUATION_REGEX = exports.URL_REGEX = exports.MENTION_REGEX = void 0;
      exports.MENTION_REGEX = /(^|\s|\()(@)([a-zA-Z0-9.-]+)(\b)/g;
      exports.URL_REGEX = /(^|\s|\()((https?:\/\/[\S]+)|((?<domain>[a-z][a-z0-9]*(\.[a-z0-9]+)+)[\S]*))/gim;
      exports.TRAILING_PUNCTUATION_REGEX = /\p{P}+$/gu;
      exports.TAG_REGEX = // eslint-disable-next-line no-misleading-character-class
      /(^|\s)[#＃]((?!\ufe0f)[^\s\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]*[^\d\s\p{P}\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]+[^\s\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]*)?/gu;
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/rich-text/detection.js
  var require_detection = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/rich-text/detection.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.detectFacets = detectFacets;
      var tlds_1 = __importDefault(require_tlds());
      var util_1 = require_util17();
      function detectFacets(text) {
        let match;
        const facets = [];
        {
          const re = util_1.MENTION_REGEX;
          while (match = re.exec(text.utf16)) {
            if (!isValidDomain(match[3]) && !match[3].endsWith(".test")) {
              continue;
            }
            const start = text.utf16.indexOf(match[3], match.index) - 1;
            facets.push({
              $type: "app.bsky.richtext.facet",
              index: {
                byteStart: text.utf16IndexToUtf8Index(start),
                byteEnd: text.utf16IndexToUtf8Index(start + match[3].length + 1)
              },
              features: [
                {
                  $type: "app.bsky.richtext.facet#mention",
                  did: match[3]
                  // must be resolved afterwards
                }
              ]
            });
          }
        }
        {
          const re = util_1.URL_REGEX;
          while (match = re.exec(text.utf16)) {
            let uri = match[2];
            if (!uri.startsWith("http")) {
              const domain = match.groups?.domain;
              if (!domain || !isValidDomain(domain)) {
                continue;
              }
              uri = `https://${uri}`;
            }
            const start = text.utf16.indexOf(match[2], match.index);
            const index = { start, end: start + match[2].length };
            if (/[.,;:!?]$/.test(uri)) {
              uri = uri.slice(0, -1);
              index.end--;
            }
            if (/[)]$/.test(uri) && !uri.includes("(")) {
              uri = uri.slice(0, -1);
              index.end--;
            }
            facets.push({
              index: {
                byteStart: text.utf16IndexToUtf8Index(index.start),
                byteEnd: text.utf16IndexToUtf8Index(index.end)
              },
              features: [
                {
                  $type: "app.bsky.richtext.facet#link",
                  uri
                }
              ]
            });
          }
        }
        {
          const re = util_1.TAG_REGEX;
          while (match = re.exec(text.utf16)) {
            const leading = match[1];
            let tag2 = match[2];
            if (!tag2)
              continue;
            tag2 = tag2.trim().replace(util_1.TRAILING_PUNCTUATION_REGEX, "");
            if (tag2.length === 0 || tag2.length > 64)
              continue;
            const index = match.index + leading.length;
            facets.push({
              index: {
                byteStart: text.utf16IndexToUtf8Index(index),
                byteEnd: text.utf16IndexToUtf8Index(index + 1 + tag2.length)
              },
              features: [
                {
                  $type: "app.bsky.richtext.facet#tag",
                  tag: tag2
                }
              ]
            });
          }
        }
        return facets.length > 0 ? facets : void 0;
      }
      function isValidDomain(str) {
        return !!tlds_1.default.find((tld) => {
          const i = str.lastIndexOf(tld);
          if (i === -1) {
            return false;
          }
          return str.charAt(i - 1) === "." && i === str.length - tld.length;
        });
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/rich-text/unicode.js
  var require_unicode = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/rich-text/unicode.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.UnicodeString = void 0;
      var common_web_1 = require_dist16();
      var encoder2 = new TextEncoder();
      var decoder2 = new TextDecoder();
      var UnicodeString = class {
        constructor(utf16) {
          Object.defineProperty(this, "utf16", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "utf8", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "_graphemeLen", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.utf16 = utf16;
          this.utf8 = encoder2.encode(utf16);
        }
        get length() {
          return this.utf8.byteLength;
        }
        get graphemeLength() {
          if (!this._graphemeLen) {
            this._graphemeLen = (0, common_web_1.graphemeLen)(this.utf16);
          }
          return this._graphemeLen;
        }
        slice(start, end) {
          return decoder2.decode(this.utf8.slice(start, end));
        }
        utf16IndexToUtf8Index(i) {
          return encoder2.encode(this.utf16.slice(0, i)).byteLength;
        }
        toString() {
          return this.utf16;
        }
      };
      exports.UnicodeString = UnicodeString;
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/rich-text/sanitization.js
  var require_sanitization = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/rich-text/sanitization.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.sanitizeRichText = sanitizeRichText;
      var unicode_1 = require_unicode();
      var EXCESS_SPACE_RE = /[\r\n]([\u00AD\u2060\u200D\u200C\u200B\s]*[\r\n]){2,}/;
      var REPLACEMENT_STR = "\n\n";
      function sanitizeRichText(richText, opts) {
        if (opts.cleanNewlines) {
          richText = clean(richText, EXCESS_SPACE_RE, REPLACEMENT_STR);
        }
        return richText;
      }
      function clean(richText, targetRegexp, replacementString) {
        richText = richText.clone();
        let match = richText.unicodeText.utf16.match(targetRegexp);
        while (match && typeof match.index !== "undefined") {
          const oldText = richText.unicodeText;
          const removeStartIndex = richText.unicodeText.utf16IndexToUtf8Index(match.index);
          const removeEndIndex = removeStartIndex + new unicode_1.UnicodeString(match[0]).length;
          richText.delete(removeStartIndex, removeEndIndex);
          if (richText.unicodeText.utf16 === oldText.utf16) {
            break;
          }
          richText.insert(removeStartIndex, replacementString);
          match = richText.unicodeText.utf16.match(targetRegexp);
        }
        return richText;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/rich-text/rich-text.js
  var require_rich_text = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/rich-text/rich-text.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RichText = exports.RichTextSegment = void 0;
      var client_1 = require_client3();
      var detection_1 = require_detection();
      var sanitization_1 = require_sanitization();
      var unicode_1 = require_unicode();
      var RichTextSegment = class {
        constructor(text, facet) {
          Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: text
          });
          Object.defineProperty(this, "facet", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: facet
          });
        }
        get link() {
          return this.facet?.features.find(client_1.AppBskyRichtextFacet.isLink);
        }
        isLink() {
          return !!this.link;
        }
        get mention() {
          return this.facet?.features.find(client_1.AppBskyRichtextFacet.isMention);
        }
        isMention() {
          return !!this.mention;
        }
        get tag() {
          return this.facet?.features.find(client_1.AppBskyRichtextFacet.isTag);
        }
        isTag() {
          return !!this.tag;
        }
      };
      exports.RichTextSegment = RichTextSegment;
      var RichText = class _RichText {
        constructor(props, opts) {
          Object.defineProperty(this, "unicodeText", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "facets", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.unicodeText = new unicode_1.UnicodeString(props.text);
          this.facets = props.facets;
          if (!this.facets?.length && props.entities?.length) {
            this.facets = entitiesToFacets(this.unicodeText, props.entities);
          }
          if (this.facets) {
            this.facets = this.facets.filter(facetFilter).sort(facetSort);
          }
          if (opts?.cleanNewlines) {
            (0, sanitization_1.sanitizeRichText)(this, { cleanNewlines: true }).copyInto(this);
          }
        }
        get text() {
          return this.unicodeText.toString();
        }
        get length() {
          return this.unicodeText.length;
        }
        get graphemeLength() {
          return this.unicodeText.graphemeLength;
        }
        clone() {
          return new _RichText({
            text: this.unicodeText.utf16,
            facets: cloneDeep(this.facets)
          });
        }
        copyInto(target) {
          target.unicodeText = this.unicodeText;
          target.facets = cloneDeep(this.facets);
        }
        *segments() {
          const facets = this.facets || [];
          if (!facets.length) {
            yield new RichTextSegment(this.unicodeText.utf16);
            return;
          }
          let textCursor = 0;
          let facetCursor = 0;
          do {
            const currFacet = facets[facetCursor];
            if (textCursor < currFacet.index.byteStart) {
              yield new RichTextSegment(this.unicodeText.slice(textCursor, currFacet.index.byteStart));
            } else if (textCursor > currFacet.index.byteStart) {
              facetCursor++;
              continue;
            }
            if (currFacet.index.byteStart < currFacet.index.byteEnd) {
              const subtext = this.unicodeText.slice(currFacet.index.byteStart, currFacet.index.byteEnd);
              if (!subtext.trim()) {
                yield new RichTextSegment(subtext);
              } else {
                yield new RichTextSegment(subtext, currFacet);
              }
            }
            textCursor = currFacet.index.byteEnd;
            facetCursor++;
          } while (facetCursor < facets.length);
          if (textCursor < this.unicodeText.length) {
            yield new RichTextSegment(this.unicodeText.slice(textCursor, this.unicodeText.length));
          }
        }
        insert(insertIndex, insertText) {
          this.unicodeText = new unicode_1.UnicodeString(this.unicodeText.slice(0, insertIndex) + insertText + this.unicodeText.slice(insertIndex));
          if (!this.facets?.length) {
            return this;
          }
          const numCharsAdded = insertText.length;
          for (const ent of this.facets) {
            if (insertIndex <= ent.index.byteStart) {
              ent.index.byteStart += numCharsAdded;
              ent.index.byteEnd += numCharsAdded;
            } else if (insertIndex >= ent.index.byteStart && insertIndex < ent.index.byteEnd) {
              ent.index.byteEnd += numCharsAdded;
            }
          }
          return this;
        }
        delete(removeStartIndex, removeEndIndex) {
          this.unicodeText = new unicode_1.UnicodeString(this.unicodeText.slice(0, removeStartIndex) + this.unicodeText.slice(removeEndIndex));
          if (!this.facets?.length) {
            return this;
          }
          const numCharsRemoved = removeEndIndex - removeStartIndex;
          for (const ent of this.facets) {
            if (removeStartIndex <= ent.index.byteStart && removeEndIndex >= ent.index.byteEnd) {
              ent.index.byteStart = 0;
              ent.index.byteEnd = 0;
            } else if (removeStartIndex > ent.index.byteEnd) {
            } else if (removeStartIndex > ent.index.byteStart && removeStartIndex <= ent.index.byteEnd && removeEndIndex > ent.index.byteEnd) {
              ent.index.byteEnd = removeStartIndex;
            } else if (removeStartIndex >= ent.index.byteStart && removeEndIndex <= ent.index.byteEnd) {
              ent.index.byteEnd -= numCharsRemoved;
            } else if (removeStartIndex < ent.index.byteStart && removeEndIndex >= ent.index.byteStart && removeEndIndex <= ent.index.byteEnd) {
              ent.index.byteStart = removeStartIndex;
              ent.index.byteEnd -= numCharsRemoved;
            } else if (removeEndIndex < ent.index.byteStart) {
              ent.index.byteStart -= numCharsRemoved;
              ent.index.byteEnd -= numCharsRemoved;
            }
          }
          this.facets = this.facets.filter((ent) => ent.index.byteStart < ent.index.byteEnd);
          return this;
        }
        /**
         * Detects facets such as links and mentions
         * Note: Overwrites the existing facets with auto-detected facets
         */
        async detectFacets(agent) {
          this.facets = (0, detection_1.detectFacets)(this.unicodeText);
          if (this.facets) {
            const promises = [];
            for (const facet of this.facets) {
              for (const feature of facet.features) {
                if (client_1.AppBskyRichtextFacet.isMention(feature)) {
                  promises.push(agent.com.atproto.identity.resolveHandle({ handle: feature.did }).then((res) => res?.data.did).catch((_) => void 0).then((did) => {
                    feature.did = did || "";
                  }));
                }
              }
            }
            await Promise.allSettled(promises);
            this.facets.sort(facetSort);
          }
        }
        /**
         * Detects facets such as links and mentions but does not resolve them
         * Will produce invalid facets! For instance, mentions will not have their DIDs set.
         * Note: Overwrites the existing facets with auto-detected facets
         */
        detectFacetsWithoutResolution() {
          this.facets = (0, detection_1.detectFacets)(this.unicodeText);
          if (this.facets) {
            this.facets.sort(facetSort);
          }
        }
      };
      exports.RichText = RichText;
      var facetSort = (a, b) => a.index.byteStart - b.index.byteStart;
      var facetFilter = (facet) => (
        // discard negative-length facets. zero-length facets are valid
        facet.index.byteStart <= facet.index.byteEnd
      );
      function entitiesToFacets(text, entities) {
        const facets = [];
        for (const ent of entities) {
          if (ent.type === "link") {
            facets.push({
              $type: "app.bsky.richtext.facet",
              index: {
                byteStart: text.utf16IndexToUtf8Index(ent.index.start),
                byteEnd: text.utf16IndexToUtf8Index(ent.index.end)
              },
              features: [{ $type: "app.bsky.richtext.facet#link", uri: ent.value }]
            });
          } else if (ent.type === "mention") {
            facets.push({
              $type: "app.bsky.richtext.facet",
              index: {
                byteStart: text.utf16IndexToUtf8Index(ent.index.start),
                byteEnd: text.utf16IndexToUtf8Index(ent.index.end)
              },
              features: [
                { $type: "app.bsky.richtext.facet#mention", did: ent.value }
              ]
            });
          }
        }
        return facets;
      }
      function cloneDeep(v) {
        if (typeof v === "undefined") {
          return v;
        }
        return JSON.parse(JSON.stringify(v));
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/moderation/const/labels.js
  var require_labels = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/moderation/const/labels.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.LABELS = exports.DEFAULT_LABEL_SETTINGS = void 0;
      exports.DEFAULT_LABEL_SETTINGS = {
        porn: "hide",
        sexual: "warn",
        nudity: "ignore",
        "graphic-media": "warn"
      };
      exports.LABELS = {
        "!hide": {
          identifier: "!hide",
          configurable: false,
          defaultSetting: "hide",
          flags: ["no-override", "no-self"],
          severity: "alert",
          blurs: "content",
          behaviors: {
            account: {
              profileList: "blur",
              profileView: "blur",
              avatar: "blur",
              banner: "blur",
              displayName: "blur",
              contentList: "blur",
              contentView: "blur"
            },
            profile: {
              avatar: "blur",
              banner: "blur",
              displayName: "blur"
            },
            content: {
              contentList: "blur",
              contentView: "blur"
            }
          },
          locales: []
        },
        "!warn": {
          identifier: "!warn",
          configurable: false,
          defaultSetting: "warn",
          flags: ["no-self"],
          severity: "none",
          blurs: "content",
          behaviors: {
            account: {
              profileList: "blur",
              profileView: "blur",
              avatar: "blur",
              banner: "blur",
              contentList: "blur",
              contentView: "blur"
            },
            profile: {
              avatar: "blur",
              banner: "blur",
              displayName: "blur"
            },
            content: {
              contentList: "blur",
              contentView: "blur"
            }
          },
          locales: []
        },
        "!no-unauthenticated": {
          identifier: "!no-unauthenticated",
          configurable: false,
          defaultSetting: "hide",
          flags: ["no-override", "unauthed"],
          severity: "none",
          blurs: "content",
          behaviors: {
            account: {
              profileList: "blur",
              profileView: "blur",
              avatar: "blur",
              banner: "blur",
              displayName: "blur",
              contentList: "blur",
              contentView: "blur"
            },
            profile: {
              avatar: "blur",
              banner: "blur",
              displayName: "blur"
            },
            content: {
              contentList: "blur",
              contentView: "blur"
            }
          },
          locales: []
        },
        porn: {
          identifier: "porn",
          configurable: true,
          defaultSetting: "hide",
          flags: ["adult"],
          severity: "none",
          blurs: "media",
          behaviors: {
            account: {
              avatar: "blur",
              banner: "blur"
            },
            profile: {
              avatar: "blur",
              banner: "blur"
            },
            content: {
              contentMedia: "blur"
            }
          },
          locales: []
        },
        sexual: {
          identifier: "sexual",
          configurable: true,
          defaultSetting: "warn",
          flags: ["adult"],
          severity: "none",
          blurs: "media",
          behaviors: {
            account: {
              avatar: "blur",
              banner: "blur"
            },
            profile: {
              avatar: "blur",
              banner: "blur"
            },
            content: {
              contentMedia: "blur"
            }
          },
          locales: []
        },
        nudity: {
          identifier: "nudity",
          configurable: true,
          defaultSetting: "ignore",
          flags: [],
          severity: "none",
          blurs: "media",
          behaviors: {
            account: {
              avatar: "blur",
              banner: "blur"
            },
            profile: {
              avatar: "blur",
              banner: "blur"
            },
            content: {
              contentMedia: "blur"
            }
          },
          locales: []
        },
        "graphic-media": {
          identifier: "graphic-media",
          flags: ["adult"],
          configurable: true,
          defaultSetting: "warn",
          severity: "none",
          blurs: "media",
          behaviors: {
            account: {
              avatar: "blur",
              banner: "blur"
            },
            profile: {
              avatar: "blur",
              banner: "blur"
            },
            content: {
              contentMedia: "blur"
            }
          },
          locales: []
        },
        /** @deprecated alias for `graphic-media` */
        gore: {
          identifier: "gore",
          flags: ["adult"],
          configurable: true,
          defaultSetting: "warn",
          severity: "none",
          blurs: "media",
          behaviors: {
            account: {
              avatar: "blur",
              banner: "blur"
            },
            profile: {
              avatar: "blur",
              banner: "blur"
            },
            content: {
              contentMedia: "blur"
            }
          },
          locales: []
        }
      };
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/moderation/types.js
  var require_types8 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/moderation/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.NOOP_BEHAVIOR = exports.HIDE_BEHAVIOR = exports.MUTEWORD_BEHAVIOR = exports.MUTE_BEHAVIOR = exports.BLOCK_BEHAVIOR = exports.CUSTOM_LABEL_VALUE_RE = void 0;
      exports.CUSTOM_LABEL_VALUE_RE = /^[a-z-]+$/;
      exports.BLOCK_BEHAVIOR = {
        profileList: "blur",
        profileView: "alert",
        avatar: "blur",
        banner: "blur",
        contentList: "blur",
        contentView: "blur"
      };
      exports.MUTE_BEHAVIOR = {
        profileList: "inform",
        profileView: "alert",
        contentList: "blur",
        contentView: "inform"
      };
      exports.MUTEWORD_BEHAVIOR = {
        contentList: "blur",
        contentView: "blur"
      };
      exports.HIDE_BEHAVIOR = {
        contentList: "blur",
        contentView: "blur"
      };
      exports.NOOP_BEHAVIOR = {};
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/moderation/ui.js
  var require_ui = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/moderation/ui.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ModerationUI = void 0;
      var ModerationUI = class {
        constructor() {
          Object.defineProperty(this, "noOverride", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
          });
          Object.defineProperty(this, "filters", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
          });
          Object.defineProperty(this, "blurs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
          });
          Object.defineProperty(this, "alerts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
          });
          Object.defineProperty(this, "informs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
          });
        }
        get filter() {
          return this.filters.length !== 0;
        }
        get blur() {
          return this.blurs.length !== 0;
        }
        get alert() {
          return this.alerts.length !== 0;
        }
        get inform() {
          return this.informs.length !== 0;
        }
      };
      exports.ModerationUI = ModerationUI;
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/moderation/decision.js
  var require_decision = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/moderation/decision.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ModerationDecision = void 0;
      var labels_1 = require_labels();
      var types_1 = require_types8();
      var ui_1 = require_ui();
      var ModerationBehaviorSeverity;
      (function(ModerationBehaviorSeverity2) {
        ModerationBehaviorSeverity2[ModerationBehaviorSeverity2["High"] = 0] = "High";
        ModerationBehaviorSeverity2[ModerationBehaviorSeverity2["Medium"] = 1] = "Medium";
        ModerationBehaviorSeverity2[ModerationBehaviorSeverity2["Low"] = 2] = "Low";
      })(ModerationBehaviorSeverity || (ModerationBehaviorSeverity = {}));
      var ModerationDecision = class _ModerationDecision {
        constructor() {
          Object.defineProperty(this, "did", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ""
          });
          Object.defineProperty(this, "isMe", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
          });
          Object.defineProperty(this, "causes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
          });
        }
        static merge(...decisions) {
          const decisionsFiltered = decisions.filter((v) => v != null);
          const decision = new _ModerationDecision();
          if (decisionsFiltered[0]) {
            decision.did = decisionsFiltered[0].did;
            decision.isMe = decisionsFiltered[0].isMe;
          }
          decision.causes = decisionsFiltered.flatMap((d) => d.causes);
          return decision;
        }
        downgrade() {
          for (const cause of this.causes) {
            cause.downgraded = true;
          }
          return this;
        }
        get blocked() {
          return !!this.blockCause;
        }
        get muted() {
          return !!this.muteCause;
        }
        get blockCause() {
          return this.causes.find((cause) => cause.type === "blocking" || cause.type === "blocked-by" || cause.type === "block-other");
        }
        get muteCause() {
          return this.causes.find((cause) => cause.type === "muted");
        }
        get labelCauses() {
          return this.causes.filter((cause) => cause.type === "label");
        }
        ui(context) {
          const ui = new ui_1.ModerationUI();
          for (const cause of this.causes) {
            if (cause.type === "blocking" || cause.type === "blocked-by" || cause.type === "block-other") {
              if (this.isMe) {
                continue;
              }
              if (context === "profileList" || context === "contentList") {
                ui.filters.push(cause);
              }
              if (!cause.downgraded) {
                if (types_1.BLOCK_BEHAVIOR[context] === "blur") {
                  ui.noOverride = true;
                  ui.blurs.push(cause);
                } else if (types_1.BLOCK_BEHAVIOR[context] === "alert") {
                  ui.alerts.push(cause);
                } else if (types_1.BLOCK_BEHAVIOR[context] === "inform") {
                  ui.informs.push(cause);
                }
              }
            } else if (cause.type === "muted") {
              if (this.isMe) {
                continue;
              }
              if (context === "profileList" || context === "contentList") {
                ui.filters.push(cause);
              }
              if (!cause.downgraded) {
                if (types_1.MUTE_BEHAVIOR[context] === "blur") {
                  ui.blurs.push(cause);
                } else if (types_1.MUTE_BEHAVIOR[context] === "alert") {
                  ui.alerts.push(cause);
                } else if (types_1.MUTE_BEHAVIOR[context] === "inform") {
                  ui.informs.push(cause);
                }
              }
            } else if (cause.type === "mute-word") {
              if (this.isMe) {
                continue;
              }
              if (context === "contentList") {
                ui.filters.push(cause);
              }
              if (!cause.downgraded) {
                if (types_1.MUTEWORD_BEHAVIOR[context] === "blur") {
                  ui.blurs.push(cause);
                } else if (types_1.MUTEWORD_BEHAVIOR[context] === "alert") {
                  ui.alerts.push(cause);
                } else if (types_1.MUTEWORD_BEHAVIOR[context] === "inform") {
                  ui.informs.push(cause);
                }
              }
            } else if (cause.type === "hidden") {
              if (context === "profileList" || context === "contentList") {
                ui.filters.push(cause);
              }
              if (!cause.downgraded) {
                if (types_1.HIDE_BEHAVIOR[context] === "blur") {
                  ui.blurs.push(cause);
                } else if (types_1.HIDE_BEHAVIOR[context] === "alert") {
                  ui.alerts.push(cause);
                } else if (types_1.HIDE_BEHAVIOR[context] === "inform") {
                  ui.informs.push(cause);
                }
              }
            } else if (cause.type === "label") {
              if (context === "profileList" && cause.target === "account") {
                if (cause.setting === "hide" && !this.isMe) {
                  ui.filters.push(cause);
                }
              } else if (context === "contentList" && (cause.target === "account" || cause.target === "content")) {
                if (cause.setting === "hide" && !this.isMe) {
                  ui.filters.push(cause);
                }
              }
              if (!cause.downgraded) {
                if (cause.behavior[context] === "blur") {
                  ui.blurs.push(cause);
                  if (cause.noOverride && !this.isMe) {
                    ui.noOverride = true;
                  }
                } else if (cause.behavior[context] === "alert") {
                  ui.alerts.push(cause);
                } else if (cause.behavior[context] === "inform") {
                  ui.informs.push(cause);
                }
              }
            }
          }
          ui.filters.sort(sortByPriority);
          ui.blurs.sort(sortByPriority);
          return ui;
        }
        setDid(did) {
          this.did = did;
        }
        setIsMe(isMe) {
          this.isMe = isMe;
        }
        addHidden(hidden2) {
          if (hidden2) {
            this.causes.push({
              type: "hidden",
              source: { type: "user" },
              priority: 6
            });
          }
        }
        addMutedWord(mutedWord) {
          if (mutedWord) {
            this.causes.push({
              type: "mute-word",
              source: { type: "user" },
              priority: 6
            });
          }
        }
        addBlocking(blocking) {
          if (blocking) {
            this.causes.push({
              type: "blocking",
              source: { type: "user" },
              priority: 3
            });
          }
        }
        addBlockingByList(blockingByList) {
          if (blockingByList) {
            this.causes.push({
              type: "blocking",
              source: { type: "list", list: blockingByList },
              priority: 3
            });
          }
        }
        addBlockedBy(blockedBy) {
          if (blockedBy) {
            this.causes.push({
              type: "blocked-by",
              source: { type: "user" },
              priority: 4
            });
          }
        }
        addBlockOther(blockOther) {
          if (blockOther) {
            this.causes.push({
              type: "block-other",
              source: { type: "user" },
              priority: 4
            });
          }
        }
        addLabel(target, label, opts) {
          const labelDef = types_1.CUSTOM_LABEL_VALUE_RE.test(label.val) ? opts.labelDefs?.[label.src]?.find((def) => def.identifier === label.val) || labels_1.LABELS[label.val] : labels_1.LABELS[label.val];
          if (!labelDef) {
            return;
          }
          const isSelf = label.src === this.did;
          const labeler = isSelf ? void 0 : opts.prefs.labelers.find((s) => s.did === label.src);
          if (!isSelf && !labeler) {
            return;
          }
          if (isSelf && labelDef.flags.includes("no-self")) {
            return;
          }
          let labelPref = labelDef.defaultSetting || "ignore";
          if (!labelDef.configurable) {
            labelPref = labelDef.defaultSetting || "hide";
          } else if (labelDef.flags.includes("adult") && !opts.prefs.adultContentEnabled) {
            labelPref = "hide";
          } else if (labeler?.labels[labelDef.identifier]) {
            labelPref = labeler?.labels[labelDef.identifier];
          } else if (opts.prefs.labels[labelDef.identifier]) {
            labelPref = opts.prefs.labels[labelDef.identifier];
          }
          if (labelPref === "ignore") {
            return;
          }
          if (labelDef.flags.includes("unauthed") && !!opts.userDid) {
            return;
          }
          let priority;
          const severity = measureModerationBehaviorSeverity(labelDef.behaviors[target]);
          if (labelDef.flags.includes("no-override") || labelDef.flags.includes("adult") && !opts.prefs.adultContentEnabled) {
            priority = 1;
          } else if (labelPref === "hide") {
            priority = 2;
          } else if (severity === ModerationBehaviorSeverity.High) {
            priority = 5;
          } else if (severity === ModerationBehaviorSeverity.Medium) {
            priority = 7;
          } else {
            priority = 8;
          }
          let noOverride = false;
          if (labelDef.flags.includes("no-override")) {
            noOverride = true;
          } else if (labelDef.flags.includes("adult") && !opts.prefs.adultContentEnabled) {
            noOverride = true;
          }
          this.causes.push({
            type: "label",
            source: isSelf || !labeler ? { type: "user" } : { type: "labeler", did: labeler.did },
            label,
            labelDef,
            target,
            setting: labelPref,
            behavior: labelDef.behaviors[target] || types_1.NOOP_BEHAVIOR,
            noOverride,
            priority
          });
        }
        addMuted(muted) {
          if (muted) {
            this.causes.push({
              type: "muted",
              source: { type: "user" },
              priority: 6
            });
          }
        }
        addMutedByList(mutedByList) {
          if (mutedByList) {
            this.causes.push({
              type: "muted",
              source: { type: "list", list: mutedByList },
              priority: 6
            });
          }
        }
      };
      exports.ModerationDecision = ModerationDecision;
      function measureModerationBehaviorSeverity(beh) {
        if (!beh) {
          return ModerationBehaviorSeverity.Low;
        }
        if (beh.profileView === "blur" || beh.contentView === "blur") {
          return ModerationBehaviorSeverity.High;
        }
        if (beh.contentList === "blur" || beh.contentMedia === "blur") {
          return ModerationBehaviorSeverity.Medium;
        }
        return ModerationBehaviorSeverity.Low;
      }
      function sortByPriority(a, b) {
        return a.priority - b.priority;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/moderation/subjects/account.js
  var require_account = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/moderation/subjects/account.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.decideAccount = decideAccount;
      exports.filterAccountLabels = filterAccountLabels;
      var decision_1 = require_decision();
      function decideAccount(subject, opts) {
        const acc = new decision_1.ModerationDecision();
        acc.setDid(subject.did);
        acc.setIsMe(subject.did === opts.userDid);
        if (subject.viewer?.muted) {
          if (subject.viewer?.mutedByList) {
            acc.addMutedByList(subject.viewer?.mutedByList);
          } else {
            acc.addMuted(subject.viewer?.muted);
          }
        }
        if (subject.viewer?.blocking) {
          if (subject.viewer?.blockingByList) {
            acc.addBlockingByList(subject.viewer?.blockingByList);
          } else {
            acc.addBlocking(subject.viewer?.blocking);
          }
        }
        acc.addBlockedBy(subject.viewer?.blockedBy);
        for (const label of filterAccountLabels(subject.labels)) {
          acc.addLabel("account", label, opts);
        }
        return acc;
      }
      function filterAccountLabels(labels) {
        if (!labels) {
          return [];
        }
        return labels.filter((label) => !label.uri.endsWith("/app.bsky.actor.profile/self") || label.val === "!no-unauthenticated");
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/moderation/subjects/profile.js
  var require_profile2 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/moderation/subjects/profile.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.decideProfile = decideProfile;
      exports.filterProfileLabels = filterProfileLabels;
      var decision_1 = require_decision();
      function decideProfile(subject, opts) {
        const acc = new decision_1.ModerationDecision();
        acc.setDid(subject.did);
        acc.setIsMe(subject.did === opts.userDid);
        for (const label of filterProfileLabels(subject.labels)) {
          acc.addLabel("profile", label, opts);
        }
        return acc;
      }
      function filterProfileLabels(labels) {
        if (!labels) {
          return [];
        }
        return labels.filter((label) => label.uri.endsWith("/app.bsky.actor.profile/self"));
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/moderation/subjects/feed-generator.js
  var require_feed_generator = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/moderation/subjects/feed-generator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.decideFeedGenerator = decideFeedGenerator;
      var decision_1 = require_decision();
      var account_1 = require_account();
      var profile_1 = require_profile2();
      function decideFeedGenerator(subject, opts) {
        const acc = new decision_1.ModerationDecision();
        acc.setDid(subject.creator.did);
        acc.setIsMe(subject.creator.did === opts.userDid);
        if (subject.labels?.length) {
          for (const label of subject.labels) {
            acc.addLabel("content", label, opts);
          }
        }
        return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(subject.creator, opts), (0, profile_1.decideProfile)(subject.creator, opts));
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/moderation/subjects/notification.js
  var require_notification = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/moderation/subjects/notification.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.decideNotification = decideNotification;
      var decision_1 = require_decision();
      var account_1 = require_account();
      var profile_1 = require_profile2();
      function decideNotification(subject, opts) {
        const acc = new decision_1.ModerationDecision();
        acc.setDid(subject.author.did);
        acc.setIsMe(subject.author.did === opts.userDid);
        if (subject.labels?.length) {
          for (const label of subject.labels) {
            acc.addLabel("content", label, opts);
          }
        }
        return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(subject.author, opts), (0, profile_1.decideProfile)(subject.author, opts));
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/moderation/mutewords.js
  var require_mutewords = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/moderation/mutewords.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.hasMutedWord = hasMutedWord;
      var client_1 = require_client3();
      var REGEX2 = {
        LEADING_TRAILING_PUNCTUATION: /(?:^\p{P}+|\p{P}+$)/gu,
        ESCAPE: /[[\]{}()*+?.\\^$|\s]/g,
        SEPARATORS: /[/\-–—()[\]_]+/g,
        WORD_BOUNDARY: /[\s\n\t\r\f\v]+?/g
      };
      var LANGUAGE_EXCEPTIONS = [
        "ja",
        // Japanese
        "zh",
        // Chinese
        "ko",
        // Korean
        "th",
        // Thai
        "vi"
        // Vietnamese
      ];
      function hasMutedWord({ mutedWords, text, facets, outlineTags, languages, actor }) {
        const exception = LANGUAGE_EXCEPTIONS.includes(languages?.[0] || "");
        const tags = [].concat(outlineTags || []).concat((facets || []).flatMap((facet) => facet.features.filter(client_1.AppBskyRichtextFacet.isTag).map((tag2) => tag2.tag))).map((t) => t.toLowerCase());
        for (const mute of mutedWords) {
          const mutedWord = mute.value.toLowerCase();
          const postText = text.toLowerCase();
          if (mute.expiresAt && mute.expiresAt < (/* @__PURE__ */ new Date()).toISOString())
            continue;
          if (mute.actorTarget === "exclude-following" && Boolean(actor?.viewer?.following))
            continue;
          if (tags.includes(mutedWord))
            return true;
          if (!mute.targets.includes("content"))
            continue;
          if ((mutedWord.length === 1 || exception) && postText.includes(mutedWord))
            return true;
          if (mutedWord.length > postText.length)
            continue;
          if (mutedWord === postText)
            return true;
          if (/(?:\s|\p{P})+?/u.test(mutedWord) && postText.includes(mutedWord))
            return true;
          const words = postText.split(REGEX2.WORD_BOUNDARY);
          for (const word of words) {
            if (word === mutedWord)
              return true;
            const wordTrimmedPunctuation = word.replace(REGEX2.LEADING_TRAILING_PUNCTUATION, "");
            if (mutedWord === wordTrimmedPunctuation)
              return true;
            if (mutedWord.length > wordTrimmedPunctuation.length)
              continue;
            if (/\p{P}+/u.test(wordTrimmedPunctuation)) {
              const spacedWord = wordTrimmedPunctuation.replace(/\p{P}+/gu, " ");
              if (spacedWord === mutedWord)
                return true;
              const contiguousWord = spacedWord.replace(/\s/gu, "");
              if (contiguousWord === mutedWord)
                return true;
              const wordParts = wordTrimmedPunctuation.split(/\p{P}+/u);
              for (const wordPart of wordParts) {
                if (wordPart === mutedWord)
                  return true;
              }
            }
          }
        }
        return false;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/moderation/subjects/post.js
  var require_post2 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/moderation/subjects/post.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.decidePost = decidePost;
      var client_1 = require_client3();
      var decision_1 = require_decision();
      var mutewords_1 = require_mutewords();
      var account_1 = require_account();
      var profile_1 = require_profile2();
      function decidePost(subject, opts) {
        return decision_1.ModerationDecision.merge(decideSubject(subject, opts), decideEmbed(subject.embed, opts)?.downgrade(), (0, account_1.decideAccount)(subject.author, opts), (0, profile_1.decideProfile)(subject.author, opts));
      }
      function decideSubject(subject, opts) {
        const acc = new decision_1.ModerationDecision();
        acc.setDid(subject.author.did);
        acc.setIsMe(subject.author.did === opts.userDid);
        if (subject.labels?.length) {
          for (const label of subject.labels) {
            acc.addLabel("content", label, opts);
          }
        }
        acc.addHidden(checkHiddenPost(subject, opts.prefs.hiddenPosts));
        if (!acc.isMe) {
          acc.addMutedWord(checkMutedWords(subject, opts.prefs.mutedWords));
        }
        return acc;
      }
      function decideEmbed(embed, opts) {
        if (embed) {
          if ((client_1.AppBskyEmbedRecord.isView(embed) || client_1.AppBskyEmbedRecordWithMedia.isView(embed)) && client_1.AppBskyEmbedRecord.isViewRecord(embed.record)) {
            return decideQuotedPost(embed.record, opts);
          } else if (client_1.AppBskyEmbedRecordWithMedia.isView(embed) && client_1.AppBskyEmbedRecord.isViewRecord(embed.record.record)) {
            return decideQuotedPost(embed.record.record, opts);
          } else if ((client_1.AppBskyEmbedRecord.isView(embed) || client_1.AppBskyEmbedRecordWithMedia.isView(embed)) && client_1.AppBskyEmbedRecord.isViewBlocked(embed.record)) {
            return decideBlockedQuotedPost(embed.record, opts);
          } else if (client_1.AppBskyEmbedRecordWithMedia.isView(embed) && client_1.AppBskyEmbedRecord.isViewBlocked(embed.record.record)) {
            return decideBlockedQuotedPost(embed.record.record, opts);
          }
        }
        return void 0;
      }
      function decideQuotedPost(subject, opts) {
        const acc = new decision_1.ModerationDecision();
        acc.setDid(subject.author.did);
        acc.setIsMe(subject.author.did === opts.userDid);
        if (subject.labels?.length) {
          for (const label of subject.labels) {
            acc.addLabel("content", label, opts);
          }
        }
        return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(subject.author, opts), (0, profile_1.decideProfile)(subject.author, opts));
      }
      function decideBlockedQuotedPost(subject, opts) {
        const acc = new decision_1.ModerationDecision();
        acc.setDid(subject.author.did);
        acc.setIsMe(subject.author.did === opts.userDid);
        if (subject.author.viewer?.muted) {
          if (subject.author.viewer?.mutedByList) {
            acc.addMutedByList(subject.author.viewer?.mutedByList);
          } else {
            acc.addMuted(subject.author.viewer?.muted);
          }
        }
        if (subject.author.viewer?.blocking) {
          if (subject.author.viewer?.blockingByList) {
            acc.addBlockingByList(subject.author.viewer?.blockingByList);
          } else {
            acc.addBlocking(subject.author.viewer?.blocking);
          }
        }
        acc.addBlockedBy(subject.author.viewer?.blockedBy);
        return acc;
      }
      function checkHiddenPost(subject, hiddenPosts) {
        if (!hiddenPosts?.length) {
          return false;
        }
        if (hiddenPosts.includes(subject.uri)) {
          return true;
        }
        if (subject.embed) {
          if (client_1.AppBskyEmbedRecord.isView(subject.embed) && client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record) && hiddenPosts.includes(subject.embed.record.uri)) {
            return true;
          }
          if (client_1.AppBskyEmbedRecordWithMedia.isView(subject.embed) && client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record.record) && hiddenPosts.includes(subject.embed.record.record.uri)) {
            return true;
          }
        }
        return false;
      }
      function checkMutedWords(subject, mutedWords) {
        if (!mutedWords?.length) {
          return false;
        }
        const postAuthor = subject.author;
        if (client_1.AppBskyFeedPost.isRecord(subject.record)) {
          const post = subject.record;
          if ((0, mutewords_1.hasMutedWord)({
            mutedWords,
            text: post.text,
            facets: post.facets,
            outlineTags: post.tags,
            languages: post.langs,
            actor: postAuthor
          })) {
            return true;
          }
          if (post.embed && client_1.AppBskyEmbedImages.isMain(post.embed)) {
            for (const image of post.embed.images) {
              if ((0, mutewords_1.hasMutedWord)({
                mutedWords,
                text: image.alt,
                languages: post.langs,
                actor: postAuthor
              })) {
                return true;
              }
            }
          }
        }
        const { embed } = subject;
        if (embed) {
          if ((client_1.AppBskyEmbedRecord.isView(embed) || client_1.AppBskyEmbedRecordWithMedia.isView(embed)) && client_1.AppBskyEmbedRecord.isViewRecord(embed.record)) {
            if (client_1.AppBskyFeedPost.isRecord(embed.record.value)) {
              const embeddedPost = embed.record.value;
              const embedAuthor = embed.record.author;
              if ((0, mutewords_1.hasMutedWord)({
                mutedWords,
                text: embeddedPost.text,
                facets: embeddedPost.facets,
                outlineTags: embeddedPost.tags,
                languages: embeddedPost.langs,
                actor: embedAuthor
              })) {
                return true;
              }
              if (client_1.AppBskyEmbedImages.isMain(embeddedPost.embed)) {
                for (const image of embeddedPost.embed.images) {
                  if ((0, mutewords_1.hasMutedWord)({
                    mutedWords,
                    text: image.alt,
                    languages: embeddedPost.langs,
                    actor: embedAuthor
                  })) {
                    return true;
                  }
                }
              }
              if (client_1.AppBskyEmbedExternal.isMain(embeddedPost.embed)) {
                const { external } = embeddedPost.embed;
                if ((0, mutewords_1.hasMutedWord)({
                  mutedWords,
                  text: external.title + " " + external.description,
                  languages: [],
                  actor: embedAuthor
                })) {
                  return true;
                }
              }
              if (client_1.AppBskyEmbedRecordWithMedia.isMain(embeddedPost.embed)) {
                if (client_1.AppBskyEmbedExternal.isMain(embeddedPost.embed.media)) {
                  const { external } = embeddedPost.embed.media;
                  if ((0, mutewords_1.hasMutedWord)({
                    mutedWords,
                    text: external.title + " " + external.description,
                    languages: [],
                    actor: embedAuthor
                  })) {
                    return true;
                  }
                }
                if (client_1.AppBskyEmbedImages.isMain(embeddedPost.embed.media)) {
                  for (const image of embeddedPost.embed.media.images) {
                    if ((0, mutewords_1.hasMutedWord)({
                      mutedWords,
                      text: image.alt,
                      languages: client_1.AppBskyFeedPost.isRecord(embeddedPost.record) ? embeddedPost.langs : [],
                      actor: embedAuthor
                    })) {
                      return true;
                    }
                  }
                }
              }
            }
          } else if (client_1.AppBskyEmbedExternal.isView(embed)) {
            const { external } = embed;
            if ((0, mutewords_1.hasMutedWord)({
              mutedWords,
              text: external.title + " " + external.description,
              languages: [],
              actor: postAuthor
            })) {
              return true;
            }
          } else if (client_1.AppBskyEmbedRecordWithMedia.isView(embed) && client_1.AppBskyEmbedRecord.isViewRecord(embed.record.record)) {
            const embedAuthor = embed.record.record.author;
            if (client_1.AppBskyFeedPost.isRecord(embed.record.record.value)) {
              const post = embed.record.record.value;
              if ((0, mutewords_1.hasMutedWord)({
                mutedWords,
                text: post.text,
                facets: post.facets,
                outlineTags: post.tags,
                languages: post.langs,
                actor: embedAuthor
              })) {
                return true;
              }
            }
            if (client_1.AppBskyEmbedImages.isView(embed.media)) {
              for (const image of embed.media.images) {
                if ((0, mutewords_1.hasMutedWord)({
                  mutedWords,
                  text: image.alt,
                  languages: client_1.AppBskyFeedPost.isRecord(subject.record) ? subject.record.langs : [],
                  actor: embedAuthor
                })) {
                  return true;
                }
              }
            }
            if (client_1.AppBskyEmbedExternal.isView(embed.media)) {
              const { external } = embed.media;
              if ((0, mutewords_1.hasMutedWord)({
                mutedWords,
                text: external.title + " " + external.description,
                languages: [],
                actor: embedAuthor
              })) {
                return true;
              }
            }
          }
        }
        return false;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/moderation/subjects/user-list.js
  var require_user_list = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/moderation/subjects/user-list.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.decideUserList = decideUserList;
      var syntax_1 = require_dist12();
      var decision_1 = require_decision();
      var account_1 = require_account();
      var profile_1 = require_profile2();
      function decideUserList(subject, opts) {
        const acc = new decision_1.ModerationDecision();
        const creator = (
          // Note: ListViewBasic should not contain a creator field, but let's support it anyway
          "creator" in subject && isProfile(subject.creator) ? subject.creator : void 0
        );
        if (creator) {
          acc.setDid(creator.did);
          acc.setIsMe(creator.did === opts.userDid);
          if (subject.labels?.length) {
            for (const label of subject.labels) {
              acc.addLabel("content", label, opts);
            }
          }
          return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(creator, opts), (0, profile_1.decideProfile)(creator, opts));
        }
        const creatorDid = new syntax_1.AtUri(subject.uri).hostname;
        acc.setDid(creatorDid);
        acc.setIsMe(creatorDid === opts.userDid);
        if (subject.labels?.length) {
          for (const label of subject.labels) {
            acc.addLabel("content", label, opts);
          }
        }
        return acc;
      }
      function isProfile(v) {
        return v && typeof v === "object" && "did" in v;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/moderation/util.js
  var require_util18 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/moderation/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isQuotedPost = isQuotedPost;
      exports.isQuotedPostWithMedia = isQuotedPostWithMedia;
      exports.interpretLabelValueDefinition = interpretLabelValueDefinition;
      exports.interpretLabelValueDefinitions = interpretLabelValueDefinitions;
      var client_1 = require_client3();
      var util_1 = require_util14();
      function isQuotedPost(embed) {
        return Boolean(embed && client_1.AppBskyEmbedRecord.isView(embed));
      }
      function isQuotedPostWithMedia(embed) {
        return Boolean(embed && client_1.AppBskyEmbedRecordWithMedia.isView(embed));
      }
      function interpretLabelValueDefinition(def, definedBy) {
        const behaviors = {
          account: {},
          profile: {},
          content: {}
        };
        const alertOrInform = def.severity === "alert" ? "alert" : def.severity === "inform" ? "inform" : void 0;
        if (def.blurs === "content") {
          behaviors.account.profileList = alertOrInform;
          behaviors.account.profileView = alertOrInform;
          behaviors.account.contentList = "blur";
          behaviors.account.contentView = def.adultOnly ? "blur" : alertOrInform;
          behaviors.profile.profileList = alertOrInform;
          behaviors.profile.profileView = alertOrInform;
          behaviors.content.contentList = "blur";
          behaviors.content.contentView = def.adultOnly ? "blur" : alertOrInform;
        } else if (def.blurs === "media") {
          behaviors.account.profileList = alertOrInform;
          behaviors.account.profileView = alertOrInform;
          behaviors.account.avatar = "blur";
          behaviors.account.banner = "blur";
          behaviors.profile.profileList = alertOrInform;
          behaviors.profile.profileView = alertOrInform;
          behaviors.profile.avatar = "blur";
          behaviors.profile.banner = "blur";
          behaviors.content.contentMedia = "blur";
        } else if (def.blurs === "none") {
          behaviors.account.profileList = alertOrInform;
          behaviors.account.profileView = alertOrInform;
          behaviors.account.contentList = alertOrInform;
          behaviors.account.contentView = alertOrInform;
          behaviors.profile.profileList = alertOrInform;
          behaviors.profile.profileView = alertOrInform;
          behaviors.content.contentList = alertOrInform;
          behaviors.content.contentView = alertOrInform;
        }
        let defaultSetting = "warn";
        if (def.defaultSetting === "hide" || def.defaultSetting === "ignore") {
          defaultSetting = def.defaultSetting;
        }
        const flags = ["no-self"];
        if (def.adultOnly) {
          flags.push("adult");
        }
        return {
          ...def,
          definedBy,
          configurable: true,
          defaultSetting,
          flags,
          behaviors
        };
      }
      function interpretLabelValueDefinitions(labelerView) {
        return (labelerView.policies?.labelValueDefinitions || []).filter((0, util_1.asPredicate)(client_1.ComAtprotoLabelDefs.validateLabelValueDefinition)).map((labelValDef) => interpretLabelValueDefinition(labelValDef, labelerView.creator.did));
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/moderation/index.js
  var require_moderation = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/moderation/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.interpretLabelValueDefinitions = exports.interpretLabelValueDefinition = exports.hasMutedWord = exports.ModerationDecision = exports.ModerationUI = void 0;
      exports.moderateProfile = moderateProfile;
      exports.moderatePost = moderatePost;
      exports.moderateNotification = moderateNotification;
      exports.moderateFeedGenerator = moderateFeedGenerator;
      exports.moderateUserList = moderateUserList;
      var decision_1 = require_decision();
      var account_1 = require_account();
      var feed_generator_1 = require_feed_generator();
      var notification_1 = require_notification();
      var post_1 = require_post2();
      var profile_1 = require_profile2();
      var user_list_1 = require_user_list();
      var ui_1 = require_ui();
      Object.defineProperty(exports, "ModerationUI", { enumerable: true, get: function() {
        return ui_1.ModerationUI;
      } });
      var decision_2 = require_decision();
      Object.defineProperty(exports, "ModerationDecision", { enumerable: true, get: function() {
        return decision_2.ModerationDecision;
      } });
      var mutewords_1 = require_mutewords();
      Object.defineProperty(exports, "hasMutedWord", { enumerable: true, get: function() {
        return mutewords_1.hasMutedWord;
      } });
      var util_1 = require_util18();
      Object.defineProperty(exports, "interpretLabelValueDefinition", { enumerable: true, get: function() {
        return util_1.interpretLabelValueDefinition;
      } });
      Object.defineProperty(exports, "interpretLabelValueDefinitions", { enumerable: true, get: function() {
        return util_1.interpretLabelValueDefinitions;
      } });
      function moderateProfile(subject, opts) {
        return decision_1.ModerationDecision.merge((0, account_1.decideAccount)(subject, opts), (0, profile_1.decideProfile)(subject, opts));
      }
      function moderatePost(subject, opts) {
        return (0, post_1.decidePost)(subject, opts);
      }
      function moderateNotification(subject, opts) {
        return (0, notification_1.decideNotification)(subject, opts);
      }
      function moderateFeedGenerator(subject, opts) {
        return (0, feed_generator_1.decideFeedGenerator)(subject, opts);
      }
      function moderateUserList(subject, opts) {
        return (0, user_list_1.decideUserList)(subject, opts);
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/mocker.js
  var require_mocker = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/mocker.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.mock = void 0;
      var FAKE_CID = "bafyreiclp443lavogvhj3d2ob2cxbfuscni2k5jk7bebjzg7khl3esabwq";
      exports.mock = {
        post({ text, facets, reply, embed }) {
          return {
            $type: "app.bsky.feed.post",
            text,
            facets,
            reply,
            embed,
            langs: ["en"],
            createdAt: (/* @__PURE__ */ new Date()).toISOString()
          };
        },
        postView({ record, author, embed, replyCount, repostCount, likeCount, viewer, labels }) {
          return {
            $type: "app.bsky.feed.defs#postView",
            uri: `at://${author.did}/app.bsky.feed.post/fake`,
            cid: FAKE_CID,
            author,
            record,
            embed,
            replyCount,
            repostCount,
            likeCount,
            indexedAt: (/* @__PURE__ */ new Date()).toISOString(),
            viewer,
            labels
          };
        },
        embedRecordView({ record, author, labels }) {
          return {
            $type: "app.bsky.embed.record#view",
            record: {
              $type: "app.bsky.embed.record#viewRecord",
              uri: `at://${author.did}/app.bsky.feed.post/fake`,
              cid: FAKE_CID,
              author,
              value: record,
              labels,
              indexedAt: (/* @__PURE__ */ new Date()).toISOString()
            }
          };
        },
        profileViewBasic({ handle, displayName, description, viewer, labels }) {
          return {
            did: `did:web:${handle}`,
            handle,
            displayName,
            // @ts-expect-error technically not in ProfileViewBasic but useful in some cases
            description,
            viewer,
            labels
          };
        },
        actorViewerState({ muted, mutedByList, blockedBy, blocking, blockingByList, following, followedBy }) {
          return {
            muted,
            mutedByList,
            blockedBy,
            blocking,
            blockingByList,
            following,
            followedBy
          };
        },
        listViewBasic({ name: name2 }) {
          return {
            uri: "at://did:plc:fake/app.bsky.graph.list/fake",
            cid: FAKE_CID,
            name: name2,
            purpose: "app.bsky.graph.defs#modlist",
            indexedAt: (/* @__PURE__ */ new Date()).toISOString()
          };
        },
        replyNotification({ author, record, labels }) {
          return {
            uri: `at://${author.did}/app.bsky.feed.post/fake`,
            cid: FAKE_CID,
            author,
            reason: "reply",
            reasonSubject: `at://${author.did}/app.bsky.feed.post/fake-parent`,
            record,
            isRead: false,
            indexedAt: (/* @__PURE__ */ new Date()).toISOString(),
            labels
          };
        },
        followNotification({ author, subjectDid, labels }) {
          return {
            uri: `at://${author.did}/app.bsky.graph.follow/fake`,
            cid: FAKE_CID,
            author,
            reason: "follow",
            record: {
              $type: "app.bsky.graph.follow",
              createdAt: (/* @__PURE__ */ new Date()).toISOString(),
              subject: subjectDid
            },
            isRead: false,
            indexedAt: (/* @__PURE__ */ new Date()).toISOString(),
            labels
          };
        },
        label({ val, uri, src: src2 }) {
          return {
            src: src2 || "did:plc:fake-labeler",
            uri,
            val,
            cts: (/* @__PURE__ */ new Date()).toISOString()
          };
        }
      };
    }
  });

  // node_modules/.pnpm/await-lock@2.2.2/node_modules/await-lock/build/AwaitLock.js
  var require_AwaitLock = __commonJS({
    "node_modules/.pnpm/await-lock@2.2.2/node_modules/await-lock/build/AwaitLock.js"(exports) {
      "use strict";
      var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      var _AwaitLock_acquired;
      var _AwaitLock_waitingResolvers;
      Object.defineProperty(exports, "__esModule", { value: true });
      var AwaitLock = class {
        constructor() {
          _AwaitLock_acquired.set(this, false);
          _AwaitLock_waitingResolvers.set(this, /* @__PURE__ */ new Set());
        }
        /**
         * Whether the lock is currently acquired or not. Accessing this property does not affect the
         * status of the lock.
         */
        get acquired() {
          return __classPrivateFieldGet(this, _AwaitLock_acquired, "f");
        }
        /**
         * Acquires the lock, waiting if necessary for it to become free if it is already locked. The
         * returned promise is fulfilled once the lock is acquired.
         *
         * A timeout (in milliseconds) may be optionally provided. If the lock cannot be acquired before
         * the timeout elapses, the returned promise is rejected with an error. The behavior of invalid
         * timeout values depends on how `setTimeout` handles those values.
         *
         * After acquiring the lock, you **must** call `release` when you are done with it.
         */
        acquireAsync({ timeout } = {}) {
          if (!__classPrivateFieldGet(this, _AwaitLock_acquired, "f")) {
            __classPrivateFieldSet(this, _AwaitLock_acquired, true, "f");
            return Promise.resolve();
          }
          if (timeout == null) {
            return new Promise((resolve) => {
              __classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f").add(resolve);
            });
          }
          let resolver;
          let timer;
          return Promise.race([
            new Promise((resolve) => {
              resolver = () => {
                clearTimeout(timer);
                resolve();
              };
              __classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f").add(resolver);
            }),
            new Promise((_, reject) => {
              timer = setTimeout(() => {
                __classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f").delete(resolver);
                reject(new Error(`Timed out waiting for lock`));
              }, timeout);
            })
          ]);
        }
        /**
         * Acquires the lock if it is free and otherwise returns immediately without waiting. Returns
         * `true` if the lock was free and is now acquired, and `false` otherwise.
         *
         * This method differs from calling `acquireAsync` with a zero-millisecond timeout in that it runs
         * synchronously without waiting for the JavaScript task queue.
         */
        tryAcquire() {
          if (!__classPrivateFieldGet(this, _AwaitLock_acquired, "f")) {
            __classPrivateFieldSet(this, _AwaitLock_acquired, true, "f");
            return true;
          }
          return false;
        }
        /**
         * Releases the lock and gives it to the next waiting acquirer, if there is one. Each acquirer
         * must release the lock exactly once.
         */
        release() {
          if (!__classPrivateFieldGet(this, _AwaitLock_acquired, "f")) {
            throw new Error(`Cannot release an unacquired lock`);
          }
          if (__classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f").size > 0) {
            const [resolve] = __classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f");
            __classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f").delete(resolve);
            resolve();
          } else {
            __classPrivateFieldSet(this, _AwaitLock_acquired, false, "f");
          }
        }
      };
      exports.default = AwaitLock;
      _AwaitLock_acquired = /* @__PURE__ */ new WeakMap(), _AwaitLock_waitingResolvers = /* @__PURE__ */ new WeakMap();
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/predicate.js
  var require_predicate = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/predicate.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isValidVerificationPrefs = exports.isValidThreadViewPref = exports.isValidSavedFeedsPrefV2 = exports.isValidSavedFeedsPref = exports.isValidPostInteractionSettingsPref = exports.isValidPersonalDetailsPref = exports.isValidMutedWordsPref = exports.isValidLabelersPref = exports.isValidInterestsPref = exports.isValidHiddenPostsPref = exports.isValidFeedViewPref = exports.isValidContentLabelPref = exports.isValidBskyAppStatePref = exports.isValidAdultContentPref = exports.isValidProfile = void 0;
      var index_1 = require_client3();
      var util_1 = require_util14();
      exports.isValidProfile = (0, util_1.asPredicate)(index_1.AppBskyActorProfile.validateRecord);
      exports.isValidAdultContentPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateAdultContentPref);
      exports.isValidBskyAppStatePref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateBskyAppStatePref);
      exports.isValidContentLabelPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateContentLabelPref);
      exports.isValidFeedViewPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateFeedViewPref);
      exports.isValidHiddenPostsPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateHiddenPostsPref);
      exports.isValidInterestsPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateInterestsPref);
      exports.isValidLabelersPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateLabelersPref);
      exports.isValidMutedWordsPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateMutedWordsPref);
      exports.isValidPersonalDetailsPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validatePersonalDetailsPref);
      exports.isValidPostInteractionSettingsPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validatePostInteractionSettingsPref);
      exports.isValidSavedFeedsPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateSavedFeedsPref);
      exports.isValidSavedFeedsPrefV2 = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateSavedFeedsPrefV2);
      exports.isValidThreadViewPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateThreadViewPref);
      exports.isValidVerificationPrefs = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateVerificationPrefs);
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/agent.js
  var require_agent = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/agent.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
        var ownKeys = function(o) {
          ownKeys = Object.getOwnPropertyNames || function(o2) {
            var ar = [];
            for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
            return ar;
          };
          return ownKeys(o);
        };
        return function(mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      }();
      var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      var _Agent_prefsLock;
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Agent = void 0;
      var await_lock_1 = __importDefault(require_AwaitLock());
      var common_web_1 = require_dist16();
      var syntax_1 = require_dist12();
      var xrpc_1 = require_dist19();
      var index_1 = require_client3();
      var lexicons_1 = require_lexicons2();
      var const_1 = require_const();
      var moderation_1 = require_moderation();
      var labels_1 = require_labels();
      var predicate = __importStar(require_predicate());
      var util_1 = require_util15();
      var FEED_VIEW_PREF_DEFAULTS = {
        hideReplies: false,
        hideRepliesByUnfollowed: true,
        hideRepliesByLikeCount: 0,
        hideReposts: false,
        hideQuotePosts: false
      };
      var THREAD_VIEW_PREF_DEFAULTS = {
        sort: "hotness",
        prioritizeFollowedUsers: true
      };
      var Agent2 = class _Agent extends xrpc_1.XrpcClient {
        /**
         * Configures the Agent (or its sub classes) globally.
         */
        static configure(opts) {
          if (opts.appLabelers) {
            this.appLabelers = opts.appLabelers.map(util_1.asDid);
          }
        }
        /** @deprecated use `this` instead */
        get xrpc() {
          return this;
        }
        constructor(options) {
          const sessionManager = typeof options === "object" && "fetchHandler" in options ? options : {
            did: void 0,
            fetchHandler: (0, xrpc_1.buildFetchHandler)(options)
          };
          super((url, init) => {
            const headers = new Headers(init?.headers);
            if (this.proxy && !headers.has("atproto-proxy")) {
              headers.set("atproto-proxy", this.proxy);
            }
            headers.set("atproto-accept-labelers", [
              ...this.appLabelers.map((l) => `${l};redact`),
              ...this.labelers,
              headers.get("atproto-accept-labelers")?.trim()
            ].filter(Boolean).join(", "));
            return this.sessionManager.fetchHandler(url, { ...init, headers });
          }, lexicons_1.schemas);
          Object.defineProperty(this, "com", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new index_1.ComNS(this)
          });
          Object.defineProperty(this, "app", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new index_1.AppNS(this)
          });
          Object.defineProperty(this, "chat", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new index_1.ChatNS(this)
          });
          Object.defineProperty(this, "tools", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new index_1.ToolsNS(this)
          });
          Object.defineProperty(this, "sessionManager", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "labelers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
          });
          Object.defineProperty(this, "proxy", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "uploadBlob", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (data, opts) => this.com.atproto.repo.uploadBlob(data, opts)
          });
          Object.defineProperty(this, "resolveHandle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.com.atproto.identity.resolveHandle(params, opts)
          });
          Object.defineProperty(this, "updateHandle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (data, opts) => this.com.atproto.identity.updateHandle(data, opts)
          });
          Object.defineProperty(this, "createModerationReport", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (data, opts) => this.com.atproto.moderation.createReport(data, opts)
          });
          Object.defineProperty(this, "getTimeline", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.app.bsky.feed.getTimeline(params, opts)
          });
          Object.defineProperty(this, "getAuthorFeed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.app.bsky.feed.getAuthorFeed(params, opts)
          });
          Object.defineProperty(this, "getActorLikes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.app.bsky.feed.getActorLikes(params, opts)
          });
          Object.defineProperty(this, "getPostThread", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.app.bsky.feed.getPostThread(params, opts)
          });
          Object.defineProperty(this, "getPost", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params) => this.app.bsky.feed.post.get(params)
          });
          Object.defineProperty(this, "getPosts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.app.bsky.feed.getPosts(params, opts)
          });
          Object.defineProperty(this, "getLikes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.app.bsky.feed.getLikes(params, opts)
          });
          Object.defineProperty(this, "getRepostedBy", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.app.bsky.feed.getRepostedBy(params, opts)
          });
          Object.defineProperty(this, "getFollows", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.app.bsky.graph.getFollows(params, opts)
          });
          Object.defineProperty(this, "getFollowers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.app.bsky.graph.getFollowers(params, opts)
          });
          Object.defineProperty(this, "getProfile", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.app.bsky.actor.getProfile(params, opts)
          });
          Object.defineProperty(this, "getProfiles", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.app.bsky.actor.getProfiles(params, opts)
          });
          Object.defineProperty(this, "getSuggestions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.app.bsky.actor.getSuggestions(params, opts)
          });
          Object.defineProperty(this, "searchActors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.app.bsky.actor.searchActors(params, opts)
          });
          Object.defineProperty(this, "searchActorsTypeahead", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.app.bsky.actor.searchActorsTypeahead(params, opts)
          });
          Object.defineProperty(this, "listNotifications", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.app.bsky.notification.listNotifications(params, opts)
          });
          Object.defineProperty(this, "countUnreadNotifications", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.app.bsky.notification.getUnreadCount(params, opts)
          });
          Object.defineProperty(this, "getLabelers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.app.bsky.labeler.getServices(params, opts)
          });
          _Agent_prefsLock.set(
            this,
            new await_lock_1.default()
            /**
             * This function updates the preferences of a user and allows for a callback function to be executed
             * before the update.
             * @param cb - cb is a callback function that takes in a single parameter of type
             * AppBskyActorDefs.Preferences and returns either a boolean or void. This callback function is used to
             * update the preferences of the user. The function is called with the current preferences as an
             * argument and if the callback returns false, the preferences are not updated.
             */
          );
          this.sessionManager = sessionManager;
        }
        //#region Cloning utilities
        clone() {
          return this.copyInto(new _Agent(this.sessionManager));
        }
        copyInto(inst) {
          inst.configureLabelers(this.labelers);
          inst.configureProxy(this.proxy ?? null);
          inst.clearHeaders();
          for (const [key, value] of this.headers)
            inst.setHeader(key, value);
          return inst;
        }
        withProxy(serviceType, did) {
          const inst = this.clone();
          inst.configureProxy(`${(0, util_1.asDid)(did)}#${serviceType}`);
          return inst;
        }
        //#endregion
        //#region ATPROTO labelers configuration utilities
        /**
         * The labelers statically configured on the class of the current instance.
         */
        get appLabelers() {
          return this.constructor.appLabelers;
        }
        configureLabelers(labelerDids) {
          this.labelers = labelerDids.map(util_1.asDid);
        }
        /** @deprecated use {@link configureLabelers} instead */
        configureLabelersHeader(labelerDids) {
          this.configureLabelers(labelerDids.filter(util_1.isDid));
        }
        configureProxy(value) {
          if (value === null)
            this.proxy = void 0;
          else if ((0, util_1.isDid)(value))
            this.proxy = value;
          else
            throw new TypeError("Invalid proxy DID");
        }
        /** @deprecated use {@link configureProxy} instead */
        configureProxyHeader(serviceType, did) {
          if ((0, util_1.isDid)(did))
            this.configureProxy(`${did}#${serviceType}`);
        }
        //#endregion
        //#region Session management
        /**
         * Get the authenticated user's DID, if any.
         */
        get did() {
          return this.sessionManager.did;
        }
        /** @deprecated Use {@link Agent.assertDid} instead */
        get accountDid() {
          return this.assertDid;
        }
        /**
         * Get the authenticated user's DID, or throw an error if not authenticated.
         */
        get assertDid() {
          this.assertAuthenticated();
          return this.did;
        }
        /**
         * Assert that the user is authenticated.
         */
        assertAuthenticated() {
          if (!this.did)
            throw new Error("Not logged in");
        }
        //#endregion
        /** @deprecated use "this" instead */
        get api() {
          return this;
        }
        async getLabelDefinitions(prefs) {
          const dids = [...this.appLabelers];
          if (isBskyPrefs(prefs)) {
            dids.push(...prefs.moderationPrefs.labelers.map((l) => l.did));
          } else if (isModPrefs(prefs)) {
            dids.push(...prefs.labelers.map((l) => l.did));
          } else {
            dids.push(...prefs);
          }
          const labelers = await this.getLabelers({
            dids,
            detailed: true
          });
          const labelDefs = {};
          if (labelers.data) {
            for (const labeler of labelers.data.views) {
              labelDefs[labeler.creator.did] = (0, moderation_1.interpretLabelValueDefinitions)(labeler);
            }
          }
          return labelDefs;
        }
        async post(record) {
          record.createdAt || (record.createdAt = (/* @__PURE__ */ new Date()).toISOString());
          return this.app.bsky.feed.post.create({ repo: this.accountDid }, record);
        }
        async deletePost(postUri) {
          this.assertAuthenticated();
          const postUrip = new syntax_1.AtUri(postUri);
          return this.app.bsky.feed.post.delete({
            repo: postUrip.hostname,
            rkey: postUrip.rkey
          });
        }
        async like(uri, cid) {
          return this.app.bsky.feed.like.create({ repo: this.accountDid }, {
            subject: { uri, cid },
            createdAt: (/* @__PURE__ */ new Date()).toISOString()
          });
        }
        async deleteLike(likeUri) {
          this.assertAuthenticated();
          const likeUrip = new syntax_1.AtUri(likeUri);
          return this.app.bsky.feed.like.delete({
            repo: likeUrip.hostname,
            rkey: likeUrip.rkey
          });
        }
        async repost(uri, cid) {
          return this.app.bsky.feed.repost.create({ repo: this.accountDid }, {
            subject: { uri, cid },
            createdAt: (/* @__PURE__ */ new Date()).toISOString()
          });
        }
        async deleteRepost(repostUri) {
          this.assertAuthenticated();
          const repostUrip = new syntax_1.AtUri(repostUri);
          return this.app.bsky.feed.repost.delete({
            repo: repostUrip.hostname,
            rkey: repostUrip.rkey
          });
        }
        async follow(subjectDid) {
          return this.app.bsky.graph.follow.create({ repo: this.accountDid }, {
            subject: subjectDid,
            createdAt: (/* @__PURE__ */ new Date()).toISOString()
          });
        }
        async deleteFollow(followUri) {
          this.assertAuthenticated();
          const followUrip = new syntax_1.AtUri(followUri);
          return this.app.bsky.graph.follow.delete({
            repo: followUrip.hostname,
            rkey: followUrip.rkey
          });
        }
        /**
         * @note: Using this method will reset the whole profile record if it
         * previously contained invalid values (wrt to the profile lexicon).
         */
        async upsertProfile(updateFn) {
          const upsert = async () => {
            const repo = this.assertDid;
            const collection = "app.bsky.actor.profile";
            const existing = await this.com.atproto.repo.getRecord({ repo, collection, rkey: "self" }).catch((_) => void 0);
            const existingRecord = existing && predicate.isValidProfile(existing.data.value) ? existing.data.value : void 0;
            const updated = await updateFn(existingRecord);
            const validation = index_1.AppBskyActorProfile.validateRecord({
              $type: collection,
              ...updated
            });
            if (!validation.success) {
              throw validation.error;
            }
            await this.com.atproto.repo.putRecord({
              repo,
              collection,
              rkey: "self",
              record: validation.value,
              swapRecord: existing?.data.cid || null
            });
          };
          return (0, common_web_1.retry)(upsert, {
            maxRetries: 5,
            retryable: (e) => e instanceof index_1.ComAtprotoRepoPutRecord.InvalidSwapError
          });
        }
        async mute(actor) {
          return this.app.bsky.graph.muteActor({ actor });
        }
        async unmute(actor) {
          return this.app.bsky.graph.unmuteActor({ actor });
        }
        async muteModList(uri) {
          return this.app.bsky.graph.muteActorList({ list: uri });
        }
        async unmuteModList(uri) {
          return this.app.bsky.graph.unmuteActorList({ list: uri });
        }
        async blockModList(uri) {
          return this.app.bsky.graph.listblock.create({ repo: this.accountDid }, {
            subject: uri,
            createdAt: (/* @__PURE__ */ new Date()).toISOString()
          });
        }
        async unblockModList(uri) {
          const repo = this.accountDid;
          const listInfo = await this.app.bsky.graph.getList({
            list: uri,
            limit: 1
          });
          const blocked = listInfo.data.list.viewer?.blocked;
          if (blocked) {
            const { rkey } = new syntax_1.AtUri(blocked);
            return this.app.bsky.graph.listblock.delete({
              repo,
              rkey
            });
          }
        }
        async updateSeenNotifications(seenAt = (/* @__PURE__ */ new Date()).toISOString()) {
          return this.app.bsky.notification.updateSeen({ seenAt });
        }
        async getPreferences() {
          const prefs = {
            feeds: {
              saved: void 0,
              pinned: void 0
            },
            // @ts-ignore populating below
            savedFeeds: void 0,
            feedViewPrefs: {
              home: {
                ...FEED_VIEW_PREF_DEFAULTS
              }
            },
            threadViewPrefs: { ...THREAD_VIEW_PREF_DEFAULTS },
            moderationPrefs: {
              adultContentEnabled: false,
              labels: { ...labels_1.DEFAULT_LABEL_SETTINGS },
              labelers: this.appLabelers.map((did) => ({
                did,
                labels: {}
              })),
              mutedWords: [],
              hiddenPosts: []
            },
            birthDate: void 0,
            interests: {
              tags: []
            },
            bskyAppState: {
              queuedNudges: [],
              activeProgressGuide: void 0,
              nuxs: []
            },
            postInteractionSettings: {
              threadgateAllowRules: void 0,
              postgateEmbeddingRules: void 0
            },
            verificationPrefs: {
              hideBadges: false
            }
          };
          const res = await this.app.bsky.actor.getPreferences({});
          const labelPrefs = [];
          for (const pref of res.data.preferences) {
            if (predicate.isValidAdultContentPref(pref)) {
              prefs.moderationPrefs.adultContentEnabled = pref.enabled;
            } else if (predicate.isValidContentLabelPref(pref)) {
              const adjustedPref = adjustLegacyContentLabelPref(pref);
              labelPrefs.push(adjustedPref);
            } else if (predicate.isValidLabelersPref(pref)) {
              prefs.moderationPrefs.labelers = this.appLabelers.map((did) => ({ did, labels: {} })).concat(pref.labelers.map((labeler) => ({
                ...labeler,
                labels: {}
              })));
            } else if (predicate.isValidSavedFeedsPrefV2(pref)) {
              prefs.savedFeeds = pref.items;
            } else if (predicate.isValidSavedFeedsPref(pref)) {
              prefs.feeds.saved = pref.saved;
              prefs.feeds.pinned = pref.pinned;
            } else if (predicate.isValidPersonalDetailsPref(pref)) {
              if (pref.birthDate) {
                prefs.birthDate = new Date(pref.birthDate);
              }
            } else if (predicate.isValidFeedViewPref(pref)) {
              const { $type: _, feed, ...v } = pref;
              prefs.feedViewPrefs[feed] = { ...FEED_VIEW_PREF_DEFAULTS, ...v };
            } else if (predicate.isValidThreadViewPref(pref)) {
              const { $type: _, ...v } = pref;
              prefs.threadViewPrefs = { ...prefs.threadViewPrefs, ...v };
            } else if (predicate.isValidInterestsPref(pref)) {
              const { $type: _, ...v } = pref;
              prefs.interests = { ...prefs.interests, ...v };
            } else if (predicate.isValidMutedWordsPref(pref)) {
              prefs.moderationPrefs.mutedWords = pref.items;
              if (prefs.moderationPrefs.mutedWords.length) {
                prefs.moderationPrefs.mutedWords = prefs.moderationPrefs.mutedWords.map((word) => {
                  word.actorTarget = word.actorTarget || "all";
                  return word;
                });
              }
            } else if (predicate.isValidHiddenPostsPref(pref)) {
              prefs.moderationPrefs.hiddenPosts = pref.items;
            } else if (predicate.isValidBskyAppStatePref(pref)) {
              prefs.bskyAppState.queuedNudges = pref.queuedNudges || [];
              prefs.bskyAppState.activeProgressGuide = pref.activeProgressGuide;
              prefs.bskyAppState.nuxs = pref.nuxs || [];
            } else if (predicate.isValidPostInteractionSettingsPref(pref)) {
              prefs.postInteractionSettings.threadgateAllowRules = pref.threadgateAllowRules;
              prefs.postInteractionSettings.postgateEmbeddingRules = pref.postgateEmbeddingRules;
            } else if (predicate.isValidVerificationPrefs(pref)) {
              prefs.verificationPrefs = {
                hideBadges: pref.hideBadges
              };
            }
          }
          if (prefs.savedFeeds == null) {
            const { saved, pinned } = prefs.feeds;
            if (saved && pinned) {
              const uniqueMigratedSavedFeeds = /* @__PURE__ */ new Map();
              uniqueMigratedSavedFeeds.set("timeline", {
                id: common_web_1.TID.nextStr(),
                type: "timeline",
                value: "following",
                pinned: true
              });
              for (const uri of pinned) {
                const type = (0, util_1.getSavedFeedType)(uri);
                if (type === "unknown")
                  continue;
                uniqueMigratedSavedFeeds.set(uri, {
                  id: common_web_1.TID.nextStr(),
                  type,
                  value: uri,
                  pinned: true
                });
              }
              for (const uri of saved) {
                if (!uniqueMigratedSavedFeeds.has(uri)) {
                  const type = (0, util_1.getSavedFeedType)(uri);
                  if (type === "unknown")
                    continue;
                  uniqueMigratedSavedFeeds.set(uri, {
                    id: common_web_1.TID.nextStr(),
                    type,
                    value: uri,
                    pinned: false
                  });
                }
              }
              prefs.savedFeeds = Array.from(uniqueMigratedSavedFeeds.values());
            } else {
              prefs.savedFeeds = [
                {
                  id: common_web_1.TID.nextStr(),
                  type: "timeline",
                  value: "following",
                  pinned: true
                }
              ];
            }
            await this.overwriteSavedFeeds(prefs.savedFeeds);
          }
          for (const pref of labelPrefs) {
            if (pref.labelerDid) {
              const labeler = prefs.moderationPrefs.labelers.find((labeler2) => labeler2.did === pref.labelerDid);
              if (!labeler)
                continue;
              labeler.labels[pref.label] = pref.visibility;
            } else {
              prefs.moderationPrefs.labels[pref.label] = pref.visibility;
            }
          }
          prefs.moderationPrefs.labels = remapLegacyLabels(prefs.moderationPrefs.labels);
          this.configureLabelers(prefsArrayToLabelerDids(res.data.preferences));
          return prefs;
        }
        async overwriteSavedFeeds(savedFeeds) {
          savedFeeds.forEach(util_1.validateSavedFeed);
          const uniqueSavedFeeds = /* @__PURE__ */ new Map();
          savedFeeds.forEach((feed) => {
            if (uniqueSavedFeeds.has(feed.id)) {
              uniqueSavedFeeds.delete(feed.id);
            }
            uniqueSavedFeeds.set(feed.id, feed);
          });
          return this.updateSavedFeedsV2Preferences(() => Array.from(uniqueSavedFeeds.values()));
        }
        async updateSavedFeeds(savedFeedsToUpdate) {
          savedFeedsToUpdate.map(util_1.validateSavedFeed);
          return this.updateSavedFeedsV2Preferences((savedFeeds) => {
            return savedFeeds.map((savedFeed) => {
              const updatedVersion = savedFeedsToUpdate.find((updated) => savedFeed.id === updated.id);
              if (updatedVersion) {
                return {
                  ...savedFeed,
                  // only update pinned
                  pinned: updatedVersion.pinned
                };
              }
              return savedFeed;
            });
          });
        }
        async addSavedFeeds(savedFeeds) {
          const toSave = savedFeeds.map((f) => ({
            ...f,
            id: common_web_1.TID.nextStr()
          }));
          toSave.forEach(util_1.validateSavedFeed);
          return this.updateSavedFeedsV2Preferences((savedFeeds2) => [
            ...savedFeeds2,
            ...toSave
          ]);
        }
        async removeSavedFeeds(ids) {
          return this.updateSavedFeedsV2Preferences((savedFeeds) => [
            ...savedFeeds.filter((feed) => !ids.find((id) => feed.id === id))
          ]);
        }
        /**
         * @deprecated use `overwriteSavedFeeds`
         */
        async setSavedFeeds(saved, pinned) {
          return this.updateFeedPreferences(() => ({
            saved,
            pinned
          }));
        }
        /**
         * @deprecated use `addSavedFeeds`
         */
        async addSavedFeed(v) {
          return this.updateFeedPreferences((saved, pinned) => ({
            saved: [...saved.filter((uri) => uri !== v), v],
            pinned
          }));
        }
        /**
         * @deprecated use `removeSavedFeeds`
         */
        async removeSavedFeed(v) {
          return this.updateFeedPreferences((saved, pinned) => ({
            saved: saved.filter((uri) => uri !== v),
            pinned: pinned.filter((uri) => uri !== v)
          }));
        }
        /**
         * @deprecated use `addSavedFeeds` or `updateSavedFeeds`
         */
        async addPinnedFeed(v) {
          return this.updateFeedPreferences((saved, pinned) => ({
            saved: [...saved.filter((uri) => uri !== v), v],
            pinned: [...pinned.filter((uri) => uri !== v), v]
          }));
        }
        /**
         * @deprecated use `updateSavedFeeds` or `removeSavedFeeds`
         */
        async removePinnedFeed(v) {
          return this.updateFeedPreferences((saved, pinned) => ({
            saved,
            pinned: pinned.filter((uri) => uri !== v)
          }));
        }
        async setAdultContentEnabled(v) {
          await this.updatePreferences((prefs) => {
            const adultContentPref = prefs.findLast(predicate.isValidAdultContentPref) || {
              $type: "app.bsky.actor.defs#adultContentPref",
              enabled: v
            };
            adultContentPref.enabled = v;
            return prefs.filter((pref) => !index_1.AppBskyActorDefs.isAdultContentPref(pref)).concat(adultContentPref);
          });
        }
        async setContentLabelPref(key, value, labelerDid) {
          if (labelerDid) {
            (0, syntax_1.ensureValidDid)(labelerDid);
          }
          await this.updatePreferences((prefs) => {
            const labelPref = prefs.filter(predicate.isValidContentLabelPref).findLast((pref) => pref.label === key && pref.labelerDid === labelerDid) || {
              $type: "app.bsky.actor.defs#contentLabelPref",
              label: key,
              labelerDid,
              visibility: value
            };
            labelPref.visibility = value;
            let legacyLabelPref;
            if (index_1.AppBskyActorDefs.isContentLabelPref(labelPref)) {
              if (!labelPref.labelerDid) {
                const legacyLabelValue = {
                  "graphic-media": "gore",
                  porn: "nsfw",
                  sexual: "suggestive",
                  // Protect against using toString, hasOwnProperty, etc. as a label:
                  __proto__: null
                }[labelPref.label];
                if (legacyLabelValue) {
                  legacyLabelPref = prefs.filter(predicate.isValidContentLabelPref).findLast((pref) => pref.label === legacyLabelValue && pref.labelerDid === void 0) || {
                    $type: "app.bsky.actor.defs#contentLabelPref",
                    label: legacyLabelValue,
                    labelerDid: void 0,
                    visibility: value
                  };
                  legacyLabelPref.visibility = value;
                }
              }
            }
            return prefs.filter((pref) => !index_1.AppBskyActorDefs.isContentLabelPref(pref) || !(pref.label === key && pref.labelerDid === labelerDid)).concat(labelPref).filter((pref) => {
              if (!legacyLabelPref)
                return true;
              return !index_1.AppBskyActorDefs.isContentLabelPref(pref) || !(pref.label === legacyLabelPref.label && pref.labelerDid === void 0);
            }).concat(legacyLabelPref ? [legacyLabelPref] : []);
          });
        }
        async addLabeler(did) {
          const prefs = await this.updatePreferences((prefs2) => {
            const labelersPref = prefs2.findLast(predicate.isValidLabelersPref) || {
              $type: "app.bsky.actor.defs#labelersPref",
              labelers: []
            };
            if (!labelersPref.labelers.some((labeler) => labeler.did === did)) {
              labelersPref.labelers.push({ did });
            }
            return prefs2.filter((pref) => !index_1.AppBskyActorDefs.isLabelersPref(pref)).concat(labelersPref);
          });
          this.configureLabelers(prefsArrayToLabelerDids(prefs));
        }
        async removeLabeler(did) {
          const prefs = await this.updatePreferences((prefs2) => {
            const labelersPref = prefs2.findLast(predicate.isValidLabelersPref) || {
              $type: "app.bsky.actor.defs#labelersPref",
              labelers: []
            };
            labelersPref.labelers = labelersPref.labelers.filter((l) => l.did !== did);
            return prefs2.filter((pref) => !index_1.AppBskyActorDefs.isLabelersPref(pref)).concat(labelersPref);
          });
          this.configureLabelers(prefsArrayToLabelerDids(prefs));
        }
        async setPersonalDetails({ birthDate }) {
          await this.updatePreferences((prefs) => {
            const personalDetailsPref = prefs.findLast(predicate.isValidPersonalDetailsPref) || {
              $type: "app.bsky.actor.defs#personalDetailsPref"
            };
            personalDetailsPref.birthDate = birthDate instanceof Date ? birthDate.toISOString() : birthDate;
            return prefs.filter((pref) => !index_1.AppBskyActorDefs.isPersonalDetailsPref(pref)).concat(personalDetailsPref);
          });
        }
        async setFeedViewPrefs(feed, pref) {
          await this.updatePreferences((prefs) => {
            const existing = prefs.filter(predicate.isValidFeedViewPref).findLast((pref2) => pref2.feed === feed);
            return prefs.filter((p) => !index_1.AppBskyActorDefs.isFeedViewPref(p) || p.feed !== feed).concat({
              ...existing,
              ...pref,
              $type: "app.bsky.actor.defs#feedViewPref",
              feed
            });
          });
        }
        async setThreadViewPrefs(pref) {
          await this.updatePreferences((prefs) => {
            const existing = prefs.findLast(predicate.isValidThreadViewPref);
            return prefs.filter((p) => !index_1.AppBskyActorDefs.isThreadViewPref(p)).concat({
              ...existing,
              ...pref,
              $type: "app.bsky.actor.defs#threadViewPref"
            });
          });
        }
        async setInterestsPref(pref) {
          await this.updatePreferences((prefs) => {
            const existing = prefs.findLast(predicate.isValidInterestsPref);
            return prefs.filter((p) => !index_1.AppBskyActorDefs.isInterestsPref(p)).concat({
              ...existing,
              ...pref,
              $type: "app.bsky.actor.defs#interestsPref"
            });
          });
        }
        /**
         * Add a muted word to user preferences.
         */
        async addMutedWord(mutedWord) {
          const sanitizedValue = (0, util_1.sanitizeMutedWordValue)(mutedWord.value);
          if (!sanitizedValue)
            return;
          await this.updatePreferences((prefs) => {
            let mutedWordsPref = prefs.findLast(predicate.isValidMutedWordsPref);
            const newMutedWord = {
              id: common_web_1.TID.nextStr(),
              value: sanitizedValue,
              targets: mutedWord.targets || [],
              actorTarget: mutedWord.actorTarget || "all",
              expiresAt: mutedWord.expiresAt || void 0
            };
            if (mutedWordsPref) {
              mutedWordsPref.items.push(newMutedWord);
              mutedWordsPref.items = migrateLegacyMutedWordsItems(mutedWordsPref.items);
            } else {
              mutedWordsPref = {
                $type: "app.bsky.actor.defs#mutedWordsPref",
                items: [newMutedWord]
              };
            }
            return prefs.filter((p) => !index_1.AppBskyActorDefs.isMutedWordsPref(p)).concat(mutedWordsPref);
          });
        }
        /**
         * Convenience method to add muted words to user preferences
         */
        async addMutedWords(newMutedWords) {
          await Promise.all(newMutedWords.map((word) => this.addMutedWord(word)));
        }
        /**
         * @deprecated use `addMutedWords` or `addMutedWord` instead
         */
        async upsertMutedWords(mutedWords) {
          await this.addMutedWords(mutedWords);
        }
        /**
         * Update a muted word in user preferences.
         */
        async updateMutedWord(mutedWord) {
          await this.updatePreferences((prefs) => {
            const mutedWordsPref = prefs.findLast(predicate.isValidMutedWordsPref);
            if (mutedWordsPref) {
              mutedWordsPref.items = mutedWordsPref.items.map((existingItem) => {
                const match = matchMutedWord(existingItem, mutedWord);
                if (match) {
                  const updated = {
                    ...existingItem,
                    ...mutedWord
                  };
                  return {
                    id: existingItem.id || common_web_1.TID.nextStr(),
                    value: (0, util_1.sanitizeMutedWordValue)(updated.value) || existingItem.value,
                    targets: updated.targets || [],
                    actorTarget: updated.actorTarget || "all",
                    expiresAt: updated.expiresAt || void 0
                  };
                } else {
                  return existingItem;
                }
              });
              mutedWordsPref.items = migrateLegacyMutedWordsItems(mutedWordsPref.items);
              return prefs.filter((p) => !index_1.AppBskyActorDefs.isMutedWordsPref(p)).concat(mutedWordsPref);
            }
            return prefs;
          });
        }
        /**
         * Remove a muted word from user preferences.
         */
        async removeMutedWord(mutedWord) {
          await this.updatePreferences((prefs) => {
            const mutedWordsPref = prefs.findLast(predicate.isValidMutedWordsPref);
            if (mutedWordsPref) {
              for (let i = 0; i < mutedWordsPref.items.length; i++) {
                const match = matchMutedWord(mutedWordsPref.items[i], mutedWord);
                if (match) {
                  mutedWordsPref.items.splice(i, 1);
                  break;
                }
              }
              mutedWordsPref.items = migrateLegacyMutedWordsItems(mutedWordsPref.items);
              return prefs.filter((p) => !index_1.AppBskyActorDefs.isMutedWordsPref(p)).concat(mutedWordsPref);
            }
            return prefs;
          });
        }
        /**
         * Convenience method to remove muted words from user preferences
         */
        async removeMutedWords(mutedWords) {
          await Promise.all(mutedWords.map((word) => this.removeMutedWord(word)));
        }
        async hidePost(postUri) {
          await this.updateHiddenPost(postUri, "hide");
        }
        async unhidePost(postUri) {
          await this.updateHiddenPost(postUri, "unhide");
        }
        async bskyAppQueueNudges(nudges) {
          await this.updatePreferences((prefs) => {
            const pref = prefs.findLast(predicate.isValidBskyAppStatePref) || {
              $type: "app.bsky.actor.defs#bskyAppStatePref"
            };
            pref.queuedNudges = (pref.queuedNudges || []).concat(nudges);
            return prefs.filter((p) => !index_1.AppBskyActorDefs.isBskyAppStatePref(p)).concat(pref);
          });
        }
        async bskyAppDismissNudges(nudges) {
          await this.updatePreferences((prefs) => {
            const pref = prefs.findLast(predicate.isValidBskyAppStatePref) || {
              $type: "app.bsky.actor.defs#bskyAppStatePref"
            };
            nudges = Array.isArray(nudges) ? nudges : [nudges];
            pref.queuedNudges = (pref.queuedNudges || []).filter((nudge) => !nudges.includes(nudge));
            return prefs.filter((p) => !index_1.AppBskyActorDefs.isBskyAppStatePref(p)).concat(pref);
          });
        }
        async bskyAppSetActiveProgressGuide(guide) {
          if (guide) {
            const result = index_1.AppBskyActorDefs.validateBskyAppProgressGuide(guide);
            if (!result.success)
              throw result.error;
          }
          await this.updatePreferences((prefs) => {
            const pref = prefs.findLast(predicate.isValidBskyAppStatePref) || {
              $type: "app.bsky.actor.defs#bskyAppStatePref"
            };
            pref.activeProgressGuide = guide;
            return prefs.filter((p) => !index_1.AppBskyActorDefs.isBskyAppStatePref(p)).concat(pref);
          });
        }
        /**
         * Insert or update a NUX in user prefs
         */
        async bskyAppUpsertNux(nux) {
          (0, util_1.validateNux)(nux);
          await this.updatePreferences((prefs) => {
            const pref = prefs.findLast(predicate.isValidBskyAppStatePref) || {
              $type: "app.bsky.actor.defs#bskyAppStatePref"
            };
            pref.nuxs = pref.nuxs || [];
            const existing = pref.nuxs?.find((n) => {
              return n.id === nux.id;
            });
            let next;
            if (existing) {
              next = {
                id: existing.id,
                completed: nux.completed,
                data: nux.data,
                expiresAt: nux.expiresAt
              };
            } else {
              next = nux;
            }
            pref.nuxs = pref.nuxs.filter((n) => n.id !== nux.id).concat(next);
            return prefs.filter((p) => !index_1.AppBskyActorDefs.isBskyAppStatePref(p)).concat(pref);
          });
        }
        /**
         * Removes NUXs from user preferences.
         */
        async bskyAppRemoveNuxs(ids) {
          await this.updatePreferences((prefs) => {
            const pref = prefs.findLast(predicate.isValidBskyAppStatePref) || {
              $type: "app.bsky.actor.defs#bskyAppStatePref"
            };
            pref.nuxs = (pref.nuxs || []).filter((nux) => !ids.includes(nux.id));
            return prefs.filter((p) => !index_1.AppBskyActorDefs.isBskyAppStatePref(p)).concat(pref);
          });
        }
        async setPostInteractionSettings(settings) {
          const result = index_1.AppBskyActorDefs.validatePostInteractionSettingsPref(settings);
          if (!result.success)
            throw result.error;
          await this.updatePreferences((prefs) => {
            const pref = prefs.findLast(predicate.isValidPostInteractionSettingsPref) || {
              $type: "app.bsky.actor.defs#postInteractionSettingsPref"
            };
            pref.threadgateAllowRules = settings.threadgateAllowRules;
            pref.postgateEmbeddingRules = settings.postgateEmbeddingRules;
            return prefs.filter((p) => !index_1.AppBskyActorDefs.isPostInteractionSettingsPref(p)).concat(pref);
          });
        }
        async setVerificationPrefs(settings) {
          const result = index_1.AppBskyActorDefs.validateVerificationPrefs(settings);
          if (!result.success)
            throw result.error;
          await this.updatePreferences((prefs) => {
            const pref = prefs.findLast(predicate.isValidVerificationPrefs) || {
              $type: "app.bsky.actor.defs#verificationPrefs",
              hideBadges: false
            };
            pref.hideBadges = settings.hideBadges;
            return prefs.filter((p) => !index_1.AppBskyActorDefs.isVerificationPrefs(p)).concat(pref);
          });
        }
        /**
         * This function updates the preferences of a user and allows for a callback function to be executed
         * before the update.
         * @param cb - cb is a callback function that takes in a single parameter of type
         * AppBskyActorDefs.Preferences and returns either a boolean or void. This callback function is used to
         * update the preferences of the user. The function is called with the current preferences as an
         * argument and if the callback returns false, the preferences are not updated.
         */
        async updatePreferences(cb) {
          try {
            await __classPrivateFieldGet(this, _Agent_prefsLock, "f").acquireAsync();
            const res = await this.app.bsky.actor.getPreferences({});
            const newPrefs = cb(res.data.preferences);
            if (newPrefs === false) {
              return res.data.preferences;
            }
            await this.app.bsky.actor.putPreferences({
              preferences: newPrefs
            });
            return newPrefs;
          } finally {
            __classPrivateFieldGet(this, _Agent_prefsLock, "f").release();
          }
        }
        async updateHiddenPost(postUri, action) {
          await this.updatePreferences((prefs) => {
            const pref = prefs.findLast(predicate.isValidHiddenPostsPref) || {
              $type: "app.bsky.actor.defs#hiddenPostsPref",
              items: []
            };
            const hiddenItems = new Set(pref.items);
            if (action === "hide")
              hiddenItems.add(postUri);
            else
              hiddenItems.delete(postUri);
            pref.items = [...hiddenItems];
            return prefs.filter((p) => !index_1.AppBskyActorDefs.isHiddenPostsPref(p)).concat(pref);
          });
        }
        /**
         * A helper specifically for updating feed preferences
         */
        async updateFeedPreferences(cb) {
          let res;
          await this.updatePreferences((prefs) => {
            const feedsPref = prefs.findLast(predicate.isValidSavedFeedsPref) || {
              $type: "app.bsky.actor.defs#savedFeedsPref",
              saved: [],
              pinned: []
            };
            res = cb(feedsPref.saved, feedsPref.pinned);
            feedsPref.saved = res.saved;
            feedsPref.pinned = res.pinned;
            return prefs.filter((pref) => !index_1.AppBskyActorDefs.isSavedFeedsPref(pref)).concat(feedsPref);
          });
          return res;
        }
        async updateSavedFeedsV2Preferences(cb) {
          let maybeMutatedSavedFeeds = [];
          await this.updatePreferences((prefs) => {
            const existingV2Pref = prefs.findLast(predicate.isValidSavedFeedsPrefV2) || {
              $type: "app.bsky.actor.defs#savedFeedsPrefV2",
              items: []
            };
            const newSavedFeeds = cb(existingV2Pref.items);
            existingV2Pref.items = [...newSavedFeeds].sort((a, b) => (
              // @NOTE: preserve order of items with the same pinned status
              a.pinned === b.pinned ? 0 : a.pinned ? -1 : 1
            ));
            maybeMutatedSavedFeeds = newSavedFeeds;
            let updatedPrefs = prefs.filter((pref) => !index_1.AppBskyActorDefs.isSavedFeedsPrefV2(pref)).concat(existingV2Pref);
            let existingV1Pref = prefs.findLast(predicate.isValidSavedFeedsPref);
            if (existingV1Pref) {
              const { saved, pinned } = existingV1Pref;
              const v2Compat = (0, util_1.savedFeedsToUriArrays)(
                // v1 only supports feeds and lists
                existingV2Pref.items.filter((i) => ["feed", "list"].includes(i.type))
              );
              existingV1Pref = {
                ...existingV1Pref,
                saved: Array.from(/* @__PURE__ */ new Set([...saved, ...v2Compat.saved])),
                pinned: Array.from(/* @__PURE__ */ new Set([...pinned, ...v2Compat.pinned]))
              };
              updatedPrefs = updatedPrefs.filter((pref) => !index_1.AppBskyActorDefs.isSavedFeedsPref(pref)).concat(existingV1Pref);
            }
            return updatedPrefs;
          });
          return maybeMutatedSavedFeeds;
        }
      };
      exports.Agent = Agent2;
      _Agent_prefsLock = /* @__PURE__ */ new WeakMap();
      Object.defineProperty(Agent2, "appLabelers", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: [const_1.BSKY_LABELER_DID]
      });
      function adjustLegacyContentLabelPref(pref) {
        let visibility = pref.visibility;
        if (visibility === "show") {
          visibility = "ignore";
        }
        return { ...pref, visibility };
      }
      function remapLegacyLabels(labels) {
        const _labels = { ...labels };
        const legacyToNewMap = {
          gore: "graphic-media",
          nsfw: "porn",
          suggestive: "sexual"
        };
        for (const labelName in _labels) {
          const newLabelName = legacyToNewMap[labelName];
          if (newLabelName) {
            _labels[newLabelName] = _labels[labelName];
          }
        }
        return _labels;
      }
      function prefsArrayToLabelerDids(prefs) {
        const labelersPref = prefs.findLast(predicate.isValidLabelersPref);
        let dids = [];
        if (labelersPref) {
          dids = labelersPref.labelers.map((labeler) => labeler.did);
        }
        return dids;
      }
      function isBskyPrefs(v) {
        return v && typeof v === "object" && "moderationPrefs" in v && isModPrefs(v.moderationPrefs);
      }
      function isModPrefs(v) {
        return v && typeof v === "object" && "labelers" in v;
      }
      function migrateLegacyMutedWordsItems(items) {
        return items.map((item) => ({
          ...item,
          id: item.id || common_web_1.TID.nextStr()
        }));
      }
      function matchMutedWord(existingWord, newWord) {
        const existingId = existingWord.id;
        const matchById = existingId && existingId === newWord.id;
        const legacyMatchByValue = !existingId && existingWord.value === newWord.value;
        return matchById || legacyMatchByValue;
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/atp-agent.js
  var require_atp_agent = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/atp-agent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.CredentialSession = exports.AtpAgent = void 0;
      var common_web_1 = require_dist16();
      var xrpc_1 = require_dist19();
      var agent_1 = require_agent();
      var client_1 = require_client3();
      var lexicons_1 = require_lexicons2();
      var ReadableStream = globalThis.ReadableStream;
      var AtpAgent = class _AtpAgent extends agent_1.Agent {
        constructor(options) {
          const sessionManager = options instanceof CredentialSession ? options : new CredentialSession(new URL(options.service), options.fetch, options.persistSession);
          super(sessionManager);
          Object.defineProperty(this, "sessionManager", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.sessionManager = sessionManager;
          if (!(options instanceof CredentialSession) && options.headers) {
            for (const [key, value] of options.headers) {
              this.setHeader(key, value);
            }
          }
        }
        clone() {
          return this.copyInto(new _AtpAgent(this.sessionManager));
        }
        get session() {
          return this.sessionManager.session;
        }
        get hasSession() {
          return this.sessionManager.hasSession;
        }
        get did() {
          return this.sessionManager.did;
        }
        get serviceUrl() {
          return this.sessionManager.serviceUrl;
        }
        get pdsUrl() {
          return this.sessionManager.pdsUrl;
        }
        get dispatchUrl() {
          return this.sessionManager.dispatchUrl;
        }
        /** @deprecated use {@link serviceUrl} instead */
        get service() {
          return this.serviceUrl;
        }
        get persistSession() {
          throw new Error('Cannot set persistSession directly. "persistSession" is defined through the constructor and will be invoked automatically when session data changes.');
        }
        set persistSession(v) {
          throw new Error('Cannot set persistSession directly. "persistSession" must be defined in the constructor and can no longer be changed.');
        }
        /** @deprecated use {@link AtpAgent.serviceUrl} instead */
        getServiceUrl() {
          return this.serviceUrl;
        }
        async resumeSession(session) {
          return this.sessionManager.resumeSession(session);
        }
        async createAccount(data, opts) {
          return this.sessionManager.createAccount(data, opts);
        }
        async login(opts) {
          return this.sessionManager.login(opts);
        }
        async logout() {
          return this.sessionManager.logout();
        }
      };
      exports.AtpAgent = AtpAgent;
      var CredentialSession = class {
        constructor(serviceUrl, fetch2 = globalThis.fetch, persistSession) {
          Object.defineProperty(this, "serviceUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: serviceUrl
          });
          Object.defineProperty(this, "fetch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: fetch2
          });
          Object.defineProperty(this, "persistSession", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: persistSession
          });
          Object.defineProperty(this, "pdsUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "session", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "refreshSessionPromise", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "server", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new client_1.ComAtprotoServerNS(
              // Note that the use of the codegen "schemas" (to instantiate `this.api`),
              // as well as the use of `ComAtprotoServerNS` will cause this class to
              // reference (way) more code than it actually needs. It is not possible,
              // with the current state of the codegen, to generate a client that only
              // includes the methods that are actually used by this class. This is a
              // known limitation that should be addressed in a future version of the
              // codegen.
              new xrpc_1.XrpcClient((url, init) => {
                return (0, this.fetch)(new URL(url, this.serviceUrl), init);
              }, lexicons_1.schemas)
            )
          });
        }
        get did() {
          return this.session?.did;
        }
        get dispatchUrl() {
          return this.pdsUrl || this.serviceUrl;
        }
        get hasSession() {
          return !!this.session;
        }
        /**
         * Sets a WhatWG "fetch()" function to be used for making HTTP requests.
         */
        setFetch(fetch2 = globalThis.fetch) {
          this.fetch = fetch2;
        }
        async fetchHandler(url, init) {
          await this.refreshSessionPromise;
          const initialUri = new URL(url, this.dispatchUrl);
          const initialReq = new Request(initialUri, init);
          const initialToken = this.session?.accessJwt;
          if (!initialToken || initialReq.headers.has("authorization")) {
            return (0, this.fetch)(initialReq);
          }
          initialReq.headers.set("authorization", `Bearer ${initialToken}`);
          const initialRes = await (0, this.fetch)(initialReq);
          if (!this.session?.refreshJwt) {
            return initialRes;
          }
          const isExpiredToken = await isErrorResponse(initialRes, [400], ["ExpiredToken"]);
          if (!isExpiredToken) {
            return initialRes;
          }
          try {
            await this.refreshSession();
          } catch {
            return initialRes;
          }
          if (init?.signal?.aborted) {
            return initialRes;
          }
          if (ReadableStream && init?.body instanceof ReadableStream) {
            return initialRes;
          }
          const updatedToken = this.session?.accessJwt;
          if (!updatedToken || updatedToken === initialToken) {
            return initialRes;
          }
          await initialRes.body?.cancel();
          const updatedUri = new URL(url, this.dispatchUrl);
          const updatedReq = new Request(updatedUri, init);
          updatedReq.headers.set("authorization", `Bearer ${updatedToken}`);
          return await (0, this.fetch)(updatedReq);
        }
        /**
         * Create a new account and hydrate its session in this agent.
         */
        async createAccount(data, opts) {
          try {
            const res = await this.server.createAccount(data, opts);
            this.session = {
              accessJwt: res.data.accessJwt,
              refreshJwt: res.data.refreshJwt,
              handle: res.data.handle,
              did: res.data.did,
              email: data.email,
              emailConfirmed: false,
              emailAuthFactor: false,
              active: true
            };
            this.persistSession?.("create", this.session);
            this._updateApiEndpoint(res.data.didDoc);
            return res;
          } catch (e) {
            this.session = void 0;
            this.persistSession?.("create-failed", void 0);
            throw e;
          }
        }
        /**
         * Start a new session with this agent.
         */
        async login(opts) {
          try {
            const res = await this.server.createSession({
              identifier: opts.identifier,
              password: opts.password,
              authFactorToken: opts.authFactorToken,
              allowTakendown: opts.allowTakendown
            });
            this.session = {
              accessJwt: res.data.accessJwt,
              refreshJwt: res.data.refreshJwt,
              handle: res.data.handle,
              did: res.data.did,
              email: res.data.email,
              emailConfirmed: res.data.emailConfirmed,
              emailAuthFactor: res.data.emailAuthFactor,
              active: res.data.active ?? true,
              status: res.data.status
            };
            this._updateApiEndpoint(res.data.didDoc);
            this.persistSession?.("create", this.session);
            return res;
          } catch (e) {
            this.session = void 0;
            this.persistSession?.("create-failed", void 0);
            throw e;
          }
        }
        async logout() {
          if (this.session) {
            try {
              await this.server.deleteSession(void 0, {
                headers: {
                  authorization: `Bearer ${this.session.refreshJwt}`
                }
              });
            } catch {
            } finally {
              this.session = void 0;
              this.persistSession?.("expired", void 0);
            }
          }
        }
        /**
         * Resume a pre-existing session with this agent.
         */
        async resumeSession(session) {
          this.session = session;
          try {
            const res = await this.server.getSession(void 0, {
              headers: { authorization: `Bearer ${session.accessJwt}` }
            }).catch(async (err) => {
              if (err instanceof xrpc_1.XRPCError && ["ExpiredToken", "InvalidToken"].includes(err.error) && session.refreshJwt) {
                try {
                  const res2 = await this.server.refreshSession(void 0, {
                    headers: { authorization: `Bearer ${session.refreshJwt}` }
                  });
                  session.accessJwt = res2.data.accessJwt;
                  session.refreshJwt = res2.data.refreshJwt;
                  return this.server.getSession(void 0, {
                    headers: { authorization: `Bearer ${session.accessJwt}` }
                  });
                } catch {
                }
              }
              throw err;
            });
            if (res.data.did !== session.did) {
              throw new xrpc_1.XRPCError(xrpc_1.ResponseType.InvalidRequest, "Invalid session", "InvalidDID");
            }
            session.email = res.data.email;
            session.handle = res.data.handle;
            session.emailConfirmed = res.data.emailConfirmed;
            session.emailAuthFactor = res.data.emailAuthFactor;
            session.active = res.data.active ?? true;
            session.status = res.data.status;
            if (this.session === session) {
              this._updateApiEndpoint(res.data.didDoc);
              this.persistSession?.("update", session);
            }
            return res;
          } catch (err) {
            if (this.session === session) {
              this.session = void 0;
              this.persistSession?.(err instanceof xrpc_1.XRPCError && ["ExpiredToken", "InvalidToken"].includes(err.error) ? "expired" : "network-error", void 0);
            }
            throw err;
          }
        }
        /**
         * Internal helper to refresh sessions
         * - Wraps the actual implementation in a promise-guard to ensure only
         *   one refresh is attempted at a time.
         */
        async refreshSession() {
          return this.refreshSessionPromise || (this.refreshSessionPromise = this._refreshSessionInner().finally(() => {
            this.refreshSessionPromise = void 0;
          }));
        }
        /**
         * Internal helper to refresh sessions (actual behavior)
         */
        async _refreshSessionInner() {
          if (!this.session?.refreshJwt) {
            return;
          }
          try {
            const res = await this.server.refreshSession(void 0, {
              headers: { authorization: `Bearer ${this.session.refreshJwt}` }
            });
            this.session = {
              ...this.session,
              accessJwt: res.data.accessJwt,
              refreshJwt: res.data.refreshJwt,
              handle: res.data.handle,
              did: res.data.did
            };
            this._updateApiEndpoint(res.data.didDoc);
            this.persistSession?.("update", this.session);
          } catch (err) {
            if (err instanceof xrpc_1.XRPCError && err.error && ["ExpiredToken", "InvalidToken"].includes(err.error)) {
              this.session = void 0;
              this.persistSession?.("expired", void 0);
            }
          }
        }
        /**
         * Helper to update the pds endpoint dynamically.
         *
         * The session methods (create, resume, refresh) may respond with the user's
         * did document which contains the user's canonical PDS endpoint. That endpoint
         * may differ from the endpoint used to contact the server. We capture that
         * PDS endpoint and update the client to use that given endpoint for future
         * requests. (This helps ensure smooth migrations between PDSes, especially
         * when the PDSes are operated by a single org.)
         */
        _updateApiEndpoint(didDoc) {
          if ((0, common_web_1.isValidDidDoc)(didDoc)) {
            const endpoint = (0, common_web_1.getPdsEndpoint)(didDoc);
            this.pdsUrl = endpoint ? new URL(endpoint) : void 0;
          } else {
            this.pdsUrl = void 0;
          }
        }
      };
      exports.CredentialSession = CredentialSession;
      function isErrorObject(v) {
        return xrpc_1.errorResponseBody.safeParse(v).success;
      }
      async function isErrorResponse(response, status, errorNames) {
        if (!status.includes(response.status))
          return false;
        try {
          const json = await peekJson(response, 10 * 1024);
          return isErrorObject(json) && errorNames.includes(json.error);
        } catch (err) {
          return false;
        }
      }
      async function peekJson(response, maxSize = Infinity) {
        if (extractType(response) !== "application/json")
          throw new Error("Not JSON");
        if (extractLength(response) > maxSize)
          throw new Error("Response too large");
        return response.clone().json();
      }
      function extractLength({ headers }) {
        return headers.get("Content-Length") ? Number(headers.get("Content-Length")) : NaN;
      }
      function extractType({ headers }) {
        return headers.get("Content-Type")?.split(";")[0]?.trim();
      }
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/bsky-agent.js
  var require_bsky_agent = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/bsky-agent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BskyAgent = void 0;
      var atp_agent_1 = require_atp_agent();
      var BskyAgent = class _BskyAgent extends atp_agent_1.AtpAgent {
        clone() {
          if (this.constructor === _BskyAgent) {
            const agent = new _BskyAgent(this.sessionManager);
            return this.copyInto(agent);
          }
          throw new TypeError("Cannot clone a subclass of BskyAgent");
        }
      };
      exports.BskyAgent = BskyAgent;
    }
  });

  // node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/index.js
  var require_dist20 = __commonJS({
    "node_modules/.pnpm/@atproto+api@0.15.8/node_modules/@atproto/api/dist/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.lexicons = exports.default = exports.BskyAgent = exports.CredentialSession = exports.AtpAgent = exports.Agent = exports.LABELS = exports.DEFAULT_LABEL_SETTINGS = exports.asPredicate = exports.schemas = exports.parseLanguage = exports.stringifyLex = exports.lexToJson = exports.jsonToLex = exports.jsonStringToLex = exports.BlobRef = exports.AtUri = void 0;
      var lexicon_1 = require_dist18();
      var lexicons_1 = require_lexicons2();
      var syntax_1 = require_dist12();
      Object.defineProperty(exports, "AtUri", { enumerable: true, get: function() {
        return syntax_1.AtUri;
      } });
      var lexicon_2 = require_dist18();
      Object.defineProperty(exports, "BlobRef", { enumerable: true, get: function() {
        return lexicon_2.BlobRef;
      } });
      Object.defineProperty(exports, "jsonStringToLex", { enumerable: true, get: function() {
        return lexicon_2.jsonStringToLex;
      } });
      Object.defineProperty(exports, "jsonToLex", { enumerable: true, get: function() {
        return lexicon_2.jsonToLex;
      } });
      Object.defineProperty(exports, "lexToJson", { enumerable: true, get: function() {
        return lexicon_2.lexToJson;
      } });
      Object.defineProperty(exports, "stringifyLex", { enumerable: true, get: function() {
        return lexicon_2.stringifyLex;
      } });
      var common_web_1 = require_dist16();
      Object.defineProperty(exports, "parseLanguage", { enumerable: true, get: function() {
        return common_web_1.parseLanguage;
      } });
      __exportStar(require_types6(), exports);
      __exportStar(require_const(), exports);
      __exportStar(require_util15(), exports);
      __exportStar(require_client3(), exports);
      var lexicons_2 = require_lexicons2();
      Object.defineProperty(exports, "schemas", { enumerable: true, get: function() {
        return lexicons_2.schemas;
      } });
      var util_1 = require_util14();
      Object.defineProperty(exports, "asPredicate", { enumerable: true, get: function() {
        return util_1.asPredicate;
      } });
      __exportStar(require_rich_text(), exports);
      __exportStar(require_sanitization(), exports);
      __exportStar(require_unicode(), exports);
      __exportStar(require_util17(), exports);
      __exportStar(require_moderation(), exports);
      __exportStar(require_types8(), exports);
      __exportStar(require_mocker(), exports);
      var labels_1 = require_labels();
      Object.defineProperty(exports, "DEFAULT_LABEL_SETTINGS", { enumerable: true, get: function() {
        return labels_1.DEFAULT_LABEL_SETTINGS;
      } });
      Object.defineProperty(exports, "LABELS", { enumerable: true, get: function() {
        return labels_1.LABELS;
      } });
      var agent_1 = require_agent();
      Object.defineProperty(exports, "Agent", { enumerable: true, get: function() {
        return agent_1.Agent;
      } });
      var atp_agent_1 = require_atp_agent();
      Object.defineProperty(exports, "AtpAgent", { enumerable: true, get: function() {
        return atp_agent_1.AtpAgent;
      } });
      var atp_agent_2 = require_atp_agent();
      Object.defineProperty(exports, "CredentialSession", { enumerable: true, get: function() {
        return atp_agent_2.CredentialSession;
      } });
      var bsky_agent_1 = require_bsky_agent();
      Object.defineProperty(exports, "BskyAgent", { enumerable: true, get: function() {
        return bsky_agent_1.BskyAgent;
      } });
      var atp_agent_3 = require_atp_agent();
      Object.defineProperty(exports, "default", { enumerable: true, get: function() {
        return atp_agent_3.AtpAgent;
      } });
      exports.lexicons = new lexicon_1.Lexicons(lexicons_1.lexicons);
    }
  });

  // node_modules/.pnpm/react@19.1.0/node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/.pnpm/react@19.1.0/node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      (function() {
        function getComponentNameFromType(type) {
          if (null == type) return null;
          if ("function" === typeof type)
            return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
          if ("string" === typeof type) return type;
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
            case REACT_ACTIVITY_TYPE:
              return "Activity";
          }
          if ("object" === typeof type)
            switch ("number" === typeof type.tag && console.error(
              "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
            ), type.$$typeof) {
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_CONTEXT_TYPE:
                return (type.displayName || "Context") + ".Provider";
              case REACT_CONSUMER_TYPE:
                return (type._context.displayName || "Context") + ".Consumer";
              case REACT_FORWARD_REF_TYPE:
                var innerType = type.render;
                type = type.displayName;
                type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
                return type;
              case REACT_MEMO_TYPE:
                return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE:
                innerType = type._payload;
                type = type._init;
                try {
                  return getComponentNameFromType(type(innerType));
                } catch (x) {
                }
            }
          return null;
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          try {
            testStringCoercion(value);
            var JSCompiler_inline_result = false;
          } catch (e) {
            JSCompiler_inline_result = true;
          }
          if (JSCompiler_inline_result) {
            JSCompiler_inline_result = console;
            var JSCompiler_temp_const = JSCompiler_inline_result.error;
            var JSCompiler_inline_result$jscomp$0 = "function" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            JSCompiler_temp_const.call(
              JSCompiler_inline_result,
              "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
              JSCompiler_inline_result$jscomp$0
            );
            return testStringCoercion(value);
          }
        }
        function getTaskName(type) {
          if (type === REACT_FRAGMENT_TYPE) return "<>";
          if ("object" === typeof type && null !== type && type.$$typeof === REACT_LAZY_TYPE)
            return "<...>";
          try {
            var name2 = getComponentNameFromType(type);
            return name2 ? "<" + name2 + ">" : "<...>";
          } catch (x) {
            return "<...>";
          }
        }
        function getOwner() {
          var dispatcher = ReactSharedInternals.A;
          return null === dispatcher ? null : dispatcher.getOwner();
        }
        function UnknownOwner() {
          return Error("react-stack-top-frame");
        }
        function hasValidKey(config) {
          if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) return false;
          }
          return void 0 !== config.key;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          function warnAboutAccessingKey() {
            specialPropKeyWarningShown || (specialPropKeyWarningShown = true, console.error(
              "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",
              displayName
            ));
          }
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function elementRefGetterWithDeprecationWarning() {
          var componentName = getComponentNameFromType(this.type);
          didWarnAboutElementRef[componentName] || (didWarnAboutElementRef[componentName] = true, console.error(
            "Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."
          ));
          componentName = this.props.ref;
          return void 0 !== componentName ? componentName : null;
        }
        function ReactElement(type, key, self, source, owner, props, debugStack, debugTask) {
          self = props.ref;
          type = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            props,
            _owner: owner
          };
          null !== (void 0 !== self ? self : null) ? Object.defineProperty(type, "ref", {
            enumerable: false,
            get: elementRefGetterWithDeprecationWarning
          }) : Object.defineProperty(type, "ref", { enumerable: false, value: null });
          type._store = {};
          Object.defineProperty(type._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: 0
          });
          Object.defineProperty(type, "_debugInfo", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: null
          });
          Object.defineProperty(type, "_debugStack", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: debugStack
          });
          Object.defineProperty(type, "_debugTask", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: debugTask
          });
          Object.freeze && (Object.freeze(type.props), Object.freeze(type));
          return type;
        }
        function jsxDEVImpl(type, config, maybeKey, isStaticChildren, source, self, debugStack, debugTask) {
          var children = config.children;
          if (void 0 !== children)
            if (isStaticChildren)
              if (isArrayImpl(children)) {
                for (isStaticChildren = 0; isStaticChildren < children.length; isStaticChildren++)
                  validateChildKeys(children[isStaticChildren]);
                Object.freeze && Object.freeze(children);
              } else
                console.error(
                  "React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead."
                );
            else validateChildKeys(children);
          if (hasOwnProperty.call(config, "key")) {
            children = getComponentNameFromType(type);
            var keys = Object.keys(config).filter(function(k) {
              return "key" !== k;
            });
            isStaticChildren = 0 < keys.length ? "{key: someKey, " + keys.join(": ..., ") + ": ...}" : "{key: someKey}";
            didWarnAboutKeySpread[children + isStaticChildren] || (keys = 0 < keys.length ? "{" + keys.join(": ..., ") + ": ...}" : "{}", console.error(
              'A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />',
              isStaticChildren,
              children,
              keys,
              children
            ), didWarnAboutKeySpread[children + isStaticChildren] = true);
          }
          children = null;
          void 0 !== maybeKey && (checkKeyStringCoercion(maybeKey), children = "" + maybeKey);
          hasValidKey(config) && (checkKeyStringCoercion(config.key), children = "" + config.key);
          if ("key" in config) {
            maybeKey = {};
            for (var propName in config)
              "key" !== propName && (maybeKey[propName] = config[propName]);
          } else maybeKey = config;
          children && defineKeyPropWarningGetter(
            maybeKey,
            "function" === typeof type ? type.displayName || type.name || "Unknown" : type
          );
          return ReactElement(
            type,
            children,
            self,
            source,
            getOwner(),
            maybeKey,
            debugStack,
            debugTask
          );
        }
        function validateChildKeys(node) {
          "object" === typeof node && null !== node && node.$$typeof === REACT_ELEMENT_TYPE && node._store && (node._store.validated = 1);
        }
        var React2 = require_react(), REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        Symbol.for("react.provider");
        var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_ACTIVITY_TYPE = Symbol.for("react.activity"), REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), ReactSharedInternals = React2.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, hasOwnProperty = Object.prototype.hasOwnProperty, isArrayImpl = Array.isArray, createTask = console.createTask ? console.createTask : function() {
          return null;
        };
        React2 = {
          "react-stack-bottom-frame": function(callStackForError) {
            return callStackForError();
          }
        };
        var specialPropKeyWarningShown;
        var didWarnAboutElementRef = {};
        var unknownOwnerDebugStack = React2["react-stack-bottom-frame"].bind(
          React2,
          UnknownOwner
        )();
        var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));
        var didWarnAboutKeySpread = {};
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.jsx = function(type, config, maybeKey, source, self) {
          var trackActualOwner = 1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
          return jsxDEVImpl(
            type,
            config,
            maybeKey,
            false,
            source,
            self,
            trackActualOwner ? Error("react-stack-top-frame") : unknownOwnerDebugStack,
            trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask
          );
        };
        exports.jsxs = function(type, config, maybeKey, source, self) {
          var trackActualOwner = 1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
          return jsxDEVImpl(
            type,
            config,
            maybeKey,
            true,
            source,
            self,
            trackActualOwner ? Error("react-stack-top-frame") : unknownOwnerDebugStack,
            trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask
          );
        };
      })();
    }
  });

  // node_modules/.pnpm/react@19.1.0/node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/.pnpm/react@19.1.0/node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // lib/app.tsx
  var import_react = __toESM(require_react());
  var import_client = __toESM(require_client());

  // lib/oauth-client.tsx
  var import_oauth_client_browser = __toESM(require_dist15());
  var fetchWithLies = async (oatProxyUrl, input, init) => {
    let request;
    if (typeof input === "string" || input instanceof URL) {
      request = new Request(input, init);
    } else {
      request = input;
    }
    if (request.url.includes("plc.directory") || // did:plc
    request.url.endsWith("did.json")) {
      const res = await fetch(request, init);
      if (!res.ok) {
        return res;
      }
      const data = await res.json();
      const service = data.service.find((s) => s.id === "#atproto_pds");
      if (!service) {
        return res;
      }
      service.serviceEndpoint = oatProxyUrl;
      return new Response(JSON.stringify(data), {
        status: res.status,
        headers: res.headers
      });
    }
    return fetch(request, init);
  };
  async function createOAuthClient(oatProxyUrl) {
    return await import_oauth_client_browser.BrowserOAuthClient.load({
      clientId: `${oatProxyUrl}/oauth/downstream/client-metadata.json`,
      handleResolver: oatProxyUrl,
      responseMode: "query",
      // Lie to the oauth client and use our upstream server instead
      fetch: (input, init) => fetchWithLies(oatProxyUrl, input, init)
    });
  }

  // lib/app.tsx
  var import_api = __toESM(require_dist20());
  var import_jsx_runtime = __toESM(require_jsx_runtime());
  async function login(client, handle) {
    const res = await client.authorize(handle);
    document.location.href = res.toString();
  }
  function App() {
    const [client, setClient] = (0, import_react.useState)(null);
    const [agent, setAgent] = (0, import_react.useState)(null);
    const [profile, setProfile] = (0, import_react.useState)(null);
    (0, import_react.useEffect)(() => {
      createOAuthClient(`https://${window.location.host}`).then(setClient).catch(console.error);
    }, []);
    (0, import_react.useEffect)(() => {
      (async () => {
        const params = new URLSearchParams(window.location.search);
        const code2 = params.get("code");
        if (client && code2) {
          const res = await client.callback(params);
          setAgent(new import_api.Agent(res.session));
        }
      })();
    }, [client]);
    (0, import_react.useEffect)(() => {
      (async () => {
        if (agent) {
          const res = await agent.getProfile({ actor: "scumb.ag" });
          setProfile(res.data);
        }
      })();
    }, [agent]);
    if (profile) {
      return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h1", { children: "Profile" }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("img", { src: profile.avatar, alt: "Avatar", width: 100, height: 100 }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", { children: profile.displayName })
      ] });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: "App", children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("header", { className: "App-header", children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h1", { children: "OATProxy Example" }),
      !client ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", { children: "Loading..." }) : /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", { onClick: () => login(client, "scumb.ag"), children: "Login" })
    ] }) });
  }
  var app_default = App;
  var root = import_client.default.createRoot(document.querySelector("main"));
  root.render(
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react.default.StrictMode, { children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(App, {}) })
  );
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom-client.development.js:
  (**
   * @license React
   * react-dom-client.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
